'use strict';
angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "\u0414\u041f",
      "\u041f\u041f"
    ],
    "DAY": [
      "\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435",
      "\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a",
      "\u0432\u0442\u043e\u0440\u043d\u0438\u043a",
      "\u0441\u0440\u0435\u0434\u0430",
      "\u0447\u0435\u0442\u0432\u0435\u0440\u0433",
      "\u043f\u044f\u0442\u043d\u0438\u0446\u0430",
      "\u0441\u0443\u0431\u0431\u043e\u0442\u0430"
    ],
    "ERANAMES": [
      "\u0434\u043e \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430",
      "\u043e\u0442 \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430"
    ],
    "ERAS": [
      "\u0434\u043e \u043d. \u044d.",
      "\u043d. \u044d."
    ],
    "FIRSTDAYOFWEEK": 0,
    "MONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044f",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044f",
      "\u043c\u0430\u0440\u0442\u0430",
      "\u0430\u043f\u0440\u0435\u043b\u044f",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d\u044f",
      "\u0438\u044e\u043b\u044f",
      "\u0430\u0432\u0433\u0443\u0441\u0442\u0430",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044f",
      "\u043d\u043e\u044f\u0431\u0440\u044f",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044f"
    ],
    "SHORTDAY": [
      "\u0432\u0441",
      "\u043f\u043d",
      "\u0432\u0442",
      "\u0441\u0440",
      "\u0447\u0442",
      "\u043f\u0442",
      "\u0441\u0431"
    ],
    "SHORTMONTH": [
      "\u044f\u043d\u0432.",
      "\u0444\u0435\u0432\u0440.",
      "\u043c\u0430\u0440.",
      "\u0430\u043f\u0440.",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d.",
      "\u0438\u044e\u043b.",
      "\u0430\u0432\u0433.",
      "\u0441\u0435\u043d\u0442.",
      "\u043e\u043a\u0442.",
      "\u043d\u043e\u044f\u0431.",
      "\u0434\u0435\u043a."
    ],
    "STANDALONEMONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044c",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
      "\u043c\u0430\u0440\u0442",
      "\u0430\u043f\u0440\u0435\u043b\u044c",
      "\u043c\u0430\u0439",
      "\u0438\u044e\u043d\u044c",
      "\u0438\u044e\u043b\u044c",
      "\u0430\u0432\u0433\u0443\u0441\u0442",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
      "\u043d\u043e\u044f\u0431\u0440\u044c",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044c"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, d MMMM y '\u0433'.",
    "longDate": "d MMMM y '\u0433'.",
    "medium": "d MMM y '\u0433'. HH:mm:ss",
    "mediumDate": "d MMM y '\u0433'.",
    "mediumTime": "HH:mm:ss",
    "short": "dd.MM.yy HH:mm",
    "shortDate": "dd.MM.yy",
    "shortTime": "HH:mm"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "\u0433\u0440\u043d.",
    "DECIMAL_SEP": ",",
    "GROUP_SEP": "\u00a0",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "\u00a0\u00a4",
        "posPre": "",
        "posSuf": "\u00a0\u00a4"
      }
    ]
  },
  "id": "ru-ua",
  "localeID": "ru_UA",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (vf.v == 0 && i % 10 == 1 && i % 100 != 11) {    return PLURAL_CATEGORY.ONE;  }  if (vf.v == 0 && i % 10 >= 2 && i % 10 <= 4 && (i % 100 < 12 || i % 100 > 14)) {    return PLURAL_CATEGORY.FEW;  }  if (vf.v == 0 && i % 10 == 0 || vf.v == 0 && i % 10 >= 5 && i % 10 <= 9 || vf.v == 0 && i % 100 >= 11 && i % 100 <= 14) {    return PLURAL_CATEGORY.MANY;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

'use strict';
/*datetime*/
var minTimePart=15// минимальное  время услуги 15 минут
var timeRemindArrLang=[
    {
        'ru':'за 1 час',
        'uk':'',
        'en':'',
        'de':'',

        part:4
    },
    {
        'ru':'за 2 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:8
    },
    {
        'ru':'за 3 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:12
    },
    {
        'ru':'за 4 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:16
    },
    {
        'ru':'за 5 часов',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:20
    },
    {
        'ru':'за 6 часов',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:24
    },
    {
        'ru':'за 12 часов',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:48
    },
    {
        'ru':'за 1 день',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:96
    }
]
var timeDurationArrLang=[
    {
        'ru':'15 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:1
    },
    {
        'ru':'30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:2
    },
    {
        'ru':'45 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:3
    },
    {
        'ru':'1 час',
        'uk':'',
        'en':'',
        'de':'',

        part:4
    },
    {
        'ru':'1 час 15 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:5
    },
    {
        'ru':'1 час 30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:6
    },
    {
        'ru':'1 час 45 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:7
    },
    {
        'ru':'2 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:8
    },
    {
        'ru':'2 часа 15 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:9
    },
    {
        'ru':'2 часа 30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:10
    },
    {
        'ru':'3 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:12
    },
    {
        'ru':'3 часа 30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:14
    },
    {
        'ru':'4 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:16
    }
]
var weekDays=[
    {
        'ru':'Воскресенье',
        'uk':'Неділя',
        'en':'Sunday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Понедельник',
        'uk':'Понеділок',
        'en':'Monday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Вторник',
        'uk':'Вівторок',
        'en':'Tuesday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Среда',
        'uk':'Середа',
        'en':'Wednesday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Четверг',
        'uk':'Четвер',
        'en':'Thursday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Пятница',
        'uk':'П*ятниця',
        'en':'Friday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Суббота',
        'uk':'Субота',
        'en':'Saturday',
        'de':'gdsdfsdf'
    },
    ]
/**************************/
var reservedFirstParamsForAdmin=['manage','promo','seo','setting','content','translate','admin123','bookkeep']
var reservedFirstParams=['manage','promo','seo','setting','content','translate',
    'news','lookbook','stat','master','campaign','info','additional','workplace','cabinet','pricegoods','priceservices','home','search','cart','cabinet','bookkeep','likes']
var languagesOfPlatform=['ru','uk','en','de','es'];
var propertiesOfConfigData=[{'key':'unitOfMeasure','name':'единицы измерения'}];
var phoneCodes=[{code:'+38',country:'Ukraine'},{code:'+7',country:'Russia'},
    {code:'+501',country:'Moldova'},{code:'+44',country:'United Kingdom'},
    {code:'+93',country:'Afghanistan'},{code:'+355',country:'Albania'},{code:'+213',country:'Algeria'},
    {code:'+1-684',country:'American Samoa'},{code:'+376',country:'Andorra'},{code:'+244',country:'Angola'},
    {code:'+1-264',country:'Anguilla'},{code:'+672',country:'Antarctica'},{code:'+1-268',country:'Antigua and Barbuda'},
    {code:'+54',country:'Argentina'},{code:'+374',country:'Armenia'},{code:'+297',country:'Aruba'},
    {code:'+61',country:'Australia'},{code:'+43',country:'Austria'},{code:'+994',country:'Azerbaijan'},
    {code:'+1-242',country:'Bahamas'},{code:'+973',country:'Bahrain'},{code:'+880',country:'Bangladesh'},
    {code:'+1-246',country:'Barbados'},{code:'+375',country:'Belarus'},{code:'+32',country:'Belgium'},
    {code:'+1-246',country:'Belize'},{code:'+229',country:'Benin'},{code:'+1-441',country:'Bermuda'},
    {code:'+975',country:'Bhutan'},{code:'+591',country:'Bolivia'},{code:'+246',country:'British Indian Ocean Territory'},
    {code:'+267',country:'Botswana'},{code:'+55',country:'Brazil'},{code:'+387',country:'Bosnia and Herzegovina'},
    {code:'+1-284',country:'British Virgin Islands'},{code:'+673',country:'Brunei'},{code:'+359',country:'Bulgaria'},
    {code:'+226',country:'Burkina Faso'},{code:'+257',country:'Burundi'},{code:'+855',country:'Cambodia'},
    {code:'+237',country:'Cameroon'},{code:'+1',country:'Canada'},{code:'+238',country:'Cape Verde'},
    {code:'+1-345',country:'Cayman Islands'},{code:'+236',country:'Central African Republic'},{code:'+235',country:'Chad'},
    {code:'+56',country:'Chile'},{code:'+86',country:'China'},{code:'+57',country:'Colombia'},
    {code:'+269',country:'Comoros'},{code:'+506',country:'Costa Rica'},{code:'+385',country:'Croatia'},
    {code:'+53',country:'Cuba'},{code:'+599',country:'Curacao'},{code:'+357',country:'Cyprus'},
    {code:'+420',country:'Czech Republic'},{code:'+45',country:'Denmark'},{code:'+1-767',country:'Dominica'},
    {code:'+593',country:'Ecuador'},{code:'+995',country:'Georgia'},{code:'+49',country:'Germany'},
    {code:'+30',country:'Greece'},{code:'+852',country:'Hong Kong'},{code:'+36',country:'Hungary'},
    {code:'+354',country:'Iceland'},{code:'+852',country:'Hong Kong'},{code:'+36',country:'Hungary'},
    {code:'+30',country:'Greece'},{code:'+91',country:'India'},{code:'+62',country:'Indonesia'},
    {code:'+98',country:'Iran'},{code:'+964',country:'Iraq'},{code:'+353',country:'Ireland'},
    {code:'+972',country:'Israel'},{code:'+39',country:'Italy'},{code:'+81',country:'Japan'},
    {code:'+962',country:'Jordan'},{code:'+7',country:'Kazakhstan'},{code:'+383',country:'Kosovo'},
    {code:'+965',country:'Kuwait'},{code:'+996',country:'Kyrgyzstan'},{code:'+856',country:'Laos'},
    {code:'+371',country:'Latvia'},{code:'+961',country:'Lebanon'},{code:'+218',country:'Libya'},
    {code:'+423',country:'Liechtenstein'},{code:'+370',country:'Lithuania'},{code:'+352',country:'Luxembourg'},
    {code:'+853',country:'Macau'},{code:'+389',country:'Macedonia'},{code:'+261',country:'Madagascar'},
    {code:'+60',country:'Malaysia'},{code:'+356',country:'Malta'},{code:'+222',country:'Mauritania'},
    {code:'+230',country:'Mauritius'},{code:'+52',country:'Mexico'},{code:'+373',country:'Moldova'},
    {code:'+377',country:'Monaco'},{code:'+976',country:'Mongolia'},{code:'+382',country:'Montenegro'},
    {code:'+212',country:'Morocco'},{code:'+977',country:'Nepal'},{code:'+31',country:'Netherlands'},
    {code:'+507',country:'Panama'},{code:'+595',country:'Paraguay'},{code:'+382',country:'Montenegro'},
    {code:'+377',country:'Monaco'},{code:'+51',country:'Peru'},{code:'+63',country:'Philippines'},
    {code:'+48',country:'Poland'},{code:'+351',country:'Portugal'},{code:'+974',country:'Qatar'},
    {code:'+40',country:'Romania'},{code:'+378',country:'San Marino'},{code:'+966',country:'Saudi Arabia'},
    {code:'+381',country:'Serbia'},{code:'+65',country:'Singapore'},{code:'+421',country:'Slovakia'},
    {code:'+386',country:'Slovenia'},{code:'+27',country:'South Africa'},{code:'+82',country:'South Korea'},
    {code:'+34',country:'Spain'},{code:'+94',country:'Sri Lanka'},{code:'+46',country:'Sweden'},
    {code:'+41',country:'Switzerland'},{code:'+886',country:'Taiwan'},{code:'+992',country:'Tajikistan'},
    {code:'+66',country:'Thailand'},{code:'+216',country:'Tunisia'},{code:'+90',country:'Turkey'},
    {code:'+993',country:'Turkmenistan'},{code:'+971',country:'United Arab Emirates'},{code:'+44',country:'United Kingdom'},
    {code:'+1',country:'United States'},{code:'+598',country:'Uruguay'},{code:'+998',country:'Uzbekistan'},
    {code:'+379',country:'Vatican'},{code:'+58',country:'Venezuela'},{code:'+84',country:'Vietnam'},{code:'+967',country:'Yemen'}
    ]

var modelsName={
    stat:{
        'ru':'страницы','uk':'сторінки','en':'pages','de':'pages'
    },
    stuff:{
        'ru':'товары и услуги','uk':'товари та послуги','en':'goods and services','de':'goods and services'
    },
    news:{
        'ru':'новости','uk':'новини','en':'news','de':'news'
    },
    info:{
        'ru':'информация','uk':'інформація','en':'information','de':'information'
    },
    workplace:{
        'ru':'локации','uk':'локации','en':'locations','de':'locations'
    }
}



var lengthStyleBlock=61;
var arrEmptyForProperties=[];
for(var i=0;i<lengthStyleBlock;i++){arrEmptyForProperties.push('')}

/*var listOfBlocksForMainPage={
    banner:'баннер',
    brands:'бренды',
    brandTags:'коллекции',
    call:'обратный звонок',
    campaign:'акции',
    categories:'категории',
    feedback:'feedback',
    filterTags:'группы (признаки)',
    info:'информационный раздел',
    map:'карта',
    mission:'миссия',
    news:'новости',
    slider:'слайдер',
    stuffs:'товары',
    subscription:'подписка',
    subscriptionAdd:'подписка с доп.полями',
    text:'текстовый блок',
    textAdd:'доп.текстовый блок',
    video:'видео',

}*/

var listOfBlocksForMainPage={
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    banner:'баннер',
    bannerOne:'баннер в два потока',
    mission:'миссия',
    text:'текстовый блок',
    textTwo:'текстовый блок 2 потока',
    campaign:'акции',
    filterTags:'тематические группы (признаки из хар-тик)',
    filters:'характеристики',
    brandTags:'коллекции',
    brands:'бренды',
    categories:'категории',
    stuffs:'товары',
    news:'новости',
    info:'информационный раздел',
    pricegoods:'прайс товаров',
    priceservices:'прайс услуг',
    map:'карта',
    review:'отзывы гугл',
    subscription:'подписка',
    subscriptionAdd:'подписка с доп полями',
    call:'заказ звонка',
    feedback:'форма обратной связи',
    calendar:'гугл календарь',
    scheduleplace:'расписание для рабочего места',
}
var animationTypes =[
    {type:null,name:'отсутстует'},
    {type:'animated1',name:'fadeInLeftBig'},
    {type:'animated2',name:'fadeInLeft'},
    {type:'animated3',name:'fadeInLeftMiddle'},
    {type:'animated4',name:'fadeInRight'},
    {type:'animated5',name:'fadeInRightMiddle'},
    {type:'animated6',name:'fadeInRightBig'},
    {type:'animated7',name:'bounce'},
    {type:'animated8',name:'fadeInDown'},
    {type:'animated9',name:'fadeOut'},
    {type:'animated10',name:'bounceIn'},
    {type:'animated11',name:'при наведении контур1'},
    {type:'animated12',name:'при наведении контур2'},
    {type:'animated13',name:'SweepToTop'},
    {type:'animated14',name:'SweepToBottom'},
    {type:'animated15',name:'LineCenterBottom'},
    {type:'animated16',name:'scale-block'},
    {type:'animated17',name:'SweepToRight'},
    {type:'animated18',name:'SweepToLeft'},
    {type:'animated19',name:'underlineLRL'},
    {type:'animated20',name:'underline RLR'},
    {type:'animated21',name:'line-through LRL'},
    {type:'animated22',name:'underline RLR 5px'},
    {type:'animated23',name:'test'},
    {type:'animated24',name:'test'},
    {type:'animated25',name:'test'},
    {type:'animated26',name:'test'},
    {type:'animated27',name:'test'},
    {type:'animated28',name:'test'},
    {type:'animated29',name:'test'},
    {type:'animated30',name:'shake'},
    {type:'animated31',name:'fadeInUpBig'}]
var listOfListName=[
    'news',
    'master',
    'stat',
    'info',
    'campaign',
    'lookbook',
    'additional',
    'workplace'
]
var listOfStuffDetailKind=[
    'good',
    'service',
    'info',
    'media'
]
var listOfBlocksForAll={
    banner:'баннер',
    bannerOne:'баннер в два потока',
    brands:'бренды',
    brandTags:'коллекции',
    button:'кнопка',
    calendar:'гугл календарь',
    call:'заказ звонка',
    campaign:'акции',
    categories:'категории',
    date:'дата',
    feedback:'форма обратной связи',
    filterTags:'тематические группы (признаки из хар-тик)',
    filters:'характеристики',
    info:'информационный раздел',
    map:'карта',
    name:'название',
    news:'новости',
    position:'должность',
    pricegoods:'прайс товаров',
    priceservices:'прайс услуг',
    review:'отзывы гугл',
    schedule:'расписание для специалиста',
    scheduleplace:'расписание для рабочего места',
    slider:'слайдер',
    sn:'кнопки социальных сетей',
    stuffs:'товары',
    groupStuffs:'группы товаров',
    subscription:'подписка',
    subscriptionAdd:'подписка с доп полями',
    text:'текстовый блок',
    textTwo:'текстовый блок 2 потока',
    video:'видео',
    videoLink:'внешнее видео',
    fbpage:'страница фейсбука',
    comment:'комментарии дискус',
}

var listOfBlocksForStaticPage={
    name:'название',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    videoLink:'внешнее видео',
    video:'видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    masters:'сотрудники',
    feedback:'обратная связь',
    feedback1:'обратная связь + фото',
    feedback2:'фото + обратная связь',
    stuffs:'товары',
    filterTags:'группы(признаки из хар-тик)',
    brandTags:'коллекции',
    brands:'бренды',
    categories:'категории',
    campaign:'акции',
    call:'заказ звонка',
    button:'кнопка',

}
var listOfBlocksForNewsDetailPage={
    name:'название',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    videoLink:'внешнее видео',
    video:'видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    stuffs:'товары',
    campaign:'акции',
    filterTags:'группы(признаки из хар-тик)',
    brandTags:'коллекции',
    brands:'бренды',
    categories:'категории',
    date:'дата',
    sn:'социальные сети'
}

var listOfBlocksForMasterPage={
    name:'имя',
    position:'должность',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    stuffs:'товары',
    schedule:'расписание',
}
var listOfBlocksForWorkplacePage={
    name:'имя',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    stuffs:'товары',
    schedule:'расписание',
}
var listOfBlocksForAddPage={
    name:'имя',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    news:'новости',
}


var listOfBlocksForHeader={
    logo:'логотип',
    name:'название',
    cart:'корзина',
    enter:'вход',
    info:'инфо',
    currency:'валюта',
    news:'новости',
    lookbook:'галлерея',
    search:'поиск',
    catalog:'каталог',
    new:'новинки',
    additional:'дополнительный список',
    schedule:'расписание',
    sale:'распродажа',
    campaign:'акции',
    master:'мастера',
    brands:'бренды',
    collection:'коллекции',
    phone:'телефон',
    sn:'социальные сети',
    lang:'языки',
    humburger:'humburger',
    pricegoods:'pricegoods',
    priceservices:'priceservices',
    text:'текст',
    icon:'иконка',
    likes:'избранное'
}
var listBlocksForFooter={
    text:'текст',
    textOne:'текст 1',
    sn:'соц.сети',
    subscription:'подписка',
    feedback:'обратная связь',
    stat:'статические страницы',
    catalog:'каталог',
    infoline:'ииформационная строка',
    copyright:'правообладание',
    news:'новости',
    campaign:'акции',
    lang:'языки'
}


var listOfBlocksForStats={
    name:'название',
    banner:'баннер',
    gallery:'галлерея',
    desc:'описание1',
    desc1:'описание2',
    desc2:'описание3',
    map:'карта',
    video:'видео',
    masters:'мастера',
}
var listOfBlocksForStuffDetail={
    name:'название',
    gallery:'галлерея',
    desc:'описание',
    comments:'комментарии',
    lastViewed:'последние просмотренные',
    sort:'разновидности',
    group:'группа товаров',
    addInfo:'доп.информация',
    addToCart:'в корзину(действие)',
    price:'цены',
    qty:'количество',
    sn:'соц.сети',
    feedback:'обратная связь',
    params:'параметры',
    tags:'характеристики',
    blocks:'медиа блоки',
    back:'кнопка назад в список',
    master:'блок специалистов',
    stuffs:'блок товаров',
    video:'первое видео',
    videoOne:'второе видео',
    media:'внешнее видео',
    mediaOne:'второе внешнее видео'
}

var listOfBlocksForStuffDetailBlocks={
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    calendar:'календарь',
    date:'дата',
    feedback:'обратная связь',
    feedbackOne:'текст + обратная связь',
    feedbackTwo:'обратная связь + текст',
    imgs:'фото',
    map:'карта',
    mapOne:'карта + текстовый блок',
    mapTwo:'текстовый блок + карта',
    masters:'блок специалистов',
    name:'имя',
    position:'должность',
    slider:'слайдер',
    sn:'соцсети',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    video:'видео',
    videoOne:'видео + текстовый блок',
    videoTwo:'текстовый блок + видео',
    videoLink:'внешнее видео',
    file:'file'
}

var listOfBlocksForStuffList={
    list:'список',
    filters:'фильтры',
    categories:'категории',
    paginate:'пагинация',
    search:'поиск',
    call:'звонок',
    subscription:'подписка',
    desc:'описание',
    seoDesc:'seo описание',
    blocks:'медиа блоки',
}



var tableOfColorsForButton={0:'black-white',1:'pink-white',2:'turquoise-white',3:'yellow-white',4:'bordo-white',5:'braun-white',6:'powder-white',7:'pinklight-white',8:'white-black',9:'black-white'}
var tableOfButtonsFile={0:'standart',1:'border-radius',2:'no border',3:'inverse',4:'border',5:'transparent'}

var listOfIcons=['addcart','back','cart','cartin','cartplus','cancelmenu','cancel','cancelzoom','call','caret','categories','change','dialog','down','dot','delete','downslide','gif','envelope','envelopewhite','edit','eur','fb','fbwhite','filters','header','google','googlewhite','humbmobile','chat','inst','instwhite','left','likes','lock','lockwhite','menu','minus','messageme','messagehe','next','nextgallery','ok','okwhite','pin','pinwhite','plus','prev','prevgallery','right','rub','search','send','setting','spinner','subscription','time','tw','twwhite','uah','up','upslide','user','userhe','userme','usd','videoplay','vk','vkwhite','see','enter','zoom','yt','ytwhite']

var notificationsTypeLang={
    //клиенту
    invoice:{
        'ru':'счет',
        'ua':'рахунок',
        'en':'invoice',
        'de':'',
    },
    dateTime:{
        'ru':'запись онлайн',
        'ua':'запис онлайн',
        'en':'booking',
        'de':'',
    },
    accepted:{
        'ru':'заказ принят',
        'ua':'замовлення прийнято',
        'en':'accepted',
        'de':'',
    },
    shipOrder:{
        'ru':'данные о доставке',
        'ua':'дані про доставку',
        'en':'shipOrder',
        'de':'',
    },
    // продавцу
    order:{
        'ru':'поступил заказ',
        'ua':'поступило замовлення',
        'en':'order',
        'de':'',
    },
    pay:{
        'ru':'оплата',
        'ua':'оплата',
        'en':'pay',
        'de':'',
    },
    feedBack:{
        'ru':'обратная связь',
        'ua':'зворотній зв*язок',
        'en':'feedback',
        'de':'',
    },
    comment:{
        'ru':'комментарий',
        'ua':'коментар',
        'en':'comments',
        'de':'',
    },
    call:{
        'ru':'заказ звонка',
        'ua':'замовлення дзвінка',
        'en':'call',
        'de':'',
    },
    subscription:{
        'ru':'подписка',
        'ua':'підписка',
        'en':'subscription',
        'de':'',
    }



}

var updateExternalCatalogList= {
    everyMon10:{
        'ru':'каждый понедельник в 10.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyMon12:{
        'ru':'каждый понедельник в 12.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyFri10:{
        'ru':'каждую пятницу в 10.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyFri12:{
        'ru':'каждую пятницу в 12.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyDay10:{
        'ru':'каждый день в 10.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyDay12:{
        'ru':'каждый день в 12.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyDay101418:{
        'ru':'каждый день в 10.00,14.00,18.00',
        'ua':'',
        'en':'',
        'de':'',
    }
}

var ratioClassStuffDetail={
    0:{left:'left-block col-lg-6 col-md-6 col-sm-12 col-xs-12',right:'right-block col-lg-6 col-md-6 col-sm-12 col-xs-12'},
    1:{left:'left-block vertical-left3 col-lg-5 col-md-5 col-sm-12 col-xs-12',right:'right-block horizontal-right2 col-lg-7 col-md-7 col-sm-12 col-xs-12'},
    2:{left:'left-block vertical-left2 col-lg-4 col-md-4 col-sm-12 col-xs-12',right:'right-block horizontal-right1 col-lg-8 col-md-8 col-sm-12 col-xs-12'},
    3:{left:'left-block horizontal-left1 col-lg-7 col-md-7 col-sm-12 col-xs-12',right:'right-block vertical-right1  col-lg-5 col-md-5 col-sm-12 col-xs-12'},
    4:{left:'left-block horizontal-left2 col-lg-8 col-md-8 col-sm-12 col-xs-12',right:'right-block vertical-right2 col-lg-4 col-md-4 col-sm-12 col-xs-12'},
    5:{left:'left-block col-lg-12 col-md-12 col-sm-12 col-xs-12',right:'right-block col-lg-12 col-md-12 col-sm-12 col-xs-12'},
}
var elementsList=['a','p','div','h1','h2','h3','h4','ol','ul','li','span','img','hr','iframe','table','tr','th','td']

var getNamePropertyCSS = function(i,item,k) {
    if(item){
        switch (i){
            case 0: return ['color',item];
            case 1: return  ['background-color',item];
            case 2: return  ['margin-top',item];
            case 3: return  ['margin-right',item];
            case 4: return  ['margin-bottom',item];
            case 5: return  ['margin-left',item];
            case 6: return  ['padding-top',item];
            case 7: return  ['padding-right',item];
            case 8: return  ['padding-bottom',item];
            case 9: return  ['padding-left',item];
            case 10: return  ['display',item];
            case 11: return  ['font-family',item];
            case 12: return  ['font-size',item];
            case 13: return  ['font-weight',item];
            case 14: return  ['letter-spacing',item];
            case 15: return  ['text-transform',item];
            case 16: return  ['width',item];
            case 17: return  ['height',item];
            case 18: return  ['float',item];
            case 19: return  ['top',item];
            case 20: return  ['left',item];
            case 21: return  ['right',item];
            case 22: return  ['bottom',item];
            case 23: return  ['text-decoration',item];
            case 24: return  ['text-align',item];
            case 25: return  ['position',item];
            case 26: return  ['border',item];
            case 27: return  ['border-left',item];
            case 28: return  ['border-right',item];
            case 29: return  ['border-top',item];
            case 30: return  ['border-bottom',item];
            case 31: return  ['border-radius',item];
            case 32: return  ['z-index',item];
            case 33: return  ['opacity',item];
            case 34: return  ['border-width',item];
            case 35: return  ['list-style',item];
            case 36: return  ['vertical-align',item];
            case 37: return  ['background-size',item];
            case 38: return  ['background-position',item];
            case 39: return  ['text-shadow',item];
            case 40: return  ['cursor',item];
            case 41: return  ['transition',item];
            case 42: return  ['box-shadow',item];
            case 43: return  ['transform',item];
            case 44: return  ['background',item];
            case 45: return  ['clear',item];
            case 46: return  ['max-width',item];
            case 47: return  ['min-width',item];
            case 48: return  ['max-height',item];
            case 49: return  ['min-height',item];
            case 50: return  ['line-height',item];
            case 51: return  ['object-fit',item];
            case 52: return  ['object-position',item];
            case 53: return  ['overflow',item];
            case 54: return  ['background-attachment',item];
            case 55: return  ['background-repeat',item];
            case 56: return  ['padding',item];
            case 57: return  ['margin',item];
            case 58: return  ['word-break',item];
            case 59: return  ['word-wrap',item];
            case 60: return  ['word-spacing',item];
        }
    }else{
        switch (i){
            case 0: return 'color';
            case 1: return  'background-color';
            case 2: return 'margin-top';
            case 3: return  'margin-right';
            case 4: return  'margin-bottom';
            case 5: return  'margin-left';
            case 6: return 'padding-top';
            case 7: return  'padding-right';
            case 8: return  'padding-bottom';
            case 9: return  'padding-left';
            case 10: return  'display';
            case 11: return  'font-family';
            case 12: return  'font-size';
            case 13: return  'font-weight';
            case 14: return  'letter-spacing';
            case 15: return  'text-transform';
            case 16: return  'width';
            case 17: return  'height';
            case 18: return  'float';
            case 19: return  'top';
            case 20: return  'left';
            case 21: return  'right';
            case 22: return  'bottom';
            case 23: return  'text-decoration';
            case 24: return  'text-align';
            case 25: return  'position';
            case 26: return  'border';
            case 27: return  'border-left';
            case 28: return  'border-right';
            case 29: return  'border-top';
            case 30: return  'border-bottom';
            case 31: return  'border-radius';
            case 32: return  'z-index';
            case 33: return  'opacity';
            case 34: return  'border-width';
            case 35: return  'list-style';
            case 36: return  'vertical-align';
            case 37: return  'background-size';
            case 38: return  'background-position';
            case 39: return  'text-shadow';
            case 40: return  'cursor';
            case 41: return  'transition';
            case 42: return  'box-shadow';
            case 43: return  'transform';
            case 44: return  'background';
            case 45: return  'clear';
            case 46: return  'max-width';
            case 47: return  'min-width';
            case 48: return  'max-height';
            case 49: return  'min-height';
            case 50: return  'line-height';
            case 51: return  'object-fit';
            case 52: return  'object-position';
            case 53: return  'overflow';
            case 54: return  'background-attachment';
            case 55: return  'background-repeat';
            case 56: return  'padding';
            case 57: return  'margin';
            case 58: return  'word-break';
            case 59: return  'word-wrap';
            case 60: return  'word-spacing';
        }
    }

}


function compileStyleForBlock(block){
    var elements=[];
    var el='';
    if(block.blockStyle){
        for(var  i=0;i<lengthStyleBlock;i++){
            var n;
            if(block.blockStyle[i]){
                n = getNamePropertyCSS(i,block.blockStyle[i]);
                if(n){
                    el+="\n"+n[0]+':'+n[1]+';';
                }
            }
        }
    }
    if(el){
        if(el){
            el ='{'+el+'}'+"\n";
        }
        elements.push(el)
    }
    if(block.elements && typeof block.elements=='object'){
        for(var key in block.elements){
            el='';
            for(var i=0;i<lengthStyleBlock;i++){
                if(key=='a' && i==1){continue}
                var  n;
                if(block.elements[key][i]){
                    n = getNamePropertyCSS(i,block.elements[key][i]);
                    if(n){
                        el+="\n"+n[0]+':'+n[1]+';';
                    }
                }
            }
            if(el){
                el =key.replace("@",".")+'{'+el+'}'+"\n";
            }
            if(key=='a' && block.elements.a[1]){
                el+='a:hover {color:'+block.elements.a[1]+'}';
            }
            if(el){
                elements.push(el)
            }
        }
    }
    return elements;
}

if(typeof window === 'undefined') {
    exports.listOfBlocksForMainPage=listOfBlocksForMainPage;
    exports.listOfBlocksForHeader=listOfBlocksForHeader;
    exports.listBlocksForFooter=listBlocksForFooter;
    exports.listOfBlocksForStats=listOfBlocksForStats;
    exports.listOfBlocksForStuffDetail=listOfBlocksForStuffDetail;
    exports.listOfBlocksForStuffList=listOfBlocksForStuffList;
    exports.lengthStyleBlock=lengthStyleBlock;
    exports.arrEmptyForProperties=arrEmptyForProperties;
    exports.listOfBlocksForNewsDetailPage=listOfBlocksForNewsDetailPage;
    exports.listOfBlocksForStaticPage=listOfBlocksForStaticPage;
    exports.modelsName=modelsName;
    exports.getNamePropertyCSS=getNamePropertyCSS;
    exports.listOfListName=listOfListName;
    exports.ratioClassStuffDetail=ratioClassStuffDetail;
    exports.elementsList=elementsList;
    exports.reservedFirstParams=reservedFirstParams;
    exports.reservedFirstParamsForAdmin=reservedFirstParamsForAdmin;
    exports.minTimePart=minTimePart;
    exports.listOfBlocksForStuffDetailBlocks=listOfBlocksForStuffDetailBlocks;
}



'use strict';
function validateEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
    //return true;
}
function md5www ( str ) {	// Calculate the md5 hash of a string
    //
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // + namespaced by: Michael White (http://crestidg.com)

    var RotateLeft = function(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    };

    var AddUnsigned = function(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    };

    var F = function(x,y,z) { return (x & y) | ((~x) & z); };
    var G = function(x,y,z) { return (x & z) | (y & (~z)); };
    var H = function(x,y,z) { return (x ^ y ^ z); };
    var I = function(x,y,z) { return (y ^ (x | (~z))); };

    var FF = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var GG = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var HH = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var II = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var ConvertToWordArray = function(str) {
        var lWordCount;
        var lMessageLength = str.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };

    var WordToHex = function(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };

    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;

    //str = this.utf8_encode(str);

    str = unescape( encodeURIComponent( str ) );
    //console.log(str)
    x = ConvertToWordArray(str);
    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }

    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

    return temp.toLowerCase();
}

(function(){
    //https://gist.github.com/sgmurphy/3095196
    function url_slug(s, opt) {
        s = String(s);
        opt = Object(opt);

        var defaults = {
            'delimiter': '-',
            'limit': undefined,
            'lowercase': true,
            'replacements': {},
            'transliterate': (typeof(XRegExp) === 'undefined') ? true : false
        };

        // Merge options
        for (var k in defaults) {
            if (!opt.hasOwnProperty(k)) {
                opt[k] = defaults[k];
            }
        }

        var char_map = {
            // Latin
            'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE', 'Ç': 'C',
            'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I', 'Î': 'I', 'Ï': 'I',
            'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O', 'Õ': 'O', 'Ö': 'O', 'Ő': 'O',
            'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U', 'Ü': 'U', 'Ű': 'U', 'Ý': 'Y', 'Þ': 'TH',
            'ß': 'ss',
            'à': 'a', 'á': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c',
            'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i',
            'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o', 'ő': 'o',
            'ø': 'o', 'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u', 'ű': 'u', 'ý': 'y', 'þ': 'th',
            'ÿ': 'y',

            // Latin symbols
            '©': '(c)',

            // Greek
            'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z', 'Η': 'H', 'Θ': '8',
            'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M', 'Ν': 'N', 'Ξ': '3', 'Ο': 'O', 'Π': 'P',
            'Ρ': 'R', 'Σ': 'S', 'Τ': 'T', 'Υ': 'Y', 'Φ': 'F', 'Χ': 'X', 'Ψ': 'PS', 'Ω': 'W',
            'Ά': 'A', 'Έ': 'E', 'Ί': 'I', 'Ό': 'O', 'Ύ': 'Y', 'Ή': 'H', 'Ώ': 'W', 'Ϊ': 'I',
            'Ϋ': 'Y',
            'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z', 'η': 'h', 'θ': '8',
            'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm', 'ν': 'n', 'ξ': '3', 'ο': 'o', 'π': 'p',
            'ρ': 'r', 'σ': 's', 'τ': 't', 'υ': 'y', 'φ': 'f', 'χ': 'x', 'ψ': 'ps', 'ω': 'w',
            'ά': 'a', 'έ': 'e', 'ί': 'i', 'ό': 'o', 'ύ': 'y', 'ή': 'h', 'ώ': 'w', 'ς': 's',
            'ϊ': 'i', 'ΰ': 'y', 'ϋ': 'y', 'ΐ': 'i',

            // Turkish
            /*'Ş': 'S', 'İ': 'I', 'Ç': 'C', 'Ü': 'U', 'Ö': 'O', 'Ğ': 'G',
            'ş': 's', 'ı': 'i', 'ç': 'c', 'ü': 'u', 'ö': 'o', 'ğ': 'g',*/

            // Russian
            'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo', 'Ж': 'Zh',
            'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M', 'Н': 'N', 'О': 'O',
            'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U', 'Ф': 'F', 'Х': 'H', 'Ц': 'C',
            'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sh', 'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu',
            'Я': 'Ya',
            'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo', 'ж': 'zh',
            'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o',
            'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c',
            'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu',
            'я': 'ya',

            // Ukrainian
            'Є': 'Ye', 'І': 'I', 'Ї': 'Yi', 'Ґ': 'G',
            'є': 'ye', 'і': 'i', 'ї': 'yi', 'ґ': 'g',

            // Czech
            'Č': 'C', 'Ď': 'D', 'Ě': 'E', 'Ň': 'N', 'Ř': 'R', 'Š': 'S', 'Ť': 'T', 'Ů': 'U',
            'Ž': 'Z',
            'č': 'c', 'ď': 'd', 'ě': 'e', 'ň': 'n', 'ř': 'r', 'š': 's', 'ť': 't', 'ů': 'u',
            'ž': 'z',

            // Polish
            /*'Ą': 'A', 'Ć': 'C', 'Ę': 'e', 'Ł': 'L', 'Ń': 'N', 'Ó': 'o', 'Ś': 'S', 'Ź': 'Z',
            'Ż': 'Z',
            'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's', 'ź': 'z',
            'ż': 'z',*/

            // Latvian
            /*'Ā': 'A', 'Č': 'C', 'Ē': 'E', 'Ģ': 'G', 'Ī': 'i', 'Ķ': 'k', 'Ļ': 'L', 'Ņ': 'N',
            'Š': 'S', 'Ū': 'u', 'Ž': 'Z',
            'ā': 'a', 'č': 'c', 'ē': 'e', 'ģ': 'g', 'ī': 'i', 'ķ': 'k', 'ļ': 'l', 'ņ': 'n',
            'š': 's', 'ū': 'u', 'ž': 'z'*/
        };

        // Make custom replacements
        for (var k in opt.replacements) {
            s = s.replace(RegExp(k, 'g'), opt.replacements[k]);
        }

        // Transliterate characters to ASCII
        if (opt.transliterate) {
            for (var k in char_map) {
                s = s.replace(RegExp(k, 'g'), char_map[k]);
            }
        }

        // Replace non-alphanumeric characters with our delimiter
        var alnum = (typeof(XRegExp) === 'undefined') ? RegExp('[^a-z0-9]+', 'ig') : XRegExp('[^\\p{L}\\p{N}]+', 'ig');
        s = s.replace(alnum, opt.delimiter);

        // Remove duplicate delimiters
        s = s.replace(RegExp('[' + opt.delimiter + ']{2,}', 'g'), opt.delimiter);

        // Truncate slug to max. characters
        s = s.substring(0, opt.limit);

        // Remove delimiter from ends
        s = s.replace(RegExp('(^' + opt.delimiter + '|' + opt.delimiter + '$)', 'g'), '');

        return opt.lowercase ? s.toLowerCase() : s;
    }
    //Object.prototype.addProp=function(o){}
/**
 * Корректировка округления десятичных дробей.
 *
 * @param {String}  type  Тип корректировки.
 * @param {Number}  value Число.
 * @param {Integer} exp   Показатель степени (десятичный логарифм основания корректировки).
 * @returns {Number} Скорректированное значение.
 */
function decimalAdjust(type, value, exp) {
    // Если степень не определена, либо равна нулю...
    if (typeof exp === 'undefined' || +exp === 0) {
        return Math[type](value);
    }
    value = +value;
    exp = +exp;
    // Если значение не является числом, либо степень не является целым числом...
    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
        return NaN;
    }
    // Сдвиг разрядов
    value = value.toString().split('e');
    value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
    // Обратный сдвиг
    value = value.toString().split('e');
    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
}

// Десятичное округление к ближайшему
if (!Math.round10) {
    Math.round10 = function(value, exp) {
        return decimalAdjust('round', value, exp);
    };
}
// Десятичное округление вниз
if (!Math.floor10) {
    Math.floor10 = function(value, exp) {
        return decimalAdjust('floor', value, exp);
    };
}
// Десятичное округление вверх
if (!Math.ceil10) {
    Math.ceil10 = function(value, exp) {
        return decimalAdjust('ceil', value, exp);
    };
}
    /*Array.prototype.forEachAsync = async function(cb){
        for(let x of this){
            await cb(x);
        }
    }*/
Array.prototype.getObjectFromArray=function(prop,value,a,filter){
    //возвращается елемент. если  есть 4 -ый параметр то возвращается массив
    // если есть пятый параметр то в массив пишется тот елемент исходного массива у котороко совйство filter true.
    var ar=[];
    //console.log(this.length);
    for (var i=0,l=this.length;i<l;i++){
        if(this[i][prop] && this[i][prop].toString && typeof this[i][prop].toString=='function'){
            this[i][prop]=this[i][prop].toString();
        }
        if (this[i][prop] && this[i][prop]==value){
            if (a){
                if (filter){
                    if (this[i][filter]){
                        ar.push(this[i])
                    }
                }else {
                    ar.push(this[i])
                }

            } else {
                return this[i];
                break;
            }

        }
    }

    if (a) {return ar;} else  {return undefined};
}
Array.prototype.getOFA=function(prop,value,a,filter){
        //возвращается елемент. если  есть 4 -ый параметр то возвращается массив
        // если есть пятый параметр то в массив пишется тот елемент исходного массива у котороко совйство filter true.
    prop=prop.split('.');
    if(prop.length==1){prop=prop[0]}
    var ar=[];
        //console.log(this.length);
        for (var i=0,l=this.length;i<l;i++){
            if(!this[i]){continue}
            if(this[i][prop] && this[i][prop].toString && typeof this[i][prop].toString=='function'){
                this[i][prop]=this[i][prop].toString();
            }
            if ((this[i][prop] && this[i][prop]==value)||(prop.length &&
                this[i][prop[0]] && this[i][prop[0]][prop[1]] && this[i][prop[0]][prop[1]]==value)){
                if (a){
                    if (filter){
                        if (this[i][filter]){
                            ar.push(this[i])
                        }
                    }else {
                        ar.push(this[i])
                    }

                } else {
                    return this[i];
                    break;
                }

            }
        }

        if (a) {return ar;} else  {return undefined};
    }

Array.prototype.removeOFA = function(prop, value){
        var i = this.length;
        while(i--){
            if( this[i]
                && this[i].hasOwnProperty(prop)
                && (arguments.length > 1 && this[i][prop] === value ) ){

                this.splice(i,1);

            }
        }
        return this;
    }


    Array.prototype.getArrayObjects = function(prop,value){
    //console.log(prop,value)
    var arr=[];
    for (var i=0,l=this.length;i<l;i++){
        if (this[i][prop] && this[i][prop].length){
            var _arr = this[i][prop].map(function(item){return (typeof item=='object')?item._id:item})
            if (_arr.indexOf(value)>-1){
                arr.push(this[i]);
            }
        }
    }
    return arr;
}
Array.prototype.diff = function(a) {
   return this.filter(function(i) {return a.indexOf(i) < 0;});
};
    Array.prototype.divideArrayWithChunk=function(chunk,fillArrayToEquil){
        if(!chunk){return [[],[],[],[],[]]};
        chunk=Number(chunk);
        if(chunk<2){return this;}
        var data=this;
        var arr=[];
        for(var j=0;j<chunk;j++){
            arr[j]=[];
            for (var i=j,l=data.length; i<l; i+=chunk) {
                arr[j].push(data[i]);
            }
        }
        if(fillArrayToEquil){
            for(var i=1,l=arr.length;i<l;i++){
                if(arr[i].length<arr[0].length){
                    arr[i].push({})
                }
            }
        }
        return arr;
    }
    Array.prototype.extend = function (other_array) {
        /* you should include a test to check whether other_array really is an array */
        other_array.forEach(function(v) {this.push(v)}, this);
    }


String.prototype.clearTag = function(num){
    var regex=/<\/?[^>]+(>|$)/g;
    if (num){
        var ss =  (this.replace(regex, '').substring(0,num))
    } else {
        //console.log('?????')
        var ss = this.replace(regex, '')
    }
    //console.log(ss)
    return ss.replace(/\./g, ". ")

}

    String.prototype.myTrim = function(){
        return this.trim().split("\n").filter(function (str) {
            return str;
        }).map(function (str) {
            var s =str.replace(/&nbsp;/g, " ");
            //console.log(s)
            return s.trim();
            //return s
        }).filter(function (str) {
            return str;
        }).join('')
    }


    String.prototype.clearFirstTag = function(tag){
        var i = tag.length;
        return this.substring(2+i,this.length-(3+i))
    }
String.prototype.replaceBlanks = function(){
    if (!this) return;
    return this.replace(/(["',.\/\s])/g, "-");
}
String.prototype.getFormatedDate=function(){
    var d=new Date(this);
    var curr_date = d.getDate();
    var curr_month = d.getMonth() + 1;
    var curr_year = d.getFullYear();
    return   curr_date+ "-" + curr_month+ "-" +curr_year
}

    if (!String.prototype.splice) {
        /**
         * {JSDoc}
         *
         * The splice() method changes the content of a string by removing a range of
         * characters and/or adding new characters.
         *
         * @this {String}
         * @param {number} start Index at which to start changing the string.
         * @param {number} delCount An integer indicating the number of old chars to remove.
         * @param {string} newSubStr The String that is spliced in.
         * @return {string} A new string with the spliced substring.
         */
        String.prototype.splice = function(start, delCount, newSubStr) {
            return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));
        };
    }


    var arrru = new Array ('Я','я',  'Ю', 'ю', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ', 'Ж', 'ж', 'А','а','Б','б','В','в','Г','г','Д','д','Е','е','Ё','ё','З','з','И','и','Й','й','К','к','Л','л','М','м','Н','н', 'О','о','П','п','Р','р','С','с','Т','т','У','у','Ф','ф','Х','х','Ц','ц','Ы','ы','Ь','ь','Ъ','ъ', 'Э' ,'э','/','&');

    var arren = new Array ('Ya','ya','Yu','yu','Ch','ch','Sh','sh','Sh','sh','Zh','zh','A','a','B','b','V','v','G','g','D','d','E','e','E','e','Z','z','I','i','J','j','K','k','L','l','M','m','N','n', 'O','o','P','p','R','r','S','s','T','t','U','u','F','f','H','h','C','c','Y','y', '', '','\'','\'','E', 'e','-','-');
    var string=
        'abcdefghijklmnopqrstuvwxyzQAZWSXEDCRFVTGBYHNUJMIKOLP1234567890';
    var cyrill_to_latin = function(text){
        for(var i=0; i<arrru.length; i++){
            var reg = new RegExp(arrru[i], "g");
            text = text.replace(reg, arren[i]);
        }

        return text.replace(/(["'\/\s])/g, "-");
    }
    var latin_to_cyrill =function(text){
        for(var i=0; i<arren.length; i++){
            var reg = new RegExp(arren[i], "g");
            text = text.replace(reg, arrru[i]);
        }
        return text;
    }
    var shuffle = function(len) {
        var parts = string.split('');
        for (var i = parts.length; i > 0;) {
            var random = parseInt(Math.random() * i);
            var temp = parts[--i];
            parts[i] = parts[random];
            parts[random] = temp;
        }
        return parts.join('').substring(0,len);
    }

    String.prototype.getUrl=function(){
        return url_slug(this)
        //return cyrill_to_latin(this.substring(0,50).split(" ").join("-").toLowerCase());
    }
    String.prototype.shuffle=function(len){
        if(!len){len=this.length}
        var parts = this.split('');
        for (var i = parts.length; i > 0;) {
            var random = parseInt(Math.random() * i);
            var temp = parts[--i];
            parts[i] = parts[random];
            parts[random] = temp;
        }
        return parts.join('').substring(0,len);
    }

    //object
    //Object.prototype.addProp=function(o){}
    //Object.prototype.addProp=function(o){
        /*if(!o || typeof o !='object'){return}
        var keysArray = Object.keys(o);
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(o, nextKey);
            if (desc !== undefined && desc.enumerable) {
                this[nextKey] = o[nextKey];
            }
        }*/
    //}
    //Object.prototype.newMethod=function(){}
    /*Object.defineProperty(
        Object.prototype,
        'addProperties',
        {
            //enumerable:false,
            value:function(o){
                if(!o || typeof o !='object'){return}
                var keysArray = Object.keys(o);
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(o, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        this[nextKey] = o[nextKey];
                    }
                }
            }
        }
    );*/
})()




//http://stackoverflow.com/questions/25069777/sharing-code-between-angularjs-and-nodejs
'use strict';
(function(){
    var order = function(){
        var self=this;
        this.cart={stuffs:[]};
        this.seller=null;
        this.cascade=[];
        this.opt={};
        this.campaign=[];
        this.coupon={};
        this.totalCount=0;
        this.sum=0;
        this.price;  // для работы с ценой
        this.priceSale;//
        this.retail; //
        this.discount=null;// для управления ценой из админки ордера
        this.currency;
        this.mainCurrency;
        this.currencyStore;
        this.messageForCampaign={};
        this.type;
        this.user;
        this.paySum;
        // псевдо приватные методы
        //http://stackoverflow.com/questions/436120/javascript-accessing-private-member-variables-from-prototype-defined-functions
        function _checkInCondition(__campaign,stuff){
            var stuffBrand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand
            var stuffCategory = (typeof stuff.category=='object' && stuff.category.length)?stuff.category[0]:stuff.category;
            if (__campaign.conditionStuffs && __campaign.conditionStuffs.length && __campaign.conditionStuffs.indexOf(stuff._id)>-1){
                return true
            }
            if (__campaign.conditionTags && __campaign.conditionTags.length && __campaign.conditionTags.some(function(tag){return stuff.tags.indexOf(tag)>-1})){
                return true;
            }
            if (__campaign.conditionBrandTags && __campaign.conditionBrandTags.length && __campaign.conditionBrandTags.indexOf(stuff.brandTag)>-1){
                return true
            }
            if (__campaign.conditionBrands && __campaign.conditionBrands.length && __campaign.conditionBrands.indexOf(stuffBrand)>-1){
                return true
            }
            if (__campaign.conditionCategories && __campaign.conditionCategories.length && __campaign.conditionCategories.indexOf(stuffCategory)>-1){
                return true
            }
        }
        this._cartCount=function(campaign,cam){
            var i=0;
            var self=this;
            //console.log(this.cart)
            this.cart.stuffs.forEach(function(item){
                //console.log(item.quantity);
                if (campaign){
                    //console.log('_isStuffInCampaign(item)-',_isStuffInCampaign(item))
                    if (campaign=='withoutcampaign'){
                        //console.log(item.campaignId)
                        if (!item.campaignId){
                            if(!cam){
                                i +=Number(item.quantity);
                            }else{
                                if(_checkInCondition(cam,item)){
                                    i +=Number(item.quantity);
                                }

                            }

                            //console.log('i-',i)
                        }
                    }else{
                        if (item.campaignId==campaign){
                            i +=Number(item.quantity);
                            //console.log('i-',i)
                        }
                    }
                }else{
                    if(item.quantity)
                        i +=Number(item.quantity);
                }
            })
            //console.log('cartcount ',i)
            return i;
        }
        this._checkDiscount=function(){
            var dis = this.discount;
            if (dis){
                if (!dis.value)dis.value=0;
                if(dis.type==1 || dis.type==3){
                    //Принудительная оптовая цена для всех позиций включая розницу и sale.
                    return self.price;
                } else if(dis.type==2 || dis.type==4 || dis.type==5){
                    //Принудительное изменение цены на оптовую всех позиций без изменения цены sale
                    if(self.priceSale){
                        return self.priceSale;
                    }else{
                        return self.price;
                    }
                }
            } else return;
        }
        this._getDiscountPrice=function(dis,s){
            if (dis){
                if (!dis.value)dis.value=0;
                if(dis.type==1){
                    //Принудительная оптовая цена для всех позиций включая розницу и sale.
                    return s.price;
                } else if(dis.type==2){
                    //Принудительное изменение цены на оптовую всех позиций без изменения цены sale
                    if(s.priceSale){
                        return s.priceSale;
                    }else{
                        return s.price;
                    }
                }if(dis.type==3){
                    //Принудительное изменение цены на оптовую, включая SALE, и применение ко всем позициям скидки, value значение скидки в %
                    return  Math.ceil10((s.price-(s.price/100)*dis.value),-5);
                } else if(dis.type==4){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение скидки на позиции кроме SAL
                    if(s.priceSale){
                        return s.priceSale
                    }else{
                        return Math.ceil10((s.price-(s.price/100)*dis.value),-5);
                    }
                }else if(dis.type==5){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение ко всем позициям скидки скидки
                    var cena;
                    if(s.priceSale){
                        cena=s.priceSale;
                    }else{
                        cena=s.price;
                    }
                    return Math.ceil10((cena-(cena/100)*dis.value),-5);
                }
            } else return;
        }
        this._checkDiscount2302=function(){
            var dis = this.discount;
            if (dis){
                if (!dis.value)dis.value=0;
                if(dis.type==1){
                    //Принудительная оптовая цена для всех позиций включая розницу и sale.
                    return self.price;
                } else if(dis.type==2){
                    //Принудительное изменение цены на оптовую всех позиций без изменения цены sale
                    if(self.priceSale){
                        return self.priceSale;
                    }else{
                        return self.price;
                    }
                }if(dis.type==3){
                    //Принудительное изменение цены на оптовую, включая SALE, и применение ко всем позициям скидки, value значение скидки в %
                    return  Math.ceil10((self.price-(self.price/100)*dis.value),-5);
                } else if(dis.type==4){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение скидки на позиции кроме SAL
                    if(self.priceSale){
                        return self.priceSale
                    }else{
                        return Math.ceil10((self.price-(self.price/100)*dis.value),-5);
                    }
                }else if(dis.type==5){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение ко всем позициям скидки скидки
                    var cena;
                    if(self.priceSale){
                        cena=self.priceSale;
                    }else{
                        cena=self.price;
                    }
                    return Math.ceil10((cena-(cena/100)*dis.value),-5);
                }
            } else return;
        }

        this._isStuffInCampaign=function(stuff,campaign){

            //console.log(stuff)
            var stuffCategory = (typeof stuff.category=='object' && stuff.category.length)?stuff.category[0]:stuff.category;
            var stuffBrand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand
            var stuffBrandTag=(stuff.brandTag && stuff.brandTag._id)?stuff.brandTag._id:stuff.brandTag
            function check(__campaign){
                /*if(stuff._id=="5c0a3606092d863b3e9197a3"){
                    console.log(stuff)
                    console.log(__campaign)
                }*/
                //console.log(stuffCategory,__campaign.categories)
                //console.log(__campaign,stuff.name)
                if (__campaign.stuffs && __campaign.stuffs.length && __campaign.stuffs.indexOf(stuff._id)>-1){
                    return true
                }
                if (__campaign.tags && __campaign.tags.length && stuff.tags && __campaign.tags.some(function(tag){return stuff.tags.indexOf(tag)>-1})){
                    return true;
                }
                if (__campaign.brandTags && __campaign.brandTags.length && __campaign.brandTags.indexOf(stuffBrandTag)>-1){
                    return true
                }
                if (__campaign.brands && __campaign.brands.length && __campaign.brands.indexOf(stuffBrand)>-1){
                    return true
                }
                if (__campaign.categories && __campaign.categories.length && __campaign.categories.indexOf(stuffCategory)>-1){
                    return true
                }
            }
            function setCampaignPrice(__campaign){
                //console.log(stuff.name,__campaign)
                stuff.sticker=__campaign.sticker;
                stuff.campaignUrl=__campaign.url;
                stuff.campaignId=__campaign._id;
                var i=0;
                for(var key in stuff.stock){
                    var price=Number(stuff.stock[key].price);
                    stuff.stock[key].priceCampaign=(__campaign.condition=='percent')?
                        Math.ceil10((price-(Number(__campaign.percent)/100)*price),-2):
                        Math.ceil10((price-Number(__campaign.sum)),-2);
                    if(!i){
                        i++;
                        stuff.priceCampaign=stuff.stock[key].priceCampaign

                    }
                    //console.log(price,stuff.stock[key].priceCampaign)
                }
                //console.log( stuff.campaignUrl)
            }
            if (!self.campaign ||  !self.campaign.length) return false;
            // если нет параметра campaign то для всех компаний

            if (!campaign) {
                for (var j=0,ll=self.campaign.length;j<ll;j++){
                    var is=check(self.campaign[j]);
                    /*if(stuff._id=="5c0a3606092d863b3e9197a3"){
                        console.log(is,(is && !self.campaign[j].revers),(!is && self.campaign[j].revers))
                    }*/

                    if ((is && !self.campaign[j].revers)||(!is && self.campaign[j].revers)){
                        setCampaignPrice(self.campaign[j])
                        return self.campaign[j];
                        break;
                    }
                }
            } else {
                // в конкретную компанию входит или нет
                var __campaign=self.campaign.getObjectFromArray('_id',campaign);
                if(__campaign){
                    var is=check(__campaign);

                    if ((is && !__campaign.revers)||(!is && __campaign.revers)){
                        setCampaignPrice(__campaign)
                        return __campaign;
                    }
                }
            }
            return false;
        }
        this._getCountForBaseStuffs=function(campaign){
            var q=0;
            this.cart.stuffs.forEach(function(item){
                if (campaign.forGroupBase){
                    if (campaign.groupBaseTag && item.tags && item.tags.indexOf(campaign.groupBaseTag)>-1){
                        q+=Number(item.quantity);
                    }else if(campaign.groupBaseCollection && campaign.groupBaseCollection==stuff.brandTag){
                        q+=Number(item.quantity);
                    }
                }else{
                    if (campaign.baseStuffs.indexOf(item._id)>-1){
                        q+=Number(item.quantity);
                    }
                }

            })
            //console.log(q);
            return q;

        }
        this._checkCompaignCondition=function(id){
            if(!self.campaign) {return}
            var __campaign = self.campaign.getOFA('_id',id);
            //console.log(__campaign)
            if(__campaign && !__campaign.forAll && !__campaign.revers){
                // колмчество не акционных товаров
                var countConditionStuffs=self._cartCount('withoutcampaign',__campaign);
                //console.log(countConditionStuffs)
                if (__campaign.ratio){
                    var countStuff=self._cartCount(__campaign._id); // количество для конкретной компании
                    //console.log('countStuff',countStuff)
                    if(parseInt(countConditionStuffs/__campaign.ratio)>=countStuff){
                        /*console.log('countConditionStuffs ',countConditionStuffs);
                        console.log('__campaign.ratio ',__campaign.ratio)
                        console.log('parseInt(countConditionStuffs/__campaign.ratio) ',parseInt(countConditionStuffs/__campaign.ratio))
                        console.log('countStuff ',countStuff)*/
                        return true;
                    }
                }else{
                    // нет кратности применения
                    // просто если хватает товаров из условия
                    return true;
                }

                /*
                if (!__campaign.useBase){
                    countBaseStuff = self._cartCount('withoutcampaign');
                } else {
                    // baseStuffs количество в корзине
                    countBaseStuff=self._getCountForBaseStuffs(__campaign);
                }
                //console.log('countBaseStuff-',countBaseStuff)
                if (__campaign.ratio){
                    var countStuff=self._cartCount(id); // количество для конкретной компании
                    if(parseInt(countBaseStuff/__campaign.ratio)>=countStuff){
                        return true;
                    }
                }else{
                    // нет кратности применения
                    // просто если хватает товаров из условия
                    if (countBaseStuff>=__campaign.condition){
                        return true;
                    }
                }*/
            }else{
                // нет услоаий просто применям акционную цену
                return true;
            }
        }
        this._checkCompaignConditionForBase=function(id){
            var campaign = self.campaign.getObjectFromArray('_id',id);
            //console.log(campaign);
            //console.log("self._cartCount('withoutcampaign')-",self._cartCount('withoutcampaign'))
            //console.log("self._cartCount(campaign._id)-",self._cartCount(campaign._id))
            //console.log(campaign.condition && campaign.useBase && self._cartCount('withoutcampaign') && !self._cartCount(campaign._id))
            if(campaign.useBase && self._getCountForBaseStuffs(campaign)>=campaign.condition && !self._cartCount(campaign._id)){
                return true;
            }
        }
        this._getUnitOfMeasure=function(){
            var a = this.cart.stuffs.reduce(function(arr,i){
                if(i.unitOfMeasure && arr.indexOf(i.unitOfMeasure)<0){
                    arr.push(i.unitOfMeasure)
                }
                return arr;
            },[])
            //console.log(a)
            if(a.length==1){
                return a[0]
            }else{
                return null
            }
        }
    }
    var _getCascadePrice=function(self){
        var newPrice=self.price;
        var cascade=self.cascade;
        if (cascade && cascade.length) {
            for(var i=0,l=cascade.length;i<l;i++){
                if (self.totalCount>=cascade[i][0]){
                    newPrice=Math.ceil10((self.price-(self.price/100)*cascade[i][1]),-2);
                }
            }
            return newPrice;
        } else {
            return self.price;
        }
    }


    order.prototype.init=function(campaign,mainCurrency,currencyStore) {
        //console.log(campaign)
        this.campaign=campaign;
        this.mainCurrency=mainCurrency;
        this.currencyStore=currencyStore;
    }
    order.prototype.setCamapign=function(campaign) {
        this.campaign=campaign;
        for(var i=0,l=campaign.length;i<l;i++){
            this.messageForCampaign[campaign[i].url]={base:null,stuff:null};
        }
    }
    order.prototype.setCart=function(stuffs) {
        //console.log(stuffs)
        this.cart.stuffs = stuffs;
        this.sortCart();
    }

    order.prototype.setSellerData=function(seller,cascade,opt) {
        this.seller =seller;
        this.cascade=cascade;
        this.opt=opt;
    }
    order.prototype.setCoupon=function(coupon) {
        // console.log(coupon)
        this.coupon =coupon;
    }
    order.prototype.setDiscount=function(discount) {
        this.discount=discount;
    }
    order.prototype.setCurrency=function(currency) {
        this.currency=currency;
    }
    order.prototype.changeCurrency=function(currency){
        this.currency=currency;
        this.kurs=this.currencyStore[this.currency][0];
    }
    order.prototype.getPrice=function(i) {
        var stuff=this.cart.stuffs[i];
        this.totalCount=this._cartCount();
        this.price=stuff.price;
        this.priceSale=stuff.priceSale;
        this.retail=stuff.retail;
        this.priceCampaign=stuff.priceCampaign;
        stuff.maxDiscountOver=false;

        // вычисляем условие опта
        var optIs=false;

        if (!this.opt || !this.opt.quantity || this.totalCount>=this.opt.quantity){
            optIs=true;
        }

        // 1.проверка на ручное управление ценой
        var cena;
        if (cena=this._checkDiscount()){
            if(this.discount && this.discount.value && stuff.maxDiscount && this.discount.value >stuff.maxDiscount){
                stuff.maxDiscountOver=true;
            }else{
                checkMaxDiscount(stuff,cena)
            }

            return cena;
        }
        //console.log(stuff.priceCampaign)
        //2. товар в акции проверить на опт и на выполнение условий акции
        //console.log(this._checkCompaignCondition(stuff.campaignId))
        //console.log(stuff.priceCampaign,stuff.campaignId,optIs,this._checkCompaignCondition(stuff.campaignId))
        //console.log('this._checkCompaignCondition(stuff.campaignId) -',this._checkCompaignCondition(stuff.campaignId))
        if (stuff.priceCampaign && optIs && this._checkCompaignCondition(stuff.campaignId) ){
            return stuff.priceCampaign
        }
        // 3.проверка на опт
        if (!optIs){
            return this.retail || this.price;
        }
        //4.eсли опт и есть   цена или каскад скидок
        if (this.priceSale){
            checkMaxDiscount(stuff,this.priceSale)
            return this.priceSale;
        } else {
            return _getCascadePrice(this);
        }
        return stuff.price;
    };
    order.prototype.getTotalSum=function(discount){
        var sum=0;
        var self=this;
        this.cart.stuffs.forEach(function(c){
            //console.log(c)
            var s=(c.sum)?(c.sum):c.price;
            if(discount){
                var p = self._getDiscountPrice(self.discount,c)
                    if(p){
                        s= p*c.quantity;
                    }
            }
            sum+=s
        });
        if(discount){
            var dis = this.discount;
            if (dis){
                if(dis.type==6){
                    sum = Math.ceil10((sum-(sum/100)*dis.value),-5);
                }else if(dis.type==7){
                    sum=sum-dis.value;
                }
            }
        }
        //console.log(sum)
        //this.sum=sum;
        return sum;
    };
    order.prototype.getTotalQuantity=function(){
        var q=0;
        this.cart.stuffs.forEach(function(c){
            q+=Number(c.quantity);
        });
        return q;
    };
    order.prototype.getCampaignQuantity=function(){
        return this._cartCount('campaign');
    };
    order.prototype.getConditionForDisplayMsg=function(){
        return this.messageForCampaign

    };
    order.prototype.getCouponSum=function(){
        //console.log(this.coupon)
        if (this.coupon && Object.keys(this.coupon).length){
            if(!this.coupon.condition){
                return Math.ceil10((this.sum-(this.sum/100)*Number(this.coupon.val)),-5);
            }else if(this.coupon.condition){
                var val=this.coupon.val;
                //console.log(this.sum,val)
                if(this.coupon.currency && this.currencyStore[this.coupon.currency] && this.currencyStore[this.coupon.currency][0]){
                    val = Math.round(val/this.currencyStore[this.coupon.currency][0])
                }
                /*if(this.coupon.currency && this.coupon.currency!=this.currency && this.currencyStore && this.currencyStore[this.coupon.currency] && this.currencyStore[this.coupon.currency][0]){
                    console.log(this.currencyStore[this.coupon.currency][0])
                    val = Math.round(val/this.currencyStore[this.coupon.currency][0])
                }*/
                //console.log(this.sum-Number(val))
                return (this.sum-Number(val));
            }
        }else{
            //console.log(this.sum)
            return this.sum
        }
    };
    order.prototype.clearOrder=function(){
        this.cart.stuffs.length=0;
        //this.seller=null;
        //this.cascade=[];
        //this.opt={};
        //this.campaign=[];
        this.coupon={};
        this.totalCount=0;
        this.sum=0;
    }
    order.prototype.checkInCart=function(itemTo){
        //console.log(itemTo.name,this.cart.stuffs.some(function(c){return ((itemTo._id == c._id) && (itemTo.sort == c.sort))}))
        return this.cart.stuffs.some(function(c){return ((itemTo._id == c._id) && (itemTo.sort == c.sort))})
    }
    order.prototype.addStuffToOrder=function(itemTo){
        if (this.cart.stuffs.length>=150){return false}
        if (!this.cart.stuffs.some(function(c){return ((itemTo._id == c._id) && (itemTo.sort == c.sort))})){
            var itemToCart = angular.copy(itemTo);
            for(var key in itemToCart){
                if(typeof itemToCart[key]=='function'){
                    delete itemToCart[key]
                }
            }
            delete itemToCart.comments
            delete itemToCart.desc
            delete itemToCart.gallery
            delete itemToCart.imgs
            delete itemToCart.nameL
            delete itemToCart.checkInCart
            delete itemToCart.addItemToOrder
            delete itemToCart.addInfo
            delete itemToCart.getDataForBooking
            delete itemToCart.FullTags
            delete itemToCart.changeSortOfStuff
            delete itemToCart.checkInCart
            delete itemToCart.driveRetailPrice
            delete itemToCart.getBonus
            delete itemToCart.zoomImg
            delete itemToCart.stockKeysArray
            delete itemToCart.sortsOfStuff
            delete itemToCart.setPrice



            this.cart.stuffs.push(itemToCart);
            this.sortCart();
            /*this.cart.stuffs.sort(function(a,b){
                if(a.brand < b.brand) return -1;
                if(a.brand > b.brand) return 1;
                return 0;
            })*/
            return true;
        }else {
            return false;
        }

    }
    order.prototype.getShipCost=function(){
        var s=this.shipDetail.reduce(function(s,c){
            if (isNaN( c.sum)){
                return s;
            }else{
                return s+Number(c.sum)
            }
        },0)
        return s;
    }
    order.prototype.getTotalPay=function(){
        if(!this.pay){this.pay=[]}
        var s=this.pay.reduce(function(s,c){
            if (isNaN( c.sum)){
                return s;
            }else{
                return s+Number(c.sum)
            }
        },0)
        return s;
    }
    order.prototype.getTotalDiscount=function(){
        if(this.sum && this.sum0){
            if (this.sum>this.sum0){return 0}else{
                return (100-Math.round(this.sum*100/this.sum0))
            }
        }


        /*this.priceSum = this.cart.stuffs.reduce(function(s,c){
            s+=c.quantity* c.price;
            return s;
        },0)
        var sumT =this.getCouponSum()
        //console.log(sum,sumT,100-Math.round(sumT*100/sum))
        if (sumT>this.priceSum){return 0}else{
            return (100-Math.round(sumT*100/this.priceSum))
        }*/
    }
    order.prototype.checkCampaign=function(stuff){
        return this._isStuffInCampaign(stuff);
    }
    order.prototype.sortCart=function(){
        this.cart.stuffs.sort(function(a,b){
            if(!a.extCatalog && !b.extCatalog){
                if(a.category < b.category) return -1;
                if(a.category > b.category) return 1;
                return 0
            }else if(a.extCatalog && !b.extCatalog){
                return 1
            }else if(!a.extCatalog && b.extCatalog){
                return -1
            }else if(a.extCatalog && b.extCatalog && a.extCatalog != b.extCatalog){
                if(a.category < b.category) return -1;
                if(a.category > b.category) return 1;
            }else if (a.extCatalog && b.extCatalog && a.extCatalog == b.extCatalog){
                if(a.category < b.category) return -1;
                if(a.category > b.category) return 1;
                return 0
            }
        })
    }
    function checkMaxDiscount(stuff,price){
        if(stuff.maxDiscount){
            if((1-price/stuff.price)*100>stuff.maxDiscount){
                stuff.maxDiscountOver=true;
            }
        }
        //console.log('stuff.maxDiscountOver - ',stuff.maxDiscountOver)
    }


    function getOrder(){
        return new order();
    }


    var myShareData = {getOrder:getOrder};


    if(typeof window !== 'undefined'){
        window.myShareData = myShareData;
        window.OrderModel=order;
    } else {
        module.exports = myShareData;
    }

})()



'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
    var designQuery = function () {
        function designQuery(brands, brandTags, filters, sectionClass, categories) {
            _classCallCheck(this, designQuery);

            this.brands = brands;
            this.brandTags = brandTags;
            this.filters = filters;
            this.filterTags = filters.reduce(function (a, item) {
                return a.concat(item.tags);
            }, []);
            this.sections = sectionClass.getSections();
            this.categories = sectionClass.getCategories();
            this.sectionClass = sectionClass;
        }

        _createClass(designQuery, [{
            key: 'getQuery',
            value: function getQuery(stateParams, queryParams) {
                /*console.log('getQuery')
                console.log(stateParams,queryParams)*/

                if (queryParams) {
                    for (var k in queryParams) {
                        stateParams[k] = queryParams[k];
                    }
                }

                stateParams.groupUrl = stateParams.group;
                stateParams.categoryUrl = stateParams.category;
                //console.log(stateParams)
                var parentSection,
                    sectionCategories,
                    categoryBrands = [],
                    categoryFilters = [],
                    query = {},
                    breadcrumbs = [];
                var sections = this.sections,
                    brands = this.brands,
                    filters = this.filters;var categories = this.categories;
                parentSection = this.sectionClass.getSection(stateParams.groupUrl);
                //console.log(parentSection)
                //return;
                if (parentSection) {
                    if (stateParams.categoryUrl != 'category') {
                        var category = parentSection.categoriesO[stateParams.categoryUrl];
                        if (category) {
                            query.category = category._id;
                            categoryBrands = category.brands;
                            categoryFilters = category.filters;
                        } else {
                            throw 404;
                        }
                    } else {
                        var sectionCategoriesFull = this.sectionClass.getEmbededCategories(parentSection, []);
                        sectionCategories = sectionCategoriesFull.map(function (el) {
                            return el._id;
                        });
                        //console.log(sectionCategories)
                        if (!sectionCategories.length) {
                            query.category = null;
                        } else {
                            query.category = { $in: sectionCategories };
                            sectionCategoriesFull.forEach(function (c) {
                                c.filters.forEach(function (f) {
                                    if (categoryFilters.indexOf(f) < 0) {
                                        categoryFilters.push(f);
                                    }
                                });
                                c.brands.forEach(function (b) {
                                    if (categoryBrands.indexOf(b) < 0) {
                                        categoryBrands.push(b);
                                    }
                                });
                            });
                        }
                    }
                } else {
                    //console.log('???????????')
                    throw 404;
                }
                //console.log(categoryFilters,categoryBrands)
                // бренд и коллекци
                // ************************************************************************
                var brandSet, brandTagSet, brandsArr, brandTagsArr;
                //console.log(categoryBrands)

                if (stateParams.brand) {
                    brandsArr = stateParams.brand.split('__');
                    stateParams.brand = stateParams.brand.split('__');
                }
                if (stateParams.brandTag) {
                    brandTagsArr = stateParams.brandTag.split('__');
                    stateParams.brandTag = stateParams.brandTag.split('__');
                }
                //console.log(stateParams)
                query.brand = [];
                query.brandTag = [];
                brands.forEach(function (b) {
                    if (brandsArr && brandsArr.indexOf(b.url) > -1) {
                        query.brand.push(b._id);
                    }
                    b.tags.forEach(function (t) {
                        if (brandTagsArr && brandTagsArr.indexOf(t.url) > -1) {
                            query.brandTag.push(t._id);
                        }
                    });
                });
                if (query.brand.length) {
                    if (query.brand.length == 1) {
                        query.brand = query.brand[0];
                    } else {
                        query.brand = { $in: query.brand };
                    }
                } else {
                    query.brand = null;
                }
                if (query.brandTag.length) {
                    if (query.brandTag.length == 1) {
                        query.brandTag = query.brandTag[0];
                    } else {
                        query.brandTag = { $in: query.brandTag };
                    }
                } else {
                    query.brandTag = null;
                }
                if (!query.brandTag) {
                    delete query.brandTag;
                }
                if (!query.brand) {
                    delete query.brand;
                }
                //console.log(query)
                // end brand && collections
                var queryTags;
                if (stateParams.queryTag) {
                    // анализ url на наличие тегов*************
                    queryTags = stateParams.queryTag.split('__');
                    // удаляем возможные дубли
                    queryTags = queryTags.filter(function (item, pos) {
                        return queryTags.indexOf(item) == pos;
                    });
                }
                query.filters = {}; // для количественных признаков
                var filterTags;
                if (stateParams.filterTag) {
                    // анализ url на наличие тегов*************
                    filterTags = stateParams.filterTag.split('__');
                    // удаляем возможные дубли
                    filterTags = filterTags.filter(function (item, pos) {
                        return filterTags.indexOf(item) == pos;
                    });
                    filterTags = filterTags.map(function (f) {
                        return f.split('_');
                    }).filter(function (f) {
                        return f.length == 3;
                    }).forEach(function (f) {
                        query.filters[f[0]] = { $gte: Number(f[1]), $lte: Number(f[2]) };
                    });
                }

                query.queryTags = {};
                filters.forEach(function (f) {
                    if (f.count) {
                        if (query.filters[f._id]) {
                            f.minValue = query.filters[f._id].$gte;
                            f.maxValue = query.filters[f._id].$lte;
                        } else {
                            f.minValue = f.min;
                            f.maxValue = f.max;
                        }
                    } else {
                        f.tags.forEach(function (t) {
                            if (queryTags && queryTags.indexOf(t.url) > -1) {
                                if (!query.queryTags[t.filter]) {
                                    query.queryTags[t.filter] = [];
                                }
                                query.queryTags[t.filter].push(t._id);
                            }
                        });
                    }
                });
                _setQueryForTags(query, filters);

                // для клиенского запроса только опубликованные товары
                query.actived = true;
                //console.log('query',query)
                //console.log(stateParams)
                if (stateParams.searchStr) {
                    var search = stateParams.searchStr.substring(0, 20);
                    query.$or = [{ name: search }, { artikul: search }];
                }
                return query;
            }
        }, {
            key: 'getQueryString',
            value: function getQueryString(params, query, queryCategory) {
                this.queryCategory = queryCategory;
                var group = params.group,
                    category = params.category;
                var brand = query.brand,
                    brandTag = query.brandTag,
                    queryTag = query.queryTag;
                /*console.log(params,query)
                console.log(group,category,brand,brandTag,queryTag);*/

                var q = {},
                    b = this.brands.getOFA('url', brand);
                if (brand && b) {
                    q.brand = b._id;
                }
                if (brandTag) {
                    var bt = void 0;
                    if (b) {
                        var _bt = b.tags.getOFA('url', brandTag);
                        if (_bt) {
                            q.brandTag = _bt._id;
                        }
                    } else {
                        for (var i = 0; i < this.brands.length; i++) {
                            bt = this.brands[i].tags.getOFA('url', brandTag);
                            if (bt) {
                                q.brandTag = bt._id;break;
                            }
                        }
                    }
                }
                // анализ url на наличие тегов*************
                if (queryTag) {
                    q.tags = {};
                    var filterTags = this.filterTags;
                    queryTag.split('+').map(function (url) {
                        //console.log(url)
                        return filterTags.getOFA('url', url);
                    }).filter(function (t) {
                        return t;
                    }).forEach(function (t) {
                        //console.log(t)
                        if (!q.tags[t.filter]) {
                            q.tags[t.filter] = [];
                        }
                        //console.log(q.tags)
                        q.tags[t.filter].push(t._id);
                    });
                }

                //console.log(q,this.queryCategory)
                if (this.queryCategory && this.queryCategory.category) {
                    q.category = this.queryCategory.category;
                }
                //console.log(_prepareQueryForRequest(q))
                return _prepareQueryForRequest(q);
            }
        }]);

        return designQuery;
    }();

    function _prepareQueryForRequest(queryStart) {
        //console.log(queryStart)
        // формирование строки запроса для выбора  товаров из БД
        var query = [];
        var arr_id;
        for (var key in queryStart) {
            if (queryStart[key]) {
                //console.log(queryStart[key],key);
                if (key == "tags") {
                    var qu = [];
                    for (var key2 in queryStart[key]) {
                        var obj = queryStart[key][key2];
                        var q = [];
                        if (obj && obj.length) {
                            obj.forEach(function (objT) {
                                q.push({ tags: objT });
                            });

                            if (q.length > 1) {
                                q = { $or: q };
                                qu.push(q);
                            } else {
                                q = q[0];
                                qu.push(q);
                            }
                        }
                    }
                    if (qu.length) {
                        if (qu.length == 1) {
                            query.push(qu[0]);
                        } else {
                            query.push({ $and: qu });
                        }
                    }
                } else if (key == "brandTag") {
                    //console.log(key,queryStart[key])
                    // это если запрос на список со страницы акции.
                    // в акции могут быть товары из нестольких коллекций
                    if (queryStart[key].length) {
                        var obj = {};
                        obj[key] = { $in: queryStart[key] };
                        query.push(obj);
                        //console.log(key,obj)
                    } /*else {
                        var obj={};
                      obj[key]=queryStart[key];
                      query.push(obj);
                        }*/
                    //console.log(obj[key])
                } else if (key == "_id") {
                    // это если запрос на список со страницы акции.
                    // в акции могут быть просто товары
                    if (queryStart[key].length) {
                        arr_id = {};
                        arr_id[key] = { $in: queryStart[key] };
                    }
                } else {
                    var obj = {};
                    obj[key] = queryStart[key];
                    query.push(obj);
                }
            }
        }
        if (query.length == 1) {
            if (arr_id) {
                query = JSON.stringify({ $or: [query[0], arr_id] });
            } else {
                query = JSON.stringify(query[0]);
            }
        } else if (query.length > 1) {
            if (arr_id) {
                query = JSON.stringify({ $or: [{ $and: query }, arr_id] });
            } else {
                query = JSON.stringify({ $and: query });
            }
        } else {
            if (arr_id) {
                query = JSON.stringify(arr_id);
            } else {
                query = {};
            }
        }
        return query;
    }
    function _setQueryForTags(query, filters) {
        //console.log(query.queryTags,query.queryTags && typeof query.queryTags=='object')
        if (query.queryTags && _typeof(query.queryTags) == 'object') {
            var keys = Object.keys(query.queryTags);
            if (keys.length == 1) {
                query.tags = { $in: query.queryTags[keys[0]] };
            } else if (keys.length > 1) {
                query.$and = [];
                keys.forEach(function (k) {
                    query.$and.push({ tags: { $in: query.queryTags[k] } });
                });
            }
        }
        delete query.queryTags;
        var keys = Object.keys(query.filters);
        //console.log(keys,!keys)
        if (keys.length == 1) {
            var filter;
            if (filters) {
                filter = filters.getOFA('_id', keys[0]);
            }
            //console.log(filter)
            if (filter && filter.price) {
                query['priceForFilter'] = query.filters[keys[0]];
                console.log(query.filters[keys[0]]);
            } else {
                query['filters.' + keys[0]] = query.filters[keys[0]];
            }

            //query['filters.'+keys[0]]=query.filters[keys[0]]
        } else if (keys.length > 1) {
            if (!query.$and) {
                query.$and = [];
            }
            keys.forEach(function (k) {
                var filter;
                if (filters) {
                    filter = filters.getOFA('_id', k);
                }
                //console.log(filter)
                if (filter && filter.price) {
                    query['priceForFilter'] = query.filters[k];
                } else {
                    var o = {};
                    o['filters.' + k] = query.filters[k];
                    query.$and.push(o);
                }
            });
            if (query.$and.length == 1) {
                for (var k in query.$and[0]) {
                    query[k] = query.$and[0][k];
                }
                delete query.$and;
            }
        }
        delete query.filters;
    }

    if (typeof window !== 'undefined') {
        window.DesignQuery = designQuery;
    } else {
        exports.init = designQuery;
        // module.exports = myShareData;
    }
})();
//# sourceMappingURL=designQuery.js.map
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
    var Section = function () {
        function Section(sections) {
            _classCallCheck(this, Section);

            this.sections = sections;
            this.categories = sections.reduce(function (a, s) {
                s.categoriesO = {};
                if (s.categories) {
                    s.categories.forEach(function (cat) {
                        a[cat.url] = cat;
                        s.categoriesO[cat.url] = cat;
                    });
                }
                if (s.child) {
                    s.child.forEach(function (c) {
                        c.categoriesO = {};
                        if (c.categories) {
                            c.categories.forEach(function (cat) {
                                a[cat.url] = cat;
                                c.categoriesO[cat.url] = cat;
                            });
                        }
                    });
                }
                return a;
            }, {});
        }

        _createClass(Section, [{
            key: 'getSections',
            value: function getSections() {
                return this.sections;
            }
        }, {
            key: 'getCategories',
            value: function getCategories() {
                return this.categories;
            }
        }, {
            key: 'getSection',
            value: function getSection(sectionUrl) {
                //console.log('sectionUrl',sectionUrl)
                if (!this.sections) return null;
                var sections = this.sections;
                for (var i = 0, l = sections.length; i < l; i++) {
                    //console.log('sections[i].url',sections[i].url)
                    if (sections[i].url && sections[i].url == sectionUrl) {
                        return sections[i];
                        break;
                    }
                    if (sections[i].child && sections[i].child.length) {
                        for (var j = 0, ll = sections[i].child.length; j < ll; j++) {
                            if (sections[i].child[j].url && sections[i].child[j].url == sectionUrl) {
                                return sections[i].child[j];
                                break;
                            }
                        }
                    }
                }
                return null;
            }
        }, {
            key: 'getParentSection',
            value: function getParentSection(sectionUrl, id) {
                //console.log(sectionUrl)
                if (!this.sections) return null;
                var sections = this.sections;
                for (var i = 0, l = sections.length; i < l; i++) {
                    if (id) {
                        if (sections[i]._id == sectionUrl) {
                            return sections[i];
                            break;
                        }
                    } else {
                        if (sections[i].url && sections[i].url == sectionUrl) {
                            return sections[i];
                            break;
                        }
                    }

                    if (sections[i].child && sections[i].child.length) {
                        var categories;
                        if (categories = _getParentSection(sections[i].child, sectionUrl, id)) {
                            return categories;
                            break;
                        }
                    }
                }
                return null;
            }
        }, {
            key: 'getEmbededCategories',
            value: function getEmbededCategories(section, arr) {
                if (section.categories && section.categories.length) {
                    arr.push.apply(arr, section.categories);
                }
                if (section.child && section.child.length) {
                    section.child.forEach(function (child, i) {
                        arr.push.apply(arr, section.child[i].categories);
                    });
                }
                return arr;
            }
        }, {
            key: 'getListType',
            value: function getListType(params) {
                if (!params.group) {
                    return 'good';
                }
                for (var i = 0; i < this.sections.length; i++) {
                    if (this.sections[i].url == params.group) {
                        if (this.sections[i].type) {
                            return this.sections[i].type;
                            break;
                        }
                    }
                    if (this.sections[i].child && this.sections[i].child.length) {
                        for (var j = 0; j < this.sections[i].child.length; j++) {
                            if (this.sections[i].child[j].url == params.group) {
                                if (this.sections[i].type) {
                                    return this.sections[i].type;
                                    break;
                                }
                            }
                        }
                    }
                }
                return 'good';
            }
        }]);

        return Section;
    }();

    if (typeof window !== 'undefined') {
        window.SectionClass = Section;
    } else {
        exports.init = Section;
    }
})();
//# sourceMappingURL=SectionClass.js.map
/*if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
        console.log(position)
        $.getJSON('http://ws.geonames.org/countryCode', {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            type: 'JSON'
        }, function(result) {
            console.log('Country: ' + result.countryName + '\n' + 'Code: ' + result.countryCode);
            $('#newURL').attr('href','https://www.google.com&jobid='+result.countryCode);
        });
    });
}*/


/*if (window.Worker) {


    var myWorker = new Worker("scripts/worker.js");
    console.log(myWorker)
}*/

/*UA-106626597-1*/



Number.isInteger = Number.isInteger || function(value) {
        return typeof value === 'number' &&
            isFinite(value) &&
            Math.floor(value) === value;
 };

/*function getDataFromIp2(data) {
    console.log(data)
    console.log(angular)
}*/

// ipstack http://api.ipstack.com/46.200.228.18?access_key=96b8e490d1ca4838c950dbe1d08d79cc&format=1
//getDataFromIp(kdkdk)



//console.log(Number.isInteger)
setMetaOG()
var preloadPade = document.getElementById('preloadPage')
//console.log(preloadPade)
var durationTemp=2;
try{
    if(preloadDuration){
        preloadDuration=Number(preloadDuration)
        if(preloadDuration>1 && preloadDuration<10){
            durationTemp=preloadDuration
        }
    }
}catch(err){}

var preloadAnimateClass='hidden-preload-page';
if($(preloadPade).data('preloadAnimateClass')){
    preloadAnimateClass=$(preloadPade).data('preloadAnimateClass')
}
//console.log(durationTemp)
var k = getCookie('preload')
//console.log("getCookie preload",k)
if(k){
    $(preloadPade).remove()
}else{
    setTimeout(function () {
        //$(preloadPade).slideUp()
        $(preloadPade).addClass(preloadAnimateClass)
        setTimeout(function () {
            $(preloadPade).remove()
        },1000)
    },durationTemp*1000)
    var options ={
        path:'/',
        expires:3600
    }
    setCookie('preload', 'true', options)
}







$('#hidePreloadPage').click(function () {
    $(preloadPade).addClass(preloadAnimateClass)
    setTimeout(function () {
        $(preloadPade).remove()
    },1000)
})



/*var a=342.23
var b=17;
 var c = Math.ceil10(a-(a/100*17),-2)
console.log(c)*/
//console.log(topPage)
var iPhone=false;
function getMobileOperatingSystem() {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;
    if(userAgent.match( /iPhone/i )) {
        iPhone=true;
    } else if( userAgent.match( /iPad/i )) {
        return 'iOS';
    } else if( userAgent.match( /Android/i ) ) {
        return 'Android';
    } else {
        return 'unknown';
    }
}
getMobileOperatingSystem();

// классы для создания запроса для получения списка товаров
//console.log(DesignQuery)
var sectionClass;
var dQ;
// получение тегов
var _filterTags=[];
var _filterTagsO={}
//console.log(filters)
//console.log(filtersFromServer)
var _filtersO={}
filtersFromServer.forEach(function(filter){
    if(filter._id=='5bc805475f88d44b19fc97d2'){
        console.log(filter)
    }
    _filtersO[(filter)._id]=(filter);
    if(filter.tags && filter.tags.length){
        filter.tags.forEach(function (t,i) {
            t.index=i;
            _filterTagsO[t._id]=t
        })
        _filterTags.push.apply(_filterTags,filter.tags)
    }
})

//console.log(filtersFromServer)
angular.module('gmall', ['ngRoute',
    'ui.router',
    'ui.router.state.events',
    'ngResource','gmall.controllers',
    'gmall.services',
    'gmall.directives',
    'gmall.filters',
    'ui.bootstrap',
    'ngTouch',
    'lazyImg',
    //"checklist-model",
    'ngSocial',
    'ngAnimate',
    //'ngAutocomplete',
    'gmall.exception',
    'toaster', // https://github.com/jirikavi/AngularJS-Toaster
    'ui.select',
    'pageslide-directive',
    //'btford.socket-io',
    //'timer',
        'satellizer',
        'ngMessages',
        'angular-click-outside',
    'ui.mask',
    'vcRecaptcha',

    'rzModule',
    //'ksSwiper'
        //'moment-picker',

    //'i-comments'
])

.run(['$rootScope', '$state', '$stateParams','global','globalSrv','$window','$location','$anchorScroll','$timeout','seoContent','$order','Campaign','$user','Witget','$auth','Account','Sections','$q','Seopage','$uibModal','Stuff','$injector','$route','$document','$transitions','$sce','$email','exception','$http','$notification','CreateContent','localStorage',function ($rootScope,$state,$stateParams,global,globalSrv,$window,$location,$anchorScroll,$timeout,seoContent,$order,Campaign,$user,Witget,$auth,Account,Sections,$q,Seopage,$uibModal,Stuff,$injector,$route,$document,$transitions,$sce,$email,exception,$http,$notification,CreateContent,localStorage){

    $rootScope.getDataFromIp=function (data) {
        console.log(data)
    }

    //myWorker.postMessage([22]);
    global.set('filterTags',_filterTags)
    global.set('filterTagsO',_filterTagsO)
    //console.log('sections-',global.get('sections'));

        //reCAPTCHA.setPublicKey('6LfW0gcUAAAAAPBl-LPkiKPpF2E84zUPTzg8WEKl');
    $(this).scrollTop(0);
    $rootScope.checkedMenu={m:false,slideMenu:false}
    $rootScope.stuffHost=stuffHost;
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.global=global;
    /*$rootScope.$ctrl={
        global:global
    };*/
    $rootScope.soundChat=document.getElementById('soundChat');

    $rootScope.globalProperty={entryStuff:null,displaySearch:false};
    function getPromise(q){
        return $q.when()

        $q(function(resolve,reject){

        })
    }
    $rootScope.ignoreClick = function($event) {
        if ($event) {
            $event.stopPropagation();
            $event.preventDefault();
        }
    }

   // var i=0;
    /* отслеживание кнопки назад в браузере*/
    //How to detect browser back button click event using angular?
    //http://stackoverflow.com/questions/15813850/how-to-detect-browser-back-button-click-event-using-angular

    /*
    * For anybody (like me) who doesn't understand how it works:
     * When url changing in usual way (not using back/forward button),
     * then $locationChangeSuccess event firing after $watch callback.
     * But when url changing using back/forward button or history.back() api,
     * then $locationChangeSuccess event firing before $watch callback.
     * So when watch callback firing actualLocation is already equals to newLocation.
    * It is just how angular works internally and this solution just uses this internal behaviour. */



    $rootScope.$watch(function () {return $location.url()}, function (newLocation, oldLocation) {
        //true only for onPopState
        //console.log($rootScope.actualLocation,newLocation)
        if($rootScope.actualLocation === newLocation) {
            //console.log('dd')
            //$rootScope.$emit('$stateChangeEndToStuff');
            var back,
                historyState = $window.history.state;
            back = !!(historyState && historyState.position <= $rootScope.stackPosition);
            if (back) {
                //back button
                $rootScope.stackPosition--;
            } else {
                //forward button
                $rootScope.stackPosition++;
            }
        } else {
            //normal-way change of page (via link click)
            if ($route.current) {
                $window.history.replaceState({
                    position: $rootScope.stackPosition
                });
                $rootScope.stackPosition++;
            }
        }

    });

    $transitions.onBefore({ to: '*', from: '*' }, function(trans) {
        /*var substate = trans.to().defaultSubstate;
        return trans.router.stateService.target(substate);*/
        //console.log(trans)
    });

    var firstStateChenged;
    $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
        //console.log('window.videojs',window.videojs)
        //console.log('????')
        $rootScope.globalProperty.displaySearch=false;
        if(fromState.name=='master.item' && to.name=='master.item' ){return}

        if(!firstStateChenged){
            firstStateChenged=true;
            global.set('tempContent',templateContentHTML)
        }
        if(to.name=='cart' && global.get('store').val.cartSetting && global.get('store').val.cartSetting.slide){
            _openChatWitget('cart')
            $rootScope.$emit('cartslide',{event:'init'})
            event.preventDefault();
        }
        if(to.name=='stuffs'||to.name=='stuffs.stuff'){
            var groups = global.get('sections').val,
                sec={type:'good'};
            loop1 : for(var i=0;i<groups.length;i++){
                if(groups[i].url==toParams.groupUrl){
                    sec=groups[i];
                    break;
                }
                if(groups[i].child && groups[i].child.length){
                    for(var j=0;j<groups[i].child.length;j++){
                        if(groups[i].child[j].url==toParams.groupUrl){
                            sec=groups[i].child[j];
                            break loop1;
                        }
                    }
                }
            }
            /*console.log('sec',sec)
            console.log(groups,toParams.groupUrl)*/
            global.set('sectionType',sec.type);
            global.set('section',sec)
            //console.log(global.get('sectionType'))
            /*Stuff.set*/
            //console.log(fromState.name!='stuffs.stuff' && !global.get('tempContent').val )
            if(fromState.name!='stuffs.stuff' && !global.get('tempContent').val ){
                $rootScope.$emit('$stateChangeStartToStuff');
            }
        }
        if(to.name=='likes'){
            global.set('sectionType','good');
        }
        /*if(fromState.name=='stuffs' && to.name=='stuffs.stuff'){
            $rootScope.srollPosition=$(window).scrollTop();
        }*/
        if($rootScope.checkedMenu.slideMenu){
            $rootScope.checkedMenuChange('slideMenu',false)
        }
        /*if(to.name=='stuffs.stuff'&& fromState.name=='stuffs' && fromParams.categoryUrl=='category' && toParams.categoryUrl!='category'){
            event.preventDefault();

            var o = angular.copy(toParams)
            o.categoryUrl='category'
            console.log(o)
            $state.go('stuffs.stuff',o)
        }
*/


        $rootScope.checkedMenu.m=false;
        if(!global.get('tempContent').val){
            if(to.name=='news.item'||to.name=='master.item' || to.name=='campaign.detail'){
                $rootScope.$emit('$stateChangeStartToStuff');
            }
            if(to.name=='news'  && fromState.name!='news.item' ){
                $rootScope.$emit('$stateChangeStartToStuff');
            }
            if(to.name=='master' && fromState.name!='master.item' ){
                $rootScope.$emit('$stateChangeStartToStuff');
            }
            if(to.name=='info' && fromState.name!='info.item' ){
                $rootScope.$emit('$stateChangeStartToStuff');
            }
        }
        if(fromState.name=='news' && to.name=='news.item'){
            scrollPositionNewsList=$(window).scrollTop();
        }else if(fromState.name!='news.item' && to.name!='news'){
            scrollPositionNewsList=0;

        }

    })
    var scrollPositionNewsList=0;
    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
        if(from.name=='news.item' && to.name=='news' && scrollPositionNewsList){
            $timeout(function(){
                window.scrollTo(0, scrollPositionNewsList);
            })
        }
        $rootScope.actualLocation = $location.url();

        // ***************** seo block ************************
        var url = $location.url();
        var titles = angular.copy(global.get('store' ).val.seo);
        //console.log(JSON.stringify(titles))
        titles.image=global.get('store').val.logo;
        if(global.get('store').val.logo.fbPhoto){
            titles.image=global.get('store').val.fbPhoto;
        }
        if(titles.image){
            titles.image=photoHost+'/'+titles.image;
        }
        titles.url=$location.url()


        //titles.url = url;
        /*try{
         titles.canonical= $sce.trustAsResourceUrl(titles.url);
         }catch(err){console.log(err)}*/
        titles.desc=null
        global.set('titles',titles);
        if($location.search() && Object.keys($location.search()).length==1 && $location.search().subDomain){
            url=url.substring(0,url.indexOf('?'))
        }
        url=url.replace("?_escaped_fragment_","");
        var seopage=global.get('seopages').val.getOFA('link',url)
        //console.log(global.get('seopages').val,seopage,url)
        /*
        console.log(global.get('seopages').val)*/
        if(seopage){
            //console.log(seopage)
            if(seopage.data){
                global.set('currentSeopage',seopage.data);
            }else{
                var q = $q.when()
                    .then(function(){
                        return Seopage.getItem(seopage._id)
                    })
                //console.log(q)
                global.set('currentSeopage',q);
            }
        }else{
            global.set('currentSeopage',null);
        }
        //console.log("global.get('titles').val.desc",global.get('titles').val.desc)

        //******************************************************



        if(window.dataLayer && window.dataLayer.push){
            window.dataLayer.push({
                event: 'pageview',
                action: $location.path(),
            });

            /*window.dataLayer.push({
                event: 'Page View',
                action: $location.path(),
            });*/

        }
        //console.log(window.dataLayer)


        if ($window.ga){
            //$window.ga('send', 'pageview', { page: $location.path() });
            $window.ga('send', 'pageview',$location.path());
        }
        if(typeof gtag!== 'undefined'){
            setTimeout(function(){
                gtag('config', googleAnalytics, {
                    'page_title': global.get('titles').val.title,
                    'page_location': $location.url(),
                    'page_path': $location.path()
                });
            },300)

        }


        if ($window.fbq){
            //console.log('fb')
            fbq('track', 'PageView')
        }

        if(window.yaCounter){
            if(to.name=='thanksPage'){
                window.yaCounter.reachGoal(toParams.id);
                window.yaCounter.hit($location.path())
            }
        }

        /*if(from.name=='stuffs.stuff' && to.name=='stuffs' && ($rootScope.srollPosition||$rootScope.srollPosition==0) && toParams.categoryUrl=='category'){
            console.log('$rootScope.srollPosition',$rootScope.srollPosition)
            $timeout(function(){
                window.scrollTo(0, $rootScope.srollPosition);
            },1000)
        }*/
        /*if(from.name=='stuffs.stuff' && to.name=='stuffs' && toParams.categoryUrl=='category'){
            $timeout(function(){
                $location.replace();
            },1000)
        }*/



        if (to.name=='home') {
            seoContent.setDataHomePage();
        }
        $rootScope.endLoadStuffs=true;
        //console.log(JSON.stringify(global.get('titles').val.title))
    });
    $rootScope.$on('$stateChangeError', function(event,toState, toParams, fromState, fromParams, error) {
           console.log(error);
        });

    $rootScope.$on('$allDataLoaded',function(e,data){
        //console.log('$allDataLoaded');
        $rootScope.endLoadStuffs=true;
    });

    $rootScope.$on('InitiateCheckout',function () {
        if($window.fbq){
            fbq('track', 'InitiateCheckout');
        }
    })
    $rootScope.$on('AddToCart',function () {
        //console.log($window.fbq)
        if($window.fbq){
            fbq('track', 'AddToCart');
        }

        if(typeof dataLayer!== 'undefined'){
            setTimeout(function(){
                dataLayer.push({'event': 'AddToCart'});
            },300)

        }
    })
    $rootScope.$on('Purchase',function (event, data) {
        if($window.fbq){
            fbq('track', 'Purchase', data);
        }
    })
    $rootScope.$on('CompleteRegistration',function (event, data) {
        if($window.fbq){
            fbq('track', 'CompleteRegistration');
        }
    })

    /*$rootScope.$on('$allImagesLoadedInHomePage',function(){
        $(function () { objectFitImages() });
    });*/
    var scrollbarWidth=0;
    var scrolled=0;
    var padding_right=angular.element($document[0].body).css('padding-right').split('px')
    var padding_rightM=[];
    var nav = angular.element($document.find('.navbar-fixed-top'))
    var styleSheet,ng_pageslide_body_closed;
    $timeout(function () {
        scrollbarWidth = (window.innerWidth-$(document).width());
        if(padding_right && padding_right[0]){
            if(Number.isInteger(Number(padding_right[0]))){
                padding_right= Number(padding_right[0])
            }else{
                padding_right=0
            }
        }else{
            padding_right=0;
        }
        nav.each(function(i,n){
            if(n){
                padding_rightM[i]=angular.element(n).css('padding-right').split('px')
                if(padding_rightM[i] && padding_rightM[i][0]){
                    if(Number.isInteger(Number(padding_rightM[i][0]))){
                        padding_rightM[i]= Number(padding_rightM[i][0])
                    }else{
                        padding_rightM[i]=0
                    }
                }else{
                    padding_rightM[i]=0;
                }
            }
        })

        //console.log(padding_right)

        //document.styleSheets[0].addRule('body.ng-pageslide-body-closed::before', 'height: 7777px', 0);
        //console.log(document.styleSheets)
        try{
            if(document.styleSheets && document.styleSheets.length){
                for(var i =0;i<document.styleSheets.length;i++){
                    if(document.styleSheets[i].cssRules && document.styleSheets[i].cssRules.length){
                        for(var j =0;j<document.styleSheets[i].cssRules.length;j++){

                            if(document.styleSheets[i].cssRules[j].selectorText && document.styleSheets[i].cssRules[j].selectorText.indexOf('body.ng-pageslide-body-closed::before')>-1){
                                /*console.log(document.styleSheets[i].cssRules[j])
                                 styleSheet=document.styleSheets[i];*/
                                ng_pageslide_body_closed=document.styleSheets[i].cssRules[j]
                                //break;
                            }
                        }
                    }
                }
            }
        }catch (err){

        }

    },500)




    //console.log(document.styleSheets[0])

    $rootScope.$on('modalOpened',function(e,data){
        var height=$($document[0].body).height()
        if(nav && nav.each){
            nav.each(function(i,n){
                if(n){
                    $(n).css('padding-right',scrollbarWidth+padding_rightM[i])
                }
            })
        }
        angular.element($document[0].body).css('overflow-y','hidden')
        angular.element($document[0].body).css('padding-right',scrollbarWidth+padding_right)

        if(ng_pageslide_body_closed && ng_pageslide_body_closed.style){
            ng_pageslide_body_closed.style.height=height+'px';
        }

        /*if(styleSheet && styleSheet.cssRules){
            for(var i=0;i<styleSheet.cssRules.length;i++){
                if(styleSheet.cssRules[i].selectorText && styleSheet.cssRules[i].selectorText.indexOf('body.ng-pageslide-body-closed::before')>-1){

                    //styleSheet.cssRules[i].style.height='9999px'
                    console.log(styleSheet.cssRules[i])
                }
            }
        }*/


        /*if(iPhone){
            scrolled = window.pageYOffset || document.documentElement.scrollTop;
            angular.element($document[0].body).css('position','fixed')
            angular.element($document[0].body).css('top',-(scrolled+16))
        }*/
    });
    $rootScope.$on('modalClosed',function(e,data){
        angular.element($document[0].body).css('overflow-y','auto')
        angular.element($document[0].body).css('padding-right',padding_right)
        if(nav && nav.each){
            nav.each(function(i,n){
                if(n){
                    $(n).css('padding-right',padding_rightM[i])
                }
            })
        }
        $timeout(function () {
            if(ng_pageslide_body_closed && ng_pageslide_body_closed.style){
                ng_pageslide_body_closed.style.height='auto'
            }

        },800)
        //console.log(padding_rightM)
        /*if(iPhone){
            angular.element($document[0].body).css('position','static');
            window.scrollTo( 0, scrolled );
        }*/

    });
    /*$rootScope.$on('closeMenu',function () {
        console.log('closeMenu')
    })*/
    var openMenuDelay;
    $rootScope.checkedMenuChange=function(field,val){
        if(openMenuDelay){return}
        openMenuDelay=true;
        console.log(field,val)
        if(val){
            $rootScope.$emit('modalOpened')
            $rootScope.$broadcast('openMenu')
        }else{
            $rootScope.$emit('modalClosed')
            $rootScope.$broadcast('closeMenu')
        }
        $rootScope.checkedMenu[field]=val;
        $timeout(function () {
            openMenuDelay=false;
        },500)
    }

    function _logged(){
        var id=(global.get('user').val)?global.get('user').val._id:null;
        $rootScope.$broadcast('logged');
        //console.log('???????????????????')
        /*socket.emit('getUser:data',{
            user:id,
            seller:global.get('store').val.seller._id,
            store:global.get('store').val._id
        })*/
       // return;
        /*$user.save({update:'coupons'},{_id:global.get('user' ).val._id,coupons:[]},function(res){

        },function(err){
            if(err){console.log(err)}
        });*/
    }
    /*socket.on('newMessage',function(data){
        var dd = angular.copy(data)
        $rootScope.$broadcast('newChatMessage',dd)
        data.count=1;
        $rootScope.soundChat.play();
        //setChatMessagesCount(data);

    })
    socket.on('getUser',function(){
        var id=(global.get('user').val)?global.get('user').val._id:null;
        socket.emit('getUser:data',{
            user:id,
            seller:global.get('store').val.seller._id,
            store:global.get('store').val._id
        })
    })*/

    //set global variables *********
    global.set('iPadVerticalWidth',770);
    global.set('iPadHorizontalWidth',1024);
    //*****************************
    //console.log('run init1')
    var clickForOpenChat;
    function _openChatWitget(field){
        //console.log('field',field)
        //console.log('$rootScope.checkedMenu[field]',$rootScope.checkedMenu[field])
        if(clickForOpenChat){return}
        clickForOpenChat=true;
        $rootScope.checkedMenuChange(field,!$rootScope.checkedMenu[field])
        //$rootScope.checkedMenu[field]=!$rootScope.checkedMenu[field];
        setTimeout(function(){
            clickForOpenChat=false;
        },200)
    }

    function setInitData(dataFromServer){
        var store=dataFromServer[0],
            crawler=dataFromServer[1],
            local=dataFromServer[2],
            mobile=dataFromServer[3],
            tablet=dataFromServer[4],
            sections=dataFromServer[5],
            brands=brandsFromServer,//dataFromServer[6],
            stats=dataFromServer[6],
            filters=filtersFromServer,//dataFromServer[8],
            paps=dataFromServer[9],
            seopages=dataFromServer[10],
            coupons=dataFromServer[11],
            witget=dataFromServer[12],
            labels=dataFromServer[13],

            lang=dataFromServer[14],
            campaign=dataFromServer[15],
            masters=dataFromServer[16].filter(function (m) {
                return m.actived
            });
        var widthAbs=$(document.body).width()
        /*console.log('widthAbs',widthAbs)
        console.log(window.location)*/
        var addChar = '?'
        if(window.location.href.indexOf('?')>-1){
            addChar = '&'
        }
        //console.log(widthAbs<1024  && widthAbs>750  && !tablet)
        if(widthAbs<1200  && widthAbs>750  && !tablet){
            window.location.href = window.location.href+ addChar+'tablet=true';
           /* console.log(window.location.search)
            window.location.reload(true);*/
        }else if(widthAbs<=750  && !mobile){
                window.location.href = window.location.href+ addChar+'mobile=true';
                /* console.log(window.location.search)
                 window.location.reload(true);*/
        }
        var droch;
        $(window).resize(function () {
            if(droch){return}
            droch=true;
            $timeout(function(){
                droch=false
            },50)
            widthAbs=$(document.body).width()
            if(widthAbs>=1024 && (tablet || mobile)){
                var k = window.location.href.indexOf('tablet=true');
                var l = window.location.href.indexOf('mobile=true');
                if(k>-1){
                    window.location.href=window.location.href.substring(0,k-1)
                }else if (l>-1){
                    window.location.href=window.location.href.substring(0,l-1)
                }else{
                    window.location.reload(true)
                }

                //window.location.href = window.location.href + addChar+'tablet=true';
                /* console.log(window.location.search)
                 window.location.reload(true);*/
            }else if(widthAbs<1024  && widthAbs>750  && !tablet){

                var k = window.location.href.indexOf('mobile=true');
                if(k>-1){
                    window.location.href = window.location.href.substring(0,k)+'tablet=true';
                }else{
                    var addChar = '?'
                    if(window.location.href.indexOf('?')>-1){
                        addChar = '&'
                    }
                    window.location.href = window.location.href+ addChar+'tablet=true';
                }


            }else if(widthAbs<=750  && !mobile){
                var k = window.location.href.indexOf('tablet=true');
                if(k>-1){
                    window.location.href = window.location.href.substring(0,k)+'mobile=true';
                }else{

                    var addChar = '?'
                    if(window.location.href.indexOf('?')>-1){
                        addChar = '&'
                    }

                    window.location.href = window.location.href+ addChar+'mobile=true';
                }


                /* console.log(window.location.search)
                 window.location.reload(true);*/
            }
        })

        //console.log(labels)
        if(labels && labels.length){
            global.set('labels',labels)
        }

        //console.log(store.currency)


        brands.forEach(function(b){
            b.tags=b.tags.filter(function (t) {
                return t.actived
            })

        })

        // инициализация объектов для создания запроса для получения списка
        sectionClass= new SectionClass(sections)
        dQ= new DesignQuery(brands,null,filters,sectionClass)
        //************************************************************

        moment.locale(store.lang)
        //console.log(filtersFromServer)
        if(!store.seller){store.seller={}}
        //store.dontDisplayRetail=(store.seller.opt.quantity==1||!store.seller.opt.quantity)?true:false;
        if(!store.seller.opt ||(store.seller.opt && store.seller.opt.quantity<2)){
            store.seller.retail=null;
        }
        global.set('country',{country_code:'UA'});
        if(!store.seo){store.seo={}}
        store.seo.domain=store.domain?store.domain:store.subDomain;
        //store.seo.author='https://plus.google.com/u/0/106574592575126022578/posts';
        store.seo.name=store.name;
        global.set('store',store);
        global.set('seller',store.seller._id);
        //socket.emit('seller',store.seller._id)
        global.set('titles',store.seo)
        //console.log(global.get('titles' ).val,store.seo);
        //$rootScope.titles=global.get('titles');
        global.set('config',{currency:store.currency});
        global.set('currency',store.mainCurrency);
        //console.log(store.mainCurrency)
        if(!store.mainCurrency){store.mainCurrency="UAH"}
        global.set('rate',store.currency[store.mainCurrency][0]);
        if(masters && masters.length){
            masters.forEach(function(m){
                if(m.timeTable && m.timeTable.length){
                    m.timeTable.forEach(function (p) {
                        if(p.is){
                            if(p.is=='false'){p.is=false}else if(p.is=='true'){p.is=true}
                        }
                    })
                }

            })
        }
        global.set('masters',masters)
        if(masters && masters.length){
            global.set('mastersO',masters.reduce(function(o,m){o[m._id]=m;return o;},{}))
        }


        if(!crawler){
            if($auth.isAuthenticated()){
                Account.getProfile()
                    .then(function(response) {
                        //console.log(coupons)
                        global.set('user',response.data);
                        _logged()
                        //witget for coupon
                        //console.log(global.get('user').val)
                        //console.log(coupons)
                        if (global.get('user').val && coupons && coupons[0] && !coupons[0].hide){
                            if(global.get('user').val.coupons.indexOf(coupons[0]._id)<0){
                                Witget.show(coupons[0],true);
                            }else if(coupons[1] && !coupons[1].hide && global.get('user').val.coupons.indexOf(coupons[1]._id)<0){
                                Witget.show(coupons[1],true);
                            }
                        }/*else{
                            if (coupons && coupons[0] && !coupons[0].hide){
                                Witget.show(coupons[0],true);
                            }
                        }*/

                        //witget for call  обдумпть
                        for(var i=0,l=witget.length;i<l;i++){
                            if(witget[i].type!='call'){
                                Witget.show(witget[i],true)
                            }
                        }
                        /*socket.on('sellerStatus',function(data){
                            //console.log(data);
                            if(data.status && !$rootScope.witgetShowen){
                                $rootScope.witgetShowen=true;
                                if(witget && witget.length){
                                    for(var i=0,l=witget.length;i<l;i++){
                                        if(witget[i].type=='call'){
                                            if (!global.get('user').val || (global.get('user').val && witget[0].forAll)){
                                                Witget.show(witget[i],true)
                                            }
                                        }
                                    }
                                }
                            }
                        });*/

                    })
                    .catch(function(response) {
                        if(response && response.data){
                            exception.catcher(response.status)(response.data.message);
                        }
                    });
            }else{
                for(var i=0,l=witget.length;i<l;i++){
                    if(witget[i].type!='call'){
                        Witget.show(witget[i],true)
                    }
                }
                /*socket.on('sellerStatus',function(data){
                    //console.log(data);
                    if(data.status && !$rootScope.witgetShowen){
                        $rootScope.witgetShowen=true;
                        if(witget && witget.length){
                            for(var i=0,l=witget.length;i<l;i++){
                                if(witget[i].type=='call'){
                                    if (!global.get('user').val || (global.get('user').val && witget[0].forAll)){
                                        Witget.show(witget[i],true)
                                    }
                                }
                            }
                        }
                    }
                });*/
            }
        }





        global.set('crawler',crawler);
        global.set('local',local);
        global.set('mobile',mobile);
        global.set('tablet',tablet);
        global.set('lang',lang);
        //global.get('store').val.template.menu2.slideMenuSpeed
        $rootScope.slideMenuSpeed=(global.get('store').val.template.menu2 && (global.get('store').val.template.menu2.slideMenuSpeed || global.get('store').val.template.menu2.slideMenuSpeed=='0'))?global.get('store').val.template.menu2.slideMenuSpeed:'0.3'
        if(mobile){
            $rootScope.slideMenuWidth =(global.get('store').val.template.menu2.slideMenuWidth)?global.get('store').val.template.menu2.slideMenuWidth:'90%';
            //$rootScope.slideMenuWidth = '90%';
            $rootScope.checkedMenu.sizeEntryTime='100%';
            $rootScope.checkedMenu.sizeCartSlide='100%';
            //console.log($rootScope.slideMenuWidth)
        }else if(tablet){
            $rootScope.slideMenuWidth =(global.get('store').val.template.menu2.slideMenuWidth)?global.get('store').val.template.menu2.slideMenuWidth:'60%';
            //$rootScope.slideMenuWidth = '60%';
            $rootScope.checkedMenu.sizeEntryTime='80%';
            $rootScope.checkedMenu.sizeCartSlide='80%';
        }else{
            $rootScope.slideMenuWidth =global.get('store').val.template.menu2.slideMenuWidth;
            $rootScope.checkedMenu.sizeEntryTime='40%';
            $rootScope.checkedMenu.sizeCartSlide='50%';
        }
        //$rootScope.slideMenuWidth=(!mobile)?global.get('store').val.slideMenuWidth:'90%'

        global.set('sections',sections);

        var categories=[];
        sections.forEach(function(section){
            if(!section.type){
                section.type='good';
            }
            if(section.categories && section.categories.length){
                section.categories.forEach(function(c){

                    //console.log(c.linkData)
                    c.section={url:section.url,name:section.name}
                    c.linkData={groupUrl:section.url,categoryUrl:c.url,
                    searchStr:null,brand:null,brandTag:null,queryTag:null}
                })
                categories.push.apply(categories,section.categories)
            }
            if(section.child && section.child.length){
                section.child.forEach(function(subSection){
                    subSection.type=section.type;
                    if(subSection.categories && subSection.categories.length){
                        subSection.categories.forEach(function(c){
                            //console.log(c.linkData)
                            c.section={url:section.url,name:section.name,subSectionName:subSection.name,
                                subSectionUrl:subSection.url}
                            c.linkData={groupUrl:subSection.url,categoryUrl:c.url,
                                searchStr:null,brand:null,brandTag:null,queryTag:null}
                            /*var parentSection= Sections.getParentSection(c.group,true);
                            if(parentSection && parentSection.url && parentSection.url!=c.section.url){
                                c.parentGroupUrl=parentSection.url;
                            }*/
                        })
                        categories.push.apply(categories,subSection.categories)
                    }
                })
            }
        })
        global.set('categories',categories);
        var categoriesO={};
        categories.forEach(function(c){
            "use strict";
            categoriesO[c._id]=c;
        })
        global.set('categoriesO',categoriesO);
        //console.log(categories)
        /*console.log(categories)
        console.log(brands)*/
        global.set('brands',brands);
        /*if(!filters.length){
            globalSrv.getData('filters').then(function(response){
                console.log(response.data)
                global.set('filters',response.data);
                filterTags=[];
                response.data.forEach(function(filter){
                    if(filter.tags && filter.tags.length){
                        filter.tags.forEach(function (t,i) {
                            t.index=i;
                        })
                        //console.log(filter.tags)
                        filterTags.push.apply(filterTags,filter.tags)
                    }
                })
                global.set('filterTags',filterTags)
            })
        }*/
        global.set('filters',filters);


        var filtersO={}
        filters.forEach(function(f){
            filtersO[f._id]=f

        })
        global.set('filtersO',filtersO)
        var brandsO={}
        brands.forEach(function(b){
            brandsO[b._id]=b

        })
        global.set('brandsO',brandsO)



        global.set('paps',paps)
        global.set('coupons',coupons)
        global.set('seopages',seopages);
        global.set('campaign',campaign);

        $order.init('cart');
        $rootScope.order=$order.getOrder()
        $rootScope.likes={totalCount:0};
        var likes  = localStorage.get(store.subDomain+'-likes');
        if(likes && likes.length){
            $rootScope.likes.totalCount=likes.length;
        }
        /*$rootScope.cart={}
        $rootScope.cart.inCart = $order.cartCount();
        $rootScope.$watch(function(){return $order.cartCount()},function(n,o){
            if ($order.type=='cart'&&  n!==o  ){
                $rootScope.cart.inCart=n;
                $rootScope.cart.changeCartItems=true;
                $timeout(function(){
                    $rootScope.cart.changeCartItems=false;
                },600)
            }
        })*/
        var listener1 = $rootScope.$watch(function(){return $rootScope.checkedMenu.chatMenu},function(n){
            //console.log($rootScope.checkedMenu.chatMenu,n)
            if (n){
                $rootScope.globalProperty.chatMenuFist=true;
                listener1()
            }
        })
        var listener2 = $rootScope.$watch(function(){return $rootScope.checkedMenu.entryTime},function(n){
            //console.log($rootScope.globalProperty.entryTimeFist,n)
            if (n){
                $rootScope.globalProperty.entryTimeFist=true;
                listener2()
            }
        })


        global.set('models',{'Campaign':Campaign})


        global.set('cache',{});
        var functions={
            changeCurrency:_changeCurrency,
            searchStuff:_searchStuff,
            searchStuffList:_searchStuffList,
            searchLostFocus:_searchLostFocus,
            searchData:_searchData,
            searchModal:_searchModal,
            changeLocation:_changeLocation,
            changeLang:_changeLang,
            enter:_enter,
            logout:_logout,
            logged:_logged,
            witget:_witget,
            closeMenu:_closeMenu,
            openSlideMenu:_openSlideMenu,
            closeChatWitget:_closeChatWitget,
            openChatWitget:_openChatWitget,
            setRows:_setRows,
            getSection:_getSection,
            orderStuffFromHP:_orderStuffFromHP,
            action:_action,
            zoomImg:_zoomImg,
            cloneStore:_cloneStore,
            orderGroupStuffs:_orderGroupStuffs,
            bookingFromSchedule:bookingFromSchedule,
            orderStuffDirect:_orderStuffDirect
        }

        function bookingFromSchedule(entry){
            console.log(entry);
            var hour = Math.floor(entry.start/4)
            var minutes = (entry.start%4)*15
            var year = entry.date.substring(4,8)
            var month = entry.date.substring(8,10)
            var day = entry.date.substring(10)
            var entryDate = new Date(year,month,day,hour,minutes)
            return $q.when()
                .then(function(){
                    if(!global.get('user' ).val || !global.get('user' ).val._id){
                        return $user.loginOnlyPhone();
                    }else{
                        return
                    }
                })
                .then(function () {
                    if(!global.get('user').val || !global.get('user').val._id){
                        throw 'not auth'
                    }

                    if(!entry.users){
                        entry.users=[];
                    }

                    if(entry.users.some(function(u){return u._id==global.get('user' ).val._id})){
                        throw global.get('error').val.alreadyInDeal
                    }
                    var o = {
                        _id:global.get('user' ).val._id,
                        name:global.get('user' ).val.name,
                        phone:global.get('user' ).val.profile.phone,
                        email:global.get('user' ).val.email,
                    }
                    entry.users.push(o)
                    var data={users:entry.users,_id:entry._id}
                    return $http.post('/api/collections/Booking/'+entry._id+'?update=users',data)

                })
                .then(function(res){
                    //socket.emit('newRecordOnSite',{store:global.get('store').val._id,seller:global.get('store').val.seller._id})
                    $http.get('/api/newRecordOnSite/'+global.get('store').val._id+'/'+global.get('store').val.seller._id)
                    console.log("global.get('store').val.submitDateTime",global.get('store').val.submitDateTime)
                    // admin
                    if(global.get('store').val.seller.phone){
                        var dataForSend={phone:global.get('store').val.seller.phone}
                        dataForSend.userId=global.get('user' ).val._id
                        dataForSend.text=global.get('langOrder').val.recordedOn+' '+entry.stuffName.toUpperCase()+' '+global.get('langOrder').val.onn+' '+entryDate;
                        return $http.post('/api/users/sendMessageAboutDeal',dataForSend)
                    }
                })
                .then(function(res){
                    //notification отправка уведомления
                    try{
                        entry.dateForNote =moment(entryDate).format('lll');
                        var entryT = angular.copy(entry);
                        var content=CreateContent.dateTimeNote(entryT)
                        //console.log(content)
                        var o={addressee:'seller',
                            type:'dateTime',
                            content:content,
                            seller:global.get('store').val.seller._id};
                    }catch(err){
                        console.log(err)
                    }
                    return $q(function(resolve,reject){
                        $notification.save(o,function(res){
                            exception.showToaster('note', global.get('langNote').val.sent,'');
                            resolve()
                        },function(err){
                            exception.catcher('error')(err);
                            resolve()
                        } )
                    })
                })
                .then(function(res){
                    var pap = global.get('paps').val.getOFA('action','booking');
                    if(pap && pap.url){
                        $state.go('thanksPage',{id:pap.url})
                    }
                })
                .catch(function(err) {
                    console.log(err)
                    if(err){
                        exception.catcher('booking')(err);
                    }
                });

        }

        var delay;
        function _action(link,argsObj){
            //console.log(argsObj)
            if(delay){return}
            delay=true;
            $timeout(function(){delay=false},1000)
            //console.log(link)
            if(!link){return}
            if(link == "subscription"){
                _witget('subscription')
            }else if(link == "feedback"){
                _witget('feedback')
            }else if(link == "call"){
                _witget('call')
            }else if(link == "dateTime"){
                //console.log(argsObj)
                _witget('dateTime',argsObj)
            }else if(link == "subscriptionAdd"){
                _witget('subscriptionAdd')
            }else if(link == "allBonus"){
                Stuff.getAllBonus()
            }else{
                $location.path(link)
            }

        }


        function _orderStuffFromHP(url) {
            $q.when()
                .then(function(){
                    return Stuff.getItem(url)
                 })
                .then(function (stuff) {
                    //console.log(stuff)
                    if(stuff.orderType==1){
                        stuff.order()
                    }else if(stuff.orderType==2){
                        $rootScope.$broadcast('dateTime',{stuff:stuff})
                        if(!$rootScope.checkedMenu['entryTime']){
                            _openChatWitget('entryTime')
                        }
                    }else if(stuff.orderType==4){
                        stuff.getBonus()
                    }else{
                        $state.go('stuffs.stuff',{'groupUrl':'group',categoryUrl:'category',stuffUrl:stuff.url})
                    }
                })
        }
        function _orderGroupStuffs(groupStuffs){
            //onsole.log(groupStuffs)
            $order.clearCart();
            groupStuffs.stuffs.forEach(function(stuff){
                stuff.quantity=1;
                stuff.cena=stuff.price;
                stuff.sum= stuff.cena*stuff.quantity;
                $order.addItemToCart(stuff)
            })
            return $q.when()
                .then(function(){
                    if(!global.get('user' ).val || !global.get('user' ).val._id){
                        return $user.login();
                    }else{
                        return
                    }
                })
                .then(function(){
                    return $order.getShipInfo()
                })
                .then(function(){
                    $rootScope.$emit('$stateChangeStartToStuff');
                    return $order.sendOrder()
                })
                .then(function () {
                    $rootScope.$emit('Purchase',{value:$order.paySum,currency:$order.currency});
                    $rootScope.$emit('$stateChangeEndToStuff');
                    $order.reinitCart()
                    $rootScope.order=$order.getOrder();
                    $order.clearCart()
                    $rootScope.checkedMenu.cart=false
                })
                .then(function(){
                    return $user.saveProfile(global.get('user' ).val)
                })
                .catch(function(err){
                    $rootScope.$emit('$stateChangeEndToStuff');
                    if(!err){return;}
                    console.log('errerrerr ',err)
                    if(err.data){
                        var content = JSON.stringify(err.data);
                    }else{
                        var content = JSON.stringify(err, ["message", "arguments", "type", "name"]);
                    }
                    if(global.get('user').val){
                        content +="\r"+global.get('user').val.email
                    }
                    if($order.getOrder()){
                        content +="\r"+JSON.stringify($order.getOrder(), null, 4)
                    }
                    var domain=global.get('store').val.domain;
                    var o={email:['igorchugurov@gmail.com','vikachugurova@gmail.com'],content:content,
                        subject:'error in order ✔',from:  global.get('store').val.name+'<'+global.get('store').val.subDomain+'@'+domain+'>'};
                    //console.log(o)
                    $q(function(resolve,reject){$email.save(o,function(res){resolve()},function(err){resolve()} )})
                    if(err){
                        exception.catcher(global.get('langNote').val.error)(err)
                    }
                })

        }
        function _orderStuffDirect(stuff){
            //console.log(stuff)
            $order.clearCart();
            stuff.quantity=1;
            stuff.cena=stuff.price;
            stuff.sum= stuff.cena*stuff.quantity;
            $order.addItemToCart(stuff)
            return $q.when()
                .then(function(){
                    if(!global.get('user' ).val || !global.get('user' ).val._id){
                        console.log(1)
                        return $user.login();
                    }else{
                        return
                    }
                })
                .then(function(){
                    //return $order.getShipInfo('short')
                })
                .then(function(){
                    $rootScope.$emit('$stateChangeStartToStuff');
                    console.log(2)
                    return $order.sendOrder()

                })
                .then(function () {
                    $rootScope.$emit('Purchase',{value:$order.paySum,currency:$order.currency});
                    $rootScope.$emit('$stateChangeEndToStuff');
                    $order.reinitCart()
                    $rootScope.order=$order.getOrder();
                    $order.clearCart()
                    $rootScope.checkedMenu.cart=false
                })
                .then(function(){
                    return $user.saveProfile(global.get('user' ).val)
                })
                .catch(function(err){
                    $rootScope.$emit('$stateChangeEndToStuff');
                    if(!err){return;}
                    console.log('errerrerr ',err)
                    if(err.data){
                        var content = JSON.stringify(err.data);
                    }else{
                        var content = JSON.stringify(err, ["message", "arguments", "type", "name"]);
                    }
                    if(global.get('user').val){
                        content +="\r"+global.get('user').val.email
                    }
                    if($order.getOrder()){
                        content +="\r"+JSON.stringify($order.getOrder(), null, 4)
                    }
                    var domain=global.get('store').val.domain;
                    var o={email:['igorchugurov@gmail.com','vikachugurova@gmail.com'],content:content,
                        subject:'error in order ✔',from:  global.get('store').val.name+'<'+global.get('store').val.subDomain+'@'+domain+'>'};
                    //console.log(o)
                    $q(function(resolve,reject){$email.save(o,function(res){resolve()},function(err){resolve()} )})
                    if(err){
                        exception.catcher(global.get('langNote').val.error)(err)
                    }
                })

        }
        global.set('functions',functions)
        function _changeCurrency(lan){
            // установка курса для данной валюты
            //console.log(lan)
            if (global.get('config').val && global.get('config').val.currency
                && global.get('config').val.currency[lan]){
                global.set('currency',lan);
                global.set('rate',global.get('config').val.currency[lan][0])
                $order.changeCurrency(lan);
            }
            if($rootScope.checkedMenu.slideMenu){
                $rootScope.checkedMenuChange('slideMenu',false);
            }
            $rootScope.$emit('changeCurrency')
        }
        function _searchStuff(searchStr){
            if(!searchStr || searchStr.length<3){return}
            var o = {searchStr:searchStr.substring(0,20)}
            //console.log(o)
            $state.go('search',o,{reload: true,inherit: false,notify: true });
        }
        function _searchData(searchStr){
            if(!searchStr || searchStr.length<3){return}
            var o = {searchStr:searchStr.substring(0,20)}
            //console.log(o)
            $state.go('search',o,{reload: true,inherit: false,notify: true });
        }
        function _searchStuffList(searchStr){
            if(!searchStr || searchStr.length<3){
                $rootScope.globalProperty.stuffSearchList=[{name:global.get('lang').val.enterChar}];
                return}
            //console.log('_searchStuffList');

            if(!$rootScope.globalProperty.searchList){$rootScope.globalProperty.searchList=true}
            $q.when()
                .then(function () {
                    return Stuff.search(searchStr);
                })
                .then(function (res) {
                    console.log(res)
                    if(res.length){
                        res.forEach(function(s){
                           if(!s.link && s.category && s.category[0] && s.category[0].group){
                               s.link='/'+s.category[0].group.url+'/'+s.category[0].url+'/'+s.url
                               Stuff.save({update:'link'},{_id:s._id,link:s.link})
                           }

                        })
                        $rootScope.globalProperty.stuffSearchList=res;
                    }else{
                        $rootScope.globalProperty.stuffSearchList=[{name:global.get('lang').val.noResults}];
                    }
                })
                .catch(function () {
                    $rootScope.globalProperty.stuffSearchList=[{name:global.get('lang').val.noResults}];
                })

        }

        function _searchLostFocus(){
            //return;
            $timeout(function(){
                $rootScope.globalProperty.searchList=false
                $rootScope.globalProperty.stuffSearchList=[]
            },2000)

        }
        function _zoomImg(i,images,home){
            if(home){
                Stuff.zoomImg(i,images,home)
            }else{
                Stuff.zoomImg(i,images)
            }

        }

        function _cloneStore(subDomain){
            //console.log('clone store ')
            var cloneServ = $injector.get('cloneStore');
            cloneServ.clone(subDomain)
        }
        function _searchModal() {
            //console.log('dddd')
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'views/template/modal/search.html',
                windowClass:'modalProject',
                controller: function($uibModalInstance,$rootScope,global){
                    var self=this;
                    self.item=''
                    self.focus=true;
                    self.globalProperty=$rootScope.globalProperty
                    self.global=global;
                    self.ok=function(){
                        //console.log('close')
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                    $rootScope.$on('closeSearchModal',function(){
                        $uibModalInstance.dismiss();

                    })
                },
                controllerAs:'$ctrl',
            });
            modalInstance.result.then(function (item) {
                //console.log(item)
               _searchStuff(item);
            });
        }

        function _changeLocation(url){
            //console.log(url)
            //return;

            if(url=='/manage' && !global.get('store').val.cabinetFull && !global.get('store').val.owner.some(function(o){return o==global.get('user').val._id})){
                $state.go('cabinet');
                return;
            }
            $window.location.href=url;
        }
        function _changeLang(lang){
            //console.log(lang)
            if(global.get('store').lang!=lang){
                $location.search('lang',lang)
                //console.log($location.url())
                var url= $location.url()
                _changeLocation(url)

            }
        }
        function _enter(){
            if($rootScope.checkedMenu.slideMenu){
                $rootScope.checkedMenuChange('slideMenu',false);
            }
            $user.login()
        }
        function _logout(){
            $rootScope.$broadcast('logout');
            if($rootScope.checkedMenu.slideMenu){
                $rootScope.checkedMenuChange('slideMenu',false);
            }
            $auth.logout()
            $state.go('home')
            global.set('user',null)
            //socket.emit('getUser:data',{user:null})
        }

        function _witget(type,argsObj){
            //console.log(argsObj)
            //console.log(type)
            var data ={type:type}
            if(argsObj && argsObj.stuff){
                data.stuff=argsObj.stuff;
            }
            if(type=='subscription'){
                data.name=(store.texts.subscriptionName)?store.texts.subscriptionName[store.lang]:'';
                data.desc=(store.texts.subscriptionText)?store.texts.subscriptionText[store.lang]:'';
                return Witget.show(data);
            }if(type=='subscriptionAdd'){
                data.name=(store.texts.subscriptionAddName)?store.texts.subscriptionAddName[store.lang]:'';
                data.desc=(store.texts.subscriptionAddText)?store.texts.subscriptionAddText[store.lang]:'';
                return Witget.show(data);
            }else if(type=='call'){
                data.name=(store.texts.callName)?store.texts.callName[store.lang]:'';
                data.desc=(store.texts.callText)?store.texts.callText[store.lang]:'';
                return Witget.show(data);
            }else if(type=='feedback'){
                data.name=(store.texts.feedbackName)?store.texts.feedbackName[store.lang]:'';
                data.desc=(store.texts.feedbackText)?store.texts.feedbackText[store.lang]:'';
                return Witget.show(data);
            }else if(type=='dateTime'){
                //console.log("$rootScope.checkedMenu['entryTime']",$rootScope.checkedMenu['entryTime'])
                $timeout(function(){
                    $rootScope.$broadcast('dateTime',argsObj)
                },500)

                //$rootScope.globalProperty.entryStuff=(stuff)?stuff:null;
                if(!$rootScope.checkedMenu['entryTime']){
                    _openChatWitget('entryTime')
                }
                return;
            }
        }

        function _closeChatWitget(field){
            //console.log(field)
            //return;
            //console.log(field,$rootScope.checkedMenu[field],clickForOpenChat,$rootScope.checkedMenu[field] && !clickForOpenChat)
            if($rootScope.checkedMenu[field] && !clickForOpenChat){
                $rootScope.checkedMenuChange(field,false);
                //$rootScope.checkedMenu[field]=false;

            }
        }

        function _setRows(){
            var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
            //var w=1500;
            //console.log(w)
            var type = (global.get('sectionType').val)?global.get('sectionType').val:'good';
            var r = (global.get('store').val.template.stuffListType[type].rows)?global.get('store').val.template.stuffListType[type].rows:4;
            //console.log(global.get('mobile').val,global.get('store').val.template.stuffListType[type])

            /*if(global.get('store').val.template.stuffListType[type].filters &&
                !global.get('store').val.template.stuffListType[type].filtersInModal && !global.get('mobile').val && r>=2
            && ($stateParams.categoryUrl!='category' ||($stateParams.categoryUrl=='category' && global.get('store').val.template.stuffListType[type].filtersForAll)) ){
                r--;
            }*/
            //console.log(r)
            if(w>1350){
                return r
            }else if(w>global.get('iPadHorizontalWidth').val){
                return (r-1<2)?2:r-1
            }else if(w>global.get('iPadVerticalWidth').val){
                return 2;
            }else{
                return 1;
            }

        }
        function _getSection(sectionUrl,id) {
            var sections=global.get('sections').val
            if(!sections) return  null;
            var field=(id)?'_id':'url'
            for(var i=0,l=sections.length;i<l;i++){
                if(sections[i][field] && sections[i][field]==sectionUrl){
                    return sections[i];
                    break
                }
                if (sections[i].child && sections[i].child.length){
                    for(var j=0,ll=sections[i].child.length;j<ll;j++){
                        if(sections[i].child[j][field] && sections[i].child[j][field]==sectionUrl){
                            return sections[i].child[j];
                            break
                        }
                    }
                }
            }
            return null;
        }



        var clickForOpen;
        function _closeMenu(event){
            if($rootScope.checkedMenu.slideMenu && !clickForOpen){
                $rootScope.checkedMenuChange('slideMenu',false)
            }
        }
        function _openSlideMenu(){
            if(clickForOpen){return}
            clickForOpen=true;
            var v = !$rootScope.checkedMenu['slideMenu']
            $rootScope.checkedMenuChange('slideMenu',v)
            setTimeout(function(){
                clickForOpen=false;
            },200)
        }
        $timeout(function(){
            if($stateParams['action']){
                _witget($stateParams.action)
                $location.search('action',null)
            }

        },1000)

        $rootScope.contentLoaded=true;
    }
    //console.log(ngInitData)
    setInitData(ngInitData);

    var langError,langOrder,langForm,langNote;




    //console.log(global.get('langOrder').val)
    //console.log(global.get('lang').val)
    if(global.get('store').val.langError){
        global.set('langError',global.get('store').val.langError)
    }else{
        globalSrv.getData('langError').then(function(response){
            var d = {}
            if(response.data && response.data.length && response.data[1].tags){
                langError=response.data[1].tags;
                for(var k in response.data[1].tags){
                    d[k]=response.data[1].tags[k][global.get('store').val.lang]
                }
            }
            global.set('langError',d);
        })
    }
    if(global.get('store').val.langNote){
        global.set('langNote',global.get('store').val.langNote)
    }else{
        globalSrv.getData('langNote').then(function(response){
            var d = {}
            //console.log(response.data[1].tags)
            if(response.data && response.data.length && response.data[1].tags){
                langNote=response.data[1].tags;
                for(var k in response.data[1].tags){
                    d[k]=response.data[1].tags[k][global.get('store').val.lang]
                }
            }
            global.set('langNote',d);
            //console.log(global.get('langNote'))
            //console.log(global.get('store').val,global.get('langNote'))
            //return response.data
        })
    }
    if(global.get('store').val.langOrder){
        global.set('langOrder',global.get('store').val.langOrder)
    }else{
        globalSrv.getData('langOrder').then(function(response){
            var d = {}
            //console.log(response.data[1].tags)
            if(response.data && response.data.length && response.data[1].tags){
                langOrder=response.data[1].tags;
                for(var k in response.data[1].tags){
                    d[k]=response.data[1].tags[k][global.get('store').val.lang]
                }
            }
            global.set('langOrder',d);
            //console.log(global.get('langOrder'))
        })
    }

    if(global.get('store').val.langForm){
        global.set('langForm',global.get('store').val.langForm)
    }else{
        globalSrv.getData('langForm').then(function(response){
            var d = {}
            //console.log(response.data[1].tags)
            if(response.data && response.data.length && response.data[1].tags){
                langForm=response.data[1].tags;
                for(var k in response.data[1].tags){
                    d[k]=response.data[1].tags[k][global.get('store').val.lang]
                }
            }
            global.set('langForm',d);
            //console.log(global.get('langForm'))
        })

    }



    //http://api.ipstack.com/176.9.41.28?access_key=96b8e490d1ca4838c950dbe1d08d79cc
    if(global.get('store').val.ipstack){
        var urlForgetIp="http://api.ipstack.com/check?access_key="+global.get('store').val.ipstack;
        $.get( urlForgetIp ).then(
            function(result) {
                //console.log(result)
                var currencyForCountry={}
                for(var key in global.get('store').val.currency){
                    $rootScope.detectCurrency=false;
                    //console.log(key,global.get('store').val.currency[key])
                    if(global.get('store').val.currency[key] && global.get('store').val.currency[key][3] && global.get('store').val.currency[key][3].forEach){
                        $rootScope.detectCurrency=true
                        global.get('store').val.currency[key][3].forEach(function(country){
                            currencyForCountry[country]=global.get('store').val.currency[key][1]
                        })
                    }
                    if($rootScope.detectCurrency){
                        if(currencyForCountry[result.country_code]){
                            global.get('functions').val.changeCurrency(currencyForCountry[result.country_code])
                        }else if(currencyForCountry['ALLOTHER']){
                            global.get('functions').val.changeCurrency(currencyForCountry['ALLOTHER'])
                        }else{
                            $rootScope.detectCurrency=false;
                        }
                    }
                }
            }, function(err) {
                console.log(err)
            }
        );
    }



}])
.config(['$stateProvider', '$urlRouterProvider','$locationProvider','globalProvider','$authProvider','$httpProvider','$animateProvider',function ($stateProvider,$urlRouterProvider,$locationProvider,globalProvider,$authProvider,$httpProvider,$animateProvider){
/*https://github.com/angular/angular.js/issues/3613*/
    $animateProvider.classNameFilter(/^((?!(repeat-modify)).)*$/)
    $httpProvider.interceptors.push('myInterceptorService');
    //$authProvider.baseUrl=userHost;
    if(facebookAppID){
        //console.log(facebookAppID)
        $authProvider.facebook({
            clientId: facebookAppID
        });
    }
    if(googleAppID){
        //console.log(googleAppID)
        $authProvider.google({
            clientId: googleAppID
        });
    }

    if(vkAppID){
        //console.log(vkAppID)
        $authProvider.oauth2({
            name: 'vkontakte',
            url: '/auth/vkontakte',
            redirectUri:window.location.origin || window.location.protocol + '//' + window.location.host,
            clientId: vkAppID,
            authorizationEndpoint: 'http://oauth.vk.com/authorize',
            scope: 'friends, photos, email, photo_big',
            display: 'popup',
            responseType: 'code',
            requiredUrlParams: ['response_type', 'client_id', 'redirect_uri', 'display', 'scope', 'v'],
            scopeDelimiter: ',',
            v: '5.37'
        });
    }





    globalProvider.setUrl( {
             //user:'/api/users/me/',
             campaign:'/api/collections/Campaign?query={"actived":"true","dateEnd":{"$gte":'+Date.now()+'}}',
             masters:'/api/collections/Master?query={"actived":true}',
             langError:'/api/collections/Lang?query={"name":"index.error"}',
             langNote:'/api/collections/Lang?query={"name":"index.note"}',
             langOrder:'/api/collections/Lang?query={"name":"index.order"}',
             langForm:'/api/collections/Lang?query={"name":"index.form"}',
             keywords:'/api/collections/Keywords',
             filters:'/api/collections/Filter'
    });
    // инициализация глобальных переменных
    globalProvider.set('store');
    globalProvider.set('seller') // из данных магазина
    globalProvider.set('titles');//// из данных магазина
    globalProvider.set('config');// из данных магазина

    globalProvider.set('currency');// delault UAH
    globalProvider.set('rate');//1
    globalProvider.set('country');// UA

    globalProvider.set('crawler');
    globalProvider.set('user');
    globalProvider.set('local');
    globalProvider.set('mobile')
    globalProvider.set('tablet')


    globalProvider.set('sections','penging')
    globalProvider.set('section')
    globalProvider.set('categories','penging'); // from sections
    globalProvider.set('categoriesO');
    globalProvider.set('category'); // data for seoContent
    globalProvider.set('brands','penging');
    globalProvider.set('brandsO');
    globalProvider.set('filters','penging');
    globalProvider.set('filtersO');
    globalProvider.set('filterTags','penging');// from filters
    globalProvider.set('filterTagsO');
    globalProvider.set('parentSection');
    globalProvider.set('breadcrumbs');

    globalProvider.set('stats');
    globalProvider.set('paps')
    globalProvider.set('homePage')


    // will do
    globalProvider.set('newTag');
    globalProvider.set('coupon');
    globalProvider.set('campaign');
    globalProvider.set('seopages')
    globalProvider.set('currentSeopage')
    globalProvider.set('info')
    globalProvider.set('labels')
    globalProvider.set('lang')

    globalProvider.set('models')
    globalProvider.set('functions')
    globalProvider.set('masters')
    globalProvider.set('mastersO')
    globalProvider.set('iPadVerticalWidth')
    globalProvider.set('iPadHorizontalWidth')
    globalProvider.set('sectionType')
    globalProvider.set('tempContent')
    globalProvider.set('cache')
    globalProvider.set('langError')
    globalProvider.set('langNote')
    globalProvider.set('langOrder')
    globalProvider.set('langForm')
    globalProvider.set('services')
    globalProvider.set('stuffsInList')
    globalProvider.set('campaignStuffCart')
    globalProvider.set('workplaces')



    
    $locationProvider.html5Mode(true);
    $locationProvider.hashPrefix('!');
    
    $urlRouterProvider
        .when('/home','/')
        .otherwise('/404');
    $stateProvider
        .state("404", {
            url: "/404",
            templateUrl:'views/template/partials/404.html',
            controller: '404Ctrl'
        })
        .state("home", {
            url: "/?token&action",
            controller: 'homeCtrl',
        })
        .state('cart', {
            url: '/cart',
            template:'<cart-item></cart-item>',
        })
        .state('likes', {
            url: '/likes',
            template:'<stuff-list-template-campaign-list></stuff-list-template-campaign-list>'
        })
        .state('cabinet', {
            url: '/cabinet?sec',
            template:'<cabinet-item></cabinet-item>',
        })

        .state('search', {
            url: '/search?searchStr',
            template:'<search-list></search-list>',
        })
        // price component
        .state("pricegoods", {
            url: "/pricegoods",
            template:"<price-goods></price-goods>"
        })
        .state("priceservices", {
            url: "/priceservices",
            template:"<price-services></price-services>"
        })



        /*.state("subscription", {
            url: "/subscription",
            templateProvider: function(global,$http) {
                var url = 'views/'+global.get('store').val.template.folder+'/partials/subscription.html';
                return $http.get(url).then(function(tpl){return tpl.data;});
         if(store.ipstack)
         script(src='http://api.ipstack.com/check?access_key='+store.ipstack+"&callback=getDataFromIp")
            },
        })*/
        .state("unsubscription", {
            url: "/unsubscribe-done",
            templateUrl:'views/template/partials/unsubscription.html',
            controller:'unsubscriptionCtrl'
        })
        .state("thanksPage", {
            url: "/thanks/:id",
            template:"<paps-item-template></paps-item-template>"
        })


        .state("lookbook", {
            url: "/lookbook?labels",
            template:"<items-list></items-list>"
        })

        .state("stat", {
            url: "/stat?labels",
            template:'<items-list></items-list>'
        })
        .state("stat.item", {
            url: "/:id",
            template:'<items-detail></items-detail>'
        })
        .state("additional", {
            url: "/additional?labels",
            template:'<items-list></items-list>'
        })
        .state("additional.item", {
            url: "/:id",
            template:'<items-detail></items-detail>'
        })
        .state("news", {
            url: "/news?labels",
            template: '<items-list></items-list>',
        })
        .state("news.item", {
            url: "/:id",
            template: "<items-detail></items-detail>",
        })
        .state("master", {
            url: "/master?labels",
            template: '<items-list></items-list>',
        })
        .state("master.item", {
            url: "/:id",
            template: "<items-detail></items-detail>",
        })
        .state("workplace", {
            url: "/workplace?labels",
            template: '<items-list></items-list>',
        })
        .state("workplace.item", {
            url: "/:id",
            template: "<items-detail></items-detail>",
        })
        .state("info", {
            url: "/info?labels",
            template: '<items-list></items-list>',
        })
        .state("info.item", {
            url: "/:id?block",
            reloadOnSearch : false,
            template: '<items-detail></items-detail>',
        })
        .state("campaign", {
            url: "/campaign?labels",
            //abstract:true,
            template:'<items-list></items-list>'
        })
        .state("campaign.detail", {
            url: "/:id",
            template:'<items-detail></items-detail>'
            //template:'<campaign-item-template></campaign-item-template>'
        })
        .state("stuffs", {
            templateUrl: function(){ return 'views/template/partials/stuffs/stuffsNew.html' },
            url: "/:groupUrl/:categoryUrl?searchStr&queryTag&brand&brandTag&filterTag",
            reloadOnSearch : true,
        })
        .state("stuffs.stuff", {
            url: "/:stuffUrl?param1&param2&store",
            templateUrl:'views/template/partials/stuffs/stuffDetail.html',

        })

}])


//http://briantford.com/blog/angular-hacking-core
//Hacking Core Directives in AngularJS
    .config(function ($provide) {
        //return;
        function getExpressions (str) {
            var offset = 0,
                parts = [],
                left,
                right;
            while ((left = str.indexOf('{{', offset)) > -1 &&
            (right = str.indexOf('}}', offset)) > -1) {
                parts.push(str.substr(left+2, right-left-2));
                offset = right + 1;
            }

            return parts;
        }

        $provide.decorator('ngSrcDirective', function ($delegate, $parse) {
            // `$delegate` is an array of directives registered as `ngSrc`
            // btw, did you know you can register multiple directives to the same name?

            // the one we want is the first one.
            var ngSrc = $delegate[0];

            ngSrc.compile = function (element, attrs) {
                //console.log(attrs)
                var expressions = getExpressions(attrs.ngSrc);
                var getters = expressions.map($parse);

                return function(scope, element, attr) {
                    attr.$observe('ngSrc', function(value) {
                        //console.log('photoHost',photoHost,value)

                        if (getters.every(function (getter) { return getter(scope); })) {

                            /*if(value && value.indexOf('images/Store/') > -1){
                                attr.$set('src', storeHost+'/'+value);
                            }else */
                            if(value &&  value.indexOf('images/') > -1 && value.indexOf('http') < 0){
                                if(photoHost){attr.$set('src', photoHost+'/'+value);}else{attr.$set('src',value)}

                            }else {
                                attr.$set('src',value);
                            }
                        }else{
                            if(value){
                                if(value.indexOf('images/') > -1&& value.indexOf('http') < 0){
                                    if(photoHost){attr.$set('src', photoHost+'/'+value);}else{attr.$set('src',value)}
                                }else{
                                    attr.$set('src',value);
                                }
                            }
                        }
                    });
                };
            };

            // our compile function above returns a linking function
            // so we can delete this
            delete ngSrc.link;

            return $delegate;
        });
    })



//console.log('photoHost',photoHost)
var tempTitles,templateContentHTML;
function setMetaOG() {

    templateContentHTML=$('#tempContent').html()

    //templateContentHTML= document.getElementById('#tempContent')
    //console.log(templateContentHTML)
    var o={};
    o.keywords=$("meta[name='keywords']").attr("content");
    o.description=$("meta[name='description']").attr("content");
    //og
    o.title=$("meta[property='og\\:title']").attr("content")
    o.canonical=$("meta[property='og\\:url']").attr("content")
    o.image=$("meta[property='og\\:image']").attr("content")
    //console.log(o)
    tempTitles=o;




    $("meta[name='keywords']").attr("content", "{{global.get('titles').val.keywords}}");
    $("meta[name='description']").attr("content", "{{global.get('titles').val.description}}");

    //og
    $("meta[property='og\\:title']").attr("content","{{global.get('titles').val.title}}")
    $("meta[property='og\\:url']").attr("content","{{global.get('titles').val.url}}")
    $("meta[property='og\\:description']").attr("content", "{{global.get('titles').val.description}}")
    $("meta[property='og\\:image']").attr("content", "{{global.get('titles').val.image}}")

    //$("meta[name='author']").attr("{{global.get('titles').val.author}}")
    $("link[rel='canonical']").attr("href","{{global.get('titles').val.canonical}}")
    //$("link[rel='author']").attr("{{global.get('titles').val.author}}")


}


//console.log( document.cookie );
function getCookie(name) {
    var matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
}
function setCookie(name, value, options) {
    options = options || {};

    var expires = options.expires;

    if (typeof expires == "number" && expires) {
        var d = new Date();
        d.setTime(d.getTime() + expires * 1000);
        expires = options.expires = d;
    }
    if (expires && expires.toUTCString) {
        options.expires = expires.toUTCString();
    }

    value = encodeURIComponent(value);

    var updatedCookie = name + "=" + value;

    for (var propName in options) {
        updatedCookie += "; " + propName;
        var propValue = options[propName];
        if (propValue !== true) {
            updatedCookie += "=" + propValue;
        }
    }

    document.cookie = updatedCookie;
}

// это теперь в номеpage component parallax-banner
/*https://codepen.io/ArielBeninca/pen/zojIy?limit=all&page=2&q=paralax*/
/*$(document).ready(function(){
    var $window = $(window);

    $('div[data-type="background"]').each(function(i){
        var $bgobj = $(this);
        console.log(i,$bgobj)
        console.log($bgobj.offset().top)
        $(window).scroll(function() {
            console.log(i,$window.scrollTop(),$bgobj.offset().top)
            var yPos = -($window.scrollTop()/$bgobj.data('speed'));
            var coords = '50% '+ yPos + 'px';
            $bgobj.css({
                backgroundPosition: coords
            });
        });
    });
});*/
/*jQuery(document).ready(function( $ ) {
    $("#google-reviews").googlePlaces({
        placeId: 'ChIJp2QxV_sJVFMR1DEp1x_16F8' //Find placeID @: https://developers.google.com/places/place-id
        , render: ['reviews']
        , min_rating: 4
        , max_rows:4
    });
});*/



/*
 हरे कृष्ण हरे कृष्ण
 कृष्ण कृष्ण हरे हरे
 हरे रम हरे रम
 रम रम हरे हरे

 ﷲ اكبر

* */

/*AIzaSyCzzOEL5DctMotIDgUTCGJsu7YM1rEY0gA


AIzaSyCMsHKlZ_Q8-pBaTr7KjEpbcVON4GrAvg0*/








'use strict';

/* Directives */

angular.module('gmall.directives', [])


    .directive('spy',function spy() {
        return {
            restrict: 'A',
            link: link
        };

        function link(scope, element, attrs) {
            var h = $('#menu1-section').height()+$('#menu2-section').height()
            // Dom ready
            $(function () {
                if (attrs.spy === 'affix') {
                    $(element).affix({
                        offset: {
                            top: 0,
                            bottom: function(){return this.bottom = $('.footer').outerHeight(true)}

                        }
                    });
                }
            });
        }
    })




/*.directive('openShare1',function(global,$timeout){
    return {
        restrict:'A',
        link:function(scope,element,attrs){
            console.log(document.querySelector('[data-my-element]'))
            new OpenShare.share({
                type: attrs['openShare'],
                innerHTML: 'Check it out!'
            }, document.querySelector('[data-my-element]'))
        }
    }
})

    .directive('verticalAlign',function(global,$timeout){
        return {
            restrict:'A',
            link:function(scope,element,attrs){
                console.log(document.querySelector('[data-my-element]'))
                new OpenShare.share({
                    type: attrs['openShare'],
                    innerHTML: 'Check it out!'
                }, document.querySelector('[data-my-element]'))
            }
        }
    })*/


    //http://stackoverflow.com/questions/22384078/angularjs-manipulating-the-dom-after-ng-repeat-is-finished
    //AngularJS - Manipulating the DOM after ng-repeat is finished
    .directive('imageLoadWatcher', function($rootScope,$timeout) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                if (typeof $rootScope.loadCounter === 'undefined') {
                    $rootScope.loadCounter = 0;
                }
                /*element.find('img').bind('load', function() {
                    scope.$emit('$imageLoaded', $rootScope.loadCounter++);
                });*/
                $timeout(function(){
                    element.find('img').bind('load', function() {
                        scope.$emit('$imageLoaded', $rootScope.loadCounter++);
                    });
                },10)


            },
            controller: function($scope) {
                console.log($scope.$last)
                $scope.$parent.$on('$imageLoaded', function(event, data) {
                    if ($scope.$last && $scope.$index === $rootScope.loadCounter - 1) {
                        $scope.$emit('$allImagesLoaded');
                        delete $rootScope.loadCounter;
                    }
                });
            }
        };
    })
    .directive('imageLoadWatcherHomePage', function($rootScope,$timeout) {
        return {
            restrict: 'AC',
            link: function(scope, element, attrs) {
                //console.log('link imageLoadWatcherHomePage')
                var loadCounter=0,imagesQty=0;
                if (typeof $rootScope.loadCounter === 'undefined') {
                    $rootScope.loadCounter = 0;
                }
                $timeout(function(){
                    var images = element.find('img');
                    //console.log(element.find('img'))
                    imagesQty=images.length;
                    //console.log(imagesQty)
                    var send;

                    images.each(function(img){
                        //console.log(this)
                        if(!this.complete){
                            $(this).bind('load', function() {
                                loadCounter++;
                                //console.log(loadCounter)
                                if(loadCounter==imagesQty){
                                    //console.log('$allImagesLoadedInHomePage')
                                    send=true;
                                    $rootScope.$broadcast('$allImagesLoadedInHomePage');
                                    $rootScope.$emit('$allImagesLoadedInHomePage');
                                }
                            })
                        }else{
                            imagesQty--;
                        }

                    })
                    if(!imagesQty && !send){
                        $rootScope.$broadcast('$allImagesLoadedInHomePage');
                        $rootScope.$emit('$allImagesLoadedInHomePage');
                    }
                    //console.log(imagesQty)
                })

            }
        };
    })


    .directive('owlCarousel',function(global,$timeout){
        return {
            restrict:'A',
            link:function(scope,element,attrs){
                console.log('$allImagesLoaded')
                scope.$on('$allImagesLoaded', function() {
                    $(element).owlCarousel({
                        items : 2, //10 items above 1000px browser width
                        itemsDesktop : [1000,2], //5 items between 1000px and 901px
                        itemsDesktopSmall : [900,1], // betweem 900px and 601px
                        itemsTablet: [600,1], //2 items between 600 and 0
                        itemsMobile : false // itemsMobile disabled - inherit from itemsTablet option
                    });

                    setTimeout(function(){
                        $('#owl-carousel-next').click(function(){
                            $(element).trigger('owl.prev');
                        })
                        $('#owl-carousel-prev').click(function(){
                            $(element).trigger('owl.prev');
                        })
                    },500)
                });
            }
        }
    })
    .directive('owlCarouselWithAttr',function(global,$timeout){
        return {
            restrict:'A',
            scope:{},
            link:function(scope,element,attrs){
                //console.log(attrs)
                //console.log('$allImagesLoaded')
                var items =(attrs.items)?(attrs.items):1;
                var items3=3,items2=2,items1=1;
                if(items==2){
                    items3=2;
                }else if(items==1){
                    items3=1;
                    items2=1;
                }
                var loop =(attrs.loop)?(attrs.loop):false;
                var nav =(attrs.nav)?(attrs.nav):false;
                var autoplay =(attrs.autoplay)?(attrs.autoplay):false;
                if(attrs.duration && Number(attrs.duration)&& attrs.duration>1 && attrs.duration<10){
                    var autoplaytimeout=1000*Number(attrs.duration);
                }else{
                    var autoplaytimeout=3000
                }
                //console.log(items)
                setTimeout(function(){
                    $(element).owlCarousel({
                        items : items, //10 items above 1000px browser width
                        itemsDesktop : [1000,items], //5 items between 1000px and 901px
                        itemsDesktopSmall : [900,items], // betweem 900px and 601px
                        itemsTablet: [600,1], //2 items between 600 and 0
                        itemsMobile : false, // itemsMobile disabled - inherit from itemsTablet option
                        responsive:{
                            0:{
                                items:items1,
                                nav:false,
                                dots:true
                            },
                            380:{
                                items:items2,
                                nav:false,
                                dots:true
                            },
                            1068:{
                                items:items3,
                                nav:false,
                                dots:true
                            },
                            1400:{
                                items:items,
                                nav:false,
                                dots:true
                            }
                        },
                        loop:loop,
                        nav:nav,
                        autoplay:autoplay,
                        autoplayTimeout:autoplaytimeout,
                        dots:true,
                        /*nav: true,
                        navText: [
                            "&lsaquo;",
                            "&rsaquo;"
                        ]*/
                        //autoplayHoverPause:true

                    });
                    element.find('.owl-dots').click(function(){
                        console.log('stop')
                        $timeout(function () {
                            $(element).trigger('stop.owl.autoplay');
                            var carousel = $(element).data('owl.carousel');
                            carousel.settings.autoplay = false; //don't know if both are necessary
                            carousel.options.autoplay = false;
                            $('.owl-carousel').trigger('refresh.owl.carousel');

                        },900)

                    })

                    element.find('#owl-carousel-next').click(function(){
                        console.log('next')
                        $(element).trigger('owl.prev');
                        $(element).trigger('stop.owl.autoplay');


                    })
                    element.find('#owl-carousel-prev').click(function(){
                        console.log('next')
                        $(element).trigger('owl.prev');
                        $(element).trigger('stop.owl.autoplay');

                    })

                    $(element).on('mouseenter',function(e){
                        $(element).trigger('stop.owl.autoplay');

                    })

                    $(element).on('mouseleave',function(e){
                        $(element).trigger('play.owl.autoplay');
                    })
                },500)
                /*scope.$on('$allImagesLoaded', function() {
                    $(element).owlCarousel({
                        items : 2, //10 items above 1000px browser width
                        itemsDesktop : [1000,2], //5 items between 1000px and 901px
                        itemsDesktopSmall : [900,1], // betweem 900px and 601px
                        itemsTablet: [600,1], //2 items between 600 and 0
                        itemsMobile : false // itemsMobile disabled - inherit from itemsTablet option
                    });

                    setTimeout(function(){
                        element.find('#owl-carousel-next').click(function(){
                            $(element).trigger('owl.prev');
                        })
                        element.find('#owl-carousel-prev').click(function(){
                            $(element).trigger('owl.prev');
                        })
                    },500)
                });*/
            }
        }
    })


    .directive('arrowDown',['global',function(global){
        return{
            template:"<a class='nav-down animate-style' ng-click='scrollUp()'>" +
            "<span class='icon-down-img'></span></a>",
            link:function(scope,element){
                //console.log(global.get('store').val.template)
                var m1 =global.get('store').val.template.menu1
                var m2 =global.get('store').val.template.menu2
                //console.log('arrowDown')
                var visible=false;
                $(element).hide()
                scope.scrollUp=function () {
                    var arrowDown=$("#arrowDownDiv");
                    var menu1Section1=$("#menu1-section");
                    var menu1Section2=$("#menu2-section");
                    var delta=0;
                    if(m1 && m1.is && m1.fixed && m1.position == 'top' && !m1.scrollSlide){
                        delta +=menu1Section1.height()
                    }
                    if(m2 && m2.is && m2.fixed && m1.position == 'top'){
                        delta +=menu1Section2.height()
                    }


                    var target=arrowDown.offset().top + arrowDown.height()-delta;
                    $('html, body').animate({
                        scrollTop: target
                    }, 1000);
                }

                $(window).scroll(scrollFoo)
                function scrollFoo() {
                    var arrowDown=$("#arrowDownDiv")
                    //console.log(arrowDown.offset())
                    var scrolled = window.pageYOffset || document.documentElement.scrollTop;
                    //console.log(scrolled)
                    if (scrolled > 0 && visible) {
                        visible=false;
                        $(element).hide()
                    } else if(scrolled <= 0 && !visible){
                        visible=true;
                        if(arrowDown && arrowDown.offset()){
                            var offset=arrowDown.offset().top + arrowDown.height()
                            //console.log(offset,$(window).height())
                            if(offset>$(window).height()-10){
                                //console.log('show')
                                $(element).show()
                            }
                        }
                    }
                }
                setTimeout(scrollFoo,1000)

            }
        }
    }])
    .directive('removeClassByScroll',[function(){
        return{
            restrict : 'EA',
            scope:{
                className :'@removeClassByScroll'
            },
            link:function(scope,element){
                $(window).scroll(scrollHandler)
                var done = false
                function scrollHandler() {
                    console.log('scroll')
                    if(!done){
                        element.removeClass(scope.className)
                        done = true;
                    } else{
                        $(window).off("scroll", scrollHandler);
                    }
                }

            }
        }
    }])
    .directive('playVideoByHover',[function(){
        return{
            restrict : 'A',
            scope:{
            },
            link:function(scope,element){
                //console.log(element)
                $(element).mouseenter( handlerIn ).mouseleave( handlerOut );
                function handlerIn() {
                    //console.log('in ')
                    $(element).get(0).play()
                }
                function handlerOut() {

                    //console.log('out' )
                    $(element).get(0).pause()
                }
                //$(window).scroll(scrollHandler)
                /*var done = false
                function scrollHandler() {
                    console.log('scroll')
                    if(!done){
                        element.removeClass(scope.className)
                        done = true;
                    } else{
                        $(window).off("scroll", scrollHandler);
                    }
                }*/

            }
        }
    }])
    .directive('addRemoveClassByScroll',['$rootScope',function($rootScope){
        return{
            restrict : 'A',
            scope:{
                className :'@addRemoveClassByScroll'
            },
            link:function(scope,element){

                var hasClass = false
                var lastScrollTop=0;
                function scrollHandler(event) {
                    try{
                        var st = $(this).scrollTop();
                        if (st > lastScrollTop){
                           // console.log('downscroll',$(element).isOnScreen())
                            if(!hasClass && $(element).isOnScreen()){
                                element.addClass(scope.className)
                                hasClass = true;
                            }
                            // downscroll code
                        } else {
                            if(hasClass && $(element).isOnScreen()){
                                element.removeClass(scope.className)
                                hasClass = false;
                            }
                            //console.log('upscroll')
                            // upscroll code
                        }
                        lastScrollTop = st;

                    }catch (err){
                        console.log(err)
                    }
                }

                $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
                    if(to.name=='home'){
                        $(window).scroll(scrollHandler)
                    }else{
                        $(window).off('scroll',scrollHandler)
                    }
                })


            }
        }
    }])
    .directive('addRemoveClassByFirstMenu',['$rootScope',function($rootScope){
        return{
            restrict : 'A',
            scope:{
                className :'@addRemoveClassByFirstMenu'
            },
            link:function(scope,element){
                console.log('addRemoveClassByFirstMenu',scope.className)
                $rootScope.$on('hideMenu1AfterScroll', function(event, to, toParams, fromState, fromParams){
                    element.addClass(scope.className)
                })
                $rootScope.$on('showMenu1AfterScroll', function(event, to, toParams, fromState, fromParams){
                    element.removeClass(scope.className)
                })


            }
        }
    }])
    .directive('addClassByScroll',[function(){
        return{
            restrict : 'EA',
            scope:{
                className :'@addClassByScroll'
            },
            link:function(scope,element){
                $(window).scroll(scrollHandler)
                var done = false
                function scrollHandler() {
                    //console.log('scroll2')
                    if(!done){
                        element.addClass(scope.className)
                        done = true;
                    } else{
                        $(window).off("scroll", scrollHandler);
                    }
                }

            }
        }
    }])
    .directive('addClassByScrollForBlock',[function(){
        return{
            restrict : 'EA',
            scope:{
                className :'@addClassByScrollForBlock'
            },
            link:function(scope,element){
               // console.log('scope.className',scope.className)
                $(window).scroll(scrollHandler)
                var done = false
                function scrollHandler() {
                    //console.log('scroll2')
                    //console.log($(element).isOnScreen())
                    if(!done && $(element).isOnScreen()){
                        element.addClass(scope.className)
                        done = true;
                        $(window).off("scroll", scrollHandler);
                    }
                }

            }
        }
    }])

    .directive('bgVideo',function($rootScope,$timeout,global,$compile){
        return {
            restrict: 'A',
            link: function (scope, element,attrs) {
                //console.log(attrs.bgVideo)
                var  backgroundVideo = new BackgroundVideo('.bv-video', {
                    src: [
                        attrs.bgVideo
                    ]
                });
            }
        }
    })
    .directive('homePageTwoRowsContainer',function($rootScope,$timeout,global,$compile){
        return {
            restrict:'E',
            link:function(scope,element){
                scope.$ctrl={};
                scope.$ctrl.global=global;
                var m1 =global.get('store').val.template.menu1
                var m2 =global.get('store').val.template.menu2
                var menu1Section1=$("#menu1-section");
                var menu1Section2=$("#menu2-section");




                //console.log(element)
                var row1=element[0].firstChild,h1;
                var row2=element[0].lastChild,h2;
                var s = [
                    '<div></div>'
                ].join('');
                var d = angular.element(s)
                var sec = global.get("sections").val[0].url
                var katalog = global.get("lang").val.catalog
                var h = angular.element('<div class="inner"><h1><a href="/'+sec+'/category">'+katalog+'</a></h1></div>');
                var linkFn = $compile(h);
                var hc = linkFn(scope);
                var resize;
                if(!$rootScope.homePageTwoRowsContainer){

                    scope.$on('$allImagesLoadedInHomePage', function(){
                        //console.log('$allImagesLoadedInHomePage')
                        $timeout(function(){
                            initBlock();
                            $rootScope.homePageTwoRowsContainer=true;
                        },300)

                    })
                }else{
                    $timeout(function(){
                        initBlock()
                    },100)

                }

                $(window).resize(function(){
                    if(!resize){
                        resize=true;
                        $timeout(function(){
                            resize=false;
                        },50)
                        $(d).remove()
                        //console.log('resize')
                        $timeout(function(){
                            initBlock();
                        })
                    }
                })
                function initBlock(){
                    var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;
                    //console.log(width,global.get('iPadVerticalWidth').val)
                    if(width<992){
                        //console.log('?????')
                        $(d).remove()
                        return
                    }
                    h1=$(row1).height();
                    h2=$(row2).height();
                    var w = $(row2).width()+30;

                    var diff=Math.abs(h1-h2);
                    if(diff>100){
                        $(d).addClass('catalog-block')
                        $(d).append(hc);
                    }else{
                        $(d).addClass('catalog-block-mini')
                    }
                    $(d).height(diff);
                    $(d).width(w);

                    //console.log(diff)
                    if(h1>h2){
                        $(row2).append(d)
                    }else{
                        $(row1).append(d)
                    }
                    $(d).wrap('<div></div>');

                }

                scope.initActiveClass=function (i) {
                    console.log(i)
                    scope.activeClass=new Array(i)
                }
                scope.setActiveClass = function(idx){
                    console.log(scope.activeClass)
                    for(var i=0;i<scope.activeClass.length;i++){
                        if(i!==idx){
                            scope.activeClass[i]=null;
                        }else{
                            scope.activeClass[i]=true;
                        }
                    }

                }

                var deltaOfInterest;
                var lastAnimation = 0,
                quietPeriod = 400,
                    animationTime=500;

                var arr=[],iii=0;
                function init_scroll(event, delta) {


                    deltaOfInterest = delta;
                    var timeNow = new Date().getTime();
                    // Cancel scroll if currently animating or within quiet period
                    if(timeNow - lastAnimation < quietPeriod + animationTime) {
                        event.preventDefault();
                        return;
                    }

                    for(var i=0;i<arr.length;i++){
                        var d = $('#'+arr[i]).offset().top - $(window).scrollTop();
                        //console.log(i,d)
                        if(d>=0){
                            iii=i;
                            break;
                        }

                    }
                    /*arr.forEach(function (a,i) {

                        console.log(d)
                        if(d>=0 && d<200){
                            iii=i
                        }

                    })*/

                    var delta=0;
                    if(m1 && m1.is && m1.fixed && m1.position == 'top' && !m1.scrollSlide){
                        delta +=menu1Section1.height()
                    }
                    if(m2 && m2.is && m2.fixed && m1.position == 'top'){
                        delta +=menu1Section2.height()
                    }



                    if (deltaOfInterest < 0) {
                        //console.log(iii<arr.length-1,arr.length-1,iii,"el.moveDown()",arr[iii],delta)
                        if(iii<(arr.length-1)){
                            iii++
                        }
                        if(iii==arr.length-1){
                            //console.log('here')
                            try{
                                //console.log($('#'+arr[iii]).height())
                                delta = -($('#'+arr[iii]).height())
                            }catch(err){console.log(err)}
                        }
                        //console.log(iii<arr.length-1,arr.length-1,iii,"el.moveDown()",arr[iii],delta)

                        $('html, body').animate({
                            scrollTop: $("#"+arr[iii]).offset().top-delta
                        }, 700);
                    } else {
                        if(iii>0){iii--}
                        //console.log("el.moveUp()",iii,arr[iii])
                        $('html, body').animate({
                            scrollTop: $("#"+arr[iii]).offset().top-delta
                        }, 700);
                    }
                    lastAnimation = timeNow;
                }
                /*61130007438*/

                $(document).ready(function() {
                    if(global.get('store').val.scrollblock){
                        $(document).bind('mousewheel DOMMouseScroll MozMousePixelScroll', function(event) {
                            if($rootScope.$state.current.name!=='home'){return}

                            event.preventDefault();
                            var delta = event.originalEvent.wheelDelta || -event.originalEvent.detail;
                            //console.log(delta)
                            init_scroll(event, delta);
                        });
                        var divs = $(".verticalSlider").children()
                        divs.each(function (i,d) {
                            if($(d).hasClass('clearfix')){
                                $(d).remove()
                            }else if(!$(d).attr("dontScrollBlock")){
                                var id = $(d).attr("class")
                                arr.push(id)
                                $(d).attr("id",id)
                            }
                        })
                    }
                    var vs=$('.videoStuff')
                    vs.each(function (i,v) {
                        $(v).hover( hoverVideo, hideVideo );
                    })
                    function hoverVideo(e) {
                        $('video', this).get(0).play();
                    }

                    function hideVideo(e) {
                        $('video', this).get(0).pause();
                    }
                })
            }
        }
    })

    /*if(type=='header' && block.type=='menu1'&& block.BGColorOnHover && block.blockStyle[1]){
     mixinArgs+=block.blockStyle[1];
     }*/
    //mixinArgsDefine+='$hover-background-color'+':null';









    .directive('freewall',function($timeout,global){
        return {
            restrict:"C",
            link:function(scope,element){
                if(global.get('crawler').val){return}
                $timeout(function(){
                    var images = wall.container.find('.brick');
                    images.find('img').load(function() {
                        wall.fitWidth();
                    });
                    /*scope.container=$(element).mosaicflow({
                        itemSelector: '.mosaicflow-item',
                        minItemWidth: 300
                    });*/
                },200)

                var wall = new Freewall("#freewall");
                wall.reset({
                    selector: '.brick',
                    animate: true,
                    cellW: 200,
                    cellH: 'auto',
                    onResize: function() {
                        wall.fitWidth();
                    }
                });



                /*console.log(scope.container)
                $timeout(function(){
                    var elms = $('.mosaicflow-item');
                    $('.mosaicflow-item').each(function(i,value){
                        console.log(value)
                        $timeout(function(){
                            scope.container.mosaicflow('add', $(value));
                        },i*100)

                    })
                })*/

            }
        }
    })
    .directive('stuffCartMinHeight',function($timeout,global){
        return {
            restrict:"AC",
            link:function(scope,element){
                onsole.log('link stuffCartMinHeight')
                if(global.get('crawler').val){return}
                //console.log($('.stuff-list-wrapper .td-inner'))
                $timeout(function(){
                    var el=$('.stuff-list-wrapper #td-inner0');
                    //console.log(el)
                    if(el){
                        var h=$(el).height()
                        //console.log(h)
                        element.height(h)
                    }
                },1550)
                    function setHeight(){
                    //var d= scope.tableRow2[0].length-scope.tableRow2[1].length
                    var tds =element.find('td');
                    var h1=$(tds[0]).find('.td-wrapper').height();
                    var h2=$(tds[1]).find('.td-wrapper').height();
                    var d = h1-h2;
                    console.log(h1,h2)
                    if(d>0){
                        console.log('1 больше')
                    }else if(d<0){
                        console.log('2 больше');
                        d = scope.tableRow2[0].length;

                    }else if(d==0){
                        console.log('равны')
                    }

                }
            }
        }
    })
    .directive('mosaicflowItem',function($timeout){
        return {
            restrict:"C",
            link:function(scope,element){
                //console.log('link ',scope.test)
                $timeout(function(){
                    var elm = $(element);
                    //scope.container('add', elm)
                    //var elms = $('.mosaicflow__item');
                    //container.mosaicflow('add', elms);
                    //console.log(element)


                    /*$(element).mosaicflow({
                     itemSelector: '.mosaicflow__item',
                     minItemWidth: 300
                     });*/
                },2000)

            }
        }
    })




    .directive('appVersion', function (version) {
    return function(scope, elm, attrs) {
      elm.text(version);
    };
  })

 .directive('mongooseError', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs, ngModel) {
            element.on('keydown', function() {
                return ngModel.$setValidity('mongoose', true);
            });
        }
    };
})
 //AngularJS browser autofill workaround by using a directive
//http://stackoverflow.com/questions/14965968/angularjs-browser-autofill-workaround-by-using-a-directive/16800988#16800988
// Form model doesn't update on autocomplete #1460 https://github.com/angular/angular.js/issues/1460
.directive('autoFillableField', function() {
      return {
          restrict: "A",
          require: "?ngModel",
          link: function(scope, element, attrs, ngModel) {
              setInterval(function() {
                  var prev_val = '';
                  if (!angular.isUndefined(attrs.xAutoFillPrevVal)) {
                      prev_val = attrs.xAutoFillPrevVal;
                  }
                  if (element.val()!=prev_val) {
                      if (!angular.isUndefined(ngModel)) {
                          if (!(element.val()=='' && ngModel.$pristine)) {
                              attrs.xAutoFillPrevVal = element.val();
                              scope.$apply(function() {
                                  ngModel.$setViewValue(element.val());
                              });
                          }
                      }
                      else {
                          element.trigger('input');
                          element.trigger('change');
                          element.trigger('keyup');
                          attrs.xAutoFillPrevVal = element.val();
                      }
                  }
              }, 300);
          }
      };
})





.directive( 'hideSpinner', function() {
   return {
       restrict: 'A',
       scope:{hideSpinner:'='},
       link: function( scope, elem, attrs ) {    
          scope.$watch('hideSpinner',function(n,o){
            //console.log(n,o)
            if (n){
                //console.log(elem);
                $(elem).hide();
            }
          })
       }
    }
})
    .directive( 'orderFromFilter', function() {
   return {
       restrict: 'A',
       scope: {},
       transclude: true,
       bindToController: true,
       controller: filterCtrl,
       controllerAs: '$ctrl',
       link: function(scope, element, attrs, ctrl, transclude) {
           transclude(scope, function(clone) {
               element.append(clone);
           });
       }
       //template:"<div></div>"
    }
    function filterCtrl($attrs,exception,$q,Stuff) {
        var self=this;
        var filters = JSON.parse($attrs.orderFromFilter);
        var query={$and:[]};
        self.filters = filters.reduce(function (fs,item) {
            var i=0;
            item.tagsO = item.tags.reduce(function (ts,it) {
                i++;
                if(i===1){
                    query.$and.push({tags:it._id})
                    it.activeClass=true;
                }
               ts[it._id]=it;
                return ts;
            },{})
            fs[item._id]=item;
           return fs;
        },{})
        //console.log(self.filters)
        getStuff()
        self.setActiveClass=setActiveClass;
        self.decreaseQty=decreaseQty;
        self.increaseQty=increaseQty;
        function increaseQty() {
            if(self.stuff && self.stuff.quantity<1000){
                self.stuff.quantity++;
            }
            self.stuff.amazonAddToCartLink = "https://www.amazon.com/gp/aws/cart/add.html?ASIN.1="+self.stuff.asin+"&Quantity.1="+self.stuff.quantity;
        }
        function decreaseQty() {
            if(self.stuff && self.stuff.quantity>1){
                self.stuff.quantity--;
            }
        }
        self.order=order;
        function getStuff(){
            $q.when()
                .then(function () {
                    //console.log(query)
                    return Stuff.query({query:query}).$promise
                })
                .then(function (res) {
                    //console.log(res)
                    if(res && res.length){
                        res.shift();
                        self.stuff=res[0];

                        console.log(self.stuff)
                        self.stuff.quantity=1;
                        self.stuff.amazonAddToCartLink = "https://www.amazon.com/gp/aws/cart/add.html?ASIN.1="+self.stuff.asin+"&Quantity.1="+self.stuff.quantity
                        if(!self.stuff.img && self.stuff.gallery && self.stuff.gallery[0]){
                            self.stuff.img=self.stuff.gallery[0].img
                        }

                    }
                })
        }
        function setActiveClass(fId,tId) {
            //console.log(fId,tId)
            query={$and:[]}
            for(var k in self.filters){
                if(k===fId){
                    for(var k2 in self.filters[k].tagsO){
                        if(k2===tId){
                            self.filters[k].tagsO[k2].activeClass=true;
                            query.$and.push({tags:k2})
                        }else{
                            self.filters[k].tagsO[k2].activeClass=false;
                        }
                    }
                }else{
                    for(var k2 in self.filters[k].tagsO){
                        if(self.filters[k].tagsO[k2].activeClass){
                            query.$and.push({tags:k2})
                        }
                    }
                }
            }
            getStuff()
        }
        function order() {
            console.log('order')
            for(var k in self.filters){
                console.log(self.filters[k].tags.some(function(t){return t.activeClass}))
                if(!self.filters[k].tags.some(function(t){return t.activeClass})){
                    console.log(self.filters[k].name)
                    exception.showToaster('info','order','select the '+self.filters[k].name)
                    return
                }
            }
        }

    }
})



/*----------------------------------------------------*/
/*  Back Top Link
/*----------------------------------------------------*/
.directive('toTop', [function () {
    return {
        restrict: 'C',
        scope:{go:'&'},
        link: function (scope, element, iAttrs) {
            var offset = 200;
            var scrolled = window.pageYOffset || document.documentElement.scrollTop;
            if (scrolled > offset) {
                element.addClass('toTopDispalay');
            } else {
                element.addClass('toTopDispalayNone');
            }
            window.onscroll = function() {
                scrolled = window.pageYOffset || document.documentElement.scrollTop;
                if (scrolled > offset) {
                    element.addClass('toTopDispalay');
                    element.removeClass('toTopDispalayNone');
                } else {
                    element.removeClass('toTopDispalay');
                    element.addClass('toTopDispalayNone');
                }
            }
            /*element.click(function(event) {
                event.preventDefault();
                scope.go({id:'firstDiv'})
                return false;
            })*/
        }
    };
}])

.directive('pswdCheck', ['$timeout',function ($timeout) {
  return {
    require: 'ngModel',
    link: function (scope, elem, attrs, ctrl) {
      var firstPassword = '#' + attrs.pswdCheck;
        $timeout(function(){
            elem.on('keyup', function () {
                scope.$apply(function () {
                    var v = elem.val()===$(firstPassword).val();
                    ctrl.$setValidity('pswdmatch', v);
                });
            });
        },100)

    }
  }
}])

.directive('profileData',['global','User', function(global,User) {
  return {
    restrict: 'E',
    scope:{
      confirmFunction:'&',
      bottomName:'@'
    },
    templateUrl: 'mobile/views/template/profile.html',
    link: function( scope, elem, attrs ) {
      console.log('link')    
      scope.profileSave= function(formProfile) {
        scope.submittedProfile = true;
        if(formProfile.$valid) {
          scope.errors={};
          User.update(global.get('user').val,function(res){
              if (res='OK'){
                scope.submittedProfile=false;
                scope.confirmFunction();
              }
          });
        }
      };    
    }
  }
}])


    // на странице купона
    //http://plnkr.co/edit/11NIZqB3G3KYKI0OChGA?p=preview
    //http://stackoverflow.com/questions/16677304/slide-up-down-effect-with-ng-show-and-ng-animate
    .directive('sliderToggle', function($timeout,$rootScope) {
        return {
            scope:{
                sliderToggle:"="
            },
            restrict: 'AE',
            link: function(scope, element, attrs) {
                var target = element.parent()[0].querySelector('[slider]');
                attrs.expanded = false;
                $rootScope.$on('$includeContentLoaded', function(event) {
                    $timeout(function(){
                        scope.$watch('sliderToggle',function(n){
                            var content = target.querySelector('.slideable_content');
                            if(!n) {
                                content.style.border = '1px solid rgba(0,0,0,0)';
                                var y = content.clientHeight;
                                content.style.border = 0;
                                target.style.height = y + 'px';
                            } else {
                                target.style.height = '0px';
                            }
                        })
                    },10)
                });


                element.bind('click', function() {
                    if (scope.sliderToggle){return;}
                    var content = target.querySelector('.slideable_content');
                    if(!attrs.expanded) {
                        //content.style.border = '1px solid rgba(0,0,0,0)';
                        var y = content.clientHeight;
                        console.log()
                        content.style.border = 0;
                        target.style.height = y + 'px';
                    } else {
                        target.style.height = '0px';
                    }
                    attrs.expanded = !attrs.expanded;
                });
            }
        }
    })
    .directive('slider', function () {
        return {
            restrict:'A',
            compile: function (element, attr) {
                // wrap tag
                var contents = element.html();
                element.html('<div class="slideable_content" style="margin:0 !important; padding:0 !important" >' + contents + '</div>');

                return function postLink(scope, element, attrs) {
                    // default properties
                    var content = element.parent()[0].querySelector('.slideable_content');
                    attrs.duration = (!attrs.duration) ? '1s' : attrs.duration;
                    attrs.easing = (!attrs.easing) ? 'ease-in-out' : attrs.easing;
                    element.css({
                        //'overflow': 'hidden',
                        'height': '0px',
                        'transitionProperty': 'height',
                        'transitionDuration': attrs.duration,
                        'transitionTimingFunction': attrs.easing
                    });
                };
            }
        };
    })


//https://www.jsnippet.net/snippet/258/pure-javascript-slidetoggle
.directive('slideToggle11', function($timeout) {
    // в корзине применяется для сообщений о применении акции
    return {
        restrict: 'A',
        scope:{
            slideToggle:'='
        },
        link: function(scope, elem, attrs) {
            var querySelector='aaa'+guidGenerator();
            elem.addClass(querySelector)
            var div;
            $timeout(function(){
              div = document.querySelector('.'+querySelector)
              console.log(div)
            },50)
              //console.log(elem)

            
             /*attrs.$observe('slideToggle', function(n){
                //console.log(n);
                var val = scope.$eval(attrs.slideToggle);
                //console.log(val);
                if (val){} else {}
            });*/
            if (!scope.slideToggle) {
              elem.hide();
            }
            scope.$watch('slideToggle',function(n,o){
                console.log(n,o)
                if (n!=o){
                  toggleSlide(div)
                  //toggleSlide(document.querySelector('.text'));
                    //$(elem).slideToggle()
                }
            })

            
        }
    }
})
    .directive('inline', function () {
        return {
            template: '<span >' +
            '<span ng-show="!edit" ng-class="{\'redColor\':!value}">{{value||empty}}</span>' +
            '<span ng-show="!edit" ng-transclude></span>'+
            '<input ng-show="edit" style="width:{{width}}" class="input-inline" type="{{type}}" ng-model="value"/>' +
            '</span>',
            restrict: 'C',
            scope: {
                value: '=',
                empty:"@",
                type:"@",
                width:"@"
            },

            transclude: true,
            link: function (scope, element, attribs) {

                if(!scope.type){
                    scope.type='text';
                }
                if(!scope.width){
                    scope.width='80%';
                }

                /* watch for changes from the controller */
                scope.$watch('inline', function (val) {
                    scope.value = val;
                });

                /* enable inline editing functionality */
                var enablingEditing = function () {
                    scope.edit = true;

                    setTimeout(function () {
                        //console.log(element.children().children('input')[2]);
                        element.children().children('input')[2].focus();
                        element.children().children('input').bind('blur', function (e) {
                            scope.$apply(function () {
                                disablingEditing();
                            });
                        });
                    }, 100);
                };


                /* disable inline editing functionality */
                var disablingEditing = function () {
                    scope.edit = false;
                    scope.inline = scope.value;
                };


                /* set up the default */
                disablingEditing();


                /* when the element with the inline attribute is clicked, enable editing */
                element.bind('click', function (e) {

                    if ((e.target.nodeName.toLowerCase() === 'span') || (e.target.nodeName.toLowerCase() === 'img')) {
                        scope.$apply(function () { // bind to scope
                            enablingEditing();
                        });
                    }
                });

                /* allow editing to be disabled by pressing the enter key */
                element.bind('keypress', function (e) {

                    if (e.target.nodeName.toLowerCase() != 'input') return;

                    var keyCode = (window.event) ? e.keyCode : e.which;

                    if (keyCode === 13) {
                        scope.$apply(function () { // bind scope
                            disablingEditing();
                        });
                    }
                });
            }
        }
    })

    .directive('inlineTextarea', function () {
        return {
            template: '<span >' +
            '<span ng-show="!edit" ng-class="{\'redColor\':!value}">{{value||empty}}</span>' +
            '<span ng-show="!edit" ng-transclude></span>'+
            '<textarea ng-show="edit" style="width:{{width}}" class="textarea-inline" rows="{{rows}}" cols1="{{cols}}" ng-model="value">' +
            '</textarea></span>',
            restrict: 'C',
            scope: {
                value: '=',
                empty:"@",
                rows:"@",
                cols:"@"
            },

            transclude: true,
            link: function (scope, element, attribs) {

                /*if(!scope.cols){
                    scope.cols=100;
                }*/
                if(!scope.rows){
                    scope.rows=5;
                }

                /* watch for changes from the controller */
                scope.$watch('inline', function (val) {
                    scope.value = val;
                });

                /* enable inline editing functionality */
                var enablingEditing = function () {
                    scope.edit = true;

                    setTimeout(function () {
                        console.log(element.children().children('input')[2]);
                        element.children().children('input')[2].focus();
                        element.children().children('input').bind('blur', function (e) {
                            scope.$apply(function () {
                                disablingEditing();
                            });
                        });
                    }, 100);
                };


                /* disable inline editing functionality */
                var disablingEditing = function () {
                    scope.edit = false;
                    scope.inline = scope.value;
                };


                /* set up the default */
                disablingEditing();


                /* when the element with the inline attribute is clicked, enable editing */
                element.bind('click', function (e) {

                    if ((e.target.nodeName.toLowerCase() === 'span') || (e.target.nodeName.toLowerCase() === 'img')) {
                        scope.$apply(function () { // bind to scope
                            enablingEditing();
                        });
                    }
                });

                /* allow editing to be disabled by pressing the enter key */
                element.bind('keypress', function (e) {

                    if (e.target.nodeName.toLowerCase() != 'input') return;

                    var keyCode = (window.event) ? e.keyCode : e.which;

                    if (keyCode === 13) {
                        scope.$apply(function () { // bind scope
                            disablingEditing();
                        });
                    }
                });
            }
        }
    })
    .directive('ngPageslideWrapper', function ($document,$timeout,$rootScope) {
        return {
            restrict: 'A',
            link: function (scope, element, attribs) {
               console.log(element);
                var wrappedID,wrappedClass;
                $timeout(function(){
                    var queryResult = document.getElementsByTagName("body")[0]
                    wrappedID = angular.element(queryResult);
                    var queryResult1 = document.getElementsByClassName("navbar-nav")[0]
                    wrappedClass = angular.element(queryResult1);
                },200)
                $timeout(function(){
                    element.bind('mouseenter', function (event) {
                        console.log('mouseenter');
                        wrappedID.css('overflow-y','hidden')
                        wrappedID.css('margin-right','20px')
                        wrappedClass.css('margin-right','20px')
                    });

                    element.bind('mouseleave', function (event) {
                        console.log('mouseleave');
                        $rootScope.checkedMenu.m=false;
                        console.log($rootScope.checkedMenu)
                        wrappedID.css('overflow-y','scroll')
                        wrappedID.css('margin-right','0')
                        wrappedClass.css('margin-right','0')
                    });
                },300)

            }
        }
    })

    .directive('halfMenu',function($rootScope){
        return {
            link: function (scope, element, attrs) {
                if(!$){return}
                setTimeout(function(){
                    //console.log($(element).height())
                    var height=$(element).height();
                    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams){
                        if(to.name!='home' && !$(element ).hasClass('hafhMenuHeight')){
                            $(element).height(height/2)
                        }else if(to.name=='home' && $(element ).hasClass('hafhMenuHeight')){
                            $(element).height(height)
                        }
                    })
                },50)
            }
        }

    })

var guidGenerator=function() {
        var S4 = function() {
           return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
        };
        console.log((S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4()));
        return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
    }


'use strict';
    /**
    * getHeight - for elements with display:none
     */
var getHeight = function(el) {
  console.log(el)
        var el_style      = window.getComputedStyle(el),
            el_display    = el_style.display,
            el_position   = el_style.position,
            el_visibility = el_style.visibility,
            el_max_height = el_style.maxHeight.replace('px', '').replace('%', ''),

            wanted_height = 0;


        // if its not hidden we just return normal height
        if(el_display !== 'none' && el_max_height !== '0') {
            return el.offsetHeight;
        }

        // the element is hidden so:
        // making the el block so we can meassure its height but still be hidden
        el.style.position   = 'absolute';
        el.style.visibility = 'hidden';
        el.style.display    = 'block';

        wanted_height     = el.offsetHeight;

        // reverting to the original values
        el.style.display    = el_display;
        el.style.position   = el_position;
        el.style.visibility = el_visibility;

        return wanted_height;
    },


    /**
    * toggleSlide mimics the jQuery version of slideDown and slideUp
    * all in one function comparing the max-heigth to 0
     */
    toggleSlide = function(el) {
        var el_max_height = 0;

       /* if(el.getAttribute('data-max-height')) {
            // we've already used this before, so everything is setup
            if(el.style.maxHeight.replace('px', '').replace('%', '') === '0') {
                el.style.maxHeight = el.getAttribute('data-max-height');
            } else {
                el.style.maxHeight = '0';
            }
        } else {
            el_max_height                  = getHeight(el) + 'px';
            el.style['transition']         = 'max-height 0.5s ease-in-out';
            el.style.overflowY             = 'hidden';
            el.style.maxHeight             = '0';
            el.setAttribute('data-max-height', el_max_height);
            el.style.display               = 'block';

            // we use setTimeout to modify maxHeight later than display (to we have the transition effect)
            setTimeout(function() {
                el.style.maxHeight = el_max_height;
            }, 10);
        }*/


        el_max_height                  = getHeight(el) + 'px';
            el.style['transition']         = 'max-height 0.5s ease-in-out';
            el.style.overflowY             = 'hidden';
            el.style.maxHeight             = '0';
            el.setAttribute('data-max-height', el_max_height);
            el.style.display               = 'block';

            // we use setTimeout to modify maxHeight later than display (to we have the transition effect)
            setTimeout(function() {
                el.style.maxHeight = el_max_height;
            }, 10);
    }

/*document.addEventListener("DOMContentLoaded", function(event) { 

  document.querySelector('.showme').addEventListener('click', function(e) {
      toggleSlide(document.querySelector('.text'));
  }, false);
});*/








'use strict';
angular.module('gmall.controllers', [])
    .controller('404Ctrl', ['$scope','seoContent',function ($scope,seoContent) {
        //********* start titles
        seoContent.setData404();
        //********* end titles
    }])
.controller('mainFrameCtrl',['$scope','global','$witgets','$http','anchorSmoothScroll','$state','$timeout','$sce','$order','toaster','$rootScope','User','$window',function($scope,global,$witgets,$http,anchorSmoothScroll,$state,$timeout,$sce,$order,toaster,$rootScope,User,$window){
    $scope.mainFrameCtrl=this;
    $scope.mainFrameCtrl.sizeMenu='350px';
    $scope.mainFrameCtrl.scrollTo = function(id) {
        //console.log(id);
        anchorSmoothScroll.scrollTo(id);
    };
        //console.log(global.get('store' ).val)
    /*$scope.mainFrameCtrl=this;
    $scope.mainFrameCtrl.checkedMenu = false;

    $scope.mainFrameCtrl.titles=global.get('titles');*/
    // сообщение из формы обратной связи в футере
    //$scope.mainFrameCtrl.feedback={email:'',name:'',text:''}
    /*$scope.mainFrameCtrl.sendMessage = function(form){
        if ($scope.mainFrameCtrl.feedback.text.length<10){
            alert('В сообщении меньше 10 символов');
        }else{
            $scope.mainFrameCtrl.feedback.text=$scope.mainFrameCtrl.feedback.text.clearTag(1000);
            //console.log($scope.mainFrameCtrl.feedback.text);
            $scope.mainFrameCtrl.feedback.action='feedback';
            $http.post('/api/feedback',$scope.mainFrameCtrl.feedback)
                .success(function(data, status) {
                    $scope.mainFrameCtrl.feedback.text='';
                    var pap = global.get('paps').val.getObjectFromArray('action','feedback');
                    if(pap && pap.url){
                        $state.go('thanksPage',{url:pap.url})
                    } else {
                        alert('УВЕДОМЛЕНИЕ'+' сообщение отправлено');
                    }
                })
                .error(function(data, status) {
                    alert('не получается отправить сообщение, повторите отправку позже')
                });
        }
    };*/
    // поиск товара


    /*$scope.mainFrameCtrl.getTamplatePath = function(s){
        return 'views/'+global.get('store').val.template.folder+'/partials/'+s;
    }*/
    // генерация произвольного id
    /*$scope.mainFrameCtrl.guidGenerator=function() {
        var S4 = function() {
           return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
        };
        console.log((S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4()));
        return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
    }*/
    /*$scope.mainFrameCtrl.getDate=function(date){
        if (!date) return '';
        var d=new Date(date);
        var curr_date = d.getDate();
        var curr_month = d.getMonth() + 1;
        var curr_year = d.getFullYear();
        return   curr_date+ "-" + curr_month+ "-" +curr_year 
    }
    */
}])
.controller('homeCtrl', ['$scope','$q','$resource','global','seoContent','anchorSmoothScroll','$anchorScroll','News','exception','$auth','$stateParams','$location','Account','HomePage',
    function ($scope,$q,$resource,global,seoContent,anchorSmoothScroll,$anchorScroll,News,exception,$auth,$stateParams,$location,Account,HomePage) {

        if($stateParams.token){
            $auth.setToken({data:{token:$stateParams.token}})
            $location.search('token',null);
            if($auth.isAuthenticated()){
                Account.getProfile()
                    .then(function(response) {
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                    })
                    .catch(function(response) {
                        if(response && response.data){
                            exception.catcher(response.status)(response.data.message);
                        }
                    });
            }
        }
        $anchorScroll();
}])
    .controller('unsubscriptionCtrl',['$scope','global','Account','$q','$state','exception','toaster',function($scope,global,Account,$q,$state,exception,toaster){
        /*if(!global.get('user').val){
            global.get('functions').val.enter();
        }
        */
        /*global.get('functions').val.enter();
        $scope.unsubscription=function(){
            $q.when()
                .then(function(){
                    return Account.unsubscription();
                })
                .then(function(){
                    toaster.pop({
                        type: 'success',
                        title: 'Рассылка',
                        body: 'Вы успешно отписалить от рассылки!'
                    });
                    $state.go('home')
                })
                .catch(function(err){
                    err=err.data||err;
                    exception.catcher('отписка от рассылки')(err)
                })

        }
*/
    }])






'use strict';

/* Filters */

angular.module('gmall.filters', [])
    .filter('interpolate', function (version) {
    return function (text) {
      return String(text).replace(/\%VERSION\%/mg, version);
    }
  })
    .filter("trustUrl", ['$sce', function ($sce) {
        return function (recordingUrl) {
            return $sce.trustAsResourceUrl(recordingUrl);
        };
    }])
    .filter('unsafe', function($sce) {
        return function(val) {
            return $sce.trustAsHtml(val);
        };
    })

.filter('cut', function () {
    return function (value, wordwise, max, tail) {
        if (!value) return '';

        max = parseInt(max, 10);
        if (!max) return value;
        if (value.length <= max) return value;
        //console.log(value,typeof  value)
        value = value.substr(0, max);
        if (wordwise) {
            var lastspace = value.lastIndexOf(' ');
            if (lastspace != -1) {
                value = value.substr(0, lastspace);
            }
        }

        return value + (tail || '');
    };
})
.filter('filterSection', function (version) {
    // http://toddmotto.com/everything-about-custom-filters-in-angular-js/
    return function(input,sectionId) {
        if (sectionId==0)
            return input
        else {
            var temp=[];
            angular.forEach(input, function (item) {
                if (item.category== sectionId) {
                    temp.push(item);
                }
            });
            return temp;
        }
    };
})
.filter('filterSizeIs',function(){
    return function (items,tags) {
        if (!items) return [];
        return items.filter(function (item) {
            var is;
            if (tags.length){
                //console.log('the length is and need to check');
                tags.forEach(function(el){
                   if (el && el.length){
                        //console.log('the length of array tags is and need to check');
                        is=!el.some(function(tag){
                            if (item.store[tag] && !item.store[tag].quantity) {
                                //console.log('no elements');
                                return true;
                            }else {
                                return false
                            }
                        })
                        //return true;
                   } else {
                        //console.log('no length in array tags');
                        is=true
                        //return true;
                   } 
                });
                
            } else {
                //console.log('no length in array filters');
                is=true;
                //return true;
            }
            //console.log(is);
            return is;
          
        });
    };    
})
.filter('filterSorts', function() {
    return function(sorts) {
        if (!sorts) return [];
        for(var key in sorts){
            if(!sorts[key].quantity || sorts[key].quantity==0){
                delete sorts[key]
            }
        }
        return sorts
    }

})


'use strict';

angular.module('gmall.services', []).
     value('version', '0.1')

/*.factory('socket', ['socketFactory',function (socketFactory) {
    return socketFactory();


}])*/


/*.factory('User', function ($resource) {
    return $resource('/api/users/:id/:email', {
        id: '@id'
    }, { //parameters default
        update: {
            method: 'PUT',
            params: {
                id:'profile',
                email:''
            }
        },
        updateCoupon: {
            method: 'PUT',
            params: {
                id:'coupon',
                email:''
            }
        },
        updatePswd: {
            method: 'PUT',
            params: {
                // id:'profile'
                id:'changepswd',
                email:''
            }
        },
        resetPswd: {
            method: 'POST',
            params: {
                id:'resetpswd',
                email:'@email'
            }
        },
        get: {
            method: 'GET',
            params: {
                id:'me',
                email:''
            }
        }
    });
})*/


// вынести в отдельный модуль
.factory('$witgets',['$resource', function ($resource) {
    /*//$scope.mainFrameCtrl={openWitget:false,witgetFile:'',witget:null,slides:[]}
    var Witget=$resource('/api/collections/Witget/:id',{id:'@id'});
    //$scope.openWitget=false;
    //$scope.contextWitget='myChildView.html';
    // сохраняем в нем таймауты для витжетов
        var witTimeout={};
        function callWitget(w){
            Witget.get({id: w._id},function(wit){
                witTimeout[w._id]=$timeout(function(){
                    openWitget(wit)
                }, w.deffer*500);
                witTimeout[w._id].then(
                    function() {

                        console.log( "Timer resolved!", Date.now() );

                    },
                    function() {

                        console.log( "Timer rejected!", Date.now() );

                    }
                );

            });
        }

        $scope.saveShownWitget = function(w){

            //console.log('ghbdtn');
            if (w.write){
                $http.get('api/lead/'+ w._id,function (res) {
                    //console.log(res);
                }, function (err) {
                    console.log(err);
                })
            }
            $scope.mainFrameCtrl.openWitget=false;
            $scope.mainFrameCtrl.witget=null;

        }

        function openWitget(w){
            //console.log(w);
            if (!$scope.mainFrameCtrl.openWitget) {
                $scope.mainFrameCtrl.openWitget=true;;
                if (w.type==1){
                    openWitgetModal(w)
                }else {
                    console.log('??');

                    //$scope.mainFrameCtrl.contextWitget= w.desc;
                    $scope.mainFrameCtrl.witget=  w;
                }

                //var sdf='<div ng-controller="ignupCtrl"></div>'
                //$compile(sdf)($scope);
            } else {
                witTimeout[w._id]=$timeout(function(){
                    openWitget(w)
                }, w.deffer*500);
            }
        }*/
    return {
        set:function(witgets){
            console.log(witgets);
            witgets.forEach(function(el){callWitget(el)});
        }
    }
}])


.service('anchorSmoothScroll', function(){
    
    this.scrollTo = function(eID) {

        // This scrolling function 
        // is from http://www.itnewb.com/tutorial/Creating-the-Smooth-Scroll-Effect-with-JavaScript
        
        var startY = currentYPosition();
        var stopY = elmYPosition(eID);
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
            scrollTo(0, stopY); return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        speed = 7;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
            for ( var i=startY; i<stopY; i+=step ) {
                setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
                leapY += step; if (leapY > stopY) leapY = stopY; timer++;
            } return;
        }
        for ( var i=startY; i>stopY; i-=step ) {
            setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
            leapY -= step; if (leapY < stopY) leapY = stopY; timer++;
        }
        
        function currentYPosition() {
            // Firefox, Chrome, Opera, Safari
            if (self.pageYOffset) return self.pageYOffset;
            // Internet Explorer 6 - standards mode
            if (document.documentElement && document.documentElement.scrollTop)
                return document.documentElement.scrollTop;
            // Internet Explorer 6, 7 and 8
            if (document.body.scrollTop) return document.body.scrollTop;
            return 0;
        }
        
        function elmYPosition(eID) {
            var elm = document.getElementById(eID);
            if (!elm) return 0;
            var y = elm.offsetTop;
            var node = elm;
            while (node.offsetParent && node.offsetParent != document.body) {
                node = node.offsetParent;
                y += node.offsetTop;
            } return y;
        }

    };
    
})
    //

// http://kvasnicak.info/2014/08/04/lazy-loading-images-using-angularjs
angular.module('lazyImg', []).service(
    'scrollAndResizeListener', function($window, $document, $timeout) {
        var id = 0,
            listeners = {},
            scrollTimeoutId,
            resizeTimeoutId;

        function invokeListeners() {
            var clientHeight = $document[0].documentElement.clientHeight,
                clientWidth = $document[0].documentElement.clientWidth;

            for (var key in listeners) {
                if (listeners.hasOwnProperty(key)) {
                    listeners[key](clientHeight, clientWidth); // call listener with given arguments
                }
            }
        }


        $window.addEventListener('scroll', function() {
// cancel previous timeout (simulates stop event)
            $timeout.cancel(scrollTimeoutId);

// wait for 200ms and then invoke listeners (simulates stop event)
            scrollTimeoutId = $timeout(invokeListeners, 200);
        });


        $window.addEventListener('resize', function() {
            $timeout.cancel(resizeTimeoutId);
            resizeTimeoutId = $timeout(invokeListeners, 200);
        });


        return {
            bindListener: function(listener) {
                var index = ++id;

                listeners[id] = listener;

                return function() {
                    delete listeners[index];
                }
            }
        };
    }
);

angular.module('lazyImg').directive(
    'imageLazySrc', function ($document, scrollAndResizeListener,$timeout) {
        return {
            restrict: 'A',
            link: function ($scope, $element, $attributes) {
                //console.log($attributes)
                var listenerRemover;
                //console.log($element.offsetParent())
                function isInView(clientHeight, clientWidth) {
                    //console.log($attributes.imageLazySrc);
// get element position
                    var imageRect = $element[0].getBoundingClientRect();
                    //console.log($element[0],imageRect,clientHeight,$attributes.imageLazySrc)
                    //console.log((imageRect.top >= 0 && imageRect.bottom <= (clientHeight+250)) )
                    //console.log(imageRect,clientHeight+600,(imageRect.top >= 0 && imageRect.bottom <= (clientHeight+600) && imageRect.top!=imageRect.bottom && !$element[0].src))
                    //if (imageRect.top >= 0 && imageRect.bottom <= (clientHeight+600) && imageRect.top!=imageRect.bottom && !$element[0].src) {
                    if (imageRect.top >= 0 && imageRect.bottom <= (clientHeight+600)  && !$element[0].src) {
                        //console.log($element[0],imageRect,clientHeight,$attributes.imageLazySrc)
                        //console.log($attributes.imageLazySrc)

                        //$attributes.$set('ng-src',$attributes.imageLazySrc)
                        $element[0].src = $attributes.imageLazySrc; // set src attribute on element (it will load image)
                        //console.log($attributes.name,$element[0].src)

// unbind event listeners when image src has been set
                        listenerRemover();
                    }
                }

// bind listener
                listenerRemover = scrollAndResizeListener.bindListener(isInView);

// unbind event listeners if element was destroyed
// it happens when you change view, etc
                $element.on('$destroy', function () {
                    listenerRemover();
                });


// explicitly call scroll listener (because, some images are in viewport already and we haven't scrolled yet)
                $timeout(function(){
                    isInView(
                        $document[0].documentElement.clientHeight,
                        $document[0].documentElement.clientWidth
                    );
                },300)

            }
        };
    }
);
'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('userSign',userSign)
        .directive('subscriptionAdd',subscriptionAdd)
        .directive('userSignShort',userSignShort)
        .directive('userLogin',userLogin)
        .directive('userLoginPhone',userLoginPhone)
        .directive('enterButton',enterButton);

    function userSign(){
        return {
            scope: {
                closeModal:'&',
                toaster:'@',
                social:'=',

            },
            bindToController: true,
            controller: signupCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/sign.html',
            restrict:'AE'
        }
    }
    function subscriptionAdd(){
        return {
            scope: {
                closeModal:'&',
                toaster:'@',
            },
            bindToController: true,
            controller: signupCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/subscriptionAdd.html',
            restrict:'AE'
        }
    }
    function userSignShort(){
        return {
            scope: {
                toaster:'@',
                buttonName:'@'
            },
            bindToController: true,
            controller: signupCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/sign-short.html',
            restrict:'AE'
        }
    }
    function userLogin(){
        return {
            scope: {
                closeModal:'&',
                modalClose:"&",
                toaster:'@',
                social:'=',
                successFoo:'&',

            },
            bindings: {
                toaster:'<',
                social:'=',
                successFoo:'&',
            },


            bindToController: true,
            controller: loginCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/login.html',
            restrict:'AE'
        }
    }
    function userLoginPhone(){
        return {
            scope: {
                closeModal:'&',
                modalClose:"&",
                toaster:'@',
                social:'=',
                successFoo:'&',

            },
            bindings: {
                toaster:'<',
                social:'=',
                successFoo:'&',
            },


            bindToController: true,
            controller: loginPhoneCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/loginPhone.html',
            restrict:'AE'
        }
    }
    function enterButton(){
        return {
            scope: {
                toaster:'@',
            },
            bindToController: true,
            controller: enterButtonCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/enter-button.html',
            restrict:'AE'
        }
    }
    signupCtrl.$inject=['$scope','$auth', 'toaster','$q','global','Account','$state','Stuff','CreateContent','$email','exception','$user','$http','$timeout','sendPhoneFactory'];
    function signupCtrl($scope,$auth, toaster,$q,global,Account,$state,Stuff,CreateContent,$email,exception,$user,$http,$timeout,sendPhoneFactory){
        var self=this;
        self.global=global;
        self.formData=(global.get('store').val.bonusForm)?global.get('store').val.bonusForm:{phone:true,fields:[]}
        self.user={email:'',profile:{},addInfo:{},subscription:true};
        if(!self.buttonName){self.buttonName=='подписаться!!'}
        //console.log(self.buttonName)

        self.block='email';
        console.log(global.get('store').val.typeOfReg)
        if(global.get('store').val.typeOfReg){
            if(global.get('store').val.typeOfReg.phone){
                self.typeOfReg='phone';
                self.block='phone'
            }else if(global.get('store').val.typeOfReg.email){
                self.typeOfReg='email'
            }
        }


        self.signup=signup;
        self.authenticate=authenticate;
        self.sendCodeToPhone=sendCodeToPhone;
        self.verifyCode=verifyCode;



        $scope.$watch(function () {
            return self.user.profile.phone
        },function(n,o){
            console.log(n,o)
            self.phoneExist=false;
            /*if(n){
                regitration(n)
            }*/
        });


        function checkUserEntry(phone) {
            var query = {phone:phone};
            return $q.when()
                .then(function () {
                    //return $user.checkPhoneForExist(phone)
                    return $user.getItem(phone,'profile.phone')
                })
                .then(function(res){
                    //console.log(res)
                    if(res){return res}else{return null}
                })
        }



        function createUser(name,phone) {
            var email= phone+'@gmall.io'
            var user = {email:email,name:name,profile:{phone:phone,fio:name}};
            return $auth.signup(user)
                .then(function(response) {
                    console.log(response)
                    if(response && response.data &&  response.data.token){
                        if(response.data.token=='update'){
                            throw null;
                        }else{
                            $auth.setToken(response);
                            return Account.getProfile()
                        }
                    } else{
                        throw response;
                    }

                })
                .then(function(response){
                    console.log(response)
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                    }

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('new client')(err)
                    }
                })

        }
        function sendCodeToPhone(phone) {
            var o = {phone:phone}
            self.sendCodeDisable=true;
            $q.when()
                .then(function () {
                    return $http.post('/api/users/sendSMS',o)
                })
                .then(function () {
                    exception.showToaster('info','send code','success')
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send code')(err)
                    }
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })

        }


        function sendCodeToPhone__(phone) {
            if(self.sendCodeDisable){return}
            self.sendCodeDisable=true;
            //console.log(self.phone)
            if(!phone){
                return;
            }
            $q.when()
                .then(function(){
                    return sendPhoneFactory.checkPhone(phone)
                })
                .then(function (res) {
                    //console.log(res)
                    if(!res || !res._id){
                        return $user.newUserByPhone(self.name,self.phone)
                    }
                })
                .then(function () {
                    console.log('sendPhoneFactory.sendCodeToPhone(self.phone)')
                    return sendPhoneFactory.sendCodeToPhone(self.phone)
                })
                .then(function () {
                    self.codeSent=true;
                    exception.showToaster('info','send code','success')
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send code')(err)
                    }
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
        }
        function verifyCode(form) {
            if(self.sendVerifyCodeDisable){return}
            if(form.$invalid){return}
            if(!self.code || !self.user.profile.phone){
                return;
            }
            self.sendVerifyCodeDisable=true;
            $q.when()
                .then(function () {
                    return sendPhoneFactory.verifyCode(self.code,self.phone)
                })
                .then(function (response) {
                    //console.log(response)
                    exception.showToaster('info','verify code','success')
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000);
                    if(response && response.data &&  response.data.token){
                        $auth.setToken(response);
                        return Account.getProfile()
                    }else{throw 'wrong response'}
                })
                .then(function(response){
                    $scope.$emit('closeWitget')
                    toaster.info(global.get('langNote').val.authComplite);
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }

                })
                .catch(function (err) {
                    self.wrongCode=true;
                    global.set('user',null);
                    if(err){
                        exception.catcher('verify code')(err)
                    }
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000)
                })
        }


        function regitration(phone) {
            $q.when()
                .then(function () {
                    return checkUserEntry(phone)
                })
                .then(function (res) {
                    if(res && res._id){
                        self.phoneExist=true;
                        sendCodeToPhone()
                        //self.currentBlock=5;
                        return null
                    }else{
                        return createUser(self.user.name,phone)
                    }

                })
                .catch(function (err) {
                    exception.catcher(global.get('lang').val.error)(err)
                    //console.log(err)
                })
        }


        function signup(form) {

            console.log(form)
            if(!form.$valid){return}

            if(self.typeOfReg=='phone' && self.user.profile.phone){
                return regitration(self.user.profile.phone)
            }


            self.user.store=global.get('store').val._id;
            $auth.signup(self.user)
                .then(function(response) {
                    //console.log(response)
                    if(response && response.data &&  response.data.token){
                        if(response.data.token=='update'){
                            $scope.$emit('closeWitget')
                            toaster.info(response.data.message);
                            throw null;
                        }else{
                            $auth.setToken(response);
                            var msg = global.get('langNote').val.subscriptionSuccess;
                            toaster.info(msg);
                            return Account.getProfile()
                        }
                    } else{
                        throw response;
                    }

                })
                .then(function(response){
                    $scope.$emit('closeWitget')
                    //console.log(response)
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                        if($state.current.name=='cart' || $state.current.name=='stuffs.stuff'){return}
                        //if(!response){return;}
                        var states= $state.get();
                        //console.log(global.get('paps'))
                        if(global.get('paps') && global.get('paps').val && states.some(function(state){return state.name=='thanksPage'})){
                            var pap = global.get('paps').val.getOFA('action','subscription');
                            if(pap && pap.url){
                                $state.go('thanksPage',{id:pap.url})
                            }
                        }
                    }

                })
                .then(function () {
                    if(self.user.type=="subscription"){
                        //console.log(global.get('coupons').val);
                        if(global.get('coupons') && global.get('coupons').val && global.get('coupons').val.length){
                            return [{imgs:global.get('coupons').val}]
                        }
                    }else if (self.user.type=='subscriptionAdd'){
                        var p={page:0,rows:100};
                        var query={$and:[{orderType:4},{actived:true}]}
                        return Stuff.getList(p,query);
                    }

                })
                .then(function (stuffs) {
                    //console.log(stuffs)
                    if(!stuffs || !stuffs.length){return}
                    if(!self.user || !self.user.email){throw 'нет email'}
                    var content=CreateContent.emailBonus(stuffs);
                    var bonus=global.get('langNote').val.getBonus;
                    var domain=global.get('store').val.domain;
                    var o={email:self.user.email,content:content,
                        subject:bonus+' ✔',from:  '<promo@'+domain+'>'};
                    return $q(function(resolve,reject){
                        $email.save(o,function(res){
                            exception.showToaster('note','',global.get('langNote').val.emailSent);
                            resolve()
                        },function(err){
                            exception.showToaster('warning',global.get('langNote').val.error,err.data)
                            resolve()
                        } )
                    })
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('signup')(err);
                    }
                })
        };
        function authenticate(provider) {
            $auth.authenticate(provider)
                .then(function(response) {
                    $scope.$emit('closeWitget')
                    $auth.setToken(response);
                    var msg = global.get('langNote').val.subscriptionSuccess;
                    toaster.info(msg);

                    /*if(self.toaster){
                        toaster.success('Вы успешно подписались с помощью ' + provider + '!');
                    }*/
                })
                .then(function(){
                    return Account.getProfile()
                })
                .then(function(response){
                    console.log(response)
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }
                })
                .catch(function(error) {
                    if(self.toaster){
                        if (error.error) {
                            // Popup error - invalid redirect_uri, pressed cancel button, etc.
                            toaster.error(error.error);
                        } else if (error.data) {
                            // HTTP response error from server
                            toaster.error(error.data.message, error.status);
                        } else {
                            toaster.error(error);
                        }
                    }

                });
        };



    }
    loginCtrl.$inject=['$scope','$auth', 'toaster','$q','global','Account','exception','sendPhoneFactory','$timeout'];
    function loginCtrl($scope,$auth, toaster,$q,global,Account,exception,sendPhoneFactory,$timeout){


        var self=this;
        self.$onInit=function () {
            //console.log($scope.toaster,$scope.successFoo,self.toaster)
        }
        //console.log(global.get('store').val)
        self.block='email';
        if(global.get('store').val.typeOfReg){
           if(global.get('store').val.typeOfReg.phone){
                self.typeOfReg='phone';
               self.block='online'
           }else if(global.get('store').val.typeOfReg.email){
               self.typeOfReg='email'
           }
        }
        //console.log(self.typeOfReg)
        self.login=login;
        self.authenticate=authenticate;
        self.sendCodeToPhone=sendCodeToPhone;
        self.verifyCode=verifyCode;
        self.global=global;
        self.phone=null;
        self.codeSent;
        self.sendCodeDisable;
        self.sendVerifyCodeDisable;
        function login(form){
            //console.log(form)
            if(!form.$valid){retrun}
            self.user.store=global.get('store').val._id;
            $auth.login(self.user)
                .then(function(data) {
                    console.log(data)
                    //console.log($scope.successFoo,self.toaster)
                    if(self.successFoo){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }

                    if(self.toaster){
                        toaster.info(global.get('langNote').val.authComplite);
                    }
                })
                .then(function(){
                    //console.log(Account.getProfile())
                    return Account.getProfile()
                })
                .then(function(response){
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }
                    $timeout(function () {
                        $scope.$emit('closeWitget')
                    },50)

                })
                .catch(function(err) {
                    global.set('user',null);
                    if(self.toaster){
                        exception.catcher('login')(err);
                    }
                });
        }
        function authenticate(provider) {
            $auth.authenticate(provider)
                .then(function(response) {
                    //console.log(response)
                    $scope.$emit('closeWitget')
                    if(self.successFoo && typeof self.successFoo=='function'){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }

                    var msg = global.get('langNote').val.authComplite;
                    toaster.info(msg);
                })
                .then(function(){
                    return Account.getProfile()
                })
                .then(function(response){
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }
                })
                .catch(function(error) {
                    if(self.toaster){
                        if (error.error) {
                            // Popup error - invalid redirect_uri, pressed cancel button, etc.
                            toaster.error(error.error);
                        } else if (error.data) {
                            // HTTP response error from server
                            toaster.error(error.data.message, error.status);
                        } else {
                            toaster.error(error);
                        }
                    }

                });
        };
        function sendCodeToPhone() {
            if(self.sendCodeDisable){return}
            self.sendCodeDisable=true;
            console.log(self.phone)
            if(!self.phone){
                return;
            }
            $q.when()
                .then(function () {
                    return sendPhoneFactory.sendCodeToPhone(self.phone)
                })
                .then(function () {
                    self.codeSent=true;
                    exception.showToaster('info','send code','success')
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send code')(err)
                    }
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
        }
        function verifyCode(form) {
            if(self.sendVerifyCodeDisable){return}
            if(form.$invalid){return}
            /*if(!self.phone){
                exception.catcher('verify code')('phone is empty')
            }
            if(!code){
                exception.catcher('verify code')('code is empty')
            }*/
            if(!self.code || !self.phone){
                return;
            }
            self.sendVerifyCodeDisable=true;
            $q.when()
                .then(function () {
                    return sendPhoneFactory.verifyCode(self.code,self.phone)
                })
                .then(function (response) {
                    //console.log(response)
                    exception.showToaster('info','verify code','success')
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000);
                    if(response && response.data &&  response.data.token){
                        $auth.setToken(response);
                        return Account.getProfile()
                    }else{throw 'wrong response'}
                })
                .then(function(response){
                    if(self.successFoo){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }
                    $scope.$emit('closeWitget')
                    if(self.toaster){
                        toaster.info(global.get('langNote').val.authComplite);
                    }
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }

                })
                .catch(function (err) {
                    self.wrongCode=true;
                    global.set('user',null);
                    if(err){
                        exception.catcher('verify code')(err)
                    }
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000)
                })
        }


    };
    function enterButtonCtrl(toaster,$q,Account,global,exception){
        var self=this;
        self.global=global;
        self.getEnterButton=getEnterButton;
        function getEnterButton(form){
            if(form.$invalid){return}
            $q.when()
                .then(function(){
                    self.blockButton=true;
                    setTimeout(function(){
                        self.blockButton=false
                    },1000)
                    return Account.getEnterButton(self.user)
                })
                .then(function(response) {

                    if(self.toaster){
                        toaster.info(response.data.message);
                    }
                })
                .catch(function(err) {
                    //console.log(err)
                    if(err){
                        exception.catcher(global.get('langNote').val.error)(err);
                    }

                });
        }
    };

    loginPhoneCtrl.$inject=['$scope','$auth', 'toaster','$q','global','Account','exception','sendPhoneFactory','$timeout','$user'];
    function loginPhoneCtrl($scope,$auth, toaster,$q,global,Account,exception,sendPhoneFactory,$timeout,$user){


        var self=this;
        self.$onInit=function () {
            //console.log($scope.toaster,$scope.successFoo,self.toaster)

        }
        //console.log(global.get('store').val)
        if(global.get('store').val.typeOfReg && global.get('store').val.typeOfReg.oferta){
            self.oferta=true;

        }
        if(global.get('store').val.texts && global.get('store').val.texts.oferta){
            self.ofertaText=global.get('store').val.texts.oferta[global.get('store').val.lang];
        }

        self.sendCodeToPhone=sendCodeToPhone;
        self.verifyCode=verifyCode;
        self.global=global;
        self.phone=null;
        self.name='';
        self.codeSent;
        self.sendCodeDisable;
        self.sendVerifyCodeDisable;




        function sendCodeToPhone(form) {
            if(form.$invalid){
                return
            }

            if(self.sendCodeDisable){return}
            self.sendCodeDisable=true;
            //console.log(self.phone)
            if(!self.phone){
                return;
            }
            $q.when()
                .then(function(){
                    return sendPhoneFactory.checkPhone(self.phone)
                })
                .then(function (res) {
                    //console.log(res)
                    if(!res || !res._id){
                        return $user.newUserByPhone(self.name,self.phone,self.confirmCondition)
                    }
                })
                .then(function () {
                    console.log('sendPhoneFactory.sendCodeToPhone(self.phone)')
                    return sendPhoneFactory.sendCodeToPhone(self.phone)
                })
                .then(function () {
                    self.codeSent=true;
                    exception.showToaster('info','send code','success')
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send code')(err)
                    }
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
        }
        function verifyCode(form) {
            if(self.sendVerifyCodeDisable){return}
            if(form.$invalid){return}
            /*if(!self.phone){
             exception.catcher('verify code')('phone is empty')
             }
             if(!code){
             exception.catcher('verify code')('code is empty')
             }*/
            if(!self.code || !self.phone){
                return;
            }
            self.sendVerifyCodeDisable=true;
            $q.when()
                .then(function () {
                    return sendPhoneFactory.verifyCode(self.code,self.phone)
                })
                .then(function (response) {
                    //console.log(response)
                    exception.showToaster('info','verify code','success')
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000);
                    if(response && response.data &&  response.data.token){
                        $auth.setToken(response);
                        return Account.getProfile()
                    }else{throw 'wrong response'}
                })
                .then(function(response){
                    if(self.successFoo){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }
                    $scope.$emit('closeWitget')
                    if(self.toaster){
                        toaster.info(global.get('langNote').val.authComplite);
                    }
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }

                })
                .catch(function (err) {
                    self.wrongCode=true;
                    global.set('user',null);
                    if(err){
                        exception.catcher('verify code')(err)
                    }
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000)
                })
        }


    };

})()

'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('pswdCheck', ['$timeout',function ($timeout) {
            return {
                require: 'ngModel',
                link: function (scope, elem, attrs, ctrl) {
                    var firstPassword = '#' + attrs.pswdCheck;
                    $timeout(function(){
                        elem.on('keyup', function () {
                            scope.$apply(function () {
                                var v = elem.val()===$(firstPassword).val();
                                console.log(v)
                                ctrl.$setValidity('pswdmatch', v);
                            });
                        });
                    },100)

                }
            }
        }])
        .directive('passwordMatch', function() {
            return {
                require: 'ngModel',
                scope: {
                    otherModelValue: '=passwordMatch'
                },
                link: function(scope, element, attributes, ngModel) {
                    ngModel.$validators.compareTo = function(modelValue) {
                        //console.log(modelValue,scope.otherModelValue)
                        if((modelValue==='undefined'||modelValue===''||!modelValue)
                            &&(scope.otherModelValue==='undefined'||scope.otherModelValue===''||!scope.otherModelValue)){
                            return true;
                        }
                        return modelValue === scope.otherModelValue;
                    };
                    scope.$watch('otherModelValue', function() {
                        ngModel.$validate();
                    });
                }
            };
        })
        .directive('passwordStrength', function() {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function(scope, element, attrs, ngModel) {
                    var indicator = element.children();
                    var dots = Array.prototype.slice.call(indicator.children());
                    var weakest = dots.slice(-1)[0];
                    var weak = dots.slice(-2);
                    var strong = dots.slice(-3);
                    var strongest = dots.slice(-4);

                    element.after(indicator);

                    element.bind('keyup', function() {
                        var matches = {
                                positive: {},
                                negative: {}
                            },
                            counts = {
                                positive: {},
                                negative: {}
                            },
                            tmp,
                            strength = 0,
                            letters = 'abcdefghijklmnopqrstuvwxyz',
                            numbers = '01234567890',
                            symbols = '\\!@#$%&/()=?¿',
                            strValue;

                        angular.forEach(dots, function(el) {
                            el.style.backgroundColor = '#ebeef1';
                        });

                        if (ngModel.$viewValue) {
                            // Increase strength level
                            matches.positive.lower = ngModel.$viewValue.match(/[a-z]/g);
                            matches.positive.upper = ngModel.$viewValue.match(/[A-Z]/g);
                            matches.positive.numbers = ngModel.$viewValue.match(/\d/g);
                            matches.positive.symbols = ngModel.$viewValue.match(/[$-/:-?{-~!^_`\[\]]/g);
                            matches.positive.middleNumber = ngModel.$viewValue.slice(1, -1).match(/\d/g);
                            matches.positive.middleSymbol = ngModel.$viewValue.slice(1, -1).match(/[$-/:-?{-~!^_`\[\]]/g);

                            counts.positive.lower = matches.positive.lower ? matches.positive.lower.length : 0;
                            counts.positive.upper = matches.positive.upper ? matches.positive.upper.length : 0;
                            counts.positive.numbers = matches.positive.numbers ? matches.positive.numbers.length : 0;
                            counts.positive.symbols = matches.positive.symbols ? matches.positive.symbols.length : 0;

                            counts.positive.numChars = ngModel.$viewValue.length;
                            tmp += (counts.positive.numChars >= 8) ? 1 : 0;

                            counts.positive.requirements = (tmp >= 3) ? tmp : 0;
                            counts.positive.middleNumber = matches.positive.middleNumber ? matches.positive.middleNumber.length : 0;
                            counts.positive.middleSymbol = matches.positive.middleSymbol ? matches.positive.middleSymbol.length : 0;

                            // Decrease strength level
                            matches.negative.consecLower = ngModel.$viewValue.match(/(?=([a-z]{2}))/g);
                            matches.negative.consecUpper = ngModel.$viewValue.match(/(?=([A-Z]{2}))/g);
                            matches.negative.consecNumbers = ngModel.$viewValue.match(/(?=(\d{2}))/g);
                            matches.negative.onlyNumbers = ngModel.$viewValue.match(/^[0-9]*$/g);
                            matches.negative.onlyLetters = ngModel.$viewValue.match(/^([a-z]|[A-Z])*$/g);

                            counts.negative.consecLower = matches.negative.consecLower ? matches.negative.consecLower.length : 0;
                            counts.negative.consecUpper = matches.negative.consecUpper ? matches.negative.consecUpper.length : 0;
                            counts.negative.consecNumbers = matches.negative.consecNumbers ? matches.negative.consecNumbers.length : 0;

                            // Calculations
                            strength += counts.positive.numChars * 4;
                            if (counts.positive.upper) {
                                strength += (counts.positive.numChars - counts.positive.upper) * 2;
                            }
                            if (counts.positive.lower) {
                                strength += (counts.positive.numChars - counts.positive.lower) * 2;
                            }
                            if (counts.positive.upper || counts.positive.lower) {
                                strength += counts.positive.numbers * 4;
                            }
                            strength += counts.positive.symbols * 6;
                            strength += (counts.positive.middleSymbol + counts.positive.middleNumber) * 2;
                            strength += counts.positive.requirements * 2;

                            strength -= counts.negative.consecLower * 2;
                            strength -= counts.negative.consecUpper * 2;
                            strength -= counts.negative.consecNumbers * 2;

                            if (matches.negative.onlyNumbers) {
                                strength -= counts.positive.numChars;
                            }
                            if (matches.negative.onlyLetters) {
                                strength -= counts.positive.numChars;
                            }

                            strength = Math.max(0, Math.min(100, Math.round(strength)));

                            if (strength > 85) {
                                angular.forEach(strongest, function(el) {
                                    el.style.backgroundColor = '#008cdd';
                                });
                            } else if (strength > 65) {
                                angular.forEach(strong, function(el) {
                                    el.style.backgroundColor = '#6ead09';
                                });
                            } else if (strength > 30) {
                                angular.forEach(weak, function(el) {
                                    el.style.backgroundColor = '#e09115';
                                });
                            } else {
                                weakest.style.backgroundColor = '#e01414';
                            }
                        }
                    });
                },
                template: '<span class="password-strength-indicator"><span></span><span></span><span></span><span></span></span>'
            };
        })
})()



angular.module('gmall.services')
    .factory('myInterceptorService', function($q,$rootScope,$templateCache) {
        var keys=$templateCache.getKeys();
        //console.log(keys)
        var store=globalStoreId;
        //var zip = new JSZip();
        //var global= $rootScope.global;
        //console.log(globalCrawler)
        try{
            var crawler=(globalCrawler)?globalCrawler:null;
        }catch(err){
            var crawler=null;
        }

        return {
            // optional method
            'request': function(config) {
                if(keys.indexOf(config.url)>-1){
                    return config;
                }

                /*if(config.url.indexOf('uib/template/') > -1
                    || config.url.indexOf('.tpl.html') > -1 || config.url.indexOf('rzSliderTpl.html') > -1|| config.url.indexOf('tooltip/tooltip-popup.html') > -1
                    || config.url.indexOf('template/modal/backdrop.html') > -1 || config.url.indexOf('template/modal/window.html') > -1
                    || config.url.indexOf('mainSection.html') > -1 || config.url.indexOf('subSection.html') > -1
                    || config.url.indexOf('template/tabs/tabset.html') > -1 || config.url.indexOf('template/tabs/tab.html') > -1
                    || config.url.indexOf('template/datepicker/day.html') > -1 || config.url.indexOf('template/datepicker/month.html') > -1|| config.url.indexOf('template/datepicker/year.html') > -1
                    || config.url.indexOf('template/popover/popover.html') > -1 || config.url.indexOf('template/datepicker/datepicker.html') > -1|| config.url.indexOf('template/datepicker/popup.html') > -1){
                    return config;
                }*/
                config.params = config.params || {};
                if(!config.params.store){
                    config.params.store=store
                }
                if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                    config.params.lang=$rootScope.global.get('store').val.lang
                }
                return config;
                /***************************************************************************************************************************************/

               //console.log('config.url' ,config.url)
               //console.log('config.url' ,config.url,config.url.indexOf('api/users/checkemail') > -1)
                if(!config.url){
                    console.log('config.url' ,config.url)
                    return config;
                }
                if(config.url.indexOf('socket.io') > -1){
                    console.log('config.url',config.url)
                    config.url=socketHost+config.url;
                }

                if(config.url.indexOf('api/collections/') > -1 && (config.url.indexOf('http://')<0 && config.url.indexOf('https://')<0)){
                    /*if(config.url.indexOf('api/collections/Dialog') > -1 ||
                        config.url.indexOf('api/collections/Chat') > -1 ||
                        config.url.indexOf('api/collections/Notification') > -1){
                        config.url=socketHost+config.url;
                    }else if(config.url.indexOf('api/collections/User') > -1 || config.url.indexOf('api/collections/SubscribtionList') > -1){
                        config.url=userHost+config.url;
                    }else if(config.url.indexOf('api/collections/Store') > -1 ||
                        config.url.indexOf('api/collections/Template') > -1 ||
                        config.url.indexOf('api/collections/Config') > -1 ||
                        config.url.indexOf('api/collections/Lang') > -1 ||
                        config.url.indexOf('api/collections/Redirect') > -1 ||
                        config.url.indexOf('api/collections/BlocksConfig') > -1 ||
                        config.url.indexOf('api/collections/CustomLists') > -1||
                        config.url.indexOf('api/collections/Seller') > -1){
                        config.url=storeHost+config.url;
                    }else if(config.url.indexOf('api/collections/Order') > -1 ||
                        config.url.indexOf('api/collections/Booking') > -1 ||
                        config.url.indexOf('api/collections/CartInOrder') > -1 ){
                        config.url=orderHost+config.url;
                    } else if(config.url.indexOf('deleteFilesFromStuff')>-1 || config.url.indexOf('fileGalleryDelete') > -1){
                        config.url=photoUpload+config.url;
                    }else{
                        config.url=stuffHost+config.url;
                    }*/
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }

                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                } else if (config.url.indexOf('/api/orders') > -1){

                    //config.url=orderHost+config.url;
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if (config.url.indexOf('/api/stuffs') > -1){

                    //config.url=stuffHost+config.url;
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if (config.url.indexOf('/api/sendEmail') > -1 || config.url.indexOf('api/users/') > -1 ){

                    //config.url=userHost+config.url;
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if(config.url.indexOf('auth/signupOrder') > -1){
                    //config.url=userHost+config.url;

                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    /*if($rootScope.global && $rootScope.global.get('store') &&$rootScope.global.get('store').val &&$rootScope.global.get('lang') &&
                        $rootScope.global.get('store').val.lang!=$rootScope.global.get('lang').val){
                        config.params.lang=$rootScope.global.get('lang').val
                    }*/
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if(config.url.indexOf('http://')>-1 || config.url.indexOf('https://')>-1){
                    // for photos
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if(config.url.indexOf('/api/chatMessagesList/')>-1 || config.url.indexOf('/api/notificationList/')>-1){
                    // for photos
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }
                else if (config.url.indexOf('views/template/partials') > -1){
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }
                //console.log(config.url)
                if(crawler){
                    config.params = config.params || {};
                    config.params.subDomain=crawler;
                }
                return config;
            },
            response: function(response){
                // do something for particular error codes
                if(response.status === 500){
                    // do what you want here
                }
               //console.log(response)

                return response;
                //console.log("response && response.config && response.config.url && response.config.url.split",response && response.config && response.config.url && response.config.url.split)
                if(response && response.config && response.config.url && response.config.url.split){

                    //var u = response.config.url.split('api/collections')
                    var u = response.config.url.split(stuffHost)
                    //console.log(u)
                    if(u.length >1 ){
                        var u1 =  u[1].split('api/collections')
                        //console.log(u1)
                        if(u1[1]){
                            var u2 = u1[1].split('/')
                            //console.log(u2)
                            if(u2.length==2){
                                console.log('unzip',response.config.url,response)
                                /*var gunzip = new Zlib.Gunzip(response.data);
                                response.data = gunzip.decompress();*/
                                return response;
                            }else{
                                return response;
                            }

                        }else{
                            return response;
                        }

                    }else{
                        return response;
                    }


                }else{
                    return response;
                }



            }
        };
    });

angular.module('gmall')
    .config(['$provide', function($provide) {

    // monkey-patches $templateCache to have a keys() method
    $provide.decorator('$templateCache', [
        '$delegate', function($delegate) {

            var keys = [], origPut = $delegate.put;

            $delegate.put = function(key, value) {
                origPut(key, value);
                keys.push(key);
            };

            // we would need cache.peek() to get all keys from $templateCache, but this features was never
            // integrated into Angular: https://github.com/angular/angular.js/pull/3760
            // please note: this is not feature complete, removing templates is NOT considered
            $delegate.getKeys = function() {
                return keys;
            };

            return $delegate;
        }
    ]);
}]);

angular
    .module('gmall.exception',[])
    .factory('exception', exception);

exception.$inject = ['toaster'];

function exception(toaster) {
    var service = {
        catcher: catcher,
        showToaster:showToaster
    };
    return service;

    function catcher(header) {
        //console.log(message)
        return function(err) {
            if(err){
                if(typeof err=='object'){
                    if(err.data){
                        err=err.data
                    }
                    if(err.message){
                        err=err.message
                    }else if(err.error){
                        err=err.error
                    }
                }
            }else{
                err='ошибка'
            }
            //console.log(message,reason)
            toaster.pop('error',header,err);
            //logger.error(message, reason);
        };
    }
    function showToaster(type,title,content){
        if(typeof content=='object'){
            if(content.message){
                content=content.message
            }else if(content['error']){
                content=content['error']
            }
        }
        toaster.pop({
            type: type,
            title: title,
            body: content,
            bodyOutputType: 'trustedHtml',
            showCloseButton: true,
            delay:15000,
            closeHtml: '<button>Close</button>'
        });
    }
}

angular
    .module('gmall.services')
    .factory('Confirm', confirmFactory);

confirmFactory.$inject = ['$q','$uibModal'];

function confirmFactory($q,$uibModal) {
    return service;
    function service(question){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                template : [
                    '<div class="modal-header">',
                        '<h3 class="modal-title text-center" ng-bind="$ctrl.question"></h3>',
                        '<span class="cancel-confirm"><span class="icon-cancel-img" ng-click=""$ctrl.cancel()"></span></span>',

                    '</div>',
                    '<div class="modal-body confirm">',
                    '<form ng-submit="$ctrl.ok()">'+
                    '<button autofocus class="btn btn-project btn-border  btn-modal pull-right" type="reset" ng-click="$ctrl.cancel()">{{global.get("langOrder").val.noo}}</button>',
                    '<button class="btn btn-project btn-modal pull-left" type="submit">{{global.get("langOrder").val.yes}}</button>',
                    '</form>'+
                    '<div class="clearfix"></div>',
                    '</div>'
                ].join(''),
                controller: function($uibModalInstance,question){
                    var self=this;
                    self.question=question
                    self.ok=function(){
                        $uibModalInstance.close();
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size: 'sm',
                resolve:{
                    question: function(){return question}
                }
            }
            $uibModal.open(options).result.then(function () {resolve();},function () {reject()});
        })


    }
}

'use strict';
angular.module('gmall.services')
.factory('seoContent',['global','$stateParams','$resource','$state','$q','$sce',function(global,$stateParams,$resource,$state,$q,$sce){
    //-- Variables --//
    var regex=/<\/?[^>]+(>|$)/g;
    var seoPageId;
    //-- Methods --//
    function setTitles(titles,res,noFooter){
        //console.log(titles)
        if (res.seo){
            if (res.seo.title){titles.title=res.seo.title}else titles.title=res.name;
            if (res.seo.description){titles.description=res.seo.description} else titles.description=res.desc.replace(regex, '').substring(0,200);
            if (res.seo.keywords){titles.keywords=res.seo.keywords}
        } else {
            titles.title=res.name;
            //console.log(res)
            if (res.desc){
                titles.description=res.desc.replace(regex, '').substring(0,200);
            } else {
                titles.description='';
            }
        }
        if (!noFooter){
            if (res.desc) {
                titles.pageDescFooter=res.desc.replace(regex, '');
            } else {
                titles.pageDescFooter='';
            }
            titles.namePageFooter=res.name;
        }



    }
    function getSeoPageInfo(titles){
        if (!global.get('seopage') || !global.get('seopage').val ||!global.get('seopage').val.length) return false;
        if (!titles.pageDescFooter){titles.pageDescFooter=''}
        if (!titles.namePageFooter){titles.namePageFooter=''}
        for(var i=0,l=global.get('seopage').val.length;i<l;i++){
            var a = global.get('seopage').val[i];
            console.log(a.url);
            var href= (titles.canonical)?titles.canonical:$location.path();
            //console.log(href);
            if (('http://'+global.get('store').val.domain+a['url'])==href){
                //console.log('есть');
                return a._id;

            }
        }
        return false;
    }
    function setSeopageData(){
        return $q.when()
            /*.then(function () {
                return global.get('langForm').val
            })*/
            .then(function(){
                //console.log(global.get('currentSeopage').val)
                return (global.get('currentSeopage'))?global.get('currentSeopage').val:null
            })
            .then(function(seopage){
                //console.log('seopage - ',seopage)
                if(seopage){
                    var sp=global.get('seopages').val.getOFA('link',seopage.link)
                }
                //console.log('sp - ',sp)
                if(sp && !sp.data){
                    if(!seopage.seo){
                        seopage.seo={}
                    }
                    seopage.seo.keywords=seopage.keywords.map(function(w){
                        return w.word
                        /*if(global.get('keywords').val){
                            w= global.get('keywords').val.getOFA('_id',w);
                            if(w){return w.word}{
                                return null;
                            }
                        }else{
                            return null;
                        }*/
                    }).filter(function(w){return w;}).join(',')
                    sp.data=seopage
                    // console.log('sp.data=seopage')
                }
                //console.log(seopage)
                if(seopage){
                    var titlesTemp = global.get('titles').val;
                    var titles=seopage.seo;
                    if(titlesTemp && titlesTemp.image && !titles.image){
                        titles.image=titlesTemp.image;
                    }
                    titles.title=seopage.title||titles.title
                    titles.domain=global.get('store').val.link;
                    titles.author=titles.author||global.get('store').val.name;
                    titles.canonical=$sce.trustAsResourceUrl(global.get('store').val.link+seopage.link);
                    seopage.desc&&(titles.desc=seopage.desc);
                    global.set('titles',titles)
                    //console.log(titles)
                    return true;
                }

            })
    }
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    return {
        setSeopageData:setSeopageData,
        setDataCatalog:function(){
            //console.log('????????')
            setSeopageData()
                .then(function(seopageIs){
                    //console.log($state.current.name)
                    if($state.current.name=='stuffs.stuff'){
                        return
                    }
                    //console.log('seopageIs',seopageIs)
                    if(seopageIs){return}
                    //console.log(global.get('category').val)
                    var s= global.get('store').val;
                    var titles={};
                    if(global.get('category') && global.get('category').val){
                        var c=global.get('category').val;
                        //console.log(c)
                        if(global.get('langForm').val){
                            //titles.title=capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+c.section.name+' '+c.name+' '+global.get('lang').val.inn+' '+s.name+' '+global.get('lang').val.onLine+'.'
                            titles.title=c.section.name+' '+c.name+' '+global.get('lang').val.inn+' '+s.name+'.'
                            titles.description= capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+global.get('lang').val.onLine+' '+
                                c.section.name+' '+c.name+' '+global.get('lang').val.inn+' '+s.name+','+s.location;
                        }
                        titles.keywords=s.name+','+c.name+','+c.section.name+','+s.location;
                        if(c.section.subSectionName){
                            titles.keywords+=','+c.section.subSectionName;
                        }
                        titles.canonical=$sce.trustAsResourceUrl(global.get('store').val.link+'/'+c.linkData.groupUrl+'/'+c.linkData.categoryUrl);
                    }else if($stateParams.groupUrl && $stateParams.groupUrl!='group'){
                        var sectionUrl=$stateParams.groupUrl;
                        var sec=global.get('functions').val.getSection(sectionUrl);
                        //console.log(sec);
                        //console.log(global.get('lang').val.inn)

                        if(sec){
                            if(global.get('langForm').val){
                                titles.title=capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+sec.name+' '+global.get('lang').val.inn+' '+s.name+' '+global.get('lang').val.onLine+'.';
                            }

                            var categories=''
                            if(sec.categories.length){
                                sec.categories.forEach(function(c,i){
                                    if(i){categories+=','}
                                    categories+=c.name
                                })
                            }
                            titles.keywords=s.name+','+sec.name+','+s.location+','+categories;
                            if(global.get('langForm').val){
                                titles.description= capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+global.get('lang').val.onLine+' '
                                    +sec.name+categories+' '+global.get('lang').val.inn+' '+s.name+' '+s.name+','+s.location;
                            }

                            titles.canonical=global.get('store').val.link+'/'+sec.url+'/category';
                            //console.log(titles.canonical)
                        }else{
                            console.log('???')
                            titles.canonical=''
                            titles.title='Заказать из каталога '+s.name+' онлайн.'
                            titles.keywords=s.name+',каталог,'+s.location;
                            titles.description= 'Заказ онлайн из каталога'+' в '+s.name+','+s.location;
                        }
                        titles.canonical=$sce.trustAsResourceUrl(titles.canonical);
                    }else{
                        titles.title='Заказать из каталога '+s.name+' онлайн.'
                        titles.keywords=s.name+',каталог,'+s.location;
                        titles.description= 'Заказ онлайн из каталога'+' в '+s.name+','+s.location;
                        titles.canonical=global.get('store').val.link+'/group/category';
                        titles.canonical=$sce.trustAsResourceUrl(titles.canonical);
                    }
                    //console.log(titles)
                    titles.domain=s.link;
                    titles.author=s.name;
                    global.set('titles',titles)
                })
            return;
//*****************************************************************************
        },
        setDataHomePage:function(){
            setSeopageData()
        },

        setDataItem:function(item,news){
            //console.log(item);
            var domain=global.get('store').val.link;
            var titles=angular.copy(global.get('store' ).val.seo);
            if(!titles){titles={}}
            if(news){
                var img=(item.img)?item.img:'';
                titles.url=domain+'/news/'+item.url;
                titles.type='article'
            }else{
                var img=(item.gallery && item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:'';
                titles.url=domain+'/'+item.link;
                titles.type='product'
            }
            if(img){img=photoHost+'/'+img;}
            titles.image=img;
            //console.log(titles.url)
            try{
                titles.canonical= $sce.trustAsResourceUrl(titles.url);
            }catch(err){console.log(err)}
            //console.log(titles)
            //setTitles(titles,item,true);
            titles.title = item.name;
            if (!news){
                if(item.artikul){
                    titles.title +=' '+item.artikul;
                }
                titles.title=item.categoryName+' '+titles.title;
            }

            global.set('titles',titles);
            //console.log(JSON.stringify(titles))
            return true;

        },
        setDataList:function(type,name){
            setSeopageData()
                .then(function(seopageIs){
                        console.log('seopageIs',seopageIs)
                        if(seopageIs){return};
                    //console.log(type,name)
                    var domain=global.get('store').val.link;
                    var titles=angular.copy(global.get('store' ).val.seo);
                    if(!titles){titles={}}
                    titles.url=domain+'/'+type;
                    titles.type=''
                    //if(img){img=photoHost+'/'+img;}
                    //titles.image=img;
                    //console.log(titles.url)
                    try{
                        titles.canonical= $sce.trustAsResourceUrl(titles.url);
                    }catch(err){console.log(err)}
                    //console.log(titles.title)
                    //titles.title = name+". "+titles.title;

                    global.set('titles',titles);
                    //console.log(titles.title)
                    return true;
                })

        },


        setData404:function(res){
            //console.log('404');
            var titles={pageTitle:'',pageDescription:'',pageKeyWords:''},seoPageId;
            var titles=angular.copy(global.get('store' ).val.seo);
            titles.canonical= $sce.trustAsResourceUrl('http://'+global.get('store').val.domain+'/404');
            titles.url=titles.canonical;
            //console.log(getSeoPageInfo(titles));
            if (seoPageId=getSeoPageInfo(titles)){

                $resource('/api/collections/Seopage/:id',{id:'@_id'}).get({id:seoPageId},function(res){
                    // console.log(res);
                    setTitles(titles,res,true);
                    global.set('titles',titles);
                });
            } else {
                global.set('titles',titles);
            }
        },

    };
    var setDataPage = function(res,type){
        // вроде не используется
        console.log(res)
        /*console.log($state)
         if ($state.current.name=='page.pageDetail') return;
         console.log($state)*/
        var titles={pageTitle:'',pageDescription:'',pageKeyWords:''};
        var titles=angular.copy(global.get('store' ).val.seo);
        titles.image='http://'+global.get('store').val.domain+((res.img)?res.img:res.gallery[0].thumb);
        titles.url='http://'+global.get('store').val.domain+'/page/'+type+'/'+res.url;
        titles.canonical= $sce.trustAsResourceUrl(titles.url);
        setTitles(titles,res,true);
        if (!titles.pageTitle){titles.pageTitle=res.name}
        if (!titles.pageDescription){titles.pageDescription=res.desc.replace(regex, '').substring(0,200)}
        global.set('titles',titles);
        //******** социальные сети
        var shareUrl=titles.url
        var shareTitle=res.name;
        var shareImg = titles.image;
        var shareDesc= titles.pageDescription;
        return {
            url:  shareUrl,
            title: shareTitle,
            description: shareDesc,
            image: shareImg,
            noparse: true
        }
    };
    var setDataStuff=function(stuff,news){
        var img=(stuff.gallery && stuff.gallery[0] && stuff.gallery[0].thumb)?stuff.gallery[0].thumb:'';
        if(img){img=photoHost+'/'+img;}
        var domain=global.get('store').val.link;
        var titles=angular.copy(global.get('store' ).val.seo)
        //{pageTitle:'',pageDescription:'',pageKeyWords:''};
        titles.image=img;//domain+'/'+img;
        if(news){
            titles.url=domain+'/news/'+stuff.url;
        }else{
            titles.url=domain+'/'+stuff.link
        }
        titles.canonical= $sce.getTrustedResourceUrl(titles.url);
        //console.log(titles)
        setTitles(titles,stuff,true);
        //if (!titles.title){titles.title=stuff.name}
        if (stuff.artikul){
            titles.title +=' '+stuff.artikul;
        }
        //if (!titles.description){titles.description=stuff.desc.replace(regex, '').substring(0,200)}
        titles.title=stuff.categoryName+' '+titles.title;
        global.set('titles',titles);
        //console.log(titles)
        //!******** социальные сети
        //var shareTitle=stuff.categoryName+' '+stuff.name;
        //console.log(stuff.categoryName)
        return {
            url:  titles.url,
            title: titles.title,
            description: titles.description,
            image: titles.image,
            noparse: true
        }

    };
}])

'use strict';
angular.module('gmall.services')
    .factory('CreateContent', ['global','$timeout',function(global,$timeout){
        /*console.log('photoHost',photoHost)
        if(!photoHost){
            console.log(global.get('store').val.link)
        }*/
        if(typeof photoHost=='undefined'){
            var photoHost;
        }
        var photoHostForFactory;
        $timeout(function(){
            photoHostForFactory=(photoHost)?photoHost:global.get('store').val.link
        },1000)



        //**************************************************************************************
        function getHeader(user) {
            var s=
                '<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 20px 0 0 0" border="0">'+
                '<tr width="100%" style="max-width:900px;">' +
                    // лого и название
                '<td width="50%" style=" padding:5px 20px"><a href="'+global.get('store').val.link+'">';
                    if(global.get('store').val.logo) {
                        s+='<img  style="width: 100px;" src="' + photoHostForFactory + '/' + global.get('store').val.logo + '"></br>'

                    }
                    if(global.get('store').val.name) {
                        s+='<span  style="width: 100px;" src="' + photoHostForFactory + '/' + global.get('store').val.name + '"></span>'
                    }
            s+='</a></td>';
            // телефон и емейл
            s+='<td width="50%"  style="text-align: right; padding:5px 20px">'
            if(global.get('store').val.seller.phone) {
                s+='<p><span>' +global.get('langOrder').val.phone+ '</span>'+
                    ': <a style="color:#666" href="tel:'+'+'+global.get('store').val.seller.phone+'"><span>'+'+' +global.get('store').val.seller.phone + '</span></a></p>'
            }
            if(global.get('store').val.feedbackEmail) {
                s += '<p><span>e-mail</span>'+
                    ': <a style="color:#666" href="mailto:'+global.get('store').val.feedbackEmail+'"><span>' + global.get('store').val.feedbackEmail + '</span></a></p>'
            }

            s+='</td></tr>';

            //переходы на сайт
            if(global.get('sections') && global.get('sections').val && global.get('sections').val[0]){
                s+='<table width="860px" cellpadding="0" cellspacing="0" style="max-width:900px;background-color: #000;border-collapse:collapse; border:1px solid #000;table-layout: fixed; padding: 0;margin: 0px 20px">' +
                    '<td width="50%" style="background-color: #333;text-align: center; padding: 20px;border:1px solid #fff;">' +
                    '<a style="color: #fff; text-transform: uppercase" href="'+global.get('store').val.link+'/cabinet'+'"><span>'+global.get('langOrder').val.mainCabinet+'</span></a>'+
                    '</td>';
                s+='<td width="50%" style="background-color: #333;text-align: center; padding: 20px;border:1px solid #fff;">' +
                    '<a style="color: #fff; text-transform: uppercase" href="'+global.get('store').val.link+'/'+global.get('sections').val[0].url+'/category'+'"><span>'+global.get('lang').val.catalog+'</span></a>'+
                    '</td>';
                s+='</tr></table>'

                /*'<tr width="100%" style="max-width:900px;"><td style="text-align: center; padding: 5px; font-size: 20px;"><h3>'+user+'</h3></td></tr>'+

                 '<tr width="100%"><td><h2 style="font-weight: 500; letter-spacing: 2px; text-transform: uppercase; text-align: center; color: #333333; font-family:  Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+name+'</h2></td></tr>';*/
                s+=    '</table>';
            }

            return s;
        }
        function getFooter(){
            var s='<style>.footer a</style><table class="footer" width="860px" cellpadding="0" cellspacing="0" style="margin: 20px;color: #000;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;" border="0">'+
                '<tr><td colspan="2" align="center" style="vertical-align: top; padding: 10px 20px;background-color:#333"><span style="font-family:Tahoma; font-size:12px; color:#e8e8e8;">';
            if(global.get('store').val.sn){
                for(var key in global.get('store').val.sn){
                    if(global.get('store').val.sn[key].is){
                        if(global.get('store').val.template.index && global.get('store').val.template.index.icons
                            &&global.get('store').val.template.index.icons[key+'white']){
                            s+='<a href="'+global.get('store').val.sn[key].link+'">'+
                                '<img style="width: 24px; height: 24px;margin: 0 10px" src="'+global.get('store').val.link+global.get('store').val.template.index.icons[key+'white'].img+'">'
                                +'</a>'
                        }

                    }
                }

            }
            s+='</span></td></tr>'+
                '<tr style="background-color: #fff;color: #000"><td align="left" style="vertical-align: top; padding: 10px 20px"><span style="font-size:14px; ">';
            /*if(global.get('store').val.footer && global.get('store').val.footer.text){}*/
            if(global.get('store').val.texts.mailTextFooter && global.get('store').val.texts.mailTextFooter[global.get('store').val.lang]){
                s+=global.get('store').val.texts.mailTextFooter[global.get('store').val.lang];
            }

            s+='</span></td>';
            s+='<td align="right" style="vertical-align: top; padding: 10px 20px"><span style="font-size:14px;">';
            /*if(global.get('store').val.footer && global.get('store').val.footer.text1){
             s+=global.get('store').val.footer.text1;
             }*/
            if(global.get('store').val.texts.mailTextFooter1 && global.get('store').val.texts.mailTextFooter1[global.get('store').val.lang]){
                s+=global.get('store').val.texts.mailTextFooter1[global.get('store').val.lang];
            }

            s+='</span></td></tr></table>';
            return s
        }
        // ********************пустой контент
        function empty(){
            var s ='<h1>информация  отсутствует</h1>'
            return '<!DOCTYPE html><html><head><meta charset=utf-8/>' +
                '<style type="text/css">' +
                '@media only screen and (max-device-width:660px){.table-mobile{display:none !important;}}' +
                '</style>' +
                '</head><body onload="window.print()"><div style="max-width: 800px">' +s + '</div><body></html>';
        }
        //*************************** end empty*************************
        function getLink(t,u) {
            if(!t || !u){return null}
            var d = global.get('store').val.domain;
            console.log("global.get('store').val.domain",global.get('store').val.domain)
            switch(t){
                case 'stuffs':return d+'/group/category/'+u;
                case 'categories':return d+'/group/'+u;
                case 'brandTags':return d+'/group/category?brandTag='+u;
                case 'brands':return d+'/group/category?brand='+u;
                case 'filterTags':return d+'/group/category?queryTag='+u;
                case 'campaign':return d+'/camapign/'+u;
            }
        }
        function emailFromNews(item){
            console.log(global.get('store').val.texts.mailTextFooter[global.get('store').val.lang])
            console.log(global.get('store').val.texts.mailTextFooter1[global.get('store').val.lang])
            var s=
                '<table width="100%" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr width="100%" style="max-width:900px;"><td style="text-align: center; padding: 5px"><a href="'+global.get('store').val.link+'"><img  style="width: 100px;" src="'+photoHostForFactory+'/'+global.get('store').val.logo+'"></a></td></tr>'+
                '<tr width="100%" style="max-width:900px;"><td style="text-align: center; padding: 5px; font-size: 20px;"><h3>usernameforreplace</h3></td></tr>'+

                '<tr width="100%"><td><h2 style="font-weight: 500; letter-spacing: 2px; text-transform: uppercase; text-align: center; color: #333333; font-family:  Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+item.name+'</h2></td></tr>';
            s+=    '</table>';


            s+='<table class="table-mobile" width="100%" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333; border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0 " border="0">';
            if(item.blocks && item.blocks.length){
                item.blocks.forEach(function (block) {
                    if(block.name){
                        if(block.type=='text2'){
                            s+='<tr width="100%" style="max-width:900px;">' +
                                '<td style="padding: 5px">' +
                                '<h3 style="text-align: center; color: :#333333; font: 22px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none; text-transform: uppercase">'+((block.name)?block.name:'')+'</h3>' +
                                '</td>' +
                                '<td style="padding: 5px">' +
                                '<h3 style="text-align: center; color: :#333333; font: 22px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none; text-transform: uppercase">'+((block.name1)?block.name1:'')+'</h3>' +
                                '</td>' +
                                '</tr>';
                        }else{
                            s+='<tr width="100%" style="max-width:900px;"><td colspan="2" style="padding: 5px"><h3 style="text-align: center; color: :#333333; font: 22px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none; text-transform: uppercase">'+block.name+'</h3></td></tr>';
                        }


                    }
                    if(block.img){
                        s+='<tr width="100%" style="max-width:900px;"><td  colspan="2" width="100%" style=" padding: 5px" >' ;
                        if(block.link){
                            s+= '<a href="'+global.get('store').val.link+block.link+'" style="cursor: pointer;">'
                        }

                        s+= '<img alt="" style="width: 100%;margin-bottom: 10px; display: block" src="'+photoHostForFactory+'/'+block.img+'">';
                        if(block.link){
                            s+= '</a>'
                        }

                        s+= '</td></tr>';

                    }
                    //console.log(block)
                    if(block.desc){
                        if(block.type=='text2'){
                            //console.log(block)
                            s+='<tr width="100%" style="max-width:900px;">' +
                                '<td style="padding: 5px">' +
                                '<span style="text-align: justify;  color: :#333333; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+((block.desc)?block.desc:'')+'</span>' +
                                '</td>' +
                                '<td style="padding: 5px">' +
                                '<span style="text-align: justify;  color: :#333333; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+((block.desc1)?block.desc1:'')+'</span>' +
                                '</td>' +
                                '</tr>';
                        }else{
                            s+='<tr width="100%" style="max-width:900px;"><td colspan="2" style="padding: 5px"><span style="text-align: justify;  color: :#333333; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+block.desc+'</span></td></tr>';
                        }

                    }

                    if(block.imgs && block.imgs.length){
                        for (var i=0,l=block.imgs.length;i<l;i += 2){
                            //console.log(i,!!block.imgs[i])
                            s+='<tr>';
                            var link1;
                            if(block.imgs[i].link){
                                if(block.imgs[i].link.indexOf('http')<0){
                                    link1=global.get('store').val.link+block.imgs[i].link;
                                }else{
                                    link1=block.imgs[i].link;
                                }
                            }else{
                                if(block.imgs[i].url){
                                    link1=getLink(block.type,block.imgs[i].url)
                                }

                            }
                            s+='<td style="padding: 5px; text-align: center;vertical-align: top">';
                            if(link1){
                                s+='<a href="'+link1+'">';
                            }

                            s+='<img alt="" style="width: 100%; display: block" src="'+photoHostForFactory+'/'+block.imgs[i].img+'">';
                            if(block.imgs[i].name){
                                s+='<span style="font-weight: 700; color: #666666; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+block.imgs[i].name+'</span>' ;
                            }

                            if(link1){
                                s+='</a>';
                            }
                            s+='</td>';
                            if(block.imgs[i+1])   {
                                //console.log(i+1)
                                var link2;
                                if(block.imgs[i+1].link){
                                    if(block.imgs[i].link.indexOf('http')<0){
                                        link2=global.get('store').val.link+block.imgs[i+1].link;
                                    }else{
                                        if(block.imgs[i+1].link){
                                            link2=block.imgs[i+1].link;
                                        }

                                    }
                                }else{
                                    link1=getLink(block.type,block.imgs[i+1].url)
                                }
                                s+='<td style="padding: 5px; text-align: center;vertical-align: top">';
                                if(link2){
                                    s+='<a href="'+link2+'">';
                                }

                                s+='<img alt="" style="width: 100%; display: block" src="'+photoHostForFactory+'/'+block.imgs[i+1].img+'">';
                                if(block.imgs[i+1].name){
                                    s+='<span style="font-weight: 700; color: #666666; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+block.imgs[i+1].name+'</span>' ;
                                }
                                if(link2){
                                    s+='</a>';
                                }
                                s+='</td>';
                            }else{
                                s+='<td style="padding: 5px; text-align: center;vertical-align: top"></td>'
                            }

                            s+='</tr>'
                        }
                    }
                })
            }
            s+='</table>';



            /*s+='<table width="900px" cellpadding="0" cellspacing="0" style="color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr><td border="0" colspan="2" style="border:none; border-top:#cccccc 5px solid;"></td></tr>'+
                /!*'<tr><td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td><td/><td/>'+*!/
                /!*'<td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td></tr>'+*!/
                '<tr><td align="right" style="vertical-align: top"><span style="font-family:Tahoma; font-size:12px; color:#404040;">';
            if(global.get('store').val.sn){
                for(var key in global.get('store').val.sn){
                    if(global.get('store').val.sn[key].is){
                        s+='<a href="'+global.get('store').val.sn[key].link+'">'+
                               '<img style="width: 24px; height: 24px;margin: 15px 5px" src="'+global.get('store').val.link+'/views/template/img/icon/sn_grey/'+
                            key+'.png">'
                            +'</a>'
                    }
                }

            }
            s+='</span>' +
                '<td align="right"><span style="font-family:Tahoma; font-size:14px; color:#404040;">';
            if(global.get('store').val.footer && global.get('store').val.footer.text){
                s+=global.get('store').val.footer.text;
            }
            s+='</span></td></tr>'+
                '</table>'*/
            s +='<style>.footer a</style><table class="footer" width="860px" cellpadding="0" cellspacing="0" style="margin: 20px;color: #000;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;" border="0">'+
                '<tr><td colspan="2" align="center" style="vertical-align: top; padding: 10px 20px;background-color:#333"><span style="font-family:Tahoma; font-size:12px; color:#e8e8e8;">';
            if(global.get('store').val.sn){
                for(var key in global.get('store').val.sn){
                    if(global.get('store').val.sn[key].is){
                        if(global.get('store').val.template.index && global.get('store').val.template.index.icons
                            &&global.get('store').val.template.index.icons[key+'white']){
                            s+='<a href="'+global.get('store').val.sn[key].link+'">'+
                                '<img style="width: 24px; height: 24px;margin: 0 10px" src="'+global.get('store').val.link+global.get('store').val.template.index.icons[key+'white'].img+'">'
                                +'</a>'
                        }

                    }
                }

            }
            s+='</span></td></tr>'+
                '<tr style="background-color: #fff;color: #000"><td align="left" style="vertical-align: top; padding: 10px 20px"><span style="font-size:14px; ">';
            /*if(global.get('store').val.footer && global.get('store').val.footer.text){}*/
            if(global.get('store').val.texts.mailTextFooter && global.get('store').val.texts.mailTextFooter[global.get('store').val.lang]){
                s+=global.get('store').val.texts.mailTextFooter[global.get('store').val.lang];
            }

            s+='</span></td>';
            s+='<td align="right" style="vertical-align: top; padding: 10px 20px"><span style="font-size:14px;">';
            /*if(global.get('store').val.footer && global.get('store').val.footer.text1){
             s+=global.get('store').val.footer.text1;
             }*/
            if(global.get('store').val.texts.mailTextFooter1 && global.get('store').val.texts.mailTextFooter1[global.get('store').val.lang]){
                s+=global.get('store').val.texts.mailTextFooter1[global.get('store').val.lang];
            }

            s+='</span></td></tr></table>';

            return s;
            return '<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" type="text/css" href="http://gmall.io/bower_components/bootstrap/dist/css/bootstrap.css" />' +
                '</head><body onload="window.print()"><div class="reward-body">' + s + '</div>' +
                '</html>';
        }
        function emailBonus(stuffs){
            //console.log(stuffs)
            var nameEmail='бонусы'
            var item;

            var s=
                '<table width="100%" cellpadding="0" cellspacing="0" style="max-width:600px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr width="100%" style="max-width:600px;"><td style="text-align: center; padding: 5px"><img alt="посмотреть на сайте" style="width: 100px;" src="'+photoHostForFactory+'/'+global.get('store').val.logo+'"></td></tr>'+
                '<tr width="100%"><td><h2 style="font-weight: 500; letter-spacing: 2px; text-transform: uppercase; text-align: center; color: #333333; font-family:  Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+nameEmail+'</h2></td></tr>';


            s+='</table>';
            stuffs.forEach(function(stuff){
                item=stuff;
                if(item.imgs && item.imgs.length){
                    s+='<table class="table-mobile" width="100%" cellpadding="0" cellspacing="0" style="max-width:600px;color: #333333; border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">';
                    for (var i=0,l=item.imgs.length;i<l;i++){
                        if(item.imgs[i].name){
                            s+='<tr width="100%" style="max-width:600px;">' +
                                '<td style=" padding: 5px"><p style="color: #333333; font: 16px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+item.imgs[i].name+'</p></td>' +
                                '</tr>';
                        }


                        s+='<tr><td style="padding: 5px;">'+
                            '<img alt="бонусный купон"  style="width: 100%; display: block"   src="'+photoHostForFactory+'/'+item.imgs[i].img+'"></td>';

                        s+='</tr>'
                        if(item.imgs[i].desc){
                            s+='<tr width="100%" style="max-width:600px;"><td style=" padding: 5px"><p style="color: #333333; font: 16px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+item.imgs[i].desc+'</p></td></tr>';
                        }

                    }
                    s+='</table>';
                }
            })





            s+='<table width="600px" cellpadding="0" cellspacing="0" style="color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr><td border="0" colspan="2" style="border:none; border-top:#cccccc 5px solid;"></td></tr>'+
                '<tr><td align="left" style="vertical-align: top"><span style="font-family:Tahoma; font-size:12px; color:#404040;">';
            if(global.get('store').val.sn){
                for(var key in global.get('store').val.sn){
                    if(global.get('store').val.sn[key].is){
                        s+='<a href="'+global.get('store').val.sn[key].link+'">'+
                            '<img style="width: 24px; height: 24px;margin: 15px 5px" src="'+global.get('store').val.link+'/views/template/img/icon/sn_natur/'+
                            key+'.png">'
                            +'</a>'
                    }
                }

            }
            s+='</span>' +
                '<td align="right"><span style="font-family:Tahoma; font-size:16px; color:#404040;">';
            if(global.get('store').val.footer && global.get('store').val.footer.text){
                s+=global.get('store').val.footer.text;
            }
            s+='</span></td></tr>'+
                /*'<tr><td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td><td/><td/><td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td></tr>'+*/
                '</table>'
            //return s;
            return '<!DOCTYPE html><html><head><meta charset="UTF-8"></head><body><div>' + s + '</div></html>';
        }
        //************************************************************************************
        function orderNote(order){
            //console.log(order)
            var s='';
            s +='<h3 class="order-name">'+global.get('langOrder').val.order+' № '+order.num+'</h3> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll');
            s+='<p>'+global.get('langOrder').val.sum+' '+(order.paySum).toFixed(2)+' '+order.currency+'</p>';
            return s;
        }
        function dateTimeNote(entry,user){
            //console.log(user)
            //console.log(order)
            var s='';
            s +='<h3 class="order-name">'+global.get('langOrder').val.dateTime+'</h3> '+global.get('langOrder').val.onn+' '+entry.dateForNote;
            s+='<p>'+global.get('store').val.texts.masterName[global.get('store').val.lang]+' - '+entry.masterName+'</p>';
            s+='<p>'+entry.service.name+'</p>';
            if(user){
                s+='<p>'+user.name+' '+user.phone+'</p>';
            }

            return s;
        }
        function dateTimeCancelNote(entry){
            //console.log(order)
            var s='';
            s +='<h3 class="order-name">'+global.get('langOrder').val.dateTime+'<span style="color:red"> '+global.get('langOrder').val.removed+'</span></h3> '+global.get('langOrder').val.onn+' '+entry.dateForNote;
            s+='<p>'+global.get('store').val.texts.masterName[global.get('store').val.lang]+' - '+entry.masterName+'</p>';
            s+='<p>'+entry.service.name+'</p>';
            s+='<p>'+entry.user.name+'- '+entry.user.phone+'</p>';
            return s;
        }
        // html контент для ордера счет уведосление
        function order(order,invoice,commentPrint){
            //console.log(order)
            //console.log(global.get('groups').val)
            var lang = global.get('store').val.lang;
            var texts=global.get('store').val.texts;
            var user = (order.profile && order.profile.admin)?order.profile.admin:order.profile.fio;
            if(!user){
                user=order.user.name
            }
            var orderMailText=(texts.orderMailText && texts.orderMailText[lang])?texts.orderMailText[lang]:'';
            if(order.profile && order.profile.admin){
                orderMailText=''
            }
            var name =global.get('langOrder').val.order+' № '+order.num+'<small> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</small>'

            var status = global.get('langOrder').val.entered.toUpperCase();
            if(order.status==2){
                status =global.get('langOrder').val.accepted.toUpperCase();
            }else if(order.status==3){status =global.get('langOrder').val.statuspaid.toUpperCase();
            }else if(order.status==4){status =global.get('langOrder').val.statussent.toUpperCase();
            }else if(order.status==5){status =global.get('langOrder').val.statusdelivered.toUpperCase();}
            user =global.get('langOrder').val.hello + ', '+user+'!';
            var s= getHeader(name)

            s+='<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
            '<tr  width="100%"><td colspan="2" style="padding: 0 20px;"><h3 style="font-size: 24px">'+user+'</h3></td></tr>';
            if(order.status==1){
                s+='<tr  width="100%"><td colspan="2" style="padding: 0 20px"><p>'+orderMailText+'</p></td></tr>';
            }


            s+='<tr style="max-width:900px;"><td width="50%" style="max-width:900px;padding: 10px 20px;font-size: 16px;vertical-align: top">'+
                '<h4 style="font-weight: bold">'+status+'</h4>'+
                '<h4 style="font-weight: bold">'+global.get('langOrder').val.order.toUpperCase()+' № '+order.num+'</h4>'+
                '<p style="margin-bottom: 30px">'+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</p>';
            if(commentPrint && order.comment){
                s +='<div><h4 style="font-weight: bold">'+global.get('langOrder').val.comments+'</h4><p>'+order.comment+'</p></div>';
            }
            if(invoice && order.payInfo){
                s +='<h4 style="font-weight: bold">'+global.get('langOrder').val.forpayment+'</h4>';
                s +='<p>'+order.payInfo+'</p>';
            }
            if(invoice){
                //console.log(order.checkOutLiqpayHtmlIs)
                if(order.checkOutLiqpayHtmlIs){
                    s+='<p>'+order.checkOutLiqpayHtml+'</p>'
                }
            }

            s+='</td>';
            s+= '<td style=" padding: 10px 20px; font-size: 16px;vertical-align: top;">'

            /*if(order.seller.name){
                s+='<p>'+global.get('langOrder').val.seller+'<strong>'+order.seller.name+'</strong></p>';
            }*/

            // данные покупателя
            s +='<h4 style="font-weight: bold">'+global.get('langOrder').val.customerdata+'</h4>';
            s +='<p> e-mail - '+order.user.email+'</p>';
            if(order.profile.fio){
                s +='<p> '+global.get('langOrder').val.name+'  - '+order.profile.fio+'</p>';
            }
            if(order.profile.phone){
                s +='<p> '+global.get('langOrder').val.phone+' - '+order.profile.phone+'</p>';
            }
            if(order.profile.city){
                s +='<p> '+global.get('langOrder').val.city+'  - '+order.profile.city+'</p></div>';
            }



            s+=    '</td></tr></table>';


            /*s +='<div class="container"><div class="col-lg-10 col-lg-offset-1"><div class="col-lg-6">'+
                '<h3>'+global.get('langOrder').val.order+' № '+order.num+'</h3> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'<br/>';*/

            s +='<table style="margin: 20px" width="860px" cellspacing="0" cellpadding="5" border="1px">';
            s+= '<thead><tr><th style="padding: 10px">#</th>' +
                '<th style="padding: 10px">'+global.get('langOrder').val.title+'</th>' +
                '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.species+'</th>' +
                '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.price+'</th>';
            s+='<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.quantity+'</th>' +
                '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.sum+'</th></tr></thead>';

            s += '<tbody>';
            var cart = order.cart.stuffs;
            for (var j=0,lj=cart.length;j<lj;j++){
                var good =cart[j];
                s +='<tr><td style="padding: 10px">'+(j+1)+'</td><td style="padding: 10px"> '+good.name+' '+((good.artikul)?good.artikul:'')+'</td>' +
                    '<td class="text-center" style="padding: 10px; text-align: center">'+((good.sortName)?good.sortName:'')+
                    '</td><td class="text-center" style="padding: 10px; text-align: center">'+(order.kurs*good.cena).toFixed(2)+' '+order.currency+
                    '</td><td class="text-center" style="padding: 10px; text-align: center">'+good.quantity+'</td><td class="text-center">'+ ( order.kurs*good.sum).toFixed(2)+' '+order.currency+
                    '</td></tr>';
            }
            s +='</tbody>';
            s+='<tbody class="cart-item-total">';
            s +='<tr><th colspan="4" style="padding: 10px">'+global.get('langOrder').val.sum+'</th>'+
                '<th class="text-center" style="padding: 10px; text-align: center">'+order.getTotalQuantity()+'</th><th style="padding: 10px; text-align: center" class="text-center">'+(order.kurs*((order.sum0)?order.sum0:order.sum)).toFixed(2)+' '+order.currency+'</th></tr>';
            if(order.discount){
                s +='<tr><th colspan="4" style="padding: 10px">'+global.get('langOrder').val.withdiscount+'</th>';
                s +=(order.sum<order.sum0)?'<th class="text-center"  style="padding: 10px; text-align: center">'+Math.round((1-order.sum/order.sum0)*100)+'%</th>':'<th class="text-center" style="padding: 10px; text-align: center"></th>';
                s +='<th class="text-center"  style="padding: 10px; text-align: center">'+(order.kurs*order.sum).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            if(order.coupon && order.coupon._id){
                s +='<tr><th colspan="4" style="padding: 10px">'+global.get('langOrder').val.basedcoupon+'</th><th></th>'+
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+(order.kurs*order.getCouponSum()).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            var totalDiscont=order.getTotalDiscount();
            /*if(totalDiscont){
                s +='<tr><th colspan="2">'+'сумма по учетной цене '+(order.priceSum).toFixed(2)+' '+order.currency +
                    '</th><th colspan="2">'+global.get('langOrder').val.totalDiscont+'</th><th></th>'+
                    '<th class="text-center">'+totalDiscont+'% '+'</th></tr>';
            }*/
            if(order.shipCost){
                s +='<tr><th colspan="4">'+global.get('langOrder').val.delivery+'</th><th></th>'+
                    '<th class="text-center" style="padding: 10px; text-align: center">'+(order.shipCost).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            if(order.totalPay){
                s +='<tr><th colspan="4">'+global.get('langOrder').val.paid+'</th><th></th>'+
                    '<th class="text-center" style="padding: 10px; text-align: center">'+(order.totalPay).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            if(order.paySum!=order.getCouponSum()){
                s +='<tr><th colspan="4">'+global.get('langOrder').val.totaltopay+'</th><th></th>'+
                    '<th class="text-center" style="padding: 10px; text-align: center">'+(order.paySum).toFixed(2)+' '+order.currency+'</th></tr>';
            }


            s +='</tbody></table></div></div></div>';
            s += getFooter()
            return '<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" type="text/css" href="http://gmall.io/bower_components/bootstrap/dist/css/bootstrap.css" />' +
                '</head><body onload="window.print()"><div class="reward-body">' + s + '</div>' +
                '</html>';
        }
        // *************************end order
        //**************************************************************************************
        //**************************************************************************************
        //**************************************************************************************
        // ********************информация по доставке в ордере новая
        function orderShipInfo(order){
            //console.log(order.seller)
            var shipDetail= order.shipDetail;

            var lang = global.get('store').val.lang;
            var texts=global.get('store').val.texts;

            //console.log(order.status,texts.orderMailText[lang])
            var name =global.get('langOrder').val.order+' № '+order.num+'<small> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</small>'
            var user = global.get('user').val.profile.fio|| global.get('user').val.name;
            var status = global.get('langOrder').val.entered.toUpperCase();
            if(order.status==2){
                status =global.get('langOrder').val.accepted.toUpperCase();
            }else if(order.status==3){status =global.get('langOrder').val.statuspaid.toUpperCase();
            }else if(order.status==4){status =global.get('langOrder').val.statussent.toUpperCase();
            }else if(order.status==5){status =global.get('langOrder').val.statusdelivered.toUpperCase();}
            user =global.get('langOrder').val.hello + ', '+user+'!';
            var s= getHeader(name)

            s+='<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr  width="100%"><td colspan="2" style="padding: 20px;"><h3 style="font-size: 24px">'+user+'</h3></td></tr></table>';

            s+='<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr style="max-width:900px;"><td width="50%" style="max-width:900px;padding: 10px 20px;font-size: 16px;vertical-align: top">'+
                '<h4 style="font-weight: bold">'+global.get('langOrder').val.order.toUpperCase()+' № '+order.num+'</h4>'+
                '<p>'+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</p>'+
                '<h4 style="font-weight: bold;margin-bottom: 30px">'+status+'</h4>'+
                '<h4 style="font-weight: bold">'+global.get('langOrder').val.aboutdelivery+'' +'</h4>'+
                '</td></tr></table>';


            if(shipDetail && shipDetail.length){
                s +='<table style="margin: 20px" width="860px" cellspacing="0" cellpadding="5" border="1px">';
                s+='<thead><tr><th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.title+'</th>' +
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.where+'</th>' +
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.waybill+'</th>' +
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.date+'</th>' +
                    '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.sum+'</th>';
                shipDetail.forEach(function(ship){
                    s+='<tr><td style="padding: 10px">';
                    ship.stuffs.forEach(function(stuff){
                        s+='<div style="width:80%;float:left">'+stuff.name+'</div><div style="float:left">'+stuff.qty+((stuff.unitOfMeasure)?(' '+stuff.unitOfMeasure):'')+'</div><div style="clear: both"></div><hr/>';
                    });
                    s+=ship.qty;
                    /*s+=''+global.get('langOrder').val.numberofunits+' <strong>'+ship.stuffs.length+'</strong>';*/
                    s+='</td><td style="padding: 10px; vertical-align: top">'+(ship.info||'')+'</td>';
                    s+='<td style="padding: 10px; vertical-align: top">'+(ship.ttn||'')+'</td>';
                    s+='<td style="padding: 10px; vertical-align: top">'+moment(ship.date).format("LLL")+'</td>';
                    s+='<td style="padding: 10px; vertical-align: top">'+(ship.sum||0).toFixed(2)+'&nbsp;'+order.currency+'</td></tr>';
                })
                s+="</table></br></br>";
            }else{
                s+='<h1>'+global.get('langOrder').val.infisnot+'</h1>'
            }
            s += getFooter()
            return '<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" type="text/css" href="http://gmall.io/bower_components/bootstrap/dist/css/bootstrap.css" />' +
                '</head><body onload="window.print()"><div class="reward-body">' + s + '</div>' +
                '</html>';
        }
        //*************************** end orderSPShipInfo*************************
        // ********************информация по доставке в ордере уведомление
        function shipInfoNote(order){
            var s='';
            s +='<h3>'+global.get('langOrder').val.order+' № '+order.num+'</h3><br/> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'';
            if(order.user.profile){
                if(order.user.profile.fio){
                    s+="<p>"+order.user.profile.fio+"</p>";
                }else{
                    s+="<p>"+order.user.name+"</p>";
                }
                if(order.user.profile.phone){
                    s+="<p>"+order.user.profile.phone+"</p>";
                }
            }

            s+='<p>'+global.get('langOrder').val.totaltopay+' <strong>'+(order.paySum).toFixed(2)+' </strong>'+order.currency+'</p>';
            s+='<p>'+global.get('langOrder').val.sentshipinfo+'</p>'
            return s;
        }

        function shipInfo(order,ship){
            if (!ship.ttn || !ship.info ) return;
            var s = '<h3>'+global.get('langOrder').val.aboutdelivery+' ' +'</h3>';
            '<p>'+global.get('langOrder').val.onawarrant+' №'+order.num+' '+global.get('langOrder').val.from+' '+moment(order.date ).format('lll')+'</p>';
            s+='<strong>'+global.get('langOrder').val.waybill+' - '+ship.ttn||''+'</strong>'+' '+global.get('langOrder').val.from+' '+moment(ship.date ).format('LL')+'</p>';
            if (ship.info){
                s+='<p>'+ship.info.substring(0,250)+'</p>';
            }
            if (ship.sum){
                s+='<strong>'+(ship.sum).toFixed(2)+' '+order.currency+'</strong>';
            }
            if (ship.stuffs && ship.stuffs.length){
                s+='<strong>  '+ship.stuffs.length+' ед.</strong>';
            }

            return s;
        }

        //*************************** end ShipInfo***************************************
        //*******************************информация о платеже в ордере
        function payInfo(order,pay){
            if (!pay.sum ) return;
            var s = '<h3>'+global.get('langOrder').val.makepayment+' ' + '</h3>';
            s+='<p>'+global.get('langOrder').val.onawarrant+' №'+order.num+'<br> '+global.get('langOrder').val.from+' '+moment(order.date ).format('lll')+'</p>';
            s+='<p><strong>'+(pay.sum).toFixed(2)+' '+order.currency+'</strong></p>'+' '+moment(pay.date ).format('LL');
            if (pay.info){
                s+='<p>'+pay.info.substring(0,150)+'</p>';
            }
            return s;
        }
        //*********************************end PayInfo*************************************
        //****************************************************************************************
        //**************************************************************************************
        // ********************подтверждение ордера
        function acceptedInfo(order){
            var s = '<h3>'+global.get('langOrder').val.byorders+' №'+order.num+'</h3>';
            s+=' '+global.get('langOrder').val.from+' '+moment(order.date ).format('lll')+'.';
            if(order.user.profile){
                if(order.user.profile.fio){
                    s+="<p>"+order.user.profile.fio+"</p>";
                }else{
                    s+="<p>"+order.user.name+"</p>";
                }
                if(order.user.profile.phone){
                    s+="<p>"+order.user.profile.phone+"</p>";
                }
            }
            s+='<p><strong>'+global.get('langOrder').val.accepted+' </strong></p>';
            return s;
        }
        //*********************************end acceptedInfo*************************************
        //****************************************************************************************

        function invoiceInfo(order){
            var s='';
            s +='<h3>'+global.get('langOrder').val.order+' № '+order.num+'</h3><br/> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'';
            if(order.user.profile){
                if(order.user.profile.fio){
                    s+="<p>"+order.user.profile.fio+"</p>";
                }else{
                    s+="<p>"+order.user.name+"</p>";
                }
                if(order.user.profile.phone){
                    s+="<p>"+order.user.profile.phone+"</p>";
                }
            }

            s+='<p>'+global.get('langOrder').val.totaltopay+' <strong>'+(order.paySum).toFixed(2)+' </strong>'+order.currency+'</p>';
            s+='<p>'+global.get('langOrder').val.sentthepost+'</p>'
            //console.log(s)
            /*if(order.payInfo){
                s +='<p>Данные для оплаты</p>';
                s +='<p>'+order.payInfo+'</p>';
            }*/
            return s;
        }
        function call(number,name){
            //console.log(number)
            //number=number.substring(0,20)
            var s='';
            s+='<h3>'+global.get('langOrder').val.requestacallback+'</h3>'
            s+='<p>'+number+((name)?' '+name:'')+'</p>'
            s+='<p>'+moment().format('LLLL')+'</p>'
            console.log(s)
            return s;
        }



        return {
            empty:empty,
            order : order,
            orderNote:orderNote,
            dateTimeNote:dateTimeNote,
            shipInfo:shipInfo,
            payInfo:payInfo,
            invoiceInfo:invoiceInfo,
            acceptedInfo:acceptedInfo,
            orderShipInfo:orderShipInfo,
            call:call,
            emailFromNews:emailFromNews,
            emailBonus:emailBonus,
            shipInfoNote:shipInfoNote,
            dateTimeCancelNote:dateTimeCancelNote

        }
    }])
'use strict';
(function(){

    angular.module('gmall.services')
        .service('Paps', papsService);
    papsService.$inject=['$resource','$uibModal','$q'];
    function papsService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Paps/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getPaps.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
    }
})()

'use strict';
angular.module('gmall.services')
.service('$fileUpload', ['$http','$uibModal','$q', function ($http,$uibModal,$q) {
        this.uploadFileToUrl = function(file, uploadUrl,id,params,type){
            var fd = new FormData();
            fd.append('file', file);
            fd.append('id', id);
            // console.log(uploadUrl,id,params);
            if (params && (typeof params == "object")){
                for (var key in params) {
                    ////fd[key]=params[key]
                    fd.append(key, params[key]);
                }
            }
            var preffix=photoUpload;
            switch(type){
                case 'user': preffix=userHost;break;
            }
           return $http.post(preffix+uploadUrl, fd, {
                withCredentials: true,
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            })
        }
        this.showFile =function (block,field) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/loadImage/showImgInModal.html',
                controllerAs:'$ctrl',
                controller: function ($uibModalInstance ,block,field) {
                    var self=this;
                    self.item=block;
                    console.log(self.item)
                    self.ok=ok;
                    self.cancel = cancel;

                    function ok(item){
                        $uibModalInstance.close();
                    }
                    function cancel() {
                        $uibModalInstance.dismiss();
                    };
                },
                resolve: {
                    block:function () {
                        return block
                    },
                    field:function () {
                        return field
                    }
                }
            });
            return modalInstance.result

        }

        this.fileUpload=function (uploadUrl,field,itemUrl,itemId,index) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: function () {
                return ((field && (field=='video') || field=='video.link' ||  field=='video1.link'))?'components/loadImage/loadVideoModal.html':'components/loadImage/loadImageModal.html';
                if(field=='video'){'components/loadImage/loadVideoModal.html'}else{return 'components/loadImage/loadImageModal.html'}
            },
            controller: function(uploadUrl,field,itemUrl,itemId,index,$uibModalInstance,$scope,$timeout,exception){
                //console.log(itemUrl)
                var self=this;
                self.files=[]
                self.hasFiles=false;
                self.urlArr=uploadUrl.split('?');
                self.suffix=(self.urlArr[1])?self.urlArr[1]:'';
                self.dimen= self.urlArr[0].split('/');
                self.fileDimension=''
                if(field!='video' &&  field=='video.link' &&  field=='video1.link'){
                    self.fileDimension=self.dimen[self.dimen.length-1].slice(10);
                }
                self.uploadFiles=uploadFiles;
                var $form,$input;
                $timeout(function () {
                    $form = $('#uploadImgForm');
                    $input = $form.find('#inputFilesUpload')
                    $input.bind('change', changedHandler);
                    $form.bind('reset', resetHandler);
                    var isAdvancedUpload = function() {
                        var div = document.createElement('div');
                        return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
                    }();
                    if (isAdvancedUpload) {
                        $form.addClass('has-advanced-upload');
                        var droppedFiles = false;

                        $form.on('drag dragstart dragend dragover dragenter dragleave drop', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                        })
                            .on('dragover dragenter', function() {
                                $form.addClass('is-dragover');
                            })
                            .on('dragleave dragend drop', function() {
                                $form.removeClass('is-dragover');
                            })
                            .on('drop', function(e) {
                                handleImage(e.originalEvent.dataTransfer.files)
                            });
                    }

                },300)
                /****************************************************************/
                /****************************************************************/
                var changedHandler = function (event) {
                    if (window.File && window.FileList && window.FileReader) {
                        handleImage(event.target.files)
                    } else {
                        console.log("Your browser does not support File API");
                    }
                };
                var resetHandler = function () {
                    $scope.$apply(function () {
                        self.files.length = 0;
                        self.hasFiles = false;
                        self.isUploading=false;
                    });
                };
                function handleImage(files) {
                    $scope.$apply(function () {
                        if(files.length){self.hasFiles = true;}else{self.hasFiles = false}
                        for (var i = 0; i < files.length; i++) {
                            var file = files[i];
                            var picReader = new FileReader();
                            closureI(picReader,file)
                            //Read the image
                            picReader.readAsDataURL(files[i]);
                        }
                    })
                    function closureI(picReader,file) {
                        picReader.addEventListener("load", function (event) {
                            var picFile = event.target;
                            file.imgSrc=picFile.result;
                            var is;
                            for(var j=0;j<self.files.length;j++){
                                if(self.files[j].name==file.name){
                                    is=true;
                                    break;
                                }
                            }
                            if(!is){
                                $timeout(function () {
                                    self.files.push(file);
                                },100)

                            }
                        });
                    }
                }
                // Watch the files so we can reset the input if needed
                $scope.$watchCollection('files', function () {
                    if (self.files.length === 0 && $input) {
                        $input.val(null);
                    }
                })
                $scope.$on('$destroy', function () {
                    $input.unbind('change', changedHandler);
                    $form.unbind('reset', resetHandler);
                });
                /****************************************************************/
                /****************************************************************/

                function uploadFiles() {
                    if(self.isUploading){return}
                    self.isUploading=true;
                    var acts=[];
                    self.files.forEach(function (file,i) {
                        if((field!='imgs' && field!='gallery' && i) || i>20){
                            return
                        }
                        acts.push(handlePhoto(file))
                    })

                    function handlePhoto(file) {
                        console.log(uploadUrl,self.fileDimension)
                        var url = self.urlArr[0]+self.fileDimension;
                        //console.log(url)
                        var fd = new FormData();
                        //console.log(file)
                        fd.append('file', file);
                        if(itemUrl){
                            fd.append('url', itemUrl);
                        }
                        if(field){
                            fd.append('nameImg', field);
                        }
                        if(itemId){
                            fd.append('id', itemId);
                        }
                        if(index){
                            fd.append('index', index);
                        }
                        var preffix=photoUpload;
                        console.log(preffix+url+'?'+self.suffix)
                        return $http.post(preffix+url+'?'+self.suffix, fd, {
                            withCredentials: true,
                            transformRequest: angular.identity,
                            headers: {'Content-Type': undefined}
                        })
                    }

                    return $q.all(acts)
                        .then(function (res) {
                            //console.log(res)
                            $uibModalInstance.close(res);
                        })
                        .catch(function (err) {
                            exception.catcher('load file')(err)
                            console.log(err)
                        })

                }




                $scope.$watch('fileSrc',function(n,o){
                    if(n && n.indexOf('base64') < 0){
                        //console.log(n)
                        oldImg=n;
                        //console.log(oldImg)
                    }
                });
                $scope.$watch('myFile',function(n,o){
                    if (!n){
                        $scope.noLoad=true;
                    } else {
                        $scope.noLoad=false;
                    }
                });
                $scope.clickFile=function(){
                    var id= '#imagefile'+$scope.now;
                    angular.element(id).trigger('click');
                }
                $scope.uploadImg = function(){
                    if (!scope.itemId) return;
                    var file = scope.myFile;
                    scope.noChange=true;
                    var params={index:scope.index,nameImg:scope.nameImg}
                    if(scope.itemUrl && scope.itemUrl!='undefined'){
                        params.url=scope.itemUrl;
                    }
                    scope.dimen[scope.dimen.length-1]=scope.dimen[scope.dimen.length-1].slice(0,10);
                    var url = scope.dimen.join('/');
                    url +=scope.$ctrl.fileDimension;
                    /*console.log(url)
                     return;*/
                    //console.log(scope.uploadUrl,scope.fileDimension,url)
                    $fileUpload.uploadFileToUrl(file, url,scope.itemId,params)
                        .then(function(res){
                            scope.myFile=null;
                            //console.log(res);
                            scope.noChange=false;
                            scope.noLoad=true;
                            scope.fileSrc=null;
                            //alert('загружено!');
                            var o={_id:scope.itemId}
                            $timeout(function(){
                                //if(!scope.gallery){scope.gallery=[]}
                                if(scope.nameImg=='imgs'){
                                    if(scope.replaceIndex){
                                        scope.gallery[scope.replaceIndex].img=res.data.imgs[0].img
                                        if(oldImg){
                                            console.log('deleting');
                                            Photo.deleteFiles('Stuff',[oldImg]);
                                        }
                                    }else{
                                        scope.gallery.push(res.data.imgs[0]);
                                    }
                                    if(scope.nameImgForSave){
                                        o[scope.nameImgForSave]=scope.gallery;
                                    }else{o[scope.nameImg]=scope.gallery;}

                                    // console.log(scope.gallery)
                                } else if(scope.nameImg=='gallery'){
                                    scope.gallery.push(res.data.gallery[0]);
                                    o[scope.nameImg]=scope.gallery;
                                } else{
                                    if(oldImg){
                                        var small = oldImg.split('/');
                                        small[small.length-1]= small[small.length-1].replace('img','small');
                                        small=small.join('/')
                                        console.log('deleting');
                                        Photo.deleteFiles('Stuff',[oldImg,small]);
                                    }
                                    oldImg=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                    scope.fileSrc=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                    o[scope.nameImg]=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                }


                                var field=(scope.nameImgForSave)?scope.nameImgForSave:scope.nameImg;
                                //console.log(field)
                                //for smallimg
                                if(res.data['small'+scope.nameImg]){
                                    field+=' '+'small'+scope.nameImg;
                                    o['small'+scope.nameImg]=res.data['small'+scope.nameImg];
                                }
                                //console.log(field,o)
                                scope.Item.save({update:field},o)
                            },10)
                        })
                        .catch(function (err) {
                            if(err){
                                exception.catcher('upload video')(err)
                            }

                        })
                }
                self.ok=function(){
                    console.log(self.item)
                    $uibModalInstance.close(self.item);
                }
                self.cancel = function () {
                    $uibModalInstance.dismiss();
                };
            },
            controllerAs:'$ctrl',
            size:'lg',
            resolve: {
                uploadUrl: function () {
                    return uploadUrl;
                },
                field: function () {
                    return field;
                },
                itemUrl: function () {
                    return itemUrl;
                },
                itemId: function () {
                    return itemId;
                },
                index: function () {
                    return index;
                },
            }
        });
        return modalInstance.result
    }



    }])
.factory('Photo',photoFactory)

photoFactory.$inject=['$http'];
function photoFactory($http) {
    return {
        deleteFolder: function(model,folder) {
            return $http.post('/api/collections/Photo/deleteFolder',{folder:folder});
        },
        deleteFolders: function(model,folders) {
            return $http.post('/api/collections/Photo/deleteFolders',{folders:folders});
        },
        deleteFiles: function(model,files) {
            return $http.post('/api/collections/Photo/deleteFiles',{files:files});
        }
    };
    return {
        deleteFolder: function(model,folder) {
            return $http.post(photoUpload+'/api/collections/'+model+'/deleteFolder',{folder:folder});
        },
        deleteFolders: function(model,folders) {
            return $http.post(photoUpload+'/api/collections/'+model+'/deleteFolders',{folders:folders});
        },
        deleteFiles: function(model,files) {
            return $http.post(photoUpload+'/api/collections/'+model+'/deleteFiles',{files:files});
        }
    };
}



'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('menuSections',menuSectionHorizontal)
        .directive('menuSectionsPug',menuSectionHorizontalPug)
        .directive('menuBrandsPug',menuBrandsHorizontalPug)
        .directive('menuSectionsVirtical',menuSectionVirtical)
        .directive('menuSectionsVirticalPug',menuSectionVirticalPug)
        .directive('menuBrandsVirticalPug',menuBrandsVirticalPug)
        .directive('dropdownOnHover',dropdownOnHover)

        .directive('slideMenuAfterScroll',slideMenuAfterScroll)

        .directive('setFonAfterStartScroll', ['$timeout','$state','$rootScope','global',function ($timeout,$state,$rootScope,global) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    var mainContentDiv= $('#mainContentDiv');
                    var templ=global.get('store').val.template;
                    var h1,h2;
                    $timeout(function () {
                        h1= $('#menu1-section').outerHeight();
                        h2= $('#menu2-section').outerHeight();
                        //h2&&(h1+=h2)
                        if(h2){h1+=h2}
                        if(global.get('store').val.template.menu1.hideMenuIfNotHome){
                            h1=h2;
                        }
                        h2=h1;
                        //console.log('h2',h1,h2)
                    })



                    //element.css('margin-top',-h1)

                    $(element).hover(function() {
                        $rootScope.$emit('menuHoverIn')
                        //$(element).addClass('menuColor')
                    },function() {
                        $rootScope.$emit('menuHoverOut')
                        //$(element).removeClass('menuColor')
                    })

                    $rootScope.$on('menuHoverIn',function(){
                        //console.log('menuHoverIn',console.log(element))
                        if(global.get('store').val.template.menu1.BGColorOnHover){
                            $(element).addClass('menuColor')
                        }

                    })
                    $rootScope.$on('menuHoverOut',function(){
                        if(global.get('store').val.template.menu1.BGColorOnHover && !global.get('store').val.template.menu1.background){
                            if(window.pageYOffset<5 && $rootScope.$state.current.name=='home'){
                                $(element).removeClass('menuColor')
                            }
                        }
                    })



                    //element.css('margin-top',-h1)



                    $rootScope.$on('$stateChangeStart', function(event, to){
                        //console.log(to.name)
                        if(to.name!='home'){
                            //console.log(to.name)
                            if(!templ.menu1.marginOther){
                                $(element).addClass('menuColor')
                            }
                            if(!templ.margin){
                                //console.log('templ.margin from setFonAfterStartScroll',templ.margin)
                                $timeout(function () {
                                    //console.log(templ.menu1)
                                    if(templ.menu1.position!='left' && templ.menu1.position!='right' && !templ.menu1.marginOther && templ.menu1.fixed){
                                        //console.log('set margin-top',h1)
                                        mainContentDiv.css('margin-top',h1)
                                    }
                                })
                            }
                        }else{
                            if(!global.get('store').val.template.menu1.background){
                                if(global.get('store').val.template.menu1.BGColorOnHover){
                                    if(window.pageYOffset<5){
                                        //console.log(global.get('store').val.template.menu1)
                                        $(element).removeClass('menuColor')
                                    }
                                }else{
                                    $(element).removeClass('menuColor')
                                }
                            }

                            /*if(window.pageYOffset<5 && !global.get('store').val.template.menu1.background){
                             //console.log(global.get('store').val.template.menu1)
                             $(element).removeClass('menuColor')
                             }*/

                            if(!templ.margin){
                                if(templ.menu1.position!='left' && templ.menu1.position!='right'){
                                    mainContentDiv.css('margin-top',0)
                                }
                            }
                        }
                    })


                    //console.log('link')
                    var is=false;
                    //console.log("attr['setFonAfterStartScroll']",attr['setFonAfterStartScroll'])
                    //console.log("global.get('store').val.template.menu1.BGColorOnHover",global.get('store').val.template.menu1.BGColorOnHover)
                    if(attr['setFonAfterStartScroll']){
                        //console.log(attr['setFonAfterStartScroll'])
                        $(element).addClass('menuColor')
                    }else{
                        //console.log('!!!!!!!!!!!!!!!!!??????????')
                        if(global.get('store').val.template.menu1.BGColorOnHover){
                            $(window).scroll(function(){
                                if(window.pageYOffset>5){
                                    if(!is){
                                        is=true;
                                        $(element).addClass('menuColor')
                                    }
                                }else{
                                    if($rootScope.$state.current.name=='home'){
                                        is=false
                                        $(element).removeClass('menuColor')
                                    }
                                }
                            })
                        }

                    }

                }
            }
        }])
        .directive('setMenuColorClass', ['$rootScope',function ($rootScope) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    console.log(element)
                    $rootScope.$on('$stateChangeStart', function(event, to){
                        if(to.name!='home'){
                            $(element).addClass('menuColor')
                        }else{

                            if(window.pageYOffset<5){
                                $(element).removeClass('menuColor')
                            }
                        }
                    })

                    $rootScope.$on('menuHoverIn',function(){
                        console.log('menuHoverIn',console.log(element))
                        $(element).addClass('menuColor')
                    })
                    $rootScope.$on('menuHoverOut',function(){
                        if($rootScope.$state.current.name=='home'){
                            if(window.pageYOffset<5){
                                $(element).removeClass('menuColor')
                            }
                        }
                    })
                    $(window).scroll(function(){
                        if($rootScope.$state.current.name=='home'){
                            if(window.pageYOffset>5){
                                $(element).addClass('menuColor')
                            }else{
                                $(element).removeClass('menuColor')
                            }
                        }

                    })
                }
            }
        }])
        .directive('marginMainContent22',function(global,$timeout){
            return {
                restrict:'A',
                link:function(scope,element,attrs){
                    var mainContentDiv= $('#mainContentDiv');
                    var templ=global.get('store').val.template;
                    //console.log(templ.menu1,templ.menu2)
                    //if(templ.margin && templ.menu1.is && templ.menu1.fixed && templ.menu1.position=='top'){

                    $timeout(function () {
                        if(templ.margin && templ.menu1.position!='left' && templ.menu1.position!='right'){
                            // console.log('templ.margin from setFonAfterStartScroll',templ.margin)
                            $timeout(function(){
                                var m1=$('#menu1-section')
                                var h1= m1.height();

                                var m2=$('#menu2-section')
                                if(m2){
                                    var h2= m2.height();
                                }
                                h2&&(h1+=h2)
                                //console.log(m1,m2)
                                mainContentDiv.css('margin-top',h1)
                                //element.css('margin-top',h1)
                            })
                        }
                    },100)



                }
            }
        })

        // минимальная высоты страницы что бы футер был по нижнему краю
        .directive('marginMainContent',function($rootScope,$timeout,global){
            return {
                restrict:'A',
                link:function(scope,element,attrs){
                    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
                        $timeout(function () {
                            //console.log(global.get('store').val.template.menu1)
                            if(!global.get('store').val.template.menu1.fixed){return}
                            //console.log('go go')
                            var h =$(document.body).find('#firstDiv').height();
                            var vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                            var delta=vh-h
                            //console.log(h,vh,delta)
                            //console.log()
                            if(delta>30){
                                //console.log($(element[0].querySelector('#mainContentDiv')).css('margin-top'))
                                var mt = $(element[0].querySelector('#mainContentDiv')).css('margin-top');
                                if(mt){
                                    mt=parseInt(mt, 10)
                                }else{
                                    mt=0;
                                }
                                var elH=element.height()
                                /*console.log(mt,elH+delta-mt)
                                console.log(elH,delta,mt)
*/

                                 //console.log(h,vh,delta,elH+delta)
                                //element.css('min-height',elH+delta-mt)
                                element.css('min-height',elH+delta)
                            }
                        },200)

                    })
                }
            }
        })
        .directive('footer22',function($timeout,$rootScope){
            return {
                restrict :'E',
                link:function(scope,element){
                    $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
                        //console.log('$stateChangeStart')
                        element.css('position','static')
                    })
                    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
                        $timeout(function () {
                           /*var h =document.body.clientHeight;
                           var vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                           console.log(h,vh)
                            if(vh-h>20){
                                element.css('position','fixed')
                                element.css('bottom',0)
                            }*/
                        })

                    })
                }
            }
        })

    function menuSectionHorizontal(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenu,
            controllerAs: '$ctrl',
            templateUrl: 'components/menu/menuSectionHorizontel.html',
        }
    }
    function menuSectionHorizontalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenu,
            controllerAs: '$ctrl',

        }
    }
    function menuBrandsHorizontalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuBrands,
            controllerAs: '$ctrl',

        }
    }
    function menuSectionVirtical(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuV,
            controllerAs: '$ctrl',
            templateUrl: 'components/menu/menuSectionVertical.html',
        }
    }
    function menuSectionVirticalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuV,
            controllerAs: '$ctrl',
            //templateUrl: 'components/menu/menuSectionVertical.html',
        }
    }
    function menuBrandsVirticalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuVBrands,
            controllerAs: '$ctrl',
        }
    }
    function dropdownOnHover(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            link: directiveDropdownOnHover,
            controllerAs: '$ctrl',
        }
    }
    directiveMenu.$inject=['Sections','$state','$q','global','$rootScope','$timeout'];
    function directiveMenu(Sections,$state,$q,global,$rootScope,$timeout){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.dropDownCatalog=global.get('store').val.template.dropDownCatalog;
        self.global=global;
        var menuLis;
        var sectionElements=[];
        var innerDivs=[];
        var innerDivsBrand=[];
        /*self.getSectionUrlParams=getSectionUrlParams;
        self.getCategoryUrlParams=getCategoryUrlParams;*/
        activate();
        //*********************************************************
        function activate(){
            //console.log('menu')
            $q.when()
                .then(function(){
                    return Sections.getSections();
                } )
                .then(function(sections){
                    global.get('brands').val.forEach(function(sec,i){
                        var el=$('#s'+sec._id );
                        var innerDiv=$(el).find('#innerDivBrand'+sec._id );
                        innerDivsBrand.push(innerDiv)
                    })


                    self.sections=sections.filter(function(el){return !el.parent && el.level===0});
                    setTimeout(function(){
                        // для горизонтального меню
                        var w=$(window ).width()
                        self.sections.forEach(function(sec,i){
                            var el=$('#s'+sec._id );
                            var elJS = document.getElementById('s'+sec._id);
                            document.getElementById

                            //if(sec.categories.length<2 && !sec.child.length){return}
                            var sec_element_offset=el.offset();
                            /*console.log(sec_element_offset)
                            console.log(elJS,elJS.getBoundingClientRect())
                            console.log(document.body.getBoundingClientRect)*/
                            if(sec_element_offset){
                                var offsetLeft;
                                if(elJS && elJS.getBoundingClientRect){
                                    //console.log('pageXOffset',pageXOffset)
                                    offsetLeft = pageXOffset + elJS.getBoundingClientRect().x
                                    //console.log('offsetLeft getBoundingClientRect',offsetLeft,sec_element_offset.left)
                                }
                                if(!offsetLeft &&  elJS && elJS.DOMRect){
                                    offsetLeft = pageXOffset + elJS.DOMRect.left
                                    console.log('offsetLeft DOMRect',offsetLeft,sec_element_offset.left)
                                }
                                if(!offsetLeft){
                                    offsetLeft=sec_element_offset.left
                                }
                                var innerDiv=$('#innerDiv'+sec._id );
                                var container=innerDiv.find('div');
                                var sub_menu=container.find('.sub-menu')

                                el.innerDiv=innerDiv;
                                //innerDivs.push(innerDiv)
                                innerDiv.css('left','-'+offsetLeft+'px')
                                bindHoverLi(el,i);
                                sectionElements.push(el)
                            }
                        })
                        $('.innerDiv' ).width(w)
                    },300);
                } )
                .catch(function(err){
                    console.log(err)
                })
        }
        $rootScope.$on('$stateChangeStart', function (ev) {
            //console.log('ddd in directiveMenu')
            for(var i=0,l=innerDivs.length;i<l;i++){
                if(innerDivs[i][0]){
                    if(innerDivs[i].is(':hover')){
                        //console.log('do it')
                        sectionElements[i].unbind()
                        innerDivs[i].slideUp(function(){
                            $timeout(function(){
                                bindHoverLi(sectionElements[i],i);
                            },700)
                        })
                        break;
                    }
                }

            }
            return;
        })
        function closeRest() {
            for(var i=0,l=innerDivsBrand.length;i<l;i++){
                innerDivsBrand[i].hide();
            }
        }
        function bindHoverLi(li,ii){
            if(self.clickMenu){
                //console.log(bindHoverLi)
                li.click(function(e) {
                    if($(e.target).hasClass('sibsection')){
                        li.find('.section-in-section').each(function (i,li2) {
                            $(li2).hover(function() {
                                //li.innerDiv.slideDown()
                                if(self.dropDownCatalog==1){
                                    $(li2).find('.sub-menu').stop(true, false, true).slideDown('slow');
                                }else if(self.dropDownCatalog==2){
                                    $(li2).find('.sub-menu').stop(true, false, true).slideDown('fast');
                                }else{
                                    $(li2).find('.sub-menu').stop(true, false, true).show();
                                }

                            },function() {
                                if(self.dropDownCatalog==1){
                                    $(li2).find('.sub-menu').stop(true, false, true).hide();
                                }else if(self.dropDownCatalog==2){
                                    $(li2).find('.sub-menu').stop(true, false, true).hide();
                                }else{
                                    $(li2).find('.sub-menu').stop(true, false, true).hide();
                                }
                            })
                        })
                    }else{
                        closeRest();
                        for(var i=0,l=sectionElements.length;i<l;i++){
                            if(sectionElements[i][0].id==li[0].id){
                                if(self.dropDownCatalog==1){
                                    li.innerDiv.stop(true, false, true).slideToggle('slow');
                                }else if(self.dropDownCatalog==2){
                                    li.innerDiv.stop(true, false, true).slideToggle('fast');
                                }else{
                                    li.innerDiv.stop(true, false, true).toggle();
                                }

                            }else{
                                if(self.dropDownCatalog==1){
                                    sectionElements[i].innerDiv.slideUp('slow');
                                }else if(self.dropDownCatalog==2){
                                    sectionElements[i].innerDiv.slideUp('fast');
                                }else{
                                    sectionElements[i].innerDiv.hide();
                                }


                            }
                        }
                    }

                });
            }else{
                li.hover(function() {
                    //li.innerDiv.slideDown()
                    if(self.dropDownCatalog==1){
                        li.innerDiv.stop(true, false, true).slideDown('slow');
                    }else if(self.dropDownCatalog==2){
                        li.innerDiv.stop(true, false, true).slideDown('fast');
                    }else{
                        li.innerDiv.stop(true, false, true).show();
                    }

                },function() {
                    if(self.dropDownCatalog==1){
                        li.innerDiv.stop(true, false, true).slideUp('slow');
                    }else if(self.dropDownCatalog==2){
                        li.innerDiv.stop(true, false, true).slideUp('fast');
                    }else{
                        li.innerDiv.stop(true, false, true).hide();
                    }

                    //li.innerDiv.slideUp();
                })
                li.find('.section-in-section').each(function (i,li2) {
                    $(li2).hover(function() {
                        //li.innerDiv.slideDown()
                        if(self.dropDownCatalog==1){
                            $(li2).find('.sub-menu').stop(true, false, true).slideDown('slow');
                        }else if(self.dropDownCatalog==2){
                            $(li2).find('.sub-menu').stop(true, false, true).slideDown('fast');
                        }else{
                            $(li2).find('.sub-menu').stop(true, false, true).show();
                        }

                    },function() {
                        if(self.dropDownCatalog==1){
                            $(li2).find('.sub-menu').stop(true, false, true).hide();
                        }else if(self.dropDownCatalog==2){
                            $(li2).find('.sub-menu').stop(true, false, true).hide();
                        }else{
                            $(li2).find('.sub-menu').stop(true, false, true).hide();
                        }
                    })
                })

            }

        }

    }
    directiveMenuV.$inject=['Sections','$state','$q','global','$rootScope','$element'];
    function directiveMenuV(Sections,$state,$q,global,$rootScope,$element){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.global=global;
        var sectionElements=[],innerDivs=[];
        var menuLis;
        activate();
        //*********************************************************
        function activate(){
            $q.when()
                .then(function(){
                    return Sections.getSections();
                } )
                .then(function(sections){
                    //console.log(sections)
                    self.sections=sections.filter(function(el){return !el.parent && el.level===0 && !el.hideSection});
                    setTimeout(function(){
                        /*menuLis=$('.myMenuV .mainli');
                        bindHover(menuLis);*/
                        self.sections.forEach(function(sec,i){
                            var el=$('#s'+sec._id )
                            var innerDiv=el.children('div')
                            innerDivs.push(innerDiv)
                            //console.log(el)
                            bindHoverLi(el,i);
                            sectionElements.push(el);
                        })

                        var innerUl = $element.find('.category-in-section');
                        $(innerUl).each(function (i,section) {
                            var ul = $(section).find('ul');
                            //console.log('slideToggle',ul)
                            $(ul).slideToggle()

                            $(section).click(function(e) {
                                console.log('section',section)
                                //e.stopPropagation()
                                $(ul).stop(true, false, true).slideToggle(300);
                            });
                        })


                    },100);
                } )
                .catch(function(err){
                    console.log(err)
                })
        }
        function bindHoverLi(li,ii){
            if(!self.sections[ii] || !self.sections[ii].openCatalog){
                $(innerDivs[ii]).slideToggle();
            }
            console.log(li,ii,self.clickMenu)
            if(self.clickMenu){
                li.click(function(e) {

                    for(var i=0,l=innerDivs.length;i<l;i++){
                        if(i==ii){
                            $(innerDivs[i]).stop(true, false, true).slideToggle(300);
                        }else{
                            //innerDivs[i].hide();
                        }

                    }
                });
            }else{
                li.hover(function() {
                    $(innerDivs[ii]).stop(true, false, true).slideToggle(300);
                });
            }
        }
    }

    directiveMenuBrands.$inject=['Sections','$state','$q','global','$rootScope','$timeout','$element'];
    function directiveMenuBrands(Sections,$state,$q,global,$rootScope,$timeout,$element){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.global=global;
        var menuLis;
        var sectionElements=[];
        var innerDivs=[];
        var innerDivsSection=[];
        activate();
        //*********************************************************
        function activate(){
            $q.when()
                .then(function(){
                    return Sections.getSections();
                } )
                .then(function(sections){

                    sections.forEach(function(sec,i){
                        var el=$('#s'+sec._id );
                        var innerDiv=$(el).find('#innerDiv'+sec._id );
                        innerDivsSection.push(innerDiv)
                    })


                    self.brands=(global.get('brands').val)?global.get('brands').val:[];
                    setTimeout(function(){
                        // для горизонтального меню
                        var w=$(window ).width()
                        //console.log(w)
                        var index=0;
                        self.brands.forEach(function(sec,i){
                            if(!sec.display){return}
                            var el=$('#s'+sec._id );
                            var sec_element_offset=el.offset();
                            //console.log(sec_element_offset)
                            if(sec_element_offset){
                                var offsetLeft=sec_element_offset.left
                                var innerDiv=$element.find('#innerDivBrand'+sec._id);
                                el.innerDiv=innerDiv;
                                //innerDivs.push(innerDiv)
                                innerDiv.css('left','-'+offsetLeft+'px')
                                bindHoverLi(el,index);
                                sectionElements.push(el)
                                index++
                            }
                        })
                        $('.innerDiv' ).width(w)
                    },100);
                } )
                .catch(function(err){
                    console.log(err)
                })
        }
        $rootScope.$on('$stateChangeStart', function (ev) {
             //console.log('ddd in brands')
            for(var i=0,l=innerDivs.length;i<l;i++){
                if(innerDivs[i][0]){
                    if(innerDivs[i].is(':hover')){
                        //console.log('do it')
                        sectionElements[i].unbind()
                        innerDivs[i].slideUp(function(){
                            $timeout(function(){
                                bindHoverLi(sectionElements[i],i);
                            },700)
                        })
                        break;
                    }
                }

            }
            return;
        })
        function closeRest() {
            for(var i=0,l=innerDivsSection.length;i<l;i++){
                innerDivsSection[i].hide();
            }
        }
        function bindHoverLi(li,ii){
            if(self.clickMenu){
                li.click(function(e) {
                    closeRest();
                    for(var i=0,l=sectionElements.length;i<l;i++){
                        if(sectionElements[i][0].id==li[0].id){
                            li.innerDiv.stop(true, false, true).toggle();
                        }else{
                            sectionElements[i].innerDiv.hide();
                        }
                    }
                });
            }else{
                li.hover(function() {
                    li.innerDiv.stop(true, false, true).show();
                },function() {
                    li.innerDiv.stop(true, false, true).hide();
                })

            }
        }

    }
    directiveMenuVBrands.$inject=['Sections','$state','$q','global','$rootScope'];
    function directiveMenuVBrands(Sections,$state,$q,global,$rootScope){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.global=global;
        var sectionElements=[],innerDivs=[];
        var menuLis;
        activate();
        //*********************************************************
        function activate(){
            self.brands=(global.get('brands').val)?global.get('brands').val:[];
            setTimeout(function(){
                /*menuLis=$('.myMenuV .mainli');
                 bindHover(menuLis);*/
                var index=0;
                self.brands.forEach(function(sec,i){
                    if(!sec.display){return}
                    var el=$('#s'+sec._id )
                    var innerDiv=el.children('div')
                    innerDivs.push(innerDiv)
                    bindHoverLi(el,index);
                    sectionElements.push(el);
                    index++
                })


            },100);
        }
        function bindHoverLi(li,ii){
            $(innerDivs[ii]).slideToggle();
            //console.log(innerDivs[ii])
            if(self.clickMenu){
                li.click(function(e) {
                    for(var i=0,l=innerDivs.length;i<l;i++){
                        if(i==ii){
                            innerDivs[i].stop(true, false, true).slideToggle(300);
                        }else{
                            //innerDivs[i].hide();
                        }

                    }
                });
            }else{
                li.hover(function() {
                    innerDivs[ii].stop(true, false, true).slideToggle(300);
                });
            }
        }

    }

    function directiveDropdownOnHover(scope,element,arrts){
        activate();
        function activate(){
            //console.log('???')
            $(element).children('ul').hide()
            bindHover()
        }
        function bindHover(){
            //console.log('sss')
            $(element).hover(function() {
                $(this).children('ul').stop(true, false, true).slideToggle(200);
            });
        }
    }

    function slideMenuAfterScroll(global,$timeout,$rootScope){
        return {
            restrict:'A',
            link:function(scope,element,attrs){
                var firstLook=true;
                var menu=attrs['slideMenuAfterScroll'];

                var menuHide=attrs['hideMenu'];
                /*console.log(attrs)
                console.log('menuHide',menuHide)*/

                var template=global.get('store').val.template;
                var offset = 199;
                var done;
                var h=$('#menu1-section').height();

                if(menu=='menu2' && template.menu2.fixed && template.menu2.is && template.menu2.position=='top'){
                    //console.log('????')
                    //$(element).css('top',h+'px')
                }

                if(menu=='menu1' && template.menu1.fixed && template.menu1.position=='top' && template.menu1.scrollSlide){
                    $(window).scroll(scrollHandlerMenu1)
                }else if(menu=='menu2' && template.menu1.fixed && template.menu1.position=='top' && template.menu2.position=='top'  && template.menu1.scrollSlide){
                    $(window).scroll(scrollHandlerMenu2)
                }

                function scrollHandlerMenu1(){
                    if(menuHide && $rootScope.$state.current.name!='home'){
                        return
                    }

                    var scrolled = window.pageYOffset || document.documentElement.scrollTop;
                    if (scrolled > offset && !done) {
                        done=true;
                        $rootScope.$emit('hideMenu1AfterScroll')
                        $(element).css('top','-'+h+'px')
                    } else if (scrolled < offset && done) {
                        done=false;
                        $rootScope.$emit('showMenu1AfterScroll')
                        $(element).css('top',0)
                    }
                }

                function scrollHandlerMenu2(){
                    if(menuHide && $rootScope.$state.current.name!='home'){
                        return
                    }
                    var scrolled = window.pageYOffset || document.documentElement.scrollTop;

                    if (scrolled > offset && !done) {
                        done=true;
                        $(element).css('top',0)
                    }else if (scrolled < offset && done) {
                        done=false;
                        $(element).css('top',h+'px')
                    }
                }

                var logo,logoInverse;
                var cart,cartInverse;
                var humb,humbInverse;
                var likes,likesInverse;

                //http://stackoverflow.com/questions/4306387/jquery-add-and-remove-window-scrollfunction
                // можно еще делать bind unbind function in relative of $sate
                //console.log(template.inverseColor)
                if(template.inverseColor && template.inverseColor.use){
                    if(template.inverseColor.homePage){
                        listenState()
                    }
                    $timeout(function(){
                        logo=$("#mainLogo")
                        logoInverse=$("#inverseLogo")
                        cart=$("#mainCart")
                        cartInverse=$("#inverseCart")
                        humb=$("#mainHumb")
                        humbInverse=$("#inverseHumb")
                        likes=$("#mainLikes")
                        likesInverse=$("#inverseLikes")
                        if(template.inverseColor.startScroll){
                            listenScroll()
                        }else if(template.inverseColor.firstBanner){
                            listenBanner()
                        }
                    },300)
                }
                function inverseNone(){
                    logoInverse.css('display','none')
                    logo.css('display','block')
                    likesInverse.css('display','none')
                    likes.css('display','block')

                    cartInverse.css('display','none')
                    cart.css('display','block')
                    humbInverse.css('display','none')
                    humb.css('display','block')
                }
                function inverseBlock(){
                    logo.css('display','none')
                    logoInverse.css('display','block')
                    likes.css('display','none')
                    likesInverse.css('display','block')
                    cart.css('display','none')
                    cartInverse.css('display','block')
                    humb.css('display','none')
                    humbInverse.css('display','block')
                }
                function listenState() {
                    $rootScope.$on('$stateChangeSuccess', function(event, to, toParams, fromState, fromParams){
                        //console.log(to,toParams)
                        var delay=0;
                        if(firstLook){
                            delay=500;
                            firstLook=false;
                        }
                        $timeout(function () {
                            if(to.name=='home'){
                                element.removeClass('inverseColor')
                                inverseNone()
                            }else{
                                element.addClass('inverseColor')
                                inverseBlock()
                            }
                        },delay)

                    })
                }
                function listenScroll() {
                    $(window).scroll(function () {
                        if($rootScope.$state.current.name!='home'){
                            return
                        }
                        if(template.inverseColor.homePage && $rootScope.$state.current.name!='home'){return}


                        var scrolled = window.pageYOffset || document.documentElement.scrollTop;
                        if (scrolled > 10) {
                            element.addClass('inverseColor')
                            inverseBlock()
                        } else {
                            element.removeClass('inverseColor')
                            inverseNone()
                        }
                    })
                }
                function listenBanner() {
                    var el = document.getElementById('arrowDownDiv')
                    if(!el){return}
                    //console.log(el)
                    var elOffsetY=$(el).offset().top
                    $(window).scroll(function () {
                        if($rootScope.$state.current.name!='home'){
                            return
                        }
                        //console.log($rootScope.$state.current.name)
                        var scrolled = window.pageYOffset || document.documentElement.scrollTop;
                        //console.log($(el).height()+elOffsetY,scrolled)
                        if(($(el).height()+elOffsetY)-10>scrolled){
                            element.removeClass('inverseColor')
                            inverseNone()
                        }else{
                            element.addClass('inverseColor')
                            inverseBlock()
                        }
                    })
                }


                $rootScope.$on('$stateChangeSuccess', function(event, to, toParams, fromState, fromParams){
                    if(menuHide){
                        if(to.name=='home'){
                            $rootScope.$emit('showMenu1AfterScroll')
                            if(menu=='menu1'){
                                $(element).css('top',0)
                            }else{
                                $(element).css('top',h+'px')
                            }

                        }else{
                            $rootScope.$emit('hideMenu1AfterScroll')
                            if(menu=='menu1'){
                                $(element).css('top','-'+h+'px')
                            }else{
                                $(element).css('top',0)
                            }

                        }
                    }

                })
            }
        }
    }



})()


'use strict';
(function(){
    'use strict';
    angular.module('gmall.services')
        .factory('Session',['$resource', function ($resource) {
            return $resource('/api/session/');
        }])
        .factory('User', function ($resource) {
            return $resource('/api/users/:id/:email', {
                id: '@id'
            }, { //parameters default
                update: {
                    method: 'PUT',
                    params: {
                        id:'profile',
                        email:''
                    }
                },
                updateCoupon: {
                    method: 'PUT',
                    params: {
                        id:'coupon',
                        email:''
                    }
                },
                updatePswd: {
                    method: 'PUT',
                    params: {
                        // id:'profile'
                        id:'changepswd',
                        email:''
                    }
                },
                resetPswd: {
                    method: 'POST',
                    params: {
                        id:'resetpswd',
                        email:'@email'
                    }
                },
                get: {
                    method: 'GET',
                    params: {
                        id:'me',
                        email:''
                    }
                },
                checkEmail: {
                    method: 'GET',
                    params: {
                        id:'checkemail',
                       /* email:''*/
                    }
                },
                checkPhone: {
                    method: 'GET',
                    params: {
                        id:'checkphone',
                       /* email:''*/
                    }
                },
                useCoupon: {
                    method: 'GET',
                    params: {
                        id:'useCoupon'
                    }
                },
                cancelCoupon: {
                    method: 'GET',
                    params: {
                        id:'cancelCoupon'
                    }
                },
                repeatMailForConfirm: {
                    method: 'GET',
                    params: {
                        id:'repeatMailForConfirm'
                    }
                },

            });
        })
        .service('$user', userService)
        .service('UserEntry', userEntryService)
        .factory('Account', accountFactory)
        .factory('sendPhoneFactory', sendPhoneFactory)
        .service('SubscibtionList', subscibtionListService)

    userService.$inject=['$resource','$uibModal','$q','Session','User','global','exception','$state','$window','$rootScope','$http','$auth','Account'];
    function userService($resource,$uibModal,$q,Session,User,global,exception,$state,$window,$rootScope,$http,$auth,Account){
        var Items= $resource('/api/collections/User/:_id',{_id:'@_id'});
        //console.log(userHost)
        this.query=Items.query;
        this.get=Items.get;
        this.delete=Items.delete;
        this.save=Items.save;
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            selectItem:selectItem,
            selectOrCreat:selectOrCreat,
            login:login,
            loginOnlyPhone:loginOnlyPhone,
            logout:logout,
            saveProfile:saveProfile,
            newUser:newUser,
            newUserByPhone:newUserByPhone,
            query:Items.query,
            getInfo:getInfo,
            createUser:createUser,
            changePswd:changePswd,
            getInfoBonus:getInfoBonus,
            changeEmail:changeEmail,
            changePhone:changePhone,
            checkEmailForExist:checkEmailForExist,
            checkPhoneForExist:checkPhoneForExist,
        }

        function newUser(name,email,password){
            if(!name){
                name=email.split('@')[0]
            }
            return User.save({name: name, email: email,password: password,action:'subscribtion'} ).$promise
                .then( function(user) {
                    $rootScope.emit('CompleteRegistration')
                    //console.log(user)
                    if(global && global.get('user')){global.set('user',user);}
                    if ((global.get('local') && !global.get('local').val) && $window.ga){
                        $window.ga('send', 'event','registration','complete');}
                    if ($state.current.name!='cart' && $state.current.name!='couponDetail'){
                        var states= $state.get();
                        if(global.get('paps') && states.some(function(state){return state.name=='thanksPage'})){
                            var pap = global.get('paps').val.getOFA('action','subscribtion');
                            if (pap && pap.url){
                                $state.go('thanksPage',{url:pap.url})
                            } else {
                                //exception.showToaster('note','Подписка','вы успешно зарегистрировались');
                            }
                        }else{
                            //exception.showToaster('note','Подписка','вы успешно зарегистрировались');
                        }
                    }else {
                        //exception.showToaster('note','Подписка','вы успешно зарегистрировались');
                    }
                    return user;
                })
        }
        function newUserByPhone(name,phone,confirmCondition) {
            var email= phone+'@gmall.io'
            var user = {email:email,name:name,profile:{phone:phone,fio:name}};
            if(confirmCondition){
                user.confirmCondition=confirmCondition;
            }
            return $auth.signup(user)
                .then(function(response) {
                    console.log(response)
                    if(response && response.data &&  response.data.token){
                        if(response.data.token=='update'){
                            throw null;
                        }else{
                            //$auth.setToken(response);
                            //return Account.getProfile()
                        }
                    } else{
                        throw response;
                    }

                })
                .then(function(response){
                    /*console.log(response)
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                    }*/

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('new client')(err)
                    }
                })

        }
        function getList(paginate,query){
            //console.log(query)
            if(!paginate){paginate={}}
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
            function getListFailed(error) {
                /*console.log('XHR Failed for getList.' + error.data);
                console.log(error.data)*/
                return $q.reject(error);
            }
        }
        function getItem(id,param){
            return Items.get({_id:id,param:param}).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function selectItem(query){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/selectUser.html',
                    controller: function($user,$uibModalInstance,query){
                        //console.log(query)
                        var cashQuery=angular.copy(query)
                        var self=this;
                        self.items=[];
                        self.name='';
                        var paginate={page:0,rows:30,items:0}
                        self.search = function(name){
                            var q=angular.copy(query);
                            if (name.length<3){return}
                            //console.log(query)
                            if(q){
                                if (!q.$and){q={$and:[query]}}
                                q.$and.push({$or:[{name:name},{email:name}, {'profile.fio':name}]})
                            }else{
                                q={$or:[{name:name},{email:name}, {'profile.fio':name}]}
                            }
                            //console.log(query)
                            $user.getList(paginate,q).then(function(res){
                                self.items=res;
                            })
                        }
                        self.selectItem=function(item){
                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',
                    resolve:{
                        query:function(){
                            return query;
                        }
                    }
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })

        }

        function selectOrCreat(){
            //console.log('lddl')
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/selectOrCreate.html',
                    controller: function($user,UserEntry,$http,global,$uibModalInstance){
                        var self=this;
                        self.items=[];
                        self.user='';
                        self.oldPhone=null;
                        self.userName='name';
                        self.userEmail='';
                        self.global=global;
                        self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
                        self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';
                        var paginate={page:0,rows:30,items:0}
                        self.refreshUsers=refreshUsers;
                        self.addUser=addUser;
                        self.clearUser=clearUser;
                        function refreshUsers(str){
                            if (str.length<3){return}
                            //var newVal = phone.replace(pattern, '').substring(0,10);
                            //self.oldPhone=phone
                            //if(self.oldPhone==phone){return}else{self.oldPhone=phone}
                            searchUser(str)
                        }
                        var reg = new RegExp(/^\d+$/);
                        function searchUser(str){
                            /*console.log(reg.test(str))
                            console.log(str,jQuery.isNumeric(str))*/
                            if(isNumeric(str)){
                                if(str.length>10){
                                    self.oldPhone=str.substring(0,10);
                                }/*else{
                                    var d = 10-str.length;
                                    for(var i=0;i<d;i++){
                                        str+='0';
                                    }
                                    self.oldPhone=str
                                }*/

                                self.userName=''
                            }else{
                                self.oldPhone=null;
                                self.userName=str;
                            }

                            self.users=[]
                            var users=[];
                            var q={$or:[{name:str},{email:str}, {'profile.fio':str},{'profile.phone':str}]}
                            var q1= {$or:[{'phone':str},{name:str},{email:str}]}

                            var acts=[];
                            q={search:str}
                            acts.push(get$user(q))
                            //acts.push(getEntryUser(q1))
                            $q.all(acts)
                                .then(function(res){
                                    if(res[0] && res[0].length){
                                        res[0].forEach(function(item){
                                            item.type='user'
                                            users.push(item)
                                        })
                                    }
                                    /*if(res[1] && res[1].length){
                                        res[1].forEach(function(item){
                                            item.type='userEntry'
                                            users.push(item)
                                        })
                                    }*/
                                    self.users=users;
                                    //console.log(self.users)
                                })


                        }
                        function get$user(q){
                            return $user.query(q).$promise
                            return $user.getList(paginate,q)
                        }
                        function getEntryUser(q){
                            return  UserEntry.getList(paginate,q)
                        }
                        function addUser(){
                           console.log('add user')
                            var user={name:self.userName,
                                email:self.userEmail,
                                profile:{fio:self.userName,phone:self.phoneCode.substring(1)+self.oldPhone.substring(0,10),}
                                //phone:self.phoneCode.substring(1)+self.oldPhone.substring(0,10),
                                //type:"userEntry"
                            }
                            if(!self.userEmail){
                               user.email=user.profile.phone+"@gmall.io"
                            }
                            return $q.when()
                                .then(function(){
                                    return $user.checkEmailForExist(user.email)
                                })
                                .then(function(res){
                                    if(res && res.exist){throw 'email exist'}
                                })
                                .then(function(){
                                    var uploadUrl='/api/createUser'
                                    return $http.post(userHost+uploadUrl,user);
                                })
                                /*.then(function(){
                                    return User.save(user).$promise
                                })*/
                                .then(function(res){
                                    //console.log(res)
                                    user._id=(res.data && res.data._id)?res.data._id:res.data.id;
                                    self.addingUser=false;
                                    self.userName='';
                                    self.user=user;
                                    //console.log(user)
                                    self.oldPhone=''
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('новый клиент')(err)
                                    }
                                })
                        }
                        function clearUser(){
                            self.user=null;
                        }
                        self.ok=function(){
                            $uibModalInstance.close(self.user);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        function isNumeric(n) {
                            return !isNaN(parseFloat(n)) && isFinite(n);
                        }
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',

                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })

        }
        function saveProfile(user){
            return Items.save({update:'profile'},{_id:user._id,profile:user.profile}).$promise;
        }
        function login(bookeep){
            return $q(function(resolve,reject){
                if(global.get('user') && global.get('user').val && global.get('user').val._id){
                    return resolve()
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: function () {
                        return ((bookeep)?'components/user/modal/login-only.html':'components/user/modal/login-sign.html')
                    },
                    controller: loginCtrl2,
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        function loginOnlyPhone(){
            return $q(function(resolve,reject){
                if(global.get('user') && global.get('user').val && global.get('user').val._id){
                    return resolve()
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/login-sign.onlyPhone.html',
                    controller: loginOnlyPhoneCtrl,
                    controllerAs:'$ctrl',
                    windowClass:'modalProject',
                    backdropClass:'modalBackdropClass',
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        function getInfo(service){
            service=false;
            service=(service)?'Service':'Good'
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/getInfo.html',
                    controller: getInfoCtrl,
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                    resolve:{
                        service:function(){return service}
                    }
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        getInfoCtrl.$inject=['$uibModalInstance','exception','global','User','$q','$http','service',Account];
        function getInfoCtrl($uibModalInstance,exception,global,User,$q,$http,service,Account){
            var self=this;
            self.service=service;
            self.global=global;
            self.user=global.get('user' ).val;
            if(!self.user){
                self.user={email:'',profile:{}};
            }
            self.ok=closeModal;
            function  closeModal(){
                $q.when()
                    .then(function(){
                        // если не авторизированy
                        /*нужен айд пользователя*/
                        if(!self.user._id){
                            return $http.post('/auth/signupOrder',self.user)
                        }else{
                            // обновляем профайл
                            return Items.save({update:'profile'},{_id:self.user._id,profile:self.user.profile}).$promise
                        }
                    })
                    .then(function(response){
                        if(response && response.data && response.data.token){
                            $auth.setToken(response);
                            return Account.getProfile()
                        }else if(response && response.data && response.data._id) {
                            self.user._id = response.data._id;
                        }/*else{
                            $uibModalInstance.dismiss('не получилось авторизировать');
                        }*/

                    })
                    .then(function(){
                        if (global.get('user').val){
                            self.user=global.get('user').val;
                        }
                        $uibModalInstance.close(self.user);
                    })

            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }


        function getInfoBonus(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/getInfoBonus.html',
                    controller: getInfoBonusCtrl,
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        getInfoBonusCtrl.$inject=['$uibModalInstance','exception','global','User','$q','$http','Account','$auth'];
        function getInfoBonusCtrl($uibModalInstance,exception,global,User,$q,$http,Account,$auth){
            var self=this;
            self.global=global;
            self.user=global.get('user').val;
            self.formData=(global.get('store').val.bonusForm)?global.get('store').val.bonusForm:null;
            //console.log(self.formData)
            if(!self.user){
                self.user={email:'',profile:{},addInfo:{}};
            }
            self.ok=closeModal;
            function  closeModal(){
                $q.when()
                    .then(function(){
                        // если не авторизированy
                        /*нужен айд пользователя*/
                        if(!self.user._id){
                            return $http.post('/auth/signupOrder',self.user)
                        }else{
                            // обновляем профайл
                            return Items.save({update:'profile'},{_id:self.user._id,profile:self.user.profile}).$promise
                        }
                    })
                    .then(function(response){
                        if(response && response.data && response.data.token){
                            $auth.setToken(response);
                            return Account.getProfile()
                        }else if(response && response.data && response.data._id) {
                            self.user._id = response.data._id;
                        }

                    })
                    .then(function(){
                        if (global.get('user').val){
                            self.user=global.get('user').val;
                        }
                        $uibModalInstance.close(self.user);
                    })

            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }

        function createUser(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/createUser.html',
                    controller: function($user,$uibModalInstance,$http,$q,exception){
                        var self=this;
                        self.user={profile:{}}
                        self.ok=function(form){
                            if(form.$invalid){return}
                            self.blockButton=true;
                            $q.when()
                                .then(function () {
                                    if(self.user.profile && self.user.profile.phone){
                                        var phone=self.user.profile.phone
                                        //return $user.checkPhoneForExist(phone)
                                        return $user.getItem(phone,'profile.phone')
                                    }else {
                                        return null;
                                    }
                                })
                                .then(function(res){
                                    //console.log(res)
                                    if(res && res._id){throw 'phone exist'}
                                })
                                .then(function(){
                                    return $user.checkEmailForExist(self.user.email)
                                })
                                .then(function(res){
                                    if(res && res.exist){throw 'email exist'}
                                })
                                .then(function(){
                                    var uploadUrl='/api/createUser'
                                    return $http.post(userHost+uploadUrl,self.user);
                                })
                                .then(function(res){
                                    $uibModalInstance.close(res);
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('error')(err)
                                    }
                                    self.blockButton=false;
                                    //$uibModalInstance.dismiss(err);
                                })
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    //size: 'lg',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })
        }
        function changeEmail(userId){
            //console.log('userId',userId)
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/changeEmail.html',
                    controller: function($user,global,$uibModalInstance,$http,$q,exception){
                        var self=this;
                        self.global=global;
                        self.checkEmail=checkEmail;
                        self.email=''
                        self.ok=function(){
                            if(!self.cheched){
                                exception.catcher('change email')('email используется')
                                return;
                            }
                            self.blockButton=true;
                            $q.when()
                                .then(function(){
                                    return Items.save({update:'email'},{_id:userId,email:self.email})
                                    //return User.changeEmail({email:self.email,id:userId})
                                })
                                .then(function(res){
                                    $uibModalInstance.close(self.email);
                                })
                                .catch(function(err){
                                    self.blockButton=false;
                                })
                            return;
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        function checkEmail(email,valid) {
                            if(!valid){
                                self.cheched=false;
                                return;
                            }
                            $q.when()
                                .then(function(){
                                    return $user.checkEmailForExist(email)
                                })
                                .then(function(res){
                                    if(res && !res.exist){
                                        self.cheched=true;
                                    }else{
                                        throw 'email exist'
                                    }
                                    //console.log(self.cheched)
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('change email')(err)
                                    }
                                    self.cheched=false;
                                })
                        }
                    },
                    controllerAs:'$ctrl',
                    windowClass:'modalProject',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })
        }
        function checkEmailForExist(email,_id) {
            return $q(function (rs,rj) {
                var o={email:email}
                if(_id){
                    o['_id']=_id
                }
                //console.log(o)
                User.checkEmail(o,function (res) {
                    //console.log(res)
                    rs(res)
                },function (err) {
                    //console.log(err)
                  rj(err)
                })

            })
        }
        function checkPhoneForExist(phone,_id) {
            return $q(function (rs,rj) {
                var o={email:phone}
                if(_id){
                    o['_id']=_id
                }
                User.checkPhone(o,function (res) {
                    //console.log(res)
                    rs(res)
                },function (err) {
                    //console.log(err)
                    rj(err)
                })

            })
        }
        function changePhone(userId){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/changePhone.html',
                    controller: function($user,global,$uibModalInstance,$http,$q,exception){
                        var self=this;
                        self.global=global;
                        self.checkPhone=checkPhone;
                        self.email=''
                        self.ok=function(){
                            //console.log(self.phone)
                            if(!self.phone){
                                exception.catcher('change phone')('phone???')
                                return;
                            }
                            self.blockButton=true;
                            $q.when()
                                .then(function () {
                                    return checkPhone(self.phone)
                                })
                                .then(function(){
                                    var o ={_id:userId}
                                    o['profile.phone']=self.phone;
                                    return Items.save({update:'profile.phone'},o)
                                })
                                .then(function(res){
                                    $uibModalInstance.close(self.phone);
                                })
                                .catch(function(err){
                                    exception.catcher('change phone')(err)
                                    self.blockButton=false;
                                })
                            return;
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        function checkPhone(phone) {
                            return $q.when()
                                .then(function(){
                                    return $user.checkPhoneForExist(phone)
                                })
                                .then(function(res){
                                    if(!res || res.exist){
                                        throw 'phone exist'
                                    }
                                })
                        }
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })
        }
        function changePswd(_id){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/changePswd.html',
                    controller: function($user,global,$uibModalInstance,$http,$q,_id){
                        var self=this;
                        self.global=global;
                        self.user={_id:_id,password:''}
                        self.ok=function(){
                            $q.when()
                                .then(function(){
                                    var uploadUrl='/api/changePswd'
                                    return $http.post(userHost+uploadUrl,self.user);
                                })
                                .then(function(res){
                                    $uibModalInstance.close(res);
                                })
                                .catch(function(err){
                                    $uibModalInstance.dismiss(err);
                                })
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    resolve:{_id:function(){return _id}},
                    windowClass:'modalProject',
                    //size: 'lg',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })

        }
        function logout(callback) {
            var cb = callback || angular.noop;
            return Session.delete(function() {
                    global.set('user',null);
                    //$rootScope.$broadcast('logout', null);
                    return cb();
                },
                function(err) {
                    return cb(err);
                }).$promise;
        }

        loginCtrl2.$inject=['$scope','$uibModalInstance','exception','global','User','$state']
        function loginCtrl2($scope,$uibModalInstance,exception,global,User,$state){
            var self=this;
            self.global=global;
            //self.closeModal=closeModal;
            if(global.get('store').val.typeOfReg && global.get('store').val.typeOfReg.phone){
                self.phone=true;
            }
            //console.log(global.get('store').val)
            $scope.$on('closeWitget',function () {
                //console.log('ssss')
                $uibModalInstance.close()
            })
            /*function  closeModal(action){
                //paps action
                $uibModalInstance.close();
            }*/
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }

        loginOnlyPhoneCtrl.$inject=['$scope','$uibModalInstance','exception','global','User','$state']
        function loginOnlyPhoneCtrl($scope,$uibModalInstance,exception,global,User,$state){
            var self=this;
            self.global=global;
            $scope.$on('closeWitget',function () {
                $uibModalInstance.close()
            })
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }


        loginCtrl.$inject=['$uibModalInstance','exception','global','User','$state']
        function loginCtrl($uibModalInstance,exception,global,User,$state){
            var self=this;
            // авторизация
            //-- Variables --//
            self.login={};
            self.login.user={email : '',password:''};
            //-- Methods --//
            self.login.resetPswd = function(form) {
                if(form.$valid) {
                    self.submittedReset=true;
                    User.resetPswd({email:self.login.reseteEmail}).$promise
                    /*Auth.resetPswd({email: self.login.reseteEmail,action:'resetPassword'})*/
                        .then( function(data) {
                            exception.showToaster('note','Сброс пароля','информация отправлена на email')
                        })
                        .catch( function(err) {
                            self.errors = {};
                            //console.log(err);
                            if (err.data && err.data.error){
                                form['emailreset'].$setValidity('mongoose', false);
                                self.errors['emailreset'] = err.data.error;
                                exception.catcher('авторизация')(err.data.error);
                            } else {
                                exception.catcher('авторизация')(err.data);
                            }
                        });
                }
            } // end resetPswd

            self.login.login2 =function(form) {
                //console.log(form)
                self.submittedLogin = true;
                if(form.$valid) {
                    return Session.save({email: self.login.user.email, password: self.login.user.password} ).$promise
                        .then(function(user){
                            if(global && global.get('user')){
                                global.set('user',user);
                            }
                            //$rootScope.$broadcast('logged', user);
                            $uibModalInstance.close(user)
                        })
                        .catch( function(err) {

                            err = err.data;
                            console.log(err)
                            self.errors = {};
                            // Update validity of form fields that match the mongoose errors
                            if (err && err.errors){
                                angular.forEach(err.errors, function(error, field) {
                                    console.log(field)
                                    form[field].$setValidity('mongoose', false);
                                    self.errors[field] = error.message;
                                    exception.catcher('авторизация')(error.message)
                                });
                            } else {
                                exception.catcher('авторизация')(err)
                            }
                        });
                }
            }; // end login
            self.signup={};
            self.signup.user = {name:'',email : '',password:''};
            self.signup.signup =function(form) {
                //console.log(form);
                self.submitted = true;
                if(form.$valid) {
                    newUser(self.signup.user.name, self.signup.user.email,
                        self.signup.user.password,'subscribtion')
                        .then(function(user){
                            //console.log(user)
                            $uibModalInstance.close(user);
                            var pap;
                            if (global.get('paps' ) && global.get('paps' ).val && (pap=global.get('paps' ).val.getOFA('action','subscription'))){
                                $state.go('thanksPage',{url:pap.url})
                            }
                        })
                        .catch( function(err) {
                            err = err.data;
                            self.errors = {};
                            if (err && err.error){
                                form['email'].$setValidity('mongoose', false);
                                self.errors['email'] = err.error;
                                exception.catcher('подписка')(err.error)
                            } else {
                                exception.catcher('подписка')(err)
                            }
                        });
                }
            }; // end signup
            self.selectItem=function(item){
                $uibModalInstance.close(item);
            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }
    }
    accountFactory.$inject=['$http','$state','global'];
    function accountFactory($http,$state,global) {
        return {
            getProfile: function() {
                //console.log('ssss')
                var store=global.get('store').val._id;
                return $http.get('/api/me/'+store);
                //return $http.get(userHost+'/api/me/'+store);
            },
            getPermission: function() {
                var store=global.get('store').val._id;
                //console.log(global.get('store').val)
                return $http.get('/api/permission/'+store);
            },
            getPermissionTranslator: function() {
                var store=global.get('store').val._id;
                //console.log(global.get('store').val)
                return $http.get('/api/permissionTranslator/'+store);
            },
            getPermissionOrder: function() {
                var store=global.get('store').val._id;
                return $http.get('/api/permissionOrder/'+store);
            },
            getPermissionMaster: function(master) {
                var store=global.get('store').val._id;
                return $http.get('/api/permissionMaster/'+store+'/'+master);
            },
            getEnterButton: function(user) {
                var store=global.get('store').val._id;
                user.frame=$state.get('frame')?$state.get('frame' ).url:null;
                user.store=store;
                return $http.post('/api/getEnterButton',user);
            },
            updateProfile: function(profileData) {
                var store=global.get('store').val._id;
                profileData.store=store;
                return $http.put(userHost+'/api/me', profileData);
            },
            unsubscription: function() {
                var store=global.get('store').val._id;
                return $http.get('/api/unsubscription/'+global.get('user').val._id);
            }

        };
    }
    subscibtionListService.$inject=['$resource'];
    function subscibtionListService($resource){
        var Items= $resource('/api/collections/SubscribtionList/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                //console.log('XHR Failed for SubscibtionList.' + error);
                throw  error
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return error
            }
        }
    }
    userEntryService.$inject=['$resource','$q'];
    function userEntryService($resource,$q){
        var Items= $resource('/api/collections/UserEntry/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query
        }
        function getList(paginate,query){
            //console.log(query)
            if(!paginate){paginate={}}
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(!paginate.page){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
            function getListFailed(error) {
                return $q.reject(error);
            }
        }
        function getItem(id,param){
            return Items.get({_id:id,param:param}).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
    }



    sendPhoneFactory.$inject=['$http','$q','$user']
    function sendPhoneFactory($http,$q,$user) {
        return {
            sendCodeToPhone:sendCodeToPhone,
            verifyCode:verifyCode,
            checkPhone:checkPhone,
        }

        function sendCodeToPhone(phone) {
            if(!phone){return}
            var o = {phone:phone}
            return $q.when()
                .then(function () {
                    return $http.post('/api/users/sendSMS',o)
                })
        }
        function verifyCode(code,phone) {
            var o = {code:code,phone:phone}
            return $q.when()
                .then(function () {
                    return $http.post('/api/users/verifySMScode',o)
                })


        }
        function checkPhone(phone) {
            var query = {phone:phone};
            return $q.when()
                .then(function () {
                    return $user.getItem(phone,'profile.phone')
                })
                .then(function(res){
                    if(res){return res}else{return null}
                })
        }
    }

})()


'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('userShipInfo',userShipInfo)
        .directive('userShipInfoShort',userShipInfoShort)
    function userShipInfo(){
        return {
            scope: {
                short:'@'
            },
            bindToController: true,
            controller: shipInfoCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/user/shipInfo.html',
            restrict:'AE'
        }
    }

    function userShipInfoShort(){
        return {
            scope: {
                short:'@'
            },
            bindToController: true,
            controller: shipInfoCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/user/shipInfoShort.html',
            restrict:'AE'
        }
    }
    shipInfoCtrl.$inject=['global','$order','exception','$window','$rootScope','$q','$user','$timeout','$attrs'];
    function shipInfoCtrl(global,$order,exception,$window,$rootScope,$q,$user,$timeout,$attrs){
        var self=this;
        //console.log($attrs.short)
        self.order = $order.getOrder();
        self.global = global;
        self.user = global.get('user');
        self.ok = ok;
        $rootScope.$on('logged',function(){
            self.user = global.get('user');
        })
        $rootScope.$on('loggout',function(){
            self.user.val = {email: '', profile: {}}
        })
        self.changeEmail=changeEmail;

        function changeEmail(){
            $q.when()
                .then(function () {
                    return $user.changeEmail(global.get('user').val._id)
                })
                .then(function (res) {
                    console.log(res)
                    global.get('user').val.email=res
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('change email')(err)
                    }
                })
        }


        function checkPhone(phone) {
            var query = {phone:phone};
            return $q.when()
                .then(function () {
                    return $user.getItem(phone,'profile.phone')
                })
                .then(function(res){
                    if(res){return res}else{return null}
                })
        }



        function ok(formProfile) {
            //console.log(formProfile.$error)
            if (formProfile.$valid) {
                $q.when()
                    .then(function () {
                        if(self.user.val.profile.phone){
                            return $user.getItem(self.user.val.profile.phone,'profile.phone')
                        }else{
                            return null;
                        }

                    })
                    .then(function(res){
                        /*console.log(res)
                        console.log(self.user.val)
                        console.log("!res ",!res)
                        console.log("(res && !res._id)",(res && !res._id))
                        console.log("(res && res._id && res._id==self.user.val._id)",(res && res._id && res._id==self.user.val._id))*/
                        if(!res ||  (res && !res._id) || (res && res._id && res._id==self.user.val._id)){
                            if(global.get('store').val.cartSetting&& global.get('store').val.cartSetting.slide){
                                $rootScope.$emit('cartslide',{event:'shipInfoDone'})
                            }else{
                                $rootScope.$emit('closeShipModal');
                            }
                        }else{

                            self.phoneExist=true;
                            $timeout(function () {
                                self.phoneExist=false;
                            },5000)
                            //console.log(self.phoneExist)
                        }

                    })
            } else {
                if (formProfile.$error) {
                    if (formProfile.$error.required) {
                        formProfile.$error.required.forEach(function (el) {
                            var error = global.get('langNote').val.formError + " "+el.$name+"\n";
                            exception.catcher(global.get('langNote').val.error)(error)
                        })

                    }
                    if (formProfile.$error.pattern) {

                    }
                    if (formProfile.$error.maxlenth) {

                    }
                }
            }
        }
    }

})()

'use strict';
(function(){
    'use strict';
    angular.module('gmall.services')
        .service('Campaign', campaignService);
    campaignService.$inject=['$resource','$uibModal','$q'];
    function campaignService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Campaign/:_id',{_id:'@_id'});
        return {
            get:Items.get,
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            create:create,
            select:selectItem,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/PROMO/campaign/createCampaign.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            if(!self.name || self.name.length<3){return}
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject()
                });
            })

        }
        function selectItem(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/PROMO/campaign/selectItem.html',
                    controller: function(Campaign,$uibModalInstance){
                        var self=this;
                        self.stuffs=[];
                        self.name='';
                        var query;
                        var paginate={page:0,rows:30,items:0}
                        self.search = function(name){
                            if (name.length<3){return}
                            query={name:name}
                            Campaign.getList(paginate,query).then(function(res){
                                self.items=res;
                            })
                        }
                        self.selectItem=function(item){
                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',
                });

                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Helper', helperService);
    helperService.$inject=['$resource','$uibModal','$q','exception'];
    function helperService($resource,$uibModal,$q,exception){
        var Items= $resource('/api/collections/Helper/:_id',{_id:'@_id'});
        var _items={};
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            getHelp:getHelp
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            if(_items[id]){return $q.when(_items[id])}
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                _items[id]=response;
                return response;
            }
            function getItemFailed(error) {
                _items[id]=null;
                return $q.reject(error);
            }
        }
        function getHelp(state){
            $q.when()
                .then(function(){
                    return getItem(state)
                })
                .then(function(helper){
                    $uibModal.open({
                        animation: true,
                        templateUrl:'components/helper/helperModal.html',
                        controller: function($uibModalInstance,$sce,desc){
                            var self=this;
                            self.desc=desc;
                            /*self.trustHtml=function(text){
                                console.log($sce.trustAsHtml(text))
                                return $sce.trustAsHtml(text)
                            }*/
                            self.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        },
                        resolve:{desc:function(){return helper.desc}},
                        controllerAs:'$ctrl',
                    });

                    /*return $q(function(resolve,reject){
                        var modalInstance = $uibModal.open({
                            animation: true,
                            template:'ssdsdsd',
                            controller: function($uibModalInstance,desc){
                                var self=this;
                                self.desc=desc;
                                self.cancel = function () {
                                    $uibModalInstance.dismiss('cancel');
                                };
                            },
                            resolve:{desc:function(){return helper.desc}},
                            controllerAs:'$ctrl',
                        });
                        modalInstance.result.then(function () {resolve()}, function (err) {reject(err)});
                    })*/
                })
                .catch(function(err){
                    var msg='ошибка';
                    if(err){
                        if(typeof err =='object'){
                            if(err.data){
                                msg=err.data
                            }else if(err.message){
                                msg=err.message;
                            }
                        }else{msg=err}
                    }
                    err = err.data||err
                    exception.catcher('получение справки')(msg)
                })
        }


    }
})()


'use strict';
angular.module('gmall.services')
.factory('$email', function ($resource) {
    return $resource('/api/sendEmail');
})
    .factory('Email', function ($resource) {
        return $resource('/api/sendEmails');
    })


'use strict';
angular.module('gmall.services')
.factory('$notification', function ($resource) {
    var Items= $resource('/api/collections/Notification/:id',{id:'@_id'}, {
        deleteArray: { method: 'DELETE'},
        updateNote: {method:'POST', params:{update:'note'}}
    });
    return {
        getList:getList,
        query:Items.query,
        get:Items.get,
        save:Items.save,
        delete:Items.delete,
    }
    function getList(paginate,query){
        var data ={perPage:paginate.rows ,page:paginate.page,query:query};
        return Items.query(data).$promise
            .then(getListComplete)
        function getListComplete(response) {
            if(paginate.page==0){
                if(response && response.length){
                    paginate.items=response.shift().index;
                }else{
                    paginate.items=0;
                }
            }
            return response;
        }
    }
})


'use strict';
angular.module('gmall.controllers')
.controller('callCtrl',['$scope','global','$notification','toaster','CreateContent','$rootScope','$http','exception','$q','$email','$attrs',function($scope,global,$notification,toaster,CreateContent,$rootScope,$http,exception,$q,$email,$attrs){

    self=this;
    self.global=global;



    $scope.callCtrl=this;
    self.user=(global.get('user').val)?global.get('user'):{val:{profile:{phone:'',fio:''}}};
    $scope.phoneNumberPattern = (function() {
        var regexp = /^([0-9\(\)\/\+ \-]*)$/;
        return {
            test: function(value) {
                if( $scope.requireTel === false ) {
                    return true;
                }
                return regexp.test(value);
            }
        };
    })();
    var o={addressee:'seller',type:'call',content:''};
    o.seller=global.get('store' ).val.seller._id;

    $scope.callCtrl.pushNotification=function(form){

        //console.log($scope.callCtrl.blockButton,form.$valid)
        if($scope.callCtrl.blockButton){return};
        if(form.$valid) {
            $scope.callCtrl.blockButton=true;
            o.content=global.get('langOrder').val.requestacallback+' '+self.user.val.profile.phone+((self.user.val.fio)?' '+self.user.val.fio:'')+' '+moment().format('LLLL');
            o.content=CreateContent.call(self.user.val.profile.phone,((self.user.val.fio)?' '+self.user.val.fio:''))

            if(self.stuff){
                o.content +=','+self.stuff
            }
            //console.log(self.user.val.profile.phone)
            /*$rootScope.checkedMenu.chatMenu=false;
            if(self.modalClose && typeof self.modalClose=='function'){
                self.modalClose();
            }
            $scope.$emit('closeWitget')*/

            sendMessage(o.content)

            $scope.$emit('closeWitget')
            $rootScope.checkedMenuChange('chatMenu',false)

            $notification.save(o,function(res){
                toaster.pop({
                    type: 'note',
                    title: global.get('langNote').val.sent,
                    body: '',
                    delay:3000,
                    showCloseButton: true,
                });
                $scope.callCtrl.blockButton=false;
            },function(err){
                toaster.pop({
                    type: 'error',
                    title: global.get('langNote').val.error,
                    body: '',
                    delay:3000,
                    showCloseButton: true,
                });
            })
            var pap;
            if (global.get('paps' ) && global.get('paps' ).val && (pap=global.get('paps' ).val.getOFA('action','call'))){
                $rootScope.$state.go('thanksPage',{id:pap.url})
            }

            // отпраыка письма pap

        }
    }

    function sendMessage(textForSend) {
        /*if($attrs.stuff){
            console.log($attrs.stuff)
        }*/
        self.dataForSend={}
        self.dataForSend.phone= global.get('store').val.seller.phone;
        self.dataForSend.text=textForSend
        self.dataForSend.userId=md5www(global.get('store').val.subDomain)
        self.dataForSend.onlyText=true;
        //console.log(self.dataForSend)
        return $q.when()
            .then(function () {
                return $http.post('/api/users/sendMessageAboutDealFromServer',self.dataForSend)
            })
            .catch(function (err) {
                sendEmail(self.dataForSend)
                /*if(err){
                    exception.catcher('send message')(err)
                }*/
            })
    }
    function sendEmail(data) {
        if(!global.get('store').val.feedbackEmail){return}
        //console.log(global.get('store').val)
        var domain=global.get('store').val.domain;
        var o={email:[global.get('store').val.feedbackEmail],content:data.text,
            subject:global.get('lang').val.callorder+' ✔',from:  global.get('store').val.name+'<'+global.get('store').val.subDomain+'@'+domain+'>'};
        //console.log(o)
        $q(function(resolve,reject){$email.save(o,function(res){resolve()},function(err){resolve()} )})

    }



}])/*callCtrl*/

'use strict';
angular.module('gmall.directives')
    .directive('callFromStore',[function(){
        return {
            scope: {
                modalClose:'&',
                stuff:'@'
            },
            restrict:"E",
            bindToController: true,
            controllerAs: '$ctrl',
            controller:"callCtrl",
            templateUrl:"components/call/call.html",
        }
    }])
    .directive('enterPhoneNumder',[function(){
        return {
            scope: {
                enterPhoneNumder:'=',
                changeFoo:'&',
                submitted:'='
            },
            restrict:"A",
            bindToController: true,
            controllerAs: '$ctrl',
            controller:enterPhoneNumderCtrl,
            templateUrl:"components/call/phoneNumber.html",
        }
    }])
enterPhoneNumderCtrl.$inject=['$scope','global']
function enterPhoneNumderCtrl($scope,global) {
    var self=this;
    self.global=global;
    self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
    self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';
    $scope.$watch(function(){return self.enterPhoneNumder},function(enterPhoneNumder,old){
        if(enterPhoneNumder){
            var phoneCode='+'+enterPhoneNumder.substring(0,enterPhoneNumder.length-10);
            if(self.phoneCodes.getOFA('code',phoneCode)){
                self.phoneCode=phoneCode;
            }
            self.phone=enterPhoneNumder.substring(enterPhoneNumder.length-10)
        }
        /*if(enterPhoneNumder!=old){
            changePhone()
        }*/

    })



    self.changePhone=changePhone;
    self.changeCode=changeCode;

    function changePhone(){
        if(!self.phone){
            self.enterPhoneNumder=''
        }else{
            self.enterPhoneNumder=self.phoneCode.substring(1)+self.phone.substring(0,10);
        }
        //console.log(self.enterPhoneNumder,self.changeFoo)
        if(self.changeFoo && typeof self.changeFoo == 'function'){
            self.changeFoo({phone:self.enterPhoneNumder})
        }
    }
    function changeCode() {
        
    }
}



'use strict';

angular.module('gmall.controllers')
.controller('feedbackCtrl',['$scope','global','$notification','toaster','CreateContent','$email','$rootScope','exception','$attrs','$timeout',function($scope,global,$notification,toaster,CreateContent,$email,$rootScope,exception,$attrs,$timeout){

    self=this;
    $scope.feedbackCtrl=this;
    self.global=global
    //console.log($attrs)
    if($attrs && $attrs.text){
        $timeout(function () {
            $scope.feedbackCtrl.message=$attrs.text;
        },1000)

    }

    var note={addressee:'seller',type:'feedback',content:''};
    note.seller=global.get('store' ).val.seller._id;
    //console.log(global.get('store' ).val.feedbackEmail)
    $scope.feedbackCtrl.sendMessage=function(form){
        if($scope.feedbackCtrl.blockButton){return};
        if(form.$valid) {
            $scope.feedbackCtrl.blockButton=true;
            note.content=$scope.feedbackCtrl.message;
                //CreateContent.callbackCtrl($scope.callbackCtrl.message);
            //$notification.save(o);
            var content=$scope.feedbackCtrl.message+"<br />"+$scope.mainFrameCtrl.feedback.name+
                "<br />"+$scope.mainFrameCtrl.feedback.email;
            var domain=global.get('store').val.domain||global.get('store').val.subDomain;
            var o={email:global.get('store' ).val.feedbackEmail,content:content,
                subject:'обратная связь'+' ✔',from:domain+  '<feedback@'+domain+'>'};
            $email.save(o,function(res){
                $scope.$emit('closeWitget')
                $rootScope.checkedMenuChange('chatMenu',false)
                var pap;
                if (global.get('paps' ) && global.get('paps' ).val && (pap=global.get('paps' ).val.getOFA('action','feedback'))){
                    $rootScope.$state.go('thanksPage',{id:pap.url})
                }
                toaster.pop({
                    type: 'note',
                    title: global.get('langNote').val.sent,
                    body: '',
                    delay:4000,
                    showCloseButton: true,
                });
            },function(err){
                //$scope.$emit('closeWitget')
                console.log(err)
                exception.catcher(global.get('langNote').val.error)(err)

                /*toaster.pop({
                    type: 'error',
                    title: global.get('langNote').val.error,
                    body: '',
                    delay:4000,
                });*/
            })
        }
    }


}])/*feedbackCtrl*/

'use strict';
angular.module('gmall.directives').directive('feedbackMessage',[function(){
    return {
        restrict:"E",
        scope: {
            modalClose:'&'
        },
        bindToController: true,
        controllerAs: '$ctrl',
        controller:"feedbackCtrl",
        templateUrl:"components/feedback/feedback.html",
        link:function(){
        }
    }
}])

'use strict';
angular.module('gmall.services')
.provider('global',[function(){
    var _data = {}; // our data storage array
    var _urls = {}; // end urls
    this.setUrl = function(urls){
        _urls = urls;
    }
    var _set = function(what,val){
        val=val||null
        //console.log(what,val)
        //if(what=='user' && val){return;}
        if(angular.isDefined(what)){
            if (!_data[what]){
                _data[what]={val:val}}
            else {
                _data[what].val=(angular.isDefined(val)) ? val: null;
            }
            //return true;
        }/*else{
            return false;
        }*/
    }; // end _set
    var _getSticker = function(stuff){
        var id = (stuff._id)?stuff._id:stuff.stuff;
        if (!stuff.tags || !stuff.tags.length) return;
        if (!_data['filterTagsSticker'].val) return;
        //console.log(_data['filterTagsSticker'])
        for(var i=0,l=_data['filterTagsSticker'].val.length;i<l;i++){
            var tag = _data['filterTagsSticker'].val[i]._id;
            if (stuff.tags.indexOf(tag)>-1){
                return (_data['filterTagsSticker'].val[i].sticker)?_data['filterTagsSticker'].val[i].sticker:false;
                break;
            }
        }
        return false;
    }
    var _getDataForCart = function(stuff){
        console.log('не используется!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
        return;
        var inCart={}
        inCart.quantity=(stuff.quantity)?stuff.quantity:1;

        inCart.addCriterionName=[];
        //console.log(stuff.addCriterionToCart,stuff.addCriterionToCart.length)
        if(stuff.addCriterionToCart && stuff.addCriterionToCart.length){
            console.log(stuff.addCriterionToCart)
            stuff.addCriterionToCart.forEach(function(el){

                var t = _data['filterTags'].val.getObjectFromArray('_id',el);
                if (t && t.name){
                    inCart.addCriterionName.push(t.name)
                }
            })
        }
        inCart.addCriterionToCart=(stuff.addCriterionToCart)?stuff.addCriterionToCart:null;
        if (stuff.single){inCart.single=true;}
        inCart.unitOfMeasure= (stuff.unitOfMeasure)?stuff.unitOfMeasure:'шт';
        inCart.stuff=stuff._id;
        inCart.stuffUrl=stuff.url;
        inCart.seller=stuff.seller;
        inCart.img=(stuff.gallery[0].thumb)?stuff.gallery[0].thumb:'';
        inCart.price=stuff.price;
        inCart.retail=stuff.retail;
        inCart.priceSale=stuff.priceSale;
        inCart.brand=stuff.brand||'brand';
        var _brand =_data['brands'].val.getObjectFromArray('_id',stuff.brand);
        inCart.brandUrl=(_brand)?_brand.url:'brand';
        inCart.brandName=(_brand)?_brand.name:'';
        inCart.category=stuff.category||"category";
        var o=_data['categories'].val.getObjectFromArray('_id',stuff.category);
        if(o){
            inCart.categoryUrl=o.url;
            inCart.categoryName=o.name;
            inCart.groupUrl=o.group.url;
            inCart.groupName=o.group.name;
        } else {
            inCart.categoryUrl='id';
            inCart.categoryName='category';
            inCart.groupUrl="group"
        }
        inCart.tags=stuff.tags;
        inCart.name=stuff.name
        if (stuff.artikul){
            inCart.name +=' '+stuff.artikul;
        }
        if (stuff.sticker==='undefined'){
            inCart.sticker=_getSticker(stuff);
        } else {
            inCart.sticker=stuff.sticker;
        }

        //console.log(inCart);
        return inCart;
    }

// Provider method for set
    this.set = _set;

// service methods
    this.$get = ['$http',function($http){


        return {
            request : function(url,vars){
                //console.log(url)
                if(angular.isDefined(vars)){
                    return $http.post(url,$.param(vars),{headers:{'Content-Type': 'application/x-www-form-urlencoded'}});
                }else{
                    return $http.get(url);
                }
                //return ['a','d','c']
            },

            url : function(which){
                return _urls[which];
            }, // end url

            set : _set, // end set

            get : function(what){
                if(angular.isDefined(what) && (what in _data))
                    return _data[what];//angular.copy(_data[what]);
                else
                    return undefined;
            }, // end get

            del : function(what){
                if(angular.isDefined(what)){
                    var i = _data.indexOf(what);
                    if(i >= 0)
                        return _data.splice(i,1);
                }
                return false;
            }, // end del

            clear : function(){
                _data = [];
            }, // end clear
            getAll:function(){ return _data},
            //глобальные функции
            getSticker:_getSticker,
            getDataForCart: _getDataForCart

        };
    }]; // end $get
}]) // end appDataStoreSrvc / storage-services


.factory('globalSrv',['global',function(global){
    //-- Variables --//
    var _send = global.request;
    //-- Methods --//
    return {
        getData:function(name,param,abbr){
            //console.log(abbr)
            var url = global.url(name);
            if(angular.isDefined(param) && !(angular.equals(param,null) || angular.equals(param,'')))
                url += '/' + param;
            if(angular.isDefined(abbr) && !(angular.equals(abbr,null) || angular.equals(abbr,''))&& typeof abbr=='object'){
                url += '?';
                for(var key in abbr){
                    if (url[url.length-1]!='?'){
                        url+= '&';
                    }
                    url +=key+'='+abbr[key]
                }
            }

            //console.log(url)
            return _send(url);
        }
    };
}]) // end subjectSrv / module(myapp.services)

'use strict';
angular.module('gmall.services')
.service('Sections', sectionServiceFunction)

.service('selectCategoryFromModal',function($q,$uibModal){
    this.bind=function(categoryId){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/selectCategoryModal/selectCategoryModal.html',
                controller: 'selectCategoryModalCtrl',
                size: 'lg',
                resolve:{
                    categoryId:function(){return categoryId}
                }
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selectedItem) {
                resolve(selectedItem)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })
    }
})

sectionServiceFunction.$inject=['$resource', '$q' ,'global','$uibModal','$timeout'];
function sectionServiceFunction($resource,$q,global,$uibModal,$timeout) {
    var Items= $resource('/api/collections/Group/:id',{id:'@_id'});

    var sections=null;
    var pending=true;
    activate()
    return{
        query:Items.query,
        get:Items.get,
        delete:Items.delete,
        save:save,
        savePure:Items.save,
        getSections:getSections,
        getSection:getSection,
        getParentSection:getParentSection,
        getEmbededCategories:getEmbededCategories,
        setCategoriesFromSections:setCategoriesFromSections,
        select:select,
        setSections:setSections,
        reloadItems:reloadItems

    }
    function activate(){
        $timeout(function(){
            //console.log(global.get('sections'))
            if(!global.get('sections') || !global.get('sections' ).val){
                init()
            }
        })
    }
    function init() {
        Items.query(function(res){
            res.shift();
            sections=res;
            setCategoriesFromSections(sections)
            pending=false;
        })
    }
    function reloadItems(){
        pending=true;
        init();
    }

    function save(){
        return Items.save.apply(this,arguments).$promise.then(function(){
            //activate()
        })
    }

    function _getParentSection(sections,sectionUrl,id){
        //console.log(sectionUrl)
        if(!sections) return  null;
        for(var i=0,l=sections.length;i<l;i++){
            if(id){
                if(sections[i]._id==sectionUrl){
                    return sections[i];
                    break
                }
            }else{
                if(sections[i].url && sections[i].url==sectionUrl){
                    return sections[i];
                    break
                }
            }

            if (sections[i].child && sections[i].child.length){
                var categories;
                if(categories=_getParentSection(sections[i].child,sectionUrl,id)){
                    return categories;
                    break;
                }
            }
        }
        return null;
    }
    function _getEmbededCategories(section,arr){
        if(section.categories && section.categories.length){
            arr.push.apply(arr,section.categories);
        }
        if (section.child && section.child.length){
            section.child.forEach(function(section){
                getEmbededCategories(section,arr);
            })
        }
        return arr;
    }
    function returnSections(resolve){
        if(pending){setTimeout(function(){returnSections(resolve)}, 100);}else{
            resolve(sections)
        }

    }
    function getSections(){
        return $q(function(resolve,reject){
            if(global.get('sections') && global.get('sections' ).val){
                if(!sections){sections=global.get('sections' ).val}
                resolve(global.get('sections' ).val);
            }else{
                if(pending){
                    setTimeout(function(){returnSections(resolve)}, 100);
                }else{
                    if(sections){
                        resolve(sections)
                    } else{
                        pending=true;
                        Items.query(function(res){
                            res.shift();
                            sections=res;
                            pending=false;
                            setCategoriesFromSections(sections)
                            resolve(sections)
                        },function(err){pending=false;;reject(err)})
                    }
                }

            }

        })


    }
    function setSections(newSections){
        sections=newSections
        if(sections){
            setCategoriesFromSections(sections)
        }else{
            setCategoriesFromSections([])
        }

    }
    function getSection(sections,sectionUrl) {
        if(!sections) {sections=getSections();}
        for(var i=0,l=sections.length;i<l;i++){
            if(sections[i].url && sections[i].url==sectionUrl){
                return sections[i];
                break
            }
            if (sections[i].child && sections[i].child.length){
                for(var j=0,ll=sections[i].child.length;j<ll;j++){
                    if(sections[i].child[j].url && sections[i].child[j].url==sectionUrl){
                        return sections[i].child[j];
                        break
                    }
                }
            }
        }
        return null;
    }
    function getParentSection(sectionUrl,id){
        return _getParentSection(sections,sectionUrl,id)
    }
    function getEmbededCategories(section,arr){
        return _getEmbededCategories(section,arr)
    }
    function setCategoriesFromSections(sections){
        //console.log(sections)
        var categories=[];
        var categoriesO={};
        sections.forEach(function(section){
            if(section.categories && section.categories.length){
                section.categories.forEach(function(c){
                    //console.log(c)
                    c.section={url:section.url}
                    c.linkData={groupUrl:section.url,categoryUrl:c.url}
                    categoriesO[c._id]=c
                })
                categories.push.apply(categories,section.categories)
            }
            if(section.child && section.child.length){
                section.child.forEach(function(subSection){
                    if(subSection.categories && subSection.categories.length){
                        subSection.categories.forEach(function(c){
                            //console.log(c)
                            c.section={url:section.url}
                            c.linkData={groupUrl:section.url,categoryUrl:c.url,parentGroup:subSection.url}
                            categoriesO[c._id]=c
                        })
                        categories.push.apply(categories,subSection.categories)
                    }
                })
            }
        })
        global.set('categories',categories);
        global.set('categoriesO',categoriesO);
    }




    function select(){
        var that=this;
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/sections/selectSubsectionModal.html',
                controller: selectSubsectionCtrl,
                size: 'lg',
                resolve:{
                    sections:function(){return that.getSections();}
                },
                controllerAs:'$ctrl'
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selectedItem) {
                resolve(selectedItem)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })

    }
    selectSubsectionCtrl.$inject=['$q','$uibModalInstance','sections'];
    function selectSubsectionCtrl($q,$uibModalInstance,sections){
        var self=this;
        self.sections = sections;
        console.log(sections)
        self.ok = function (section) {
            $uibModalInstance.close(section);
        };
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
}
'use strict';
angular.module('gmall.services')
.service('Filters', function ($resource,$q,global,$uibModal) {
    var Items= $resource('/api/collections/Filter/:_id',{_id:'@_id'});
    var filters=null;
    var pending=true;
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;
    this.select=selectFilter;
    this.reloadItems=reloadItems;
    this.getItem=getItem;
    this.getList=getList;


    function getList(paginate,query){
        if(!paginate){
            paginate={page:0}
        }
        var data ={perPage:paginate.rows ,page:paginate.page,query:query};
        if(global.get('crawler') && global.get('crawler').val){
            data.subDomain=global.get('store').val.subDomain;
        }
        return Items.query(data).$promise
            .then(getListComplete)
        //.catch(getListFailed);
        function getListComplete(response) {
            if(paginate.page==0){
                if(response && response.length){
                    paginate.items=response.shift().index;
                }else{
                    paginate.items=0;
                }
            }
            //console.log(response)
            return response;
        }

        function getListFailed(error) {
            console.log('XHR Failed for getNews.' + error);
            return $q.reject(error);
        }
    }
    function getItem(id){
        return Items.get({_id:id} ).$promise
            .then(getItemComplete)
        //.catch(getItemFailed);
        function getItemComplete(response) {
            if(response && response.blocks && response.blocks.length){
                response.blocks.forEach(function (b) {
                    if(b.type=='stuffs'){
                        if(b.stuffs && b.stuffs.length){
                            b.imgs=b.stuffs.map(function(s){
                                if(s.gallery && s.gallery.length && s.gallery[0].img){
                                    s.img=s.gallery[0].img;
                                }
                                return s;
                            });
                        }else{b.imgs=[]}
                    }
                })
            }
            return response;
        }
        function getItemFailed(error) {
            return $q.reject(error);
        }
    }


    function returnFilters(resolve){
        if(pending){setTimeout(function(){returnFilters(resolve)}, 300);}else{
            resolve(filters)
        }

    }
    this.getFilters=function(){
        return $q(function(resolve,reject){
            //console.log(global.get('filters'))
            if(global.get('filters') && global.get('filters').val){
                if(!filters){filters=global.get('filters').val}
                return resolve(global.get('filters').val);
            }
            if(pending){
                setTimeout(function(){returnFilters(resolve)}, 300);
            }else{
                if(filters){
                    resolve(filters)
                } else{
                    pending=true;
                    Items.query(function(res){
                        res.shift();
                        filters=res;
                        pending=false;
                        resolve(filters)
                    },function(err){pending=false;;reject(err)})
                }
            }
        })
    }
    if(!global.get('filters') || !global.get('filters' ).val){
        Items.query(function(res){
            res.shift();
            filters=res;
            if(global.get('filters') && !global.get('filters' ).val){
                global.set('filters',filters)
            }
            pending=false;
        })
    }

    function reloadItems(){
        pending=true;
        Items.query(function(res){
            res.shift();
            filters=res;
            global.set('filters',filters)
            pending=false;
        })
    }

    function selectFilter(){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/filters/selectFilter.html',
                controller: selectFilterCtrl,
                size: 'lg',
                controllerAs:'$ctrl',
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selected) {
                //console.log(selected)
                resolve(selected)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })
    }
    selectFilterCtrl.$inject=['Filters','$uibModalInstance','$q','global'];
    function selectFilterCtrl(Filters,$uibModalInstance,$q,global){
        var self=this;
        self.lang=global.get('lang').val;
        $q.when()
            .then(function(){
                return Filters.getFilters();
            } )
            .then(function(filters){
                self.filters=filters;
                //console.log(filters)
            })
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        self.ok = function (filter) {
            $uibModalInstance.close(filter);
        };
    }


})
    /*.service('FilterTags', function ($resource,) {
        var Items= $resource('/api/collections/FilterTags/:id',{id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }

        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
            //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                //console.log(response)
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
            //.catch(getItemFailed);
            function getItemComplete(response) {
                if(response && response.blocks && response.blocks.length){
                    response.blocks.forEach(function (b) {
                        if(b.type=='stuffs'){
                            if(b.stuffs && b.stuffs.length){
                                b.imgs=b.stuffs.map(function(s){
                                    if(s.gallery && s.gallery.length && s.gallery[0].img){
                                        s.img=s.gallery[0].img;
                                    }
                                    return s;
                                });
                            }else{b.imgs=[]}
                        }
                    })
                }
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }



    })*/



'use strict';
//console.log(_filterTagsO);
var __filterTagsO=_filterTagsO
var __filterTags=_filterTags
//(function(){

    angular.module('gmall.services')
        .service('FilterTags', filterTagsService);
    filterTagsService.$inject=['$resource','$uibModal','$q','global','$timeout','Sections'];
    function filterTagsService($resource,$uibModal,$q,global,$timeout,Sections){
        var Items= $resource('/api/collections/FilterTags/:_id',{_id:'@_id'});
        var filterTags=null;
        var pending=true;
        var qu;
        //console.log(_filterTagsO)
        /*console.log(_filterTagsO)
        if(typeof _filterTagsO=='undefined'){
            var _filterTagsO={}
        }*/
        //filterTags=global.get('filterTags').val
        /*if(typeof _filterTags!='undefined' && _filterTags.length){
            filterTags=_filterTags
        }*/
        filterTags=__filterTags
        $timeout(function(){ // это для админки
            qu={query:JSON.stringify({store:global.get('store').val._id})}
            if(!global.get('filterTags') || !global.get('filterTags' ).val){
                //console.log('????????????????')
                init();
            }else{
                filterTags=global.get('filterTags').val
            }
        },50)


        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            getFilterTags:getFilterTags,
            getTagsByUrl:getTagsByUrl,
            selectFilterTag:selectFilterTag,
            select:selectFilterTag,
            reloadItems:reloadItems,
            getSticker:getSticker,
            reloadItems:reloadItems
        }

        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            //console.log(query)
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function returnFilterTags(resolve){
            if(pending){setTimeout(function(){returnFilterTags(resolve)}, 100);}else{
                resolve(filterTags)
            }
        }
        function getFilterTags(){
            return $q(function(resolve,reject){
                //console.log( global.get('filterTags').val)
                if(global.get('filterTags') && global.get('filterTags').val){
                    if(!filterTags){filterTags=global.get('filterTags').val}
                    return resolve(global.get('filterTags').val);
                }
                if(pending){
                    return $timeout(function(){return resolve(filterTags)}, 400);
                }else{
                    if(filterTags){
                        resolve(filterTags)
                    } else{
                        pending=true;
                        Items.query(function(res){
                            //console.log(res)
                            res.shift();
                            filterTags=(res)?res:[];
                            pending=false;
                            resolve(filterTags)
                        },function(err){pending=false;;reject(err)})
                    }
                }
            })
        }
        function getTagsByUrl(queryTags,cb){
            //console.log(queryTags)
            $q.when()
                .then(function(){
                    return getFilterTags();
                })
                .then(function(){
                    //console.log(filterTags)
                    queryTags=queryTags.map(function(url){
                        //console.log(url)

                        return filterTags.getOFA('url',url)
                    });
                    cb(queryTags)
                })
        }

        function selectFilterTag(data){
            var sections =(data &&  data.section)?Sections.getSections():null;

            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/filters/bindFilterTagToModel.html',
                    controller: selectFilterTagCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        sections: function(){
                            return sections
                        }
                    }
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedFilterTag) {
                    resolve(selectedFilterTag)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectFilterTagCtrl.$inject=['Filters','$uibModalInstance','$q',,'global','sections'];
        function selectFilterTagCtrl(Filters,$uibModalInstance,$q,global,sections){
            var self=this;
            self.global=global;
            self.sections=sections;
            if(self.sections){
                self.section=self.sections[0].url
            }
            $q.when()
                .then(function(){
                    return Filters.getFilters();
                } )
                .then(function(filters){
                    self.filters=filters;
                    //console.log(filters)
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (filterTag) {
                //console.log(filterTag)
                if(self.section){
                    filterTag.section=self.section;
                }
                $uibModalInstance.close(filterTag);
            };
        }
        function init(){
            Items.query(qu,function(res){
                res.shift();
                filterTags=res;
                filterTags.forEach(function (t) {
                    _filterTagsO[t._id]=t;
                })
                pending=false;
            })
        }
        function reloadItems(){
            pending=true;
            init();
        }
        function getSticker(tags){
            if(tags && tags.length && filterTags && filterTags.length){
                for(var i =0;i<tags.length;i++){
                    /*if(tags[i]=='5c07f407a43847154c0e5d03'){
                        console.log(__filterTagsO)
                        console.log(__filterTagsO[tags[i]])
                    }*/
                    if(__filterTagsO[tags[i]] && __filterTagsO[tags[i]].sticker){
                        //console.log(angular.copy(__filterTagsO[tags[i]].sticker))
                        return __filterTagsO[tags[i]].sticker
                    }
                }
            }
        }
    }
//})()


/*'use strict';
angular.module('gmall.services')
.service('FilterTags', function ($resource,$q) {
    var Items= $resource('/api/collections/FilterTags/:id',{id:'@_id'});
    var filterTags=null;
    var pending=true;
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;

    var getFilterTags=function(){
        return $q(function(resolve,reject){
            if(pending){
                setTimeout(function(){returnFilterTags(resolve)}, 100);
            }else{
                if(filterTags){
                    resolve(filterTags)
                } else{
                    pending=true;
                    Items.query(function(res){
                        res.shift();
                        filterTags=res;
                        pending=false;
                        resolve(filterTags)
                    },function(err){pending=false;;reject(err)})
                }
            }
        })
    }
    this.getFilterTags=getFilterTags;
    this.getTagsByUrl=function(queryTags,cb){
        $q.when()
            .then(function(){
                return getFilterTags();
            })
            .then(function(){
                queryTags=queryTags.map(function(url){
                    return filterTags.getOFA('url',url)
                });
                cb(queryTags)
            })
    }

    Items.query(function(res){
        res.shift();
        filterTags=res;
        pending=false;
    })

})*/
angular.module('gmall.services')
.service('SelectFilterTags', ['$q','$uibModal', function($q,$uibModal) {
    function bindFilterTagToModelCtrl(Filters,$uibModalInstance){
        var self=this;
        $q.when()
            .then(function(){
                return Filters.getFilters();
            } )
            .then(function(filters){
                self.filters=filters;
                //console.log(filters)
            })
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        self.ok = function (filterTag) {
            $uibModalInstance.close(filterTag);
        };
    }
    this.bindFiterTagToModel=function(){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/filters/bindFilterTagToModel.html',
                controller: bindFilterTagToModelCtrl,
                size: 'lg',
                controllerAs:'$ctrl',
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selectedFilterTag) {
                resolve(selectedFilterTag)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })



    }
}])


'use strict';
(function(){

    angular.module('gmall.services')
        .directive('cartItem',itemDirective)
        .directive('previewCart',previewCartDirective)
        .directive('addedCart',addedCartDirective)
    function itemDirective(){
        //var s =(global.get('store').val.template.cartTempl)?global.get('store').val.template.cartTempl:'';
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/cart.html'
        }
    }
    function previewCartDirective(){
        return {
            scope:{},
            restrict:"EA",
            bindToController: true,
            controller: previewCartCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            templateUrl:'views/template/partials/cart/previewCart.html'
        }
    }
    function addedCartDirective(){
        return {
            scope:{},
            bindToController: true,
            controller: function($scope,$element,$timeout,global){
                $($element).fadeOut()
                var self = this;
                self.global=global;
                self.addItem=null;
                var timer=null;
                $scope.$on('$updateOrder',function(event,itemTo){
                    //console.log(itemTo)
                    self.addItem=angular.copy(itemTo);
                    //console.log(timer)
                    if(timer){
                        $timeout.cancel(timer)
                    }else{
                        $($element).fadeIn()
                    }
                    timer = $timeout(function () {
                        self.addItem =null;
                        timer=null;
                        $($element).fadeOut()
                    },2500)

                });
                $($element).hover(function () {
                    if(timer){
                        $timeout.cancel(timer)
                        timer=null
                    }
                },function () {
                    $($element).fadeOut()
                })
                $($element).click(function () {
                    $($element).fadeOut()
                })

            },
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/cart/addedCart.html'
        }
    }

    itemCtrl.$inject=['$scope','$anchorScroll','$order','global','exception','Confirm','$user','$q','CreateContent','$email','$notification','$state','$rootScope','$timeout'];
    function itemCtrl($scope,$anchorScroll,$order,global,exception,Confirm,$user,$q,CreateContent,$email,$notification,$state,$rootScope,$timeout){
        var self = this;
        $scope.myInterval = 2000;
        $scope.noWrapSlides = true;
        $scope.active33 = 2;
        var slides = $scope.slides = [];
        var currIndex = 0;
        $scope.addSlide = function() {
            var newWidth = 600 + slides.length + 1;
            slides.push({
                image: '//unsplash.it/' + newWidth + '/300',
                text: ['Nice image','Awesome photograph','That is so cool','I love that'][slides.length % 4],
                id: currIndex++
            });
        };

        $scope.randomize = function() {
            var indexes = generateIndexesArray();
            assignNewIndexesToSlides(indexes);
        };

        for (var i = 0; i < 4; i++) {
            $scope.addSlide();
        }




        self.currentBlock=0;
        var w2,blocks,widthBlock,cartSlidePageElement;
        self.global=global;
        self.mobile=global.get('mobile' ).val;
        //??
        /*console.log(global.get('store').val.seller.retail)
        console.log(global.get('store').val.seller.opt.quantity)*/
        self.opt=(global.get('store').val.seller.opt && global.get('store').val.seller.opt.quantity)?global.get('store').val.seller.opt.quantity:0;
        var retail=global.get('store').val.seller.retail
        self.disabledMessage=(self.opt>1&&!retail)?true:false;
        //console.log(self.disabledCheckOut);
        self.countryCode=global.get('country');
        self.clearCart=clearCart;
        self.removeItem=removeItem;
        self.saveCart=saveCart;
        self.checkOut=checkOut;
        self.enableCheckOut=enableCheckOut;
        self.goToStuff=goToStuff;
        self.disabledCheckOut=disabledCheckOut
        self.back=back;
        self.getFilterName=getFilterName;
        self.decreaseQty=decreaseQty
        self.increaseQty=increaseQty
        self.setCouponForOrder=setCouponForOrder;

        //********************activate***************************
        //var initDone=false;
        activate();
        $rootScope.$on('cartslide',function(event,data){
            console.log(data)
            //return;
            if(data){
                if(data.event =="shipInfoDone"){
                    sendOrder()
                }else if(data.event =="shipInfoDone"){
                    setSlide(0)
                }else if(data.event =="signLogin"){
                    forward()
                }else if(data.event =="init"){
                    setSlide(0)
                    /*if(!initDone){
                        initDone=true;
                        setSlide(0)
                    }*/
                }
            }
        })
        //*******************************************************
        function _setCoupons(){
            self.coupons=null;
            if(global.get('coupons') && global.get('coupons').val && global.get('coupons').val.length){
                global.get('coupons').val.forEach(function(c){
                    if(global.get('user').val){
                        if(global.get('user').val.coupons.indexOf(c._id)<0){
                            if(!self.coupons){
                                self.coupons=[]
                            }
                            self.coupons.push(c)
                        }
                    }else{
                        if(!self.coupons){
                            self.coupons=[]
                        }
                        self.coupons.push(c)
                    }
                })
            }
            //console.log(self.coupons)
            self.coupon=null;
            if(global.get('coupons') && global.get('coupons').val && global.get('user').val){
                if(global.get('coupons').val[0] && global.get('user').val.coupons.indexOf(global.get('coupons').val[0]._id)<0){
                    self.coupon=global.get('coupons').val[0]
                }else if(global.get('coupons').val[1] && global.get('user').val.coupons.indexOf(global.get('coupons').val[1]._id)<0){
                    self.coupon=global.get('coupons').val[1]
                }
            }else if(!global.get('user').val && global.get('coupons') && global.get('coupons').val){
                self.coupon=global.get('coupons').val[0]
            }
            //console.log(self.coupon)
        }
        function activate() {

            // если корзина была инициализированна, то просто получаем ордер.
            if(!$order.type || $order.type!='cart'){
                $order.init('cart' ).then(function(order){
                    self.order=order;

                })
            }else{
                self.order=$order.getOrder();
            }
            //console.log(self.order)
            //console.log(self.order.cart.stuffs)
            $anchorScroll();
            // купон
            //console.log(global.get('user').val)
            _setCoupons()
            $scope.$on('logged',function(){
               _setCoupons();
                //console.log('logged')
            })
            if(global.get('store').val.cartSetting && global.get('store').val.cartSetting.slide){
                setSlide(0)
            }

        }

        function clearCart(){
            Confirm(global.get('langNote').val.clean+"?")
                .then(function(){
                    $order.clearCart();
                } ).catch(function(err){
                err = (err &&err.data)||err
                if(err){
                    exception.catcher(global.get('langNote').val.error)(err)
                }
            })
        }
        function removeItem(i){
            Confirm(global.get('lang').val.delete+'?').then(function () {
                $order.removeItem(i);
            })

        }
        function saveCart(stuff){
            //console.log(stuff)
            if(stuff){
                if(stuff.quantity){
                    if(stuff.quantity>stuff.maxQty){
                        stuff.quantity=stuff.maxQty
                        exception.catcher(global.get('langNote').val.error)('слишком много')
                    }else if(stuff.quantity<stuff.minQty){
                        stuff.quantity=stuff.minQty
                        exception.catcher(global.get('langNote').val.error)('слишком мало')
                    }else{
                        $order.updateOrder();
                    }
                }

            }else{
                $order.updateOrder();
            }

        }
        function decreaseQty(i){
            $order.decreaseQty(i)
        }
        function increaseQty(i){
            $order.increaseQty(i)
        }
        function checkOut(){
            self.textCheckWarehouse=null;
            $rootScope.$emit('InitiateCheckout')
            //console.log('checkOut')
            if(!self.order.cart.stuffs.length){return}
            //console.log(global.get('user').val)
            if(global.get('store').val.cartSetting && global.get('store').val.cartSetting.slide){
                if(global.get('user').val && global.get('user' ).val._id){
                    // проезжаем регистрацию
                    forward(2)
                }else{
                    forward()
                }
            }else{
                self.order = $order.getOrder();
                $q.when()
                    .then(function(){
                        if(!global.get('user' ).val || !global.get('user' ).val._id){
                            return $user.login();
                        }else{
                            return
                        }
                    })
                    .then(function () {
                        if(global.get('store').val.bookkeep){
                            return $order.checkWarehouse()
                        }
                    })

                    .then(function(){
                        return $order.getShipInfo()
                    })
                    .then(function(){
                        return sendOrder()
                    })
                    .catch(function(err){

                        //console.log(err)
                        if(err){
                            if(err.status=='checkWarehouse'){
                                self.textCheckWarehouse=err.message;
                            }
                            exception.catcher('заказ')(err)
                        }
                        //return sendOrder()
                    })
            }
        }

        function sendOrder(){
            return $q.when()
                .then(function(){
                    $rootScope.$emit('$stateChangeStartToStuff');
                    return $order.sendOrder()
                })
                .then(function(){
                    return;
                    /*$rootScope.$emit('$stateChangeEndToStuff');
                    $order.init('cart');
                    $order.clearCart()
                    self.order=$order.getOrder();
                    $rootScope.order=$order.getOrder();
                    self.order.setCoupon(null)
                    _setCoupons();
                    $rootScope.$emit('Purchase');
                    $rootScope.checkedMenu.cart=false*/
                })
                .then(function () {
                    $rootScope.$emit('$stateChangeEndToStuff');
                    $rootScope.$emit('Purchase',{value:$order.paySum,currency:$order.currency});
                    $order.reinitCart()
                    $rootScope.order=$order.getOrder();
                    self.order.setCoupon(null)
                    _setCoupons();
                    $order.clearCart()
                    $rootScope.checkedMenu.cart=false
                })
                .then(function(){
                    return $user.saveProfile(global.get('user' ).val)
                })
                .catch(function(err){
                    $rootScope.$emit('$stateChangeEndToStuff');
                    if(!err){return;}
                    console.log('errerrerr ',err)
                    if(err.data){
                        var content = JSON.stringify(err.data);
                    }else{
                        var content = JSON.stringify(err, ["message", "arguments", "type", "name"]);
                    }
                    if(global.get('user').val){
                        content +="\r"+global.get('user').val.email
                    }

                    if($order.getOrder()){
                        content +="\r"+JSON.stringify($order.getOrder(), null, 4)
                    }
                    //console.log(content)
                    var domain=global.get('store').val.domain;
                    var o={email:['igorchugurov@gmail.com','vikachugurova@gmail.com'],content:content,
                        subject:'error in order ✔',from:  global.get('store').val.name+'<'+global.get('store').val.subDomain+'@'+domain+'>'};
                    //console.log(o)
                    $q(function(resolve,reject){$email.save(o,function(res){resolve()},function(err){resolve()} )})

                    if(err){
                        exception.catcher(global.get('langNote').val.error)(err)
                    }
                })
        }
        function enableCheckOut(){
            //console.log(self.opt,retail,self.order)
            if(!self.order.totalCount || !self.order.cart.stuffs.length){
                return false
            }else if(self.opt>1 && !retail && self.order.totalCount<self.opt){
                return false
            }else{
                return true;
            }
        }
        function goToStuff(o){
            var states= $state.get();
            if(states.some(function(state){return state.name=='frame.stuffs.stuff'})){
                $state.go('frame.stuffs.stuff',o)
            }else if(states.some(function(state){return state.name=='stuffs.stuff'})){
                $state.go('stuffs.stuff',o)
            }
        }

        function disabledCheckOut(){
            //console.log(self.order)
            if(!self.order.cart.stuffs.length){
                return true;
            }
        }

        function back() {
            if(self.currentBlock==2 && global.get('user').val){
                self.currentBlock=1;
            }
            if(self.currentBlock){self.currentBlock--}
        }
        function forward(num){
            if(num){
                self.currentBlock+=num
            }else{
                self.currentBlock++
            }
            console.log(self.currentBlock)
        }
        function setSlide(s){
            self.currentBlock=s;
        }

        function getFilterName(tag){
            //console.log(tag)
            var t = global.get('filterTags').val.getOFA('_id',tag)
            if(t && t.filter){
                var f = global.get('filters').val.getOFA('_id',t.filter)
                if(f){return f.name}else{
                    return ''
                }
            }else{return ''}
        }
        function setCouponForOrder(c,e) {
            e.stopPropagation()
            self.order.setCoupon(c)
        }
    }


    previewCartCtrl.$inject=['$scope','$anchorScroll','global','exception','$q','$state','$order','$element','$timeout','$rootScope'];
    function previewCartCtrl($scope,$anchorScroll,global,exception,$q,$state,$order,$element,$timeout,$rootScope){
        var self = this;
        self.global=global;
        //self.showPreview=false;
        var listDiv= $element.find('.cartItems')[0]
        $(listDiv).fadeOut()
        var hoverIn;
        $($element).hover(function () {
            //console.log('in')
            hoverIn=true
            $timeout(function () {
                if(hoverIn ){
                    $(listDiv).fadeIn(150)
                }
            },50)
            $(listDiv).fadeIn(100)
        },function () {
            //console.log('out')
            hoverIn=false
            $timeout(function () {
                if(!hoverIn ){
                    $(listDiv).fadeOut(100)
                }
            },100)

        })
        //$scope.$on('updateOrder',function(itemTo){console.log(itemTo)});


        self.global=global;
        self.mobile=global.get('mobile' ).val;
        self.opt=(global.get('store').val.seller.opt && global.get('store').val.seller.opt.quantity)?global.get('store').val.seller.opt.quantity:0;
        var retail=global.get('store').val.seller.retail
        self.disabledMessage=(self.opt>1&&!retail)?true:false;
        self.countryCode=global.get('country');
        self.removeItem=removeItem;
        self.saveCart=saveCart;
        self.goToStuff=goToStuff;

        //********************activate***************************

        //*******************************************************
        $timeout(function () {
            activate()
        },400)

        function activate() {
            //console.log("$order.type",$order.type)
            // если корзина была инициализированна, то просто получаем ордер.
            if(!$order.type || $order.type!='cart'){
                $order.init('cart' ).then(function(order){
                    self.order=order;
                })
            }else{
                self.order=$order.getOrder();
            }
            //self.inCart = self.items.cart.stuffs.reduce(function(sum,stuff){return sum+stuff.quantity},0)
            //console.log(self.order)
            $anchorScroll();
            self.loaded=true;
        }
        function removeItem(i){
            $order.removeItem(i);
        }
        function saveCart(){
            $order.updateOrder();
        }

        function goToStuff(o){
            var states= $state.get();
            if(states.some(function(state){return state.name=='frame.stuffs.stuff'})){
                $state.go('frame.stuffs.stuff',o)
            }else if(states.some(function(state){return state.name=='stuffs.stuff'})){
                $state.go('stuffs.stuff',o)
            }
        }

        $rootScope.$on('Purchase',function(){
            self.order=$order.getOrder();
        })

    }
})()


'use strict';
(function() {

    angular.module( 'gmall.services' )
        .service( 'Brands', function ($resource, $q,global,$uibModal,Sections) {
            var Items = $resource( '/api/collections/Brand/:id', {id: '@_id'} );
            var brands = null;
            var pending = true;
            this.query = Items.query;
            this.get = Items.get;
            this.delete = Items.delete;
            this.save = Items.save;
            this.reloadItems=reloadItems;
            this.select=selectBrand;
            this.getList=getList;
            this.getItem=getItem;



            function getList(paginate,query){
                if(!paginate){
                    paginate={page:0}
                }
                var data ={perPage:paginate.rows ,page:paginate.page,query:query};
                if(global.get('crawler') && global.get('crawler').val){
                    data.subDomain=global.get('store').val.subDomain;
                }
                return Items.query(data).$promise
                    .then(getListComplete)
                //.catch(getListFailed);
                function getListComplete(response) {
                    if(paginate.page==0){
                        if(response && response.length){
                            paginate.items=response.shift().index;
                        }else{
                            paginate.items=0;
                        }
                    }
                    //console.log(response)
                    return response;
                }

                function getListFailed(error) {
                    console.log('XHR Failed for getNews.' + error);
                    return $q.reject(error);
                }
            }
            function getItem(id){
                return Items.get({_id:id} ).$promise
                    .then(getItemComplete)
                //.catch(getItemFailed);
                function getItemComplete(response) {
                    if(response && response.blocks && response.blocks.length){
                        response.blocks.forEach(function (b) {
                            if(b.type=='stuffs'){
                                if(b.stuffs && b.stuffs.length){
                                    b.imgs=b.stuffs.map(function(s){
                                        if(s.gallery && s.gallery.length && s.gallery[0].img){
                                            s.img=s.gallery[0].img;
                                        }
                                        return s;
                                    });
                                }else{b.imgs=[]}
                            }
                        })
                    }
                    return response;
                }
                function getItemFailed(error) {
                    return $q.reject(error);
                }
            }


            function returnBrands(resolve) {
                if (pending) {
                    setTimeout( function () {
                        returnBrands( resolve )
                    }, 300 );
                } else {
                    resolve( brands )
                }
            }

            this.getBrands = function () {
                return $q( function (resolve, reject) {
                    if(global.get('brands') && global.get('brands').val){
                        if(!brands){brands=global.get('brands').val}
                        return resolve(global.get('brands').val);
                    }
                    if (pending) {
                        setTimeout( function () {
                            returnBrands( resolve )
                        }, 300 );
                    } else {
                        if (brands) {
                            resolve( brands )
                        } else {
                            pending = true;
                            Items.query( function (res) {
                                res.shift();
                                brands = (res)?res:[];
                                pending = false;
                                resolve( brands )
                            }, function (err) {
                                pending = false;
                                ;
                                reject( err )
                            } )
                        }
                    }

                } )
            }
            if(!global.get('brands') || !global.get('brands' ).val){
                Items.query( function (res) {
                    res.shift();
                    brands = res;
                    if(global.get('brands') && !global.get('brands' ).val){
                        global.set('brands',brands)
                    }
                    pending = false;
                } )
            }


            function reloadItems(){
                pending=true;
                Items.query( function (res) {
                    res.shift();
                    brands = res;
                    global.set('brands',brands)
                    pending = false;
                } )
            }


            function selectBrand(data){
                var sections =(data &&  data.section)?Sections.getSections():null;
                return $q(function(resolve,reject){
                    var options={
                        animation: true,
                        templateUrl: 'components/brand/selectBrand.html',
                        controller: selectBrandCtrl,
                        size: 'lg',
                        controllerAs:'$ctrl',

                        resolve:{
                            sections: function(){
                                return sections
                            }
                        }

                    }
                    var modalInstance = $uibModal.open(options);
                    modalInstance.result.then(function (selected) {
                        resolve(selected)
                    }, function () {
                        console.log('Modal dismissed at: ' + new Date());
                        reject()
                    });
                })
            }
            selectBrandCtrl.$inject=['Brands','$uibModalInstance','$q','global','sections'];
            function selectBrandCtrl(Brands,$uibModalInstance,$q,global,sections){
                var self=this;

                self.global=global;
                self.sections=sections;
                if(self.sections){
                    self.section=self.sections[0].url
                }

                $q.when()
                    .then(function(){
                        return Brands.getBrands();
                    } )
                    .then(function(filters){
                        self.filters=filters;
                        //console.log(filters)
                    })
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                self.ok = function (filterTag) {

                    if(self.section){
                        filterTag.section=self.section;
                    }

                    $uibModalInstance.close(filterTag);
                };
            }

        } )


        //************************************************************
        .service( 'BrandTags', brandTagsService);
    brandTagsService.$inject=['$resource','$uibModal','$q','Sections'];
    function brandTagsService($resource,$uibModal,$q,Sections) {
        var Items = $resource( '/api/collections/BrandTags/:id', {id: '@_id'} );
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            selectBrandTag:selectBrandTag,
            select:selectBrandTag
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function selectBrandTag(data){
            var sections =(data &&  data.section)?Sections.getSections():null;
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/brand/selectBrandTag.html',
                    controller: selectBrandTagCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        sections: function(){
                            return sections
                        }
                    }
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedFilterTag) {
                    resolve(selectedFilterTag)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectBrandTagCtrl.$inject=['Brands','$uibModalInstance','$q','global','sections'];
        function selectBrandTagCtrl(Brands,$uibModalInstance,$q,global,sections){
            var self=this;
            self.global=global;
            self.sections=sections;
            if(self.sections){
                self.section=self.sections[0].url
            }
            $q.when()
                .then(function(){
                    return Brands.getBrands();
                } )
                .then(function(filters){
                    self.filters=filters;
                    //console.log(filters)
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (filterTag) {
                if(filterTag){
                    if(self.section){
                        filterTag.section=self.section;
                    }

                    filterTag.brand=self.filters.find(function(b){
                        return b._id==filterTag.brand
                    })
                }
                $uibModalInstance.close(filterTag);
            };
        }
    }
})()

'use strict';
angular.module('gmall.controllers')
.controller('stuffsFilterCtrl', ['$scope','$resource','$rootScope','global','Stuff','$section','$location','$q','Collection','$anchorScroll','$timeout',function ($scope,$resource,$rootScope,global,Stuff,$section,$location,$q,Collection,$anchorScroll,$timeout){
    var $state=$rootScope.$state;
    var $stateParams=$rootScope.$stateParams;
    $scope.stuffsFilterCtrl=this;
    $scope.stuffsFilterCtrl.paginate={page:0,rows:50,totalItems:0}
    $scope.stuffsFilterCtrl.query={section:'',brand:'',category:'',tags:[],artikul:($stateParams.searchStr)?$stateParams.searchStr.clearTag(20):'',brandTag:''};
    $scope.stuffsFilterCtrl.categories=[]; // список категорий для визуального блока фильтров
    var queryTags,category;// теги из строки запроса и активная категория
    $scope.stuffsFilterCtrl.brands=[]; // список брендов для визуального блока фильтров
    $scope.stuffsFilterCtrl.brandCollections=[];
    $scope.stuffsFilterCtrl.filters=[];


    // определяем в каком состоянии мы находимся. в разделе, категории или всем каталоге
    // затем устанавливаем параметры  в строку запроса если они соответствую  нащей логике
    // затем вызываем функцию получения списка
    // затем начинаем слущать клик на любом из фильтров
    // в функции $scope.stuffsFilterCtrl.changeFilter
    // если клик на категории то перегружаем контроллер если на фильтре то делаем запрос на новый список
    //*****************************************
    function initChainForGettingList(){
        var q=$q.defer(); q.resolve();return q.promise;
    }
    //console.log($stateParams)
    initChainForGettingList()
        .then(function(){
            //**************************************** Г Р У П П А   ********************************************
            var q=$q.defer();
            // группы категорий
            if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                // получение массива категорий
                var group=global.get('groups').val.getObjectFromArray('url',$stateParams.groupUrl);
                if(group){
                    // устанавливает груаау категорий
                    $scope.stuffsFilterCtrl.query.section=group._id;
                    if($stateParams.parentGroup){
                        // в дополнительных парметрах передается родительсая группа для категорий
                        // если ее нет, то все нет и списка категорий. соответствено нет ни фильтров ни брендо. выводится полный каталог для данной
                        var categories = $section.getCategories($stateParams.parentGroup).map(function(i){
                            return (i._id)?i._id:i;
                        });
                        //console.log(categories)
                        if (categories){
                            // приведение к общему виду списка категорий для фильтров
                            $scope.stuffsFilterCtrl.categories=global.get('categories').val.filter(function(item){return (categories.indexOf(item._id))>-1?true:false});
                        }
                    }
                    q.resolve($scope.stuffsFilterCtrl.categories);
                }else{
                    //нет такого раздела
                    $state.go('404')
                }
            } else {
                q.resolve(1);
            }
            return q.promise;
        })
        .then(function(r){
            //**************************************** К А Т Е Г О Р И Я  ********************************************
            // получение выбранной категории
            // основной шаг. от него отталкиваемся. есть категория в запросе или нет
            // для получения брендов и фильтров
            var q=$q.defer();
            if($scope.stuffsFilterCtrl.categories.length && $stateParams.categoryUrl){
                if ($stateParams.categoryUrl!='id'){
                    category=$scope.stuffsFilterCtrl.categories.getObjectFromArray('url',$stateParams.categoryUrl);
                    // устанавливаем категорию в строку запроса
                    if (category){
                        $scope.stuffsFilterCtrl.query.category=category._id;
                    } else {
                        // неверно уствновлен url категории
                        $state.go('404')
                    }
                }
            } else if($stateParams.categoryUrl!='id'){
                // не была установлена робительская группа. вычимляем ее по категории
                // если она не была установлена для всех категорий то весь каталог
                category=global.get('categories').val.getObjectFromArray('url',$stateParams.categoryUrl);
                if (category){
                    $scope.stuffsFilterCtrl.query.category=category._id;
                    $scope.stuffsFilterCtrl.categories=$section.getCategories(category.group.url)
                }
                //console.log(category)
            }
            q.resolve();
            return q.promise;
        })
        .then(function(){
            //****************************************Б Р Е Н Д   ********************************************
            var q=$q.defer();
            // бренд привязаны к категориям. соответственно если есть выбранная категория то
            // получаем списков брендов
            if ($scope.stuffsFilterCtrl.query.category){
                $scope.stuffsFilterCtrl.brands = global.get('brands').val.getArrayObjects('categories',$scope.stuffsFilterCtrl.query.category)
            }
            // если бренд один устанавливаем его активным и получаем список коллекций
            // при этом не важно есть ли бренд в параметрах
            if ($scope.stuffsFilterCtrl.brands.length===1){
                $scope.stuffsFilterCtrl.query.brand= $scope.stuffsFilterCtrl.brands[0]._id;
            } else {
                // проверяем наличие параметра  в url и если он совпадает с одним из брендов то устранавливаем бренд
                // в запросе
                if ($stateParams.brand){
                    var brand =  $scope.stuffsFilterCtrl.brands.getObjectFromArray('url',$stateParams.brand);
                    //console.log('brand-',brand)
                    if (brand){
                        $scope.stuffsFilterCtrl.query.brand=brand._id;
                        $location.search('brand',brand.url);
                    }
                }
            }
            if (!$scope.stuffsFilterCtrl.query.brand){
                $location.search('brand',null);
            }
            q.resolve();
            return q.promise;
        })
        .then(function(){
            //**************************************** К О Л Л Е К Ц И И  ********************************************
            var q=$q.defer();
            // console.log($stateParams)
            // если установлен бренд в запросе то  получаем для него коллекции
            if ($scope.stuffsFilterCtrl.query.brand){
                var query={brand:$scope.stuffsFilterCtrl.query.brand,group:$scope.stuffsFilterCtrl.query.section}
                Collection.getCollectionsForBrand({query:query},function(res){
                    res.shift();
                    $scope.stuffsFilterCtrl.brandCollections=res;
                    if ($stateParams.brandTag){
                        // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                        var brandTag=$scope.stuffsFilterCtrl.brandCollections.getObjectFromArray('url',$stateParams.brandTag);
                        //console.log($stateParams.brandTag,brandTag)
                        if(brandTag){
                            $scope.stuffsFilterCtrl.query.brandTag=brandTag._id;
                            $location.search('brandTag',brandTag.url);
                        } else {
                            $location.search('brandTag',null);
                        }
                    }
                    q.resolve(1);
                },function(){q.resolve(3);})
            }else{q.resolve(2);}
            return q.promise;
        }) // end collections
        .then(function(){
            //**************************************** Т Е Г И  ********************************************
            //console.log(r)
            var q=$q.defer();
            // получение тегов если они есть в параметрах в массив
            //для дальнейщей установки в визуальных фильтрах
            if($stateParams.queryTag){
                //console.log($stateParams);
                // агализ url на наличие тегов*************
                queryTags=$stateParams.queryTag.split('+');
                // удаляем возможные дубли
                queryTags = queryTags.filter(function(item, pos) {
                    return queryTags.indexOf(item) == pos;
                })
                queryTags=queryTags.reduce(function(tags,tag){
                    var t;
                    if (t=global.get('filterTags').val.getObjectFromArray('url',tag)){
                        tags.push(t);
                    }
                    return tags
                },[])
            }
            q.resolve();
            return q.promise;
        })
        .then(function(){
            //**************************************** Ф И Л Ь Т Р Ы ********************************************
            var q=$q.defer();
            // получение списка фильтров для данной категории для визуального представления
            if ($scope.stuffsFilterCtrl.query.category){
                var filters=global.get('filters').val.filter(
                    function(item){return (!item.dontshow && category.filters.indexOf(item._id)>-1)?true:false})
                // получение списка тегов для каждого фильтра
                filters.forEach(function(item,i){
                    item.tags=[];
                    global.get('filterTags').val.forEach(function(tag){
                        if (tag.filter==item._id){item.tags.push(tag)}
                    })
                    // устанавливаем значения в фильтрах
                    if (queryTags &&  queryTags.length){
                        queryTags.forEach(function(tag){
                            if (tag.filter==item._id){
                                if (!$scope.stuffsFilterCtrl.query.tags[i]){$scope.stuffsFilterCtrl.query.tags[i]=[]};
                                $scope.stuffsFilterCtrl.query.tags[i].push(tag._id);
                            }
                        })
                    }
                })
                $scope.stuffsFilterCtrl.filters=filters;

            } else {
                if (queryTags && queryTags.length){
                    $scope.stuffsFilterCtrl.query.tags[0]=[queryTags[0]._id]
                    $location.search('queryTag', queryTags[0].url);
                }
            }
            q.resolve('finsh');
            return q.promise;
        })
        .then(function(r){
            /*console.log(r)
             console.log($scope.stuffsFilterCtrl.query)
             console.log($scope.stuffsFilterCtrl.filters)*/
            $scope.stuffsFilterCtrl.getList($scope.stuffsFilterCtrl.paginate.page,$scope.stuffsFilterCtrl.paginate.rows)
        })


    var prevBrand;
    function _getCollections(){
        var query={brand:$scope.stuffsFilterCtrl.query.brand,group:$scope.stuffsFilterCtrl.query.section}
        Collection.getCollectionsForBrand({query:query},function(res){
            res.shift();
            $scope.stuffsFilterCtrl.brandCollections=res;
            if ($scope.stuffsFilterCtrl.brandCollections){
                if ($stateParams.brandTag){
                    // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                    var brandTag=$scope.stuffsFilterCtrl.brandCollections.getObjectFromArray('url',$stateParams.brandTag);
                    //console.log($stateParams.brandTag,brandTag)
                    if(brandTag){
                        $scope.stuffsFilterCtrl.query.brandTag=brandTag._id;
                        $location.search('brandTag',brandTag.url);
                    } else {
                        $location.search('brandTag',null);
                    }
                }
            }
        })
    }
    function _getQueryTag(){
        var arr =[];
        //console.log($scope.stuffsFilterCtrl.query.tags)
        $scope.stuffsFilterCtrl.query.tags.forEach(function(tags){
            if (tags.length){
                tags.forEach(function(tag){
                    arr.push(tag)
                })
            }
        })
        //console.log(arr)
        if(arr.length){
            return arr.map(function(tag){return global.get('filterTags').val.getObjectFromArray('_id',tag).url}).join('+')
        }else{
            return ;
        }

    }
    function _getBrand(){
        if ($scope.stuffsFilterCtrl.query.brand){
            return global.get('brands').val.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.brand).url;
        }

    }
    function _getBrandTag(){
        if ($scope.stuffsFilterCtrl.query.brandTag){
            return $scope.stuffsFilterCtrl.brandCollections.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.brandTag).url;
        }

    }
    $scope.stuffsFilterCtrl.getList=function(page,rows){
        //$scope.endLoadStuff=false;
        //console.log('получение списка - ',ii++,' раз')
        prevBrand=$scope.stuffsFilterCtrl.query.brand;
        // формирование строки запроса для выбора  товаров из БД
        var query=[];
        if (global.get('nostore').val){
            query.push({tags:{$nin:[global.get('nostore').val._id]}})
        }
        //console.log($scope.stuffsFilterCtrl.query)
        var queryTag=[];
        for (var key in $scope.stuffsFilterCtrl.query){
            if ($scope.stuffsFilterCtrl.query[key]){
                if (key=="tags"){
                    var qu=[];
                    var queryTags=$scope.stuffsFilterCtrl.query[key].filter(function(){return true});
                    //console.log(queryTags);
                    $scope.stuffsFilterCtrl.query[key].forEach(function(obj,i){
                        //console.log(i)
                        var q=[];
                        if (obj && obj.length){
                            obj.forEach(function(objT){
                                q.push({tags:objT});
                            })

                            if (q.length>1){
                                q={$or:q}
                                qu.push(q)
                            } else {
                                q=q[0];
                                qu.push(q)
                            }
                        }
                    })
                    if (qu.length){
                        if(qu.length==1){
                            query.push(qu[0]);
                        } else {
                            query.push({$and:qu});
                        }
                    }
                } else {
                    //console.log();
                    var obj={};
                    obj[key]=$scope.stuffsFilterCtrl.query[key];
                    query.push(obj);
                }
            }
        }
        if (query.length==1){
            query=JSON.stringify(query[0]);
        } else if(query.length>1){
            query =JSON.stringify({$and:query});
        } else {
            query='';
        }
        //console.log(query);
        /*console.log(query); if (i>1)return;
         i++;*/

        //********* start titles
         var queryTag=_getQueryTag();
         var brandTag=_getBrandTag();
         var brand=_getBrand();
         var queryTagsForSEO='';
         if (queryTag) {
            queryTagsForSEO+='queryTag='+queryTag;
         }
         if (brand) {
         if(queryTagsForSEO){queryTagsForSEO+='&';}
            queryTagsForSEO+='brand='+brand;
         }
         if (brandTag) {
         if(queryTagsForSEO){queryTagsForSEO+='&';}
            queryTagsForSEO+='brandTag='+brandTag;
         }
        console.log(queryTagsForSEO)
        $rootScope.$broadcast('$allDataLoaded',{state:$state.current.name,data:queryTagsForSEO});
        // передача данных в директиву
        $scope.stuffsFilterCtrl.queryForDirective=query;
    }
    $scope.stuffsFilterCtrl.changeFilter=function(c){
        $anchorScroll();
        //console.log($scope.stuffsFilterCtrl.query)
        var category= (!$scope.stuffsFilterCtrl.query.category)?{name:'category',url:'id'}:$scope.stuffsFilterCtrl.categories.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.category);
        //console.log(category)
        if (c){
            $state.current.reloadOnSearch = true;
            //var category= (!$scope.stuffsFilterCtrl.query.category)?{name:'category',url:'id'}:$scope.stuffsFilterCtrl.categories.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.category);
            var o={groupUrl:$stateParams.groupUrl,categoryUrl:category.url,categoryName:category.name,queryTag:undefined,brand:undefined,brandTag:undefined};
            $state.go($state.current.name,o,{reload:true});
            $state.current.reloadOnSearch = false;
        }else{
            // очищаем строку параметров
            $location.search('');


            $scope.stuffsFilterCtrl.query.artikul='';
            if ($scope.stuffsFilterCtrl.query.brand && (!$scope.stuffsFilterCtrl.brandCollections || prevBrand!=$scope.stuffsFilterCtrl.query.brand)){
                _getCollections($scope.stuffsFilterCtrl.query.brand);
                $scope.stuffsFilterCtrl.query.brandTag='';
            } else if (!$scope.stuffsFilterCtrl.query.brand){
                $scope.stuffsFilterCtrl.brandCollections=null;
                $scope.stuffsFilterCtrl.query.brandTag='';
            }
            $scope.stuffsFilterCtrl.paginate.page=0;
            $scope.stuffsFilterCtrl.getList($scope.stuffsFilterCtrl.paginate.page,$scope.stuffsFilterCtrl.paginate.rows);
            var queryTag=_getQueryTag();
            var brandTag=_getBrandTag();
            var brand=_getBrand();

            //var o = {groupUrl:$scope.stuffsFilterCtrl.groupUrl,categoryUrl:category.url,categoryName:category.name}
            if (queryTag) {
                $location.search('queryTag', queryTag);
            }
            if (brandTag) {
                $location.search('brandTag', brandTag);
            }
            if (brand) {
                $location.search('brand', brand);
            }
            if ($stateParams.brandTag){
                $location.search('brandTag',$stateParams.brandTag);
            }

            //$state.go('stuff',o,{notify:false});
        }
    }
    $scope.stuffsFilterCtrl.clearFilter=function(){
        console.log('clear filetrs')
        $scope.stuffsFilterCtrl.query.tags=[];
        $scope.stuffsFilterCtrl.changeFilter();
    }
}])


.controller('stuffsLWPCtrl', ['$scope','$resource','$rootScope','global','Stuff','$section','$location','$q','Collection','$anchorScroll','$timeout',function ($scope,$resource,$rootScope,global,Stuff,$section,$location,$q,Collection,$anchorScroll,$timeout){
    var $state=$rootScope.$state;
    var $stateParams=$rootScope.$stateParams;
    $scope.stuffsLWPCtrl=this;
    $scope.stuffsLWPCtrl.query=null;
    $scope.stuffsLWPCtrl.paginate={page:0,rows:20,totalItems:0}
    $scope.stuffsLWPCtrl.query=null;
    $scope.stuffsLWPCtrl.getList=function(page,rows){
        Stuff.getList($scope.stuffsLWPCtrl.query,null,page,rows,$scope.stuffsLWPCtrl.paginate).then(function(res){
            $scope.stuffsLWPCtrl.items=res;
            //$timeout(function(){$scope.$emit('endLoadStuffs');},300)
            $scope.stuffsLWPCtrl.query=null;
        },function(err){
            $state.go('404');
        });
    }
    $scope.$watch(function(){return $scope.stuffsLWPCtrl.query},function(n){
        if(n){
            $scope.stuffsLWPCtrl.paginate.page=0;
            $scope.stuffsLWPCtrl.getList($scope.stuffsLWPCtrl.paginate.page,$scope.stuffsLWPCtrl.paginate.rows);
        }
    })
    $timeout(function(){
        $scope.stuffsLWPCtrl.getList($scope.stuffsLWPCtrl.paginate.page,$scope.stuffsLWPCtrl.paginate.rows);
    })
    //*************************************************************************************************************
    //******************************************* для формирования url

    $scope.getUrlParams = Stuff.getUrlParams;
    //************************* for stuff URL *************************
    $scope.getCategoryName = Stuff.getCategoryName;
    $scope.getBrandName = Stuff.getBrandName;

}])
'use strict';
(function(){

    angular.module('gmall.services')
        .service('Stuff', stuffService)
        .service('Comments', commentService);
    stuffService.$inject=['$resource','$uibModal','$q','Sections','$stateParams','$state','$location','Brands','FilterTags','global','$order','exception','$user','$email','CreateContent','$rootScope','Filters','$timeout'];
    function stuffService($resource,$uibModal,$q,Sections,$stateParams,$state,$location,Brands,FilterTags,global,$order,exception,$user,$email,CreateContent,$rootScope,Filters,$timeout){
        var Items= $resource('/api/collections/Stuff/:_id',{_id:'@_id'});
        var categoriesLink={},
            queryData={};
        var stuffsService=[]

        $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
            if(to.name=='stuffs'||to.name=='stuffs.stuff' || to.name=='frame.stuffs'||to.name=='frame.stuffs.stuff'){
                $q.when()
                    .then(function () {
                        //console.log(toParams)
                        return getQuery(toParams,to)
                    })
                    .then(function (query) {
                        queryData=query;
                        //console.log(queryData)
                    })
            }
        })

        return {
            Items:Items,
            query:Items.query,
            get:Items.get,
            getList:getList,
            search:search,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            create:create,
            //setQuery:setQuery,
            getQuery:getQuery,
            getQueryFromUrl:getQueryFromUrl,
            setFilters:setFilters,
            cloneStuff:cloneStuff,
            saveField:saveField,
            selectItem:selectItem,
            select:selectItem,
            selectItemWithSort:selectItemWithSort,
            getServicesForOnlineEntry:getServicesForOnlineEntry,
            getAllBonus:getAllBonus,
            zoomImg:zoomImgGlobal,
            setDataForStuff:_setDataForStuff,
            getDataForBooking:_getDataForBooking,
        }

        function _salePrice(doc,sale){
            //console.log(doc.stock,doc.driveSalePrice)
            if(doc.driveSalePrice && doc.driveSalePrice.maxDiscount){
                doc.maxDiscount=doc.driveSalePrice.maxDiscount;
            }
            if(!doc.driveSalePrice || doc.driveSalePrice.type==0){
                doc.priceSale= 0
                for(var key in doc.stock){
                    doc.stock[key].priceSale= 0;
                }
            } else if(doc.driveSalePrice.type==2){
                doc.priceSale=Math.ceil10(Number(doc.price)-sale*doc.price,-2);
                for(var key in doc.stock){
                    doc.stock[key].priceSale= Math.ceil10(Number(doc.stock[key].price)-sale*doc.stock[key].price,-2);
                }
            }else if(doc.driveSalePrice.type==1){
                if(doc.driveSalePrice.condition){
                    sale=doc.driveSalePrice.percent/100;
                    doc.priceSale=Math.ceil10(Number(doc.price)-sale*doc.price,-2);
                    for(var key in doc.stock){
                        doc.stock[key].priceSale= Math.ceil10(Number(doc.stock[key].price)-sale*doc.stock[key].price,-2);
                    }
                }else{
                    sale=Number(doc.driveSalePrice.sum);
                    doc.priceSale=Math.ceil10(Number(doc.price)-sale,-2);
                    for(var key in doc.stock){
                        doc.stock[key].priceSale= Math.ceil10(Number(doc.stock[key].price)-sale,-2);
                    }
                }
            }
        }
        
        function _getPrice() {
            
        }
        
        function _retailPrice(doc,retail){
            if(!doc.driveRetailPrice){
                if(global.get('store').val.seller.retail){
                    doc.driveRetailPrice={type:2}
                }else{
                    doc.driveRetailPrice={type:0}
                }

            }
            //console.log(doc.driveRetailPrice,!doc.driveRetailPrice || !doc.driveRetailPrice.type==0)
            if(doc.driveRetailPrice.type==0){
                doc.retail= 0
                for(var key in doc.stock){
                    doc.stock[key].retail= 0;
                }
            } else if(doc.driveRetailPrice.type==2){
                doc.retail= Math.ceil10(Number(doc.price)+retail*Number(doc.price),-2);
                for(var key in doc.stock){
                    doc.stock[key].retail= Math.ceil10(Number(doc.stock[key].price)+retail*doc.stock[key].price,-2);
                }
            }else if(doc.driveRetailPrice.type==1){
                if(doc.driveRetailPrice.condition){
                    retail=doc.driveRetailPrice.percent/100;
                    doc.retail= Math.ceil10(Number(doc.price)+retail*doc.price,-2);
                    for(var key in doc.stock){
                        doc.stock[key].retail= Math.ceil10(Number(doc.stock[key].price)+retail*doc.stock[key].price,-2);
                    }
                }else{
                    retail=Number(doc.driveRetailPrice.sum);
                    doc.retail= Math.ceil10(Number(doc.price)+retail,-2);
                    for(var key in doc.stock){
                        doc.stock[key].retail= Math.ceil10(Number(doc.stock[key].price)+retail,-2);
                    }
                }
            }
            //console.log(doc.stock)
            
        }
        function _setPrice(doc){
            if(!doc){
                doc=this;
            }
            if(doc.price<0){doc.price=0}
            //doc.price=Math.round10(doc.price, -2);
            //console.log(doc.stock)
            //return;
            doc.sort=null;
            var sale = (global.get('store').val.seller.sale||0)/100;
            var retail=(global.get('store').val.seller.retail||0)/100;
            var el = (doc)?doc:this;
            if (!el.stock || typeof el.stock!='object'){
                el.stock={notag:{quantity:1,price:el.price}}
                el.sort='notag'
            }else if(el.stock['notag']){
                el.stock['notag'].price=el.price;

            }
            if(global.get('currency') && el.currency && global.get('store').val.mainCurrency != el.currency){
                el.price=Math.ceil10(Number(el.price)/Number(global.get('store').val.currency[el.currency][0]),-2)
                for(var tag in el.stock){
                    el.stock[tag].price=Math.ceil10(Number(el.stock[tag].price)/Number(global.get('store').val.currency[el.currency][0]),-2)
                }
            }
           // console.log(el.driveRetailPrice)
            //console.log(el.price)
            _salePrice(el,sale);
            _retailPrice(el,retail);
            //console.log(el.stock)
            //global.get('store').val.seller.retail&&_retailPrice(el,retail);

            return el;
        }


        function _changeSortOfStuff(sort){
            if(this.stock[sort]){
                this.filterActiveTagName=this.stock[sort].name;
            }else{
                this.filterActiveTagName='';
            }
            /*console.log(this.stock && sort && this.stock[sort] && !this.stock[sort].quantity)
            console.log(this.stock,sort,this.stock[sort],this.stock[sort].quantity)*/
            if(this.stock && sort && this.stock[sort] && !this.stock[sort].quantity){
                return;
            }
            /*console.log(sort)
            console.log(this.name,sort);*/
            //console.log(sort)
            if(sort){
                this.sort=sort;
            }
            if(this.sort){
                var sort=this.stock[this.sort];
                this.sortName=sort.name;
                this.price=sort.price;
                this.priceSale=sort.priceSale;
                this.retail=sort.retail;
                this.priceCampaign=sort.priceCampaign;
            } else{
                this.sortName=null;
                if(!this.stock || !this.stock.notag){
                    this.price=0;
                    this.priceSale=0;
                    this.retail=0;
                }
            }
            //_onSelectedSort()
        }
        function _addItemToOrder(){
            var self=this;
            if(!this.sort){
                this.unableToOrder=true;
                //console.log(this.name,this.unableToOrder)
                $timeout(function () {
                    self.unableToOrder=false;
                },2500)
                return 'nosort';
            }
            //console.log(this.sort,this.name)
            if(this.sortsOfStuff && this.sortsOfStuff.filter && !this.sort){
                exception.catcher('ошибка')('выберите разновидность')
            }else {
                if(this.stock[this.sort].name){
                    this.sortName=this.stock[this.sort].name;
                }
                $order.addItemToCart(this)
            }
            $rootScope.$emit('AddToCart')

        }
        function _dateTime(){
            var self=this;
            if(!this.sort){
                this.unableToOrder=true;
                //console.log(this.name,this.unableToOrder)
                $timeout(function () {
                    self.unableToOrder=false;
                },2500)
                return 'nosort';
            }
            global.get('functions').val.witget('dateTime',{stuff:this})
        }
        function _setSticker(stuff){
            //console.log(stuff.tags)
            return FilterTags.getSticker(stuff.tags);
            //console.log(stuff.name+' '+stuff.artikul,stuff.sticker)
        }
        function _checkInCart(){
            //console.log($order.checkInCart(this))
            return $order.checkInCart(this)
            //return true;
        }
        var delay
        function zoomImgGlobal(i,images,home) {
            //console.log(images[i])
            var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
            var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            var imgs = $("img[src$='"+images[i].img+"']"),img,horizontalOrient,squareH,squareV;
            //console.log(imgs)
            if(imgs && imgs[0]){
                img=$(imgs[0]);

                if(img.width() && img.height()){
                    if(img.width() >img.height()){
                        horizontalOrient=true;
                    }
                    if(img.width() === img.height() || (img.width()- img.height())<5){
                        if(w>h){squareH=true;}else{squareV=true}
                        horizontalOrient=false;
                    }

                }
            }else{
                imgs = $("img[src$='"+images[i].thumb+"']")

                //console.log(imgs)
                if(imgs && imgs[0]){
                    img=$(imgs[0]);
                    if(img.width() && img.height()){
                        if(img.width() >img.height()){
                            horizontalOrient=true;
                        }
                        if((img.width() === img.height() || (img.width()- img.height())<5)){
                            horizontalOrient=false;
                            if(w>h){squareH=true;}else{squareV=true}
                        }
                    }
                }else{
                    if(images[i].el){
                        if(images[i].el.width && images[i].el.height){
                            if(images[i].el.width >images[i].el.height){
                                horizontalOrient=true;
                            }
                            if(images[i].el.width === images[i].el.height||(images[i].el.width - images[i].el.height)<5){
                                horizontalOrient=false;
                                if(w>h){squareH=true;}else{squareV=true}
                            }
                        }
                        //console.log(images[i].el)
                    }
                }
            }
            //console.log('horizontalOrient',horizontalOrient)
           /* console.log($(img).width())
            console.log($(img).height())*/
            //console.log(horizontalOrient)
            if(delay){return}
            delay=true;
            $timeout(function () {
                delay=false
            },1000)
            //console.log(i)
            var self=this;
            var content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
            var contentZoom="width=device-width, initial-scale=1, maximum-scale=3"
            var viewPort=document.getElementById("viewport");
            //console.log(viewPort)
            var templ=(global.get('store').val.template.addcomponents && global.get('store').val.template.addcomponents.zoom && global.get('store').val.template.addcomponents.zoom.templ)?global.get('store').val.template.addcomponents.zoom.templ:'';
            var templateUrl = 'views/template/partials/stuffDetail/modal/zoom'+templ+'.html'
            viewPort.setAttribute("content", contentZoom);
            $rootScope.$emit('modalOpened');
            var options={
                animation: true,
                bindToController: true,
                controllerAs: '$ctrl',
                windowClass:  function(){
                    if(squareH){
                        return 'zoom zoom-modal-squareH'
                    }else if(squareV){
                        return 'zoom zoom-modal-squareV'
                    } else if(horizontalOrient){
                        return 'zoom zoom-modal-horizontal'
                    } else{
                        return 'zoom zoom-modal-vertical'
                    }
                },
                    //return((horizontalOrient)?'zoom zoom-modal-horizontal':'zoom zoom-modal-vertical')},//'app-modal-window',
                templateUrl: templateUrl,
                controller: function ($uibModalInstance,global,gallery,i,home,horizontalOrient){
                    var self=this;
                    if(home){
                        if(horizontalOrient){
                            self.style="width:98vw;height:auto"
                        }else{
                            self.style="height:93vh;width:auto"
                        }

                    }else{
                        self.style="width:100%"
                    }
                    self.modal=global.get('mobile').val
                    self.idx=i;
                    self.gallery=angular.copy(gallery);
                    //console.log(self.gallery)
                    self.gallery[i].active=true;

                    self.next=next;
                    self.prev=prev;
                    self.chancheActiveSlide=chancheActiveSlide;
                    var delay=false
                    function next(i) {
                        //console.log('next',i)
                        if(delay){return}
                        delay=true
                        if(i+1==self.gallery.length){
                            self.gallery[0].active=true;
                            self.idx=0
                        }else{
                            self.gallery[i+1].active=true;
                            self.idx=i+1
                        }
                        $timeout(function () {
                            delay=false
                        },500)
                    }
                    function prev(i) {
                        //console.log('prev',i)
                        if(delay){return}
                        delay=true
                        if(i==0){
                            self.gallery[self.gallery.length-1].active=true;
                            self.idx=self.gallery.length-1
                        }else{
                            self.gallery[i-1].active=true;
                            self.idx=i-1
                        }
                        $timeout(function () {
                            delay=false
                        },500)
                    }
                    function chancheActiveSlide(i) {
                        self.gallery[i].active=true;
                        self.idx=i
                    }
                    self.ok=function(){
                        $uibModalInstance.close();
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss();
                    };
                },
                resolve:{
                    gallery:function(){
                        return images
                    },
                    i:function(){
                        return i;
                    },
                    home:function(){
                        return home;
                    },
                    horizontalOrient:horizontalOrient,

                }
            }
            if(!home){
                options.size='lg'
            }
            $q.when()
                .then(function(){
                    return $uibModal.open(options).result
                })
                .then(function(res){
                    //console.log(res)
                    viewPort.setAttribute("content", content);
                    $rootScope.$emit('modalClosed')
                })
                .catch(function(err){
                    viewPort.setAttribute("content", content);
                    $rootScope.$emit('modalClosed')
                    //console.log(err)
                    if(err && err!='backdrop click'){
                        err=err.data||err;
                        exception.catcher('zoom')(err)
                    }
                })
        }
        function _zoomImg(i) {
            zoomImgGlobal(i,this.gallery)
        }
        function _setCategoryName(item){
            //console.log(item)
            //console.log(item.name,item.artikul,item.category)
            if(item.category && item.category._id){
                item.category=[item.category]
            }
            //console.log(item)
            if(item.category && item.category.length){
                //console.log(global.get('category').val)
                var i=0;
                var c=null;
                while(i<item.category.length && !c){
                    //console.log(i,global.get('categoriesO').val[item.category[i]])
                    if(typeof item.category[i]=='object'){item.category[i]=item.category[i]._id}
                    if(global.get('categoriesO').val[item.category[i]]){
                        c=global.get('categoriesO').val[item.category[i]]
                    }
                    i++
                }
            }
            //console.log(c)
            if(global.get('categories' ).val){
                if(!c){
                    if(!categoriesLink[item.category]){
                        c =global.get('categories').val.getOFA('_id',item.category);
                    }else{
                        c = categoriesLink[item.category];
                    }
                }

                if(c){
                    //console.log(c)
                    item.categoryUrl= c.url;
                    item.categoryName= c.name
                    if(c.linkData){
                        item.groupUrl= c.linkData.groupUrl
                        item.parentGroup=c.linkData.parentGroup||null;
                    }else{
                        item.groupUrl= 'group';
                        item.categoryUrl= 'category';
                        item.parentGroup=null;
                    }
                }else{
                    item.groupUrl= 'group';
                    item.categoryUrl= 'category';
                }
            }
            if(item.brand && global.get('brands') && global.get('brands').val){
                if(typeof item.brand=='object'){
                    item.brand=item.brand._id
                }
                var b =global.get('brands').val.getOFA('_id',item.brand);
                if(b){
                    item.brandUrl= b.url;
                    item.brandName=b.name;
                    if(item.brandTag && !item.brandTag._id){
                        var bt = b.tags.getOFA('_id',item.brandTag)
                        if(bt){
                            item.brandTagUrl=bt.url;
                            item.brandTagName=bt.name;
                        }
                    }else if(item.brandTag && item.brandTag._id){
                        item.brandTagUrl=item.brandTag.url;
                        item.brandTagName=item.brandTag.name;
                    }
                }
            }

        }
        function _setDataForStuff(stuff,filterTags,stuffsState){
            //console.log(stuff.name,stuff.stock,global.get('store').val.template.stuffListType[global.get('sectionType').val])
            //console.log(JSON.parse(JSON.stringify(stuff)));
            stuff.changeSortOfStuff=_changeSortOfStuff;
            stuff.addItemToOrder=_addItemToOrder;
            stuff.dateTime=_dateTime;
            stuff.onSelected =_onSelectedSort;
            stuff.order=_orderStuff,
            stuff.getBonus=_getBonus,
            stuff.zoomImg=_zoomImg,
            stuff.checkInCart=_checkInCart
            stuff.getDataForBooking=_getDataForBooking;
            _setCategoryName(stuff)
            _setPrice(stuff)
            stuff.setPrice=_setPrice;
            if(stuff.multiple && stuff.minQty){
                stuff.quantity= Number(stuff.minQty);
            }else{
                stuff.quantity=1;
                stuff.minQty=1;
            }
            if(!stuff.single){
                stuff.maxQty=150;
            }
            //stuff.quantity=1;
            if(!stuff.sale){
                _checkCamapign(stuff)
                //console.log(stuff)
            }
            stuff.expected=true;
            if(stuff.stock && typeof stuff.stock == 'object' && !stuff.stock.notag){
                if(stuff.sortsOfStuff && stuff.sortsOfStuff.filterGroup && global.get('filtersO') && global.get('filtersO').val && global.get('filtersO').val[stuff.sortsOfStuff.filterGroup]){
                    var filterGroup=global.get('filtersO').val[stuff.sortsOfStuff.filterGroup];
                    var filterGroupTags;
                    if(filterGroup){
                        stuff.sortsOfStuff.name = filterGroup.name.charAt(0).toUpperCase() + filterGroup.name.slice(1).toLowerCase();
                        stuff.groupName = stuff.sortsOfStuff.name;
                        filterGroupTags=filterGroup.tags.map(function(t){return t._id})
                        for(var ii=0;ii<stuff.tags.length;ii++){
                            var idx=filterGroupTags.indexOf(stuff.tags[ii]);
                            if(idx>-1){
                                stuff.groupTagName=filterGroup.tags[idx].name.charAt(0).toUpperCase() + filterGroup.tags[idx].name.slice(1).toLowerCase();
                                break;
                            }
                        }
                    }
                }
                if(stuff.sortsOfStuff && stuff.sortsOfStuff.filter && global.get('filtersO') && global.get('filtersO').val && global.get('filtersO').val[stuff.sortsOfStuff.filter]){
                    stuff.filterName=global.get('filtersO').val[stuff.sortsOfStuff.filter].name.toLowerCase();
                    stuff.filterName= stuff.filterName.charAt(0).toUpperCase() + stuff.filterName.slice(1).toLowerCase();
                }
                if(stuff.sortsOfStuff && stuff.sortsOfStuff.stuffs){
                    for(var  i21=0;i21<stuff.sortsOfStuff.stuffs.length;i21++){
                        if(stuff.sortsOfStuff.stuffs[i21]._id!=stuff._id && stuff.sortsOfStuff.stuffs[i21].archived){
                            stuff.sortsOfStuff.stuffs.splice(i21,1);
                            i21--;
                        }else if(stuff.sortsOfStuff.stuffs[i21].stock && typeof stuff.sortsOfStuff.stuffs[i21].stock =='object'){
                            for(var k in stuff.sortsOfStuff.stuffs[i21].stock){
                                if(stuff.sortsOfStuff.stuffs[i21].stock[k].quantity){
                                    stuff.sortsOfStuff.stuffs[i21].stock[k].quantity=Number(stuff.sortsOfStuff.stuffs[i21].stock[k].quantity)
                                }
                            }
                        }
                    }
                }

                /*if(stuff._id=='5bc5624a41c5753ecddc5e11'){
                    console.log(stuff.stock)
                    console.log(global.get('filterTagsO'))
                }*/
                var keys = Object.keys(stuff.stock);
                stuff.stockKeysArray =keys.map(function (k) {
                    stuff.stock[k].quantity=Number(stuff.stock[k].quantity)
                    if(global.get('filterTagsO') && global.get('filterTagsO').val && global.get('filterTagsO').val[k]){
                        var tag = global.get('filterTagsO').val[k];
                    }else{
                        var tag = filterTags.getOFA('_id',k);
                    }
                    /*if(stuff._id=='5bc5624a41c5753ecddc5e11'){
                        console.log('tag',tag)

                    }*/
                    if(tag){
                        return {_id:k,index:tag.index,name:tag.name,quantity:Number(stuff.stock[k].quantity)}
                    }else{
                        return null
                    }
                })
                .filter(function (key) {return key/* && (stuff.stock[key._id].quantity||stuff.stock[key._id].quantity==0);*/})
                .sort(function (a,b) {
                    if(!a || !b )return 1;
                    return a.index-b.index
                })
                /*console.log(stuff.stock)
                console.log(stuff.stockKeysArray)*/
                var sort_Id=null;
                //console.log(stuff)
                stuff.stockKeysArray.forEach(function (key) {
                    //console.log(key,stuff.stock[key._id])
                    // устанавливаем  разновидноть
                    //if(!stuff.sort &&(!global.get('sectionType') || !global.get('sectionType').val || !global.get('store').val.template.stuffListType[global.get('sectionType').val].unsetSort)) {
                    //console.log(stuff.name,key.name,'устанавливаем разновидность',$state.current.name!='stuffs.stuff' || stuffsState)
                    if(!stuff.minPrice){
                        stuff.minPrice=Number(stuff.stock[key._id].price);
                    }
                    if(!stuff.maxPrice){
                        stuff.maxPrice=Number(stuff.stock[key._id].price);
                    }
                    /*console.log(stuff.stock[key._id].price,stuff.minPrice)
                    console.log(stuff.stock[key._id].price<stuff.minPrice)
                    console.log(typeof stuff.stock[key._id].price)*/
                    if(Number(stuff.stock[key._id].price)<stuff.minPrice){
                        stuff.minPrice=Number(stuff.stock[key._id].price);
                    }
                    if(Number(stuff.stock[key._id].price)>stuff.maxPrice){
                        stuff.maxPrice=Number(stuff.stock[key._id].price);
                    }


                    if(stuff.stock[key._id].priceSale){
                        if(!stuff.minPriceSale){
                            stuff.minPriceSale=Number(stuff.stock[key._id].priceSale);
                        }
                        if(!stuff.maxPriceSale){
                            stuff.maxPriceSale=Number(stuff.stock[key._id].priceSale);
                        }
                        if(Number(stuff.stock[key._id].priceSale)<stuff.minPriceSale){
                            stuff.minPriceSale=Number(stuff.stock[key._id].priceSale);
                        }
                        if(Number(stuff.stock[key._id].priceSale)>stuff.maxPriceSale){
                            stuff.maxPriceSale=Number(stuff.stock[key._id].priceSale);
                        }

                    }

                    if(!stuff.sort &&(!global.get('sectionType') || !global.get('sectionType').val || !global.get('store').val.template.stuffListType[global.get('sectionType').val].unsetSort || $state.current.name!='stuffs.stuff' || stuffsState)) {
                        //console.log($state.current.name)
                        if($state.current.name==='stuffs' || $state.current.name==='likes'){
                            if(!global.get('sectionType') || !global.get('sectionType').val || !global.get('store').val.template.stuffListType[global.get('sectionType').val].unsetSortList){
                                if (!sort_Id && stuff.stock[key._id].quantity) {
                                    sort_Id = key._id;
                                    stuff.sort = sort_Id;
                                    //console.log(key.name)
                                }
                            }
                        }else{
                            if (!sort_Id && stuff.stock[key._id].quantity) {
                                sort_Id = key._id;
                                stuff.sort = sort_Id;
                                //console.log(key.name)
                            }
                        }

                    }else{
                        //console.log('не устанавливаем разновидность')
                    }




                    key.quantity=Number(stuff.stock[key._id].quantity);
                    if(key.quantity && stuff.expected){
                        stuff.expected=false;
                    }
                    if(key.quantity){
                        if(stuff.multiple && stuff.minQty){
                            key.quantity= Number(stuff.minQty);
                        }else{
                            key.quantity=1;
                            stuff.minQty=1;
                        }
                    }
                    stuff.stock[key._id].name=key.name;

                    //console.log(stuff.stock[key._id])
                    if(key._id==stuff.sort){
                        stuff.filterActiveTagName=stuff.stock[key._id].name;
                    }
                })

                if(stuff.stockKeysArray.length && sort_Id){
                    _changeSortOfStuff.call(stuff,sort_Id);
                }
                /*console.log(stuff.minPrice,stuff.maxPrice)
                console.log(stuff.minPriceSale,stuff.maxPriceSale)*/

            }else if(stuff.stock && typeof stuff.stock == 'object' && stuff.stock.notag){
                if(stuff.stock['notag'].quantity){
                    stuff.sort='notag'
                    stuff.expected=false;
                }
                stuff.stockKeysArray=[{name:'notag',_id:'notag',quantity:stuff.stock['notag'].quantity}]
            }
            if(!stuff.campaignId){
                stuff.sticker=_setSticker(stuff)
            }
            if(stuff.gallery && stuff.gallery.length){
                stuff.gallery.sort(function(a,b){return a.index- b.index})
            }


            if(!stuffsState){
                //console.log(stuffsState)
                if(typeof _filtersO !='undefined'  && stuff.sortsOfStuff && stuff.sortsOfStuff.stuffs && stuff.sortsOfStuff.stuffs.length){
                    var filterGroup,filterGroupTags=[];
                    if(stuff.sortsOfStuff.filterGroup){
                        filterGroup= _filtersO[stuff.sortsOfStuff.filterGroup]
                        if(filterGroup){
                            filterGroupTags=filterGroup.tags.map(function(t){return t._id})
                        }
                    }
                    //console.log(filterGroup)
                    stuff.sortsOfStuff.stuffs.forEach(function (itemS,i) {
                        itemS.gallery.forEach(function (s,ii) {
                            if(!ii){
                                s.active=true
                            }else{
                                s.active=false
                            }
                        })
                        for(var ii=0;ii<itemS.tags.length;ii++){
                            var idx=filterGroupTags.indexOf(itemS.tags[ii]);
                            if(idx>-1){
                                if(itemS._id===stuff._id){
                                    stuff.sortsOfStuff.filterActiveTagName=filterGroup.tags[idx].name;
                                }
                                if(filterGroup.tags[idx].img){
                                    stuff.sortsOfStuff.stuffs[i].gallery[0].thumbSmallTag=filterGroup.tags[idx].img
                                    //stuff.sortsOfStuff.stuffs[i].tagName=filterGroup.tags[idx].name
                                }
                                break;
                            }
                        }
                    })
                }
            }
            /*if(stuff.artikul=='БЕРН узор "саржа"'){
                console.log(stuff)
            }*/

            return stuff

        }
        function _onSelectedSort(){
            setTimeout(function(){
                $(':focus').blur();
            },50)
        }
        function _orderStuff(){
            var stuff=this;
            // очистка корзины
            $order.clearCart();
            stuff.cena=stuff.price;
            stuff.sum= stuff.cena*stuff.quantity;
            if(stuff.addItemToOrder()=='nosort'){
                return;
            }
            //console.log(stuff)
            // get user info
            //return;
            $q.when()
                .then(function(){
                     return $user.getInfo(stuff.service)
                })
                .then(function(user){
                    /*console.log(user);
                    return;*/
                    return $order.checkOutFromList(user)
                })
                .then(function(){
                    $order.clearCart();
                })
                .catch(function(err){
                    $order.clearCart();
                    if(err){
                        exception.catcher('заказ')(err)
                    }

                })

        }
        function getAllBonus() {
            return _getBonus(true)
        }
        function _getBonus(all){
            var stuffs;
            var stuff=this;
            return $q.when()
                .then(function () {
                    if(all){
                        var p={page:0,rows:100};
                        var query={$and:[{orderType:4},{actived:true}]}
                        return getList(p,query);
                    }else{
                        return [stuff]
                    }
                })
                .then(function (sts) {
                    stuffs=sts;
                })
                .then(function(){
                     return $user.getInfoBonus()
                })
                .then(function(user){
                    if(!user || !user.email){throw 'нет email'}
                    var content=CreateContent.emailBonus(stuffs);

                    var bonus=(stuffs && stuffs[0] && stuffs[0].imgs && stuffs[0].imgs[0] && stuffs[0].imgs[0].name)?stuffs[0].imgs[0].name:'получение контента'
                    //console.log(content,bonus)
                    /*var popupWin=window.open();
                    popupWin.document.write(content);
                    popupWin.window.focus();*/

                    //return;
                    var domain=global.get('store').val.domain;
                    var o={email:user.email,content:content,
                        subject:bonus+' ✔',from:  '<promo@'+domain+'>'};
                    return $q(function(resolve,reject){
                        $email.save(o,function(res){
                            exception.showToaster('note','Сообщение','На Ваш email отправлено письмо');
                            resolve()
                        },function(err){
                            exception.showToaster('warning','отправка уведомления',err.data)
                            resolve()
                        } )
                    })
                }) //email

                .then(function(){
                    var states= $state.get();
                    if(global.get('paps') && states.some(function(state){return state.name=='thanksPage'})){
                        var pap = global.get('paps').val.getOFA('action','bonus');
                        //console.log(pap)
                        if(pap && pap.url){
                            $state.go('thanksPage',{id:pap.url})
                        }else{
                            exception.showToaster('note','Заказ','Все прошло успешно.');
                        }
                    }else{
                        exception.showToaster('note','Заказ','Все прошло успешно.');
                    }

                })//paps
                .catch(function(err){
                    if(err){
                        exception.catcher('получение бонуса')(err)
                    }

                })

        }

        function _checkCamapign(stuff){
            return $order.checkCampaign(stuff);
        }
        function _getDataForBooking(){
            var el=this;
            var stuff={
                _id:this._id,
                artikul:this.artikul,
                name:this.name,
                nameL:this.nameL,
                link:this.link,
                backgroundcolor:this.backgroundcolor,
                timePart:(el.timePart)?el.timePart:4,
                price:this.price,
                priceSale:this.priceSale,
                currency:this.currency
            }
            if(el.sort){
                stuff.price= el.stock[el.sort].price;
                stuff.priceSale= el.stock[el.sort].priceSale;
                stuff.timePart=(el.stock[el.sort].timePart)?el.stock[el.sort].timePart:4;
            }
            if(el.sortName){
                stuff.name= el.name+' '+el.sortName;
            }
            //console.log(stuff)
            return stuff;
        }
        function getList(paginate,query,search){
            //console.log('???')
            if(!paginate){paginate={page:0}}
            /*if(global.get('crawler') && global.get('crawler').val){
                query={$and:[{store:global.get('store').val._id},{actived:true}]}
            }*/
            var data ={perPage:paginate.rows ,page:paginate.page,query:query,search:search};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                //console.log(response)
                //console.log(paginate)
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                var maxIndex;
                return $q.when()
                    .then(function(){
                        return FilterTags.getFilterTags()
                    })
                    .then(function (ft) {
                        //console.log(ft.length)
                        response.forEach(function(el){
                            if(el.index==99999 && maxIndex){
                                el.index--;
                            }
                            if(el.index==99999){
                                maxIndex=true;
                            }

                            _setDataForStuff(el,ft)
                        })
                    })
                    .then(function () {
                        return response;
                    })
            }
            function getListFailed(error) {
                console.log('XHR Failed for getStuffs.' + error);
                return $q.reject(error);
            }
        }
        function search(search,setData){
            // setData - если ищем товар в админке для дальнейшего использования необходимо получить с сервера все данные
            var data ={search:search,setData:setData};
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                //console.log(response)
                if(setData){
                    return $q.when()
                        .then(function(){
                            return FilterTags.getFilterTags()
                        })
                        .then(function (ft) {
                            //console.log(ft.length)
                            response.forEach(function(el){
                                if(el.index==99999 && maxIndex){
                                    el.index--;
                                }
                                if(el.index==99999){
                                    maxIndex=true;
                                }

                                _setDataForStuff(el,ft)
                            })
                        })
                        .then(function () {
                            return response;
                        })
                }else{
                    return response
                }

            }
            function getListFailed(error) {
                console.log('XHR Failed for getStuffs.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id,o){
            var query={_id:id};
            if(o){
                for(var k in o){
                    query[k]=o[k]
                }
            }
            //console.log(query)
            return Items.get( query).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(res) {

                //res.getDataForCart=_getDataForCart;
                return $q.when()
                    .then(function(){
                        return FilterTags.getFilterTags()
                    })
                    .then(function (ft) {
                        _setDataForStuff(res,ft)
                        //console.log(res.stock)
                        //res.quantity=1;
                        return res;
                    })
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            //console.log('!!!')
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/createStuff.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.item=''
                        self.ok=function(){
                            $uibModalInstance.close(self.item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (item) {
                    if(item.name){
                        resolve(item)
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function getQueryFromUrl(campaignCondition){
            //console.log(campaignCondition)
            if($state.current.name=='campaign.detail'){
                return $q.when()
                    .then(function(){
                        return global.get('campaign').val
                    })
                    .then(function(campaigns){
                        var campaign=campaigns.getOFA('url',$stateParams.id)
                        //console.log(campaign)
                        if(campaign){
                            return setQueryForCampaign(campaign,campaignCondition);
                        }
                    })
            }else{
                return queryData;
            }
            function setQueryForCampaign(campaign,campaignCondition){
                var query={};
                return $q.when()
                    .then(function(){
                        return FilterTags.getFilterTags()
                    })
                    .then(function(filterTags){
                        if(campaignCondition){
                            if(campaign.conditionTags && campaign.conditionTags.length){
                                query.queryTags={}
                                campaign.conditionTags.forEach(function(tag){
                                    var t = filterTags.getOFA('_id',tag);
                                    if(t){
                                        if(!query.queryTags[t.filter]){query.queryTags[t.filter]=[]}
                                        query.queryTags[t.filter].push(t._id)
                                    }
                                })
                            }
                            if(campaign.conditionBrandTags && campaign.conditionBrandTags.length){
                                query.brandTag={$in:campaign.conditionBrandTags};
                            }
                            if(campaign.conditionBrands && campaign.conditionBrands.length){
                                query.brand={$in:campaign.conditionBrands};
                            }
                            if(campaign.conditionCategories && campaign.conditionCategories.length){
                                query.category={$in:campaign.conditionCategories}
                            }
                            if(campaign.conditionStuffs && campaign.conditionStuffs.length){
                                query._id={$in:campaign.conditionStuffs}
                            }
                        }else{
                            if(campaign.tags && campaign.tags.length){
                                query.queryTags={}
                                campaign.conditionTags.forEach(function(tag){
                                    var t = filterTags.getOFA('_id',tag);
                                    if(t){
                                        if(!query.queryTags[t.filter]){query.queryTags[t.filter]=[]}
                                        query.queryTags[t.filter].push(t._id)
                                    }
                                })
                            }
                            if(campaign.brandTags && campaign.brandTags.length){
                                query.brandTag={$in:campaign.brandTags};
                            }
                            if(campaign.brands && campaign.brands.length){
                                query.brand={$in:campaign.brands};
                            }
                            if(campaign.categories && campaign.categories.length){
                                query.category={$in:campaign.categories}
                            }
                            if(campaign.stuffs && campaign.stuffs.length){
                                query._id={$in:campaign.stuffs}
                            }
                        }

                        _setQueryForTags(query)

                        var keys = Object.keys(query);
                        var q={}
                        if(keys.length==1){
                            q=query;
                        }else if(keys.length>1){
                            q.$or=[];
                            for(var k in query){
                                var o ={}
                                o[k]=query[k]
                                q.$or.push(o)
                            }

                        }
                        q.actived=true;
                        return q;
                    })
            }
        }
        function getQuery(stateParams,to) {
            return _setQuery(stateParams,to)
        }
        function _setQueryForTags(query,filters) {
            //console.log(query.queryTags,query.queryTags && typeof query.queryTags=='object')
            if(query.queryTags && typeof query.queryTags=='object'){
                try{
                    var keys = Object.keys(query.queryTags);
                }catch(err){
                    //console.log(err)
                    keys=[]
                }

                if(keys.length==1){
                    query.tags={$in:query.queryTags[keys[0]]}
                }else if(keys.length>1){
                    query.$and=[];
                    keys.forEach(function(k){
                        query.$and.push({tags:{$in:query.queryTags[k]}})
                    })
                }
            }
            delete query.queryTags

            if(query.filters && typeof query.filters=='object'){
                try{
                    var keys = Object.keys(query.filters);
                }catch(err){
                    //console.log(err)
                    keys=[]
                }
                if(keys.length==1){
                    var filter;
                    if(filters){
                        filter = filters.getOFA('_id',keys[0])
                    }
                    //console.log(filter)
                    if(filter && filter.price){
                        query['priceForFilter']=query.filters[keys[0]]
                        console.log('query.filters[keys[0]]',query.filters[keys[0]])
                    }else{
                        query['filters.'+keys[0]]=query.filters[keys[0]]
                    }

                }else if(keys.length>1){
                    if(!query.$and){
                        query.$and=[];
                    }
                    keys.forEach(function(k){
                        var filter;
                        if(filters){
                            filter = filters.getOFA('_id',k)
                        }
                        //console.log(filter)
                        if(filter && filter.price){
                            query['priceForFilter']=query.filters[k]
                        }else{
                            var o ={};
                            o['filters.'+k]=query.filters[k]
                            query.$and.push(o)
                        }
                    })
                    if(query.$and.length==1){
                        for(var k in query.$and[0]){
                            query[k] = query.$and[0][k];
                        }
                        delete query.$and
                    }

                }
            }
            delete query.filters
        }
        function _setQuery(stateParams,to) {
            //console.log(stateParams)
            global.set('category',null);
            var parentSection,sectionCategories,categoryBrands=[],categoryFilters=[],query={},breadcrumbs=[];
            return $q(function(resolve,reject){
                $q.when()
                    .then(function(){
                        return $q.all([Sections.getSections(),Brands.getBrands(),Filters.getFilters()])
                    })
                    .then(function(data){
                        var sections=data[0],brands=data[1],filters=data[2];
                        //console.log(stateParams)
                        parentSection=Sections.getSection(sections,stateParams.groupUrl);
                        //console.log('parentSection',parentSection)

                        global.set('parentSection',parentSection)
                        if(parentSection){
                            if(stateParams.categoryUrl!='category'){
                                if(parentSection.categories && parentSection.categories.length){
                                    var categorySet;
                                    parentSection.categories.forEach(function(c){
                                        if(c.url==stateParams.categoryUrl){
                                            global.set('category',c);
                                            categorySet=true;
                                            c.set=true;
                                            query.category=c._id;
                                            categoryBrands=c.brands;
                                            categoryFilters=c.filters
                                            //console.log(categoryFilters)
                                        }else{
                                            c.set=false
                                        }
                                    })
                                    if(!query.category){
                                        throw 404
                                    }
                                } else{
                                    throw 404
                                }
                            }else{
                                sectionCategories=Sections.getEmbededCategories(parentSection,[]).map(function(el){return el._id})
                                if(!sectionCategories.length){
                                    query.category=null;
                                }else{
                                    query.category={$in:sectionCategories}
                                    //console.log(global.get('categoriesO').val)
                                    sectionCategories.forEach(function (cat) {
                                        //console.log(cat)
                                        var c = global.get('categoriesO').val[cat];
                                        if(parentSection && parentSection.filters){
                                            categoryFilters=parentSection.filters;
                                        }
                                        /*c.filters.forEach(function(f){
                                            if(categoryFilters.indexOf(f)<0){
                                                categoryFilters.push(f)
                                            }
                                        })*/

                                        c.brands.forEach(function(b){
                                            if(categoryBrands.indexOf(b)<0){
                                                categoryBrands.push(b)
                                            }
                                        })
                                    })
                                }
                            }
                        }
                        // бренд и коллекци
                        // ************************************************************************
                        var brandSet,brandTagSet,brandsArr,brandTagsArr;
                        //console.log(categoryBrands)

                        if(stateParams.brand){
                            brandsArr=stateParams.brand.split('__')
                        }
                        if(stateParams.brandTag){
                            brandTagsArr=stateParams.brandTag.split('__')
                        }
                        query.brand=[];
                        query.brandTag=[];
                        brands.forEach(function (b){
                            //console.log(b)
                            b.inList=false;
                            b.showCollections=false;
                            if((to.name=='stuffs' || to.name=='stuffs.stuff')){
                                if(categoryBrands && categoryBrands.length){
                                    if(categoryBrands.indexOf(b._id)>-1){
                                        b.inList=true;
                                    }
                                }
                            }else{
                                b.inList=true;
                            }


                            if(brandsArr && brandsArr.indexOf(b.url)>-1){
                                query.brand.push(b._id)
                                b.set=true;
                                breadcrumbs.push({type:'brand',name:b.name,url:b.url})
                                brandSet=true;
                            }else{
                                b.set=false;
                            }
                            b.tags.forEach(function (t) {
                                if(brandTagsArr && brandTagsArr.indexOf(t.url)>-1){
                                    query.brandTag.push(t._id)
                                    t.set=true;
                                    breadcrumbs.push({type:'brandTag',name:t.name,url:t.url})
                                    b.showCollections=true;
                                    brandTagSet=true;
                                }else{
                                    t.set=false;
                                }
                            })

                        })
                        if(query.brand.length){
                            if(query.brand.length==1){
                                query.brand=query.brand[0]
                            }else{
                                query.brand={$in:query.brand}
                            }
                        }else{
                            query.brand=null;
                        }
                        if(query.brandTag.length){
                            if(query.brandTag.length==1){
                                query.brandTag=query.brandTag[0]
                            }else{
                                query.brandTag={$in:query.brandTag}
                            }
                        }else{
                            query.brandTag=null;
                        }
                        if(!query.brandTag){
                            delete query.brandTag
                        }
                        if(!query.brand){
                            delete query.brand
                        }
                        //console.log(query.brandTag)
                        if(!brandSet){$location.search('brand',null);}
                        if(!brandTagSet){$location.search('brandTag',null);}

                        // end brand && collections
                        var queryTags;
                        if(stateParams.queryTag){
                            // анализ url на наличие тегов*************
                            queryTags=stateParams.queryTag.split('__');
                            // удаляем возможные дубли
                            queryTags= queryTags.filter(function(item, pos) {
                                return queryTags.indexOf(item) == pos;
                            })
                        }
                        query.filters={} // для количественных признаков
                        var filterTags;
                        if(stateParams.filterTag){
                            // анализ url на наличие тегов*************
                            filterTags=stateParams.filterTag.split('__');
                            // удаляем возможные дубли
                            filterTags= filterTags.filter(function(item, pos) {
                                return filterTags.indexOf(item) == pos;
                            })
                            filterTags = filterTags.map(function(f){
                                return f.split('_')
                            }).filter(function(f){return f.length==3}).forEach(function(f){
                                query.filters[f[0]]={$gte:Number(f[1]),$lte:Number(f[2])}
                            })
                        }


                        query.queryTags={}
                        //console.log(categoryFilters)
                        filters.forEach(function (f) {
                            f.inList=false;
                            if((to.name=='stuffs' || to.name=='stuffs.stuff')){
                                if(categoryFilters.indexOf(f._id)>-1){
                                    f.inList=true;
                                    f.open=false;
                                }
                            }else{
                                f.inList=true;
                            }

                            //console.log(f.name,f.inList)
                            if(categoryFilters && categoryFilters.length){
                                if(categoryFilters.indexOf(f._id)>-1){
                                    f.inList=true;
                                    f.open=false;
                                }
                            }

                            if(f.count){
                                //console.log(query.filters[f._id])
                                if(query.filters[f._id]){
                                    f.open=true;
                                    f.set=true;
                                    f.minValue =query.filters[f._id].$gte
                                    f.maxValue=query.filters[f._id].$lte
                                }else{
                                    f.minValue =f.min
                                    f.maxValue=f.max
                                }
                            }else{
                                f.tags.forEach(function (t) {
                                    if(queryTags && queryTags.indexOf(t.url)>-1){
                                        if(!query.queryTags[t.filter]){query.queryTags[t.filter]=[]}
                                        query.queryTags[t.filter].push(t._id)
                                        f.open=true;
                                        t.set=true;
                                        breadcrumbs.push({type:'queryTag',name:t.name,url:t.url})
                                    }else{
                                        t.set=false;
                                    }
                                })
                            }

                        })

                        _setQueryForTags(query,filters)
                        global.set('breadcrumbs',breadcrumbs);
                        // для клиенского запроса только опубликованные товары
                        if(to.name=='stuffs' || to.name=='stuffs.stuff' ){
                            query.actived=true;
                        }
                        //console.log('query.actived',query.actived)
                        //console.log(stateParams)
                        if(stateParams.searchStr){
                            var search=stateParams.searchStr.substring(0,20);
                            query['keywords.'+global.get('store').val.lang]=search
                        }
                        //console.log(to.name,query)
                        resolve(query)
                    })
                    .catch(function(err){
                        reject(err)
                    })
            })
        }





        function setFilters(){
            //console.log('stuff setFilters')
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl:'components/stuff/filterStuffsList.html',
                    controller: setFiltersCtrl,
                    controllerAs: '$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                });
                modalInstance.result.then(function () {resolve()},function(){reject()});
            })

        }
        function cloneStuff(stuff,clone){
            if(!global.get('seller' ).val){return};
            /*if(stuff) {
                stuff=angular.copy(stuff);
            }else{
                stuff={name:'',actived:false}
            }
            stuff.seller = global.get('seller' ).val*/
            //console.log(global.get('seller'));
            /*stuff.brand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand;
            stuff.brandTag=(stuff.brandTag && stuff.brandTag._id)?stuff.brandTag._id:stuff.brandTag;
            stuff.category=(stuff.category && stuff.category._id)?stuff.category._id:stuff.category;*/
            //stuff.sortsOfStuff=(stuff.sortsOfStuff && stuff.sortsOfStuff._id)?stuff.sortsOfStuff._id:stuff.sortsOfStuff;
            //delete stuff._id;
            /*delete stuff.url;
            delete stuff.gallery;
            delete stuff.setTagsValue;
            delete stuff.sortsOfStuff;*/
            return $q.when()
                .then(function(){
                    if(stuff && stuff._id) {
                        return Items.get({_id:stuff._id,clone:'clone'}).$promise
                    }else{
                        if($stateParams && $stateParams.categoryUrl!='category'){
                            var category=global.get('categories').val.getOFA('url',$stateParams.categoryUrl);
                            if(category && category._id){
                                stuff.category=category
                            }

                        }
                        return stuff;
                    }

                })
                .then(function(st){
                    console.log(st)
                    stuff=angular.copy(st);
                    if(stuff.category  && !stuff.category.length){
                        stuff.category=[stuff.category]
                    }


                    if(!stuff.index){stuff.index=0}
                    stuff.index++;
                    //console.log(stuff)
                    delete stuff._id;
                    delete stuff.url;
                    delete stuff.link;
                    delete stuff.__v;
                    delete stuff.nameL;
                    delete stuff.artikulL;
                    delete stuff.gallery;
                    delete stuff.sort;
                    delete stuff.sortsOfStuff;
                    delete stuff.keywords;
                    delete stuff.groupStuffs;
                    if(stuff.blocks && stuff.blocks.length){
                       stuff.blocks.forEach(function (b) {
                           delete b._id
                           b.template=null;
                           b.templateName=null;
                           if(b.img){b.img=null}
                           if(b.video){b.video=null}
                           /*if(b.imgs && b.imgs.length){
                               b.imgs.forEach(function (slide) {
                                   if(slide.img){slide.img=null;}
                               })
                           }*/
                           if(b.imgs){b.imgs=[]}
                       })
                    }
                    //console.log(stuff.blocks)
                    stuff.stock={'notag':{price:stuff.price}}
                    stuff.actived=false;
                    return $q(function(resolve,reject){
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl:'components/stuff/cloneStuffModal.html',
                            controller: cloneStuffCtrl,
                            controllerAs: '$ctrl',
                            size: 'lg',
                            resolve: {
                                stuff: function () {
                                    return stuff;
                                },
                                clone: function () {
                                    return clone;
                                },
                            }
                        });
                        modalInstance.result.then(function (stuff) {
                            /*console.log(stuff)
                            reject()*/
                            resolve(stuff)
                        },function(){
                            reject()
                        });
                    })

                })

            //console.log(stuff)


        }
        function saveField(stuff,field){
            var f=field.split(' ');
            var o={_id:stuff._id}
            f.forEach(function(el){o[el]=stuff[el]})
            return Items.save({update:field},o).$promise
        }
        function selectItem(query){
            console.log('внимание - сделать так же как и  selectItemWithSort')
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/modal/selectStuffModal.html',
                    controller: selectStuffCtrl,
                    controllerAs:'$ctrl',
                    size: 'lg',
                    resolve:{
                        query:function(){
                            return query;
                        }
                    }
                });

                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
        function selectItemWithSort(query){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/modal/selectStuffWithSortModal.html',
                    controller: selectItemWithSortCtrl,
                    controllerAs:'$ctrl',
                    size: 'lg',
                    resolve:{
                        query:function(){
                            return query;
                        }
                    }
                });
                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
        function getServicesForOnlineEntry(){
            //console.log('stuffsService',stuffsService)
            if(stuffsService && stuffsService.length){return stuffsService}
            var data ={query:{orderType:{$in:[2,7]},actived:true}};
            var filterTags=[];
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return $q.when()
                .then(function () {
                    return FilterTags.getFilterTags()
                })
                .then(function (fts) {
                    filterTags=fts;
                })
                .then(function () {
                    //console.log(data)
                    return Items.query(data).$promise
                })
                .then(getListComplete)
                .catch(getListFailed);

            function getListComplete(data) {
                //console.log(data)
                data.shift();
                var items=[];
                data.forEach(function(el){
                    //console.log(el)
                    _setPrice(el)
                    el.sort=null;
                    var category=(el.category && el.category.length)?el.category[0]:el.category;
                    //console.log(global.get('categoriesO'))
                    if(global.get('categoriesO') && global.get('categoriesO').val){
                        var c=global.get('categoriesO').val[category]
                    }else{
                        var c=global.get('categories').val.getOFA('_id',category);
                    }
                    //console.log(el.name,el.category,c)
                    if(!c){c={name:'Категория'}}
                    el.category=c.name
                    //console.log(el.category)

                    if(!el.timePart){el.timePart=4}
                    try{
                        if(el.sortsOfStuff && el.sortsOfStuff.differentPrice){
                            for (var sort in el.stock){
                                var s= {
                                    _id:el._id,
                                    name:el.name+' '+_getTagName(sort),
                                    nameL:el.nameL,
                                    link:el.link,
                                    artikul:el.artikul,
                                    price: el.stock[sort].price,
                                    category:el.category,
                                    timePart:el.timePart
                                }

                                //console.log('s',s)
                                items.push(s)
                            }
                        }else{
                            if(el.stock.notag){
                                el.price= el.stock.notag.price;
                            }else{
                                try{
                                    el.price=el.stock[Object.keys(el.stock)[0]].price
                                }catch (err){
                                    console.log(err)
                                }
                            }
                            items.push(el)
                        }
                    }catch(err){console.log(err)}

                    //console.log('done')
                })
                stuffsService=items;
                return items;

            }
            function getListFailed(error) {
                console.log('XHR Failed for getStuffs.' + error);
                return $q.reject(error);
            }
            //*********************************************************
            function _getTagName(_id){
                //console.log(_id)
                if(!_id || !filterTags || _id=='notag')return '';
                //console.log(_id,_filterTagsO)
                return ((_filterTagsO[_id])?_filterTagsO[_id].name:'');

                return filterTags.getOFA('_id',_id ).name||'';
            }

        }

    }
    setFiltersCtrl.$inject=['global','$uibModalInstance'];
    function setFiltersCtrl(global,$uibModalInstance){
        var self=this;
        self.global=global;
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
        self.ok = function () {
            $uibModalInstance.close();
        };

    }


    cloneStuffCtrl.$inject=['$q','global','Stuff','stuff','$uibModalInstance','Category','clone'];
    function cloneStuffCtrl($q,global,Stuff,stuff,$uibModalInstance,Category,clone){
        var self=this;
        self.Items=Stuff;
        var $ctrl=self;
        self.stuff=stuff;
        //console.log(stuff)
        self.clone=clone;
        self.categoryDisabled=true;
        self.selectCategory=function(){
            $q.when()
                .then(function(){
                    return Category.select();
                })
                .then(function(selectedCategory){
                    //console.log(selectedCategory)
                    if(!self.stuff.category){
                        self.categoryDisabled=false
                        setTimeout(function(){
                            $('#createStuffCategory').trigger("change");
                            self.categoryDisabled=true;
                        },100)
                    }
                    self.stuff.category=selectedCategory;
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        self.createNewStuff = function(){
            if(!self.stuff.category){
                self.alertMessage2=true;
                setTimeout(function(){
                    console.log('))))')
                    self.alertMessage2=false;
                },3000)
                return;
            }
            if(!self.stuff.name){
                self.alertMessage2=true;
                setTimeout(function(){
                    self.alertMessage2=false;
                },3000)
                return;
            }
            self.stuff.name=self.stuff.name.substring(0,100);
            if(self.stuff.artikul){
                self.stuff.artikul=self.stuff.artikul.substring(0,100);
            }


            if(!self.clone && self.stuff.category && self.stuff.category._id){
                self.stuff.category=self.stuff.category._id;
            }
            if(stuff.stock && stuff.stock.notag && stuff.stock.notag.price!=stuff.price){
                stuff.stock.notag.price=stuff.price;
            }
            $q.when()
                .then(function(){
                    self.stuff.keywords={};
                    var k =self.stuff.name;
                    if(self.stuff.artikul){
                        k+=' '+self.stuff.artikul;
                    }
                    //console.log(self.stuff.category)
                    if(self.stuff.category){
                        var c;
                        if(typeof self.stuff.category=='object'){
                            var cc=(typeof self.stuff.category[0]=='object')?self.stuff.category[0]._id:self.stuff.category[0]
                            c = global.get('categories').val.getOFA('_id',cc);
                        }else{
                            c = global.get('categories').val.getOFA('_id',self.stuff.category);
                        }
                        //console.log(c)
                        k+=' '+((c.nameL && c.nameL[global.get('store').val.lang])?c.nameL[global.get('store').val.lang]:c.name);
                    }
                    if(self.stuff.brand){
                        var bb=(typeof self.stuff.brand=='object')?self.stuff.brand._id:self.stuff.brand;
                        var b  = global.get('brands').val.getOFA('_id',bb);
                        k+=' '+((b.nameL&& b.nameL[global.get('store').val.lang])?b.nameL[global.get('store').val.lang]:b.name);
                        if(self.stuff.brandTag){
                            var bt = b.tags.getOFA('_id',self.stuff.brandTag);
                            if(bt && bt.nameL && bt.nameL[global.get('store').val.lang]){
                                k+=' '+bt.nameL[global.get('store').val.lang]
                            }
                        }


                    }

                    stuff.keywords[global.get('store').val.lang]=k;



                    return self.Items.save(self.stuff).$promise;
                })
                .then(function(res){
                    self.stuff._id=res.id;
                    self.stuff.url=res.url;
                    var c;
                    if(typeof self.stuff.category=='object'){
                        var cc=(typeof self.stuff.category[0]=='object')?self.stuff.category[0]._id:self.stuff.category[0]
                        c = global.get('categories').val.getOFA('_id',cc);
                    }else{
                        c = global.get('categories').val.getOFA('_id',self.stuff.category);
                    }
                    self.stuff.link='/'+c.linkData.groupUrl+'/'+c.linkData.categoryUrl+'/'+res.url;
                    self.Items.save({update:'link'},{_id:self.stuff._id,link:self.stuff.link})
                    $uibModalInstance.close(self.stuff)
                })
                .catch(function(err){
                    return $q.reject(err)
                })

        }
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
    selectStuffCtrl.$inject=['$q','Stuff','$uibModalInstance','query'];
    function selectStuffCtrl($q,Stuff,$uibModalInstance,query){
        var cashQuery=angular.copy(query)
        //console.log(query)
        var self=this;
        self.stuffs=[];
        self.name='';
        var paginate={page:0,rows:30,items:0}
        self.search = function(name){
            if (name.length<3){return}

            if(query){
                if (!query.$and){query={$and:[query]}}
                query.$and.push({$or:[{name:name},{artikul:name}]})
            }else{
                query={$or:[{name:name},{artikul:name}]}
            }
            //console.log(query)

            $q.when()
                .then(function(){
                    return Stuff.search(name,true)
                })
                .then(function(res){
                    self.stuffs=res;
                })

            /*Stuff.getList(paginate,query).then(function(res){
                query=angular.copy(cashQuery)
                self.stuffs=res;
            })*/
        }
        self.selectStuff=function(stuff){
            if(stuff.imgThumb){stuff.img=stuff.imgThumb}
            stuff.link="/"+stuff.groupUrl+'/'+stuff.categoryUrl+"/"+stuff.url;
            $uibModalInstance.close(stuff);
        }
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
    }
    selectItemWithSortCtrl.$inject=['$q','Stuff','$uibModalInstance','Filters','FilterTags','exception','query','global'];
    function selectItemWithSortCtrl($q,Stuff,$uibModalInstance,Filters,FilterTags,exception,query,global){
        var cashQuery=angular.copy(query)
        var self=this;
        self.global=global;
        self.stuffs=[];
        self.name='';
        var paginate={page:0,rows:30,items:0}

        self.getFilterName=getFilterName;
        self.search = function(name){
            //console.log(name)
            if (name.length<3){return}
            $q.when()
                .then(function(){
                    return Stuff.search(name,true)
                })
                .then(function(res){
                    if(!global.get('seller') || !global.get('seller').val){
                        self.stuffs=res.map(function (s) {
                            //console.log(s)
                            for(var i=0;i<s.stockKeysArray.length;i++){
                                if(!s.stockKeysArray[i].quantity){
                                    s.stockKeysArray.splice(i,1)
                                    i--;
                                }
                            }
                            return s;
                        }).filter(function(s){
                            // /console.log(s)
                            return s.actived && s.stockKeysArray.length})
                        //console.log(self.stuffs)
                    }else{
                        self.stuffs=res;
                    }
                })


            return;
            if(query){
                if (!query.$and){query={$and:[query]}}
                query.$and.push({$or:[{name:name},{artikul:name}]})
            }else{
                query={$or:[{name:name},{artikul:name}]}
            }
            Stuff.getList(paginate,query).then(function(res){
                query=angular.copy(cashQuery)
                if(!global.get('seller') || !global.get('seller').val){
                    self.stuffs=res.map(function (s) {
                            //console.log(s)
                            for(var i=0;i<s.stockKeysArray.length;i++){
                                if(!s.stockKeysArray[i].quantity){
                                    s.stockKeysArray.splice(i,1)
                                    i--;
                                }
                            }
                            return s;
                        }).filter(function(s){
                            // /console.log(s)
                            return s.actived && s.stockKeysArray.length})
                    //console.log(self.stuffs)
                }else{
                    self.stuffs=res;
                }

            })
        }
        self.selectStuff=function(stuff){
            if(stuff.sortsOfStuff && stuff.sortsOfStuff.filter && !stuff.sort){
                exception.catcher('ошибка')('выберите разновидность')
            }else {
                /*var inCart= stuff.getDataForCart()
                if(inCart.sort){
                    inCart.addCriterionName=getTagName(inCart.sort);
                }*/
                $uibModalInstance.close(stuff);
            }
        }
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
        activate()
        function activate(){
            $q.when()
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){
                    self.filters=filters;
                })
                .then(function(){
                    return FilterTags.getFilterTags()
                })
                .then(function(filterTags){
                    self.filterTags=filterTags;
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function getFilterName(_id){
            return self.filters.getOFA('_id',_id ).name||null;
        }

    }
    //*******************comments************************************
    commentService.$inject=['$resource','$uibModal','$q'];
    function commentService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Comment/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){

            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/modal/createComment.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }


})()

'use strict';
(function(){
    angular.module('gmall.controllers').controller('stuffListFromServerCtrl',stuffListFromServerCtrl);
    angular.module('gmall.services')
        .directive('stuffList',stuffListDirective)
        .directive('stuffListTemplate',stuffListTemplateDirective)
        .directive('stuffListTemplateList',stuffListTemplateDirectiveList)
        .directive('stuffListTemplateServer',stuffListTemplateServer) // список товаро на сайте у клиента
        .directive('stuffListTemplateCampaignList',stuffListTemplateDirectiveCampaignList)
        .directive('emptyList',emptyList)
        .directive('stuffInList',stuffInList)
        .directive('homePageStuffOwl',function(){return {
            scope: {
                homePageStuffOwl:'@',
                zoomImg:"@",
                stuffs:'@',
                items:"@",
                autoplay:'@',
                duration:'@',
                gallery:'='
            },
            bindToController: true,
            controllerAs: '$ctrl',
            /*require: {
                parent: '^dateTimeEntry'
            },*/
            controller: homePageStuffOwlCtrl}})
        .directive('homePageHtml',function(){return {
            restrict:'C',
            scope: true,
            bindToController: true,
            controllerAs: '$ctrl',
            controller: homePageHtmlCtrl}})



        .directive('likesItem',likesItem)
    function likesItem(){
        return {
            scope: {
            },
            bindToController: true,
            controller: likesItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: '',
            restrict:'E'
        }
    }
    likesItemCtrl.$inject=['$compile','$timeout','localStorage','Stuff','global'];
    function likesItemCtrl($compile,$timeout,localStorage,Stuff,global) {
        return {
            restrict: 'EA',
            scope:{
                current:'=',
                header:'@',
                mobile:'@',
                blockElement:'@'
            },
            template:'<h3 class="text-center" ng-bind="header"></h3>'+
            '<div id="lastViewedWrapper" class="owl-carousel owl-theme">' +
            '<div ng-repeat="s in stuffs track by $index" class="item">' +
            '<a ui-sref="stuffs.stuff(s.linkData)">'+
            '<img style="max-width: 200px; border-color: transparent" ng-src="{{s.img}}" >' +
            '</a>'+
            '</div>'+
            '</div>',
            /*'<ul id="carouse{{localId}}"  class="elastislide-list">'+
             '<li ng-repeat="s in stuffs track by $index"><a ui-sref="stuffs.stuff(s.getUrlParams())">'+
             '<img style="max-width: 100px; border-color: transparent" ng-src="{{s.img}}" />'+
             '</a></li>'+
             '</ul>',*/
            link: function(scope, element, attrs) {
                var subDomain = global.get('store').val.subDomain

                //console.log('lastViewed')
                scope.localId=Date.now();
                var viewedStuffs=localStorage.get(subDomain+'-viewed');
                //console.log(viewedStuffs)

                if(!viewedStuffs ){
                    viewedStuffs=[];
                }
                scope.itemsInList=4;
                //viewedStuffs=[];
                function activate() {
                    //console.log(scope.mobile)
                    scope.position=JSON.parse(scope.blockElement).position
                    //console.log(scope.position)
                    /* if(scope.position && scope.position=='bottom'){
                     if(!scope.mobile){
                     scope.itemsInList=8;
                     }else{
                     scope.itemsInList=3;
                     }
                     }else{
                     if(!scope.mobile){
                     scope.itemsInList=8;
                     }else{
                     scope.itemsInList=3;
                     }
                     }*/
                    if(scope.mobile){
                        scope.itemsInList=3;
                    }else if(scope.position && scope.position=='bottom'){
                        scope.itemsInList=6;
                    }

                    setViewed(angular.copy(scope.current))
                    //console.log(viewedStuffs);
                    if (viewedStuffs.length>2){
                        scope.stuffs=viewedStuffs//.reverse();
                        scope.stuffs.forEach(function(el){el.getUrlParams=Stuff.getUrlParams;})
                        // console.log(Stuff)

                        $timeout(function(){
                            $("#lastViewedWrapper").owlCarousel({
                                items : scope.itemsInList,
                                itemsMobile	:[479,3],
                                itemsTablet	:[768,scope.itemsInList],
                                itemsDesktop : [1199,scope.itemsInList],
                                itemsDesktopSmall : [979,scope.itemsInList]

                            });
                        },150);
                        //$timeout(function(){$('#carouse'+scope.localId).elastislide();},50);
                    }else{
                        scope.stuffs=[];
                    }
                    if (!scope.header){
                        scope.header='Последние просмотренные.';
                    }
                }


                function setViewed (stuff){
                    var posItem = -1;
                    for (var i= 0,l=viewedStuffs.length;i<l;i++){
                        if (viewedStuffs[i]._id==stuff._id) {
                            posItem=i;
                            break;
                        }
                    }
                    // уже смотрели товар. удаляем его из ранее просмотренных
                    if (posItem>-1){
                        viewedStuffs.splice(posItem,1);
                    }
                    // добавляем его к конец списка
                    if(stuff.gallery[0]){
                        var img=(stuff.gallery[0].thumbSmall)?stuff.gallery[0].thumbSmall:stuff.gallery[0].thumb;
                    }else{
                        var img=null;
                    }

                    var linkData=global.get('categories').val.getOFA('_id',stuff.category).linkData;
                    linkData.stuffUrl=stuff.url;
                    viewedStuffs.unshift({_id:stuff._id,linkData:linkData,url:stuff.url,
                        img:img})
                    // ограничиваем список
                    if (viewedStuffs.length>15){
                        viewedStuffs.splice(15,1);
                    }
                    //console.log(viewedStuffs);
                    localStorage.set(subDomain+'-viewed', viewedStuffs);
                };
                /*scope.$watch('current',function(n,o){
                 if (n) {
                 setViewed(n);
                 }
                 })*/
                scope.$watch('current',function(n){
                    if(n){
                        activate()
                    }
                })
                scope.$on('$destroy', function() {
                    $('#carouse'+scope.localId).remove();
                });
            }
        }
    }

    homePageHtmlCtrl.$inject=['$scope','$rootScope','$timeout','$element','$compile','global','$q','$http']
    function homePageHtmlCtrl($scope,$rootScope,$timeout,$element,$compile,global,$q,$http){
        //console.log('homePageHtmlCtrl')
        var loaded=null;
        $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
          if(to.name=='home' && !loaded){
              getHomePageHtml()
          }
        })
        function getHomePageHtml() {
            console.log('getHomePageHtml')
            $q.when()
                .then(function () {
                    return $http.get('homepageHTML.html')
                })
                .then(function (response) {
                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                    $element.append(content);
                    loaded=true;
                })
                .catch(function (err) {
                    
                })

        }
    }

    homePageStuffOwlCtrl.$inject=['$scope','$timeout','$element','$compile','global']
    function homePageStuffOwlCtrl($scope,$timeout,$element,$compile,global){
            //console.log('homePageStuffOwlCtrl')
        /*if($element.context){
            if($element.context.attributes){
                console.log($element.context.attributes)
            }
        }*/
        var self = this;
        self.prev=prev;
        self.next=next;
        self.moment=moment;
        self.global=global;
        var imgs;
        self.zoomSliderImg=zoomSliderImg;
        var items=4,items3=3,items2=2,items1=1;
        var autoplay=false;
        var autoplayTimeout=4000;



        this.$onInit = function(){
            $timeout(function () {
                if(self.items){items=self.items}
                if(items==2){
                    items3=2;
                }else if(items==1){
                    items3=1;
                    items2=1;
                }
                if(self.autoplay){
                    autoplay=true;
                }

                if(self.duration){
                    try{
                        var duration=Number(self.duration)
                        if(duration>0 && duration<10){
                            autoplayTimeout=duration*1000;
                        }
                    }catch(err){console.log(err)}
                }


                self.$owl=$('body').find('#'+self.homePageStuffOwl)
                //console.log(self.$owl)
                self.$owl.on('initialized.owl.carousel', function(event) {
                    //console.log('initialized.owl.carousel for ',self.homePageStuffOwl)
                })
                var navLeft=$element.find('.nav-left')
                $(navLeft).click(function () {prev()})
                var navRight=$element.find('.nav-right')
                //console.log(navRight)
                $(navRight).click(function () {next()})
                activate()


            },100)

        }

        $scope.$watch(function () {
            return self.gallery
        },function (n,o) {
            //console.log(n,o)
            if(n && n.length){
                //console.log('reload gallery')
                var html=''
                imgs=[];
                //console.log(n.length)
                n.forEach(function (item,i) {
                    //console.log(photoHost)
                    if(photoHost){
                        item.src=photoHost+'/' + item.img;
                    }else{
                        item.src=item.img;
                    }

                    html+=
                        //'<div class="owl-item">' +
                            '<a>' +
                                '<span class="zoom-plus" data-i="'+i+'">' +
                                    '<span class="icon-zoom-img"></span>' +
                                    '<span class="icon-zoom-inverse"></span>' +
                                '</span>' +
                                '<img class="img-responsive2" src="'+item.src+'">' +
                            '</a>' +
                        //'</div>'
                    imgs.push({index:i,img:item.src})
                })
                self.$owl.trigger('replace.owl.carousel', html).trigger('to.owl.carousel',0).trigger('refresh.owl.carousel');
                $timeout(function () {
                    self.$owl.trigger('refresh.owl.carousel');
                },10)
                $timeout(function () {
                    if(self.zoomImg){
                        var spans=self.$owl.find('span.zoom-plus')
                        //console.log(spans)
                        spans.each(function (i,img) {
                            $(img).click(function (event) {
                                //console.log(img)

                                var ii=($(img).data('i')>=0)?$(img).data('i'):0;
                                /*console.log(i,imgs)
                                var imgTemp = imgs[i].img
                                var imgsTemp=imgs.reduce(function (o,item) {
                                    var i=o.getOFA('img',item.img)
                                    if(!i){
                                        o.push(item)
                                    }
                                    return o;
                                },[])
                                var ii=0;
                                for(var j=0;j<imgsTemp.length;j++){
                                    if(imgsTemp[j].img==imgTemp){
                                        ii=j;
                                        break;
                                    }
                                }
                                console.log(imgsTemp)*/
                                global.get('functions').val.zoomImg(ii,imgs,'home')
                            })
                        })

                    }

                },400)
            }
        })

        var items=(self.items)?self.items:4;

        var  activate = function(){
            $timeout(function(){
                //console.log('?????')
                var carousel_Settings={
                    loop:true,
                    margin:10,
                    responsiveClass:true,
                    autoplay:autoplay,
                    autoplayHoverPause:true,
                    autoplayTimeout:autoplayTimeout,
                    responsive:{
                        0:{
                            items:items1,
                            nav:false,
                            dots:true
                        },
                        380:{
                            items:items2,
                            nav:false,
                            dots:true
                        },
                        1068:{
                            items:items3,
                            nav:false,
                            dots:true
                        },
                        1400:{
                            items:items,
                            nav:false,
                            dots:true
                        }
                    }
                };
                //console.log(carousel_Settings)
                self.$owl.owlCarousel( carousel_Settings );
                var imgsEl=self.$owl.find('img')
                if(imgsEl && imgsEl.each){
                    imgs=[];
                    imgsEl.each(function (i,img) {
                        imgs.push({index:i,img:img.src,el:imgsEl[i]})
                        //console.log(img.src)
                    })
                }

                //console.log(imgs)
                if(self.zoomImg){
                    var spans=self.$owl.find('span.zoom-plus')
                    //console.log(spans)
                    spans.each(function (i,img) {
                        $(img).click(function (event) {
                            //console.log(i,imgs)
                            var imgTemp = imgs[i].img
                            var imgsTemp=imgs.reduce(function (o,item) {
                                var i=o.getOFA('img',item.img)
                                if(!i){
                                    o.push(item)
                                }
                                return o;
                            },[])
                            var ii=0;
                            for(var j=0;j<imgsTemp.length;j++){
                                if(imgsTemp[j].img==imgTemp){
                                    ii=j;
                                    break;
                                }
                            }
                            global.get('functions').val.zoomImg(ii,imgsTemp,'home')
                        })
                    })

                }
            },200)
        }

        function prev() {
            //console.log('prev',self.selectedDay)
            self.$owl.trigger('prev.owl.carousel', [self.selectedDay-3,300]);
        }
        function next() {
            //console.log('next',self.selectedDay)

            self.$owl.trigger('next.owl.carousel', [self.selectedDay+3,300]);
        }
        function zoomSliderImg(i) {
            $rootScope.zoomSliderImg(i,imgs)
        }
    }



    function emptyList(){
        return {
            templateUrl: 'views/template/partials/stuffs/emptyList.html',
            restrict:'E'
        }
    }
    function stuffListDirective(){
        return {
            scope: {
                //filtersBlock:'='
            },
            bindToController: true,
            controller: stuffListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/stuff/stuffsAdminList.html',
            restrict:'E'
        }
    }
    function stuffListTemplateDirective(global){
        return {
            scope: {
                filtersBlock:'@'
            },
            bindToController: true,
            controller: stuffListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/stuffs/stuffs-block.html',
            /*templateProvider: function(global,$http) {

                var url = 'views/'+global.get('store').val.template.folder+'/partials/stuff/stuffs.html';
                console.log(url)
                return $http.get(url).then(function(tpl){return tpl.data;});
            },*/
            restrict:'E'
        }
    }
    function stuffListTemplateDirectiveList(global){
        return {
            scope: {},
            bindToController: true,
            controller: stuffListCtrl,

            controllerAs: '$ctrl',
            templateUrl: function() {
                return 'views/template/partials/stuffs/stuffs-list/'+global.get('sectionType').val
            },
            //template:"<div ui-view></div></div><div></div>",
            //controller: stuffListFromServerCtrl,


            restrict:'E'
        }
    }





    function stuffInList(global,$timeout){
        return {
            scope: {
                stuffInList:'@'
            },
            bindToController: true,
            controllerAs: '$ctrl',
            restrict:'A',
            controller:function($scope,Stuff,global,$attrs,$stateParams,$rootScope,localStorage){
                var self=this;
                self.global=global;
                $scope.global=global;
                var subDomain = global.get('store').val.subDomain;
                //console.log($scope.global)

                //console.log(JSON.parse($attrs.stuffInList))
                $scope.stuff=JSON.parse($attrs.stuffInList)
                /*if($scope.stuff._id=='5aaf95fddfcc1b35f65cc17d'){
                    console.log(JSON.parse(JSON.stringify($scope.stuff)))
                }*/

                $scope.stuff = Stuff.setDataForStuff($scope.stuff,global.get('filterTags').val,'stuffs')
                //console.log($scope.stuff)
                if($scope.stuff.sortsOfStuff && $scope.stuff.sortsOfStuff.filterGroup && global.get('filtersO').val[$scope.stuff.sortsOfStuff.filterGroup]){
                    //console.log(global.get('filtersO').val[$scope.stuff.sortsOfStuff.filter])

                    var ttt;
                    for(var i=0;i<$scope.stuff.tags.length;i++){
                        ttt = global.get('filtersO').val[$scope.stuff.sortsOfStuff.filterGroup].tags.getOFA('_id',$scope.stuff.tags[i]);
                        if(ttt){
                            $scope.stuff.tagFromFilterFromSortOfStuffs=ttt;
                            break;
                        }
                    }

                }
                //console.log($scope.stuff.tagFromFilterFromSortOfStuffs)
                $scope.stuff.stateObj=angular.copy($stateParams);
                //console.log($scope.stuff.stateObj)
                $scope.stuff.stateObj.stuffUrl=$scope.stuff.url;
                self.stuff=$scope.stuff;
                self.getMastersName=getMastersName
                self.getAveragePrice=getAveragePrice;
                self.addToLikes=addToLikes;

                var currency=global.get('currency').val
                var formatAverage=global.get('store').val.currency[currency][4];
                var del=-1;
                if(formatAverage==1){del=-1}else if(formatAverage==2){del=0}else if(formatAverage==3){del=1} else if(formatAverage==4){del=2}
                self.formatPrice=global.get('store').val.currency[currency][5];
                if(typeof self.formatPrice=='undefined'){
                    self.formatPrice=2;
                }
                self.stuff.currencySymbol=(global.get('store').val.currency[global.get('currency').val] && global.get('store').val.currency[global.get('currency').val][2])?global.get('store').val.currency[global.get('currency').val][2]:'';
                $rootScope.$on('changeCurrency',function () {
                    //console.log(global.get('currency').val,global.get('store').val.currency)
                    currency=global.get('currency').val
                    formatAverage=global.get('store').val.currency[currency][4];
                    self.formatPrice=global.get('store').val.currency[currency][5];
                    //console.log('self.formatPrice',self.formatPrice)
                    if(typeof self.formatPrice=='undefined'){
                        self.formatPrice=2;
                    }
                    del=-1;
                    if(formatAverage==1){del=-1}else if(formatAverage==2){del=0}else if(formatAverage==3){del=1} else if(formatAverage==4){del=2}
                    self.stuff.currencySymbol=(global.get('store').val.currency[global.get('currency').val] && global.get('store').val.currency[global.get('currency').val][2])?global.get('store').val.currency[global.get('currency').val][2]:global.get('currency').val;
                    //console.log(formatAverage,del)
                })
                //console.log(formatAverage,del)

                function getAveragePrice(price) {
                    //console.log('price',price)
                    //console.log(price,formatAverage)
                    if(!price){return}
                    var p=price*global.get('rate').val
                    p=(Math.round(p*100))/100
                    //console.log(p)
                    if(formatAverage){
                        if(formatAverage==4){
                            p= (Math.round(p/100))*100
                        }else if(formatAverage==3){
                            p= (Math.round(p/10))*10
                        }else if(formatAverage==2){
                            p= Math.round(p)
                        }else if(formatAverage==1){
                            p= (Math.round(p*10))/10
                        }
                    }
                    return p;

                }
                function getAveragePriceOld(price) {




                    //console.log(price)
                    if(!price){return}

                    if(!formatAverage){
                        return price*global.get('rate').val
                    }else{

                        //console.log(price*global.get('rate').val,Math.round10(price*global.get('rate').val,del),del)
                        var p = Math.round10(price*global.get('rate').val,del)
                        var del1=del;
                        while(!p){
                            p = Math.round10(price*global.get('rate').val,--del1)
                        }
                        return p;

                    }
                }

                //console.log(self.stuff)


                function getMastersName() {
                    self.stuff.masters=[]
                    global.get('masters').val.forEach(function (m) {
                        if(m.stuffs && m.stuffs.length){
                            if(m.stuffs.indexOf(self.stuff._id)>-1){
                                var o ={
                                    name:m.name,
                                    url:m.url,
                                }
                                self.stuff.masters.push(o)
                            }
                        }
                    })
                }
                getMastersName();
                var likes  = localStorage.get(subDomain+'-likes');
                if(likes && likes.length && likes.some(function(s){return s ===$scope.stuff._id})){
                    $scope.stuff.inLikes=true
                }

                function addToLikes($event) {
                    $event.stopPropagation()
                    console.log('addToLikes')
                    likes  = localStorage.get(subDomain+'-likes');
                    //console.log(likes)
                    if(!likes){
                        likes=[];
                    }
                    var i = likes.indexOf($scope.stuff._id);
                    if(i>-1){
                        $scope.stuff.inLikes=false;
                        likes.splice(i,1);

                    }else{
                        $scope.stuff.inLikes=true;
                        likes.push($scope.stuff._id);
                    }
                    localStorage.set(subDomain+'-likes', likes);
                    $rootScope.likes.totalCount=likes.length;

                }


            },
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                $timeout(function () {
                    if(global.get('stuffsInList').val){
                        //console.log(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id && global.get('stuffsInList').val[element[0].parentElement.parentElement.id])
                        /*console.log(element[0])
                        console.log(element[0].parentElement )
                        console.log(element[0].parentElement && element[0].parentElement.parentElement)
                        console.log(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id)
                        console.log(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id && global.get('stuffsInList').val[element[0].parentElement.parentElement.id])*/
                        if(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id && global.get('stuffsInList').val[element[0].parentElement.parentElement.id]){
                            global.get('stuffsInList').val[element[0].parentElement.parentElement.id].push(scope.stuff)
                            //console.log(scope.stuff)
                        }
                    }
                    //console.log(global.get('stuffsInList').val)
                },200)
                //console.log(scope.stuff)
                transclude(scope, function(clone) {
                    /*if(scope.stuff._id=='5aaf95fddfcc1b35f65cc17d'){
                        console.log(element,scope.stuff)
                    }*/

                    element.append(clone);
                });

            }

        }
    }
    function stuffListTemplateServer(){
        return {
            scope: {},
            bindToController: true,
            controllerAs: '$ctrl',
            template:"<div></div>",
            controller: stuffListFromServerCtrl,
            restrict:'E'
        }
    }

    stuffListFromServerCtrl.$inject=['$scope','$state','$compile','$element','$window','Stuff','$rootScope','$q','$uibModal','global','exception','FilterTags','Filters','Confirm','Helper','anchorSmoothScroll','Photo','$timeout','$anchorScroll','Category','Brands','BrandTags','seoContent','AddInfo','$http','$location','$sce'];
    function stuffListFromServerCtrl($scope,$state,$compile,$element,$window,Stuff,$rootScope,$q,$uibModal,global,exception,FilterTags,Filters,Confirm,Helper,anchorSmoothScroll,Photo,$timeout,$anchorScroll,Category,Brands,BrandTags,seoContent,AddInfo,$http,$location,$sce){

        //anchorSmoothScroll.scrollTo('topPage')
        //console.log('stuffListFromServerCtrl22')
        var stuffsInList = {'td-list-1':[],'td-list-2':[],'td-list-3':[],'td-list-4':[],'td-list-5':[],'td-list-6':[]}
        global.set('stuffsInList',stuffsInList)
        var self = this;
        $scope.global=global;
        if(global.get('category').val && global.get('category').val.filters && global.get('category').val.filters.length){
            self.displayableFilters=true;
        }else if(global.get('section').val && global.get('section').val.filters && global.get('section').val.filters.length){
            self.displayableFilters=true;
        }
        self.stuffs={}
        self.Items=Stuff;
        self.mobile=global.get('mobile').val;
        self.global=global;
        self.globalProperty=$rootScope.globalProperty;
        self.$state=$rootScope.$state;
        self.$stateParams=$rootScope.$stateParams;
        self.query={};
        self.paginate={page:0,rows:20,items:0}
        self.filterList=filterList;
        self.initStuff=setDataForStuff;
        self.getList=getList;
        $scope.$on('addBlockAfterScroll',function () {
            //console.log(" $rootScope.$on('addBlockAfterScroll', from stuff-list")
            $scope.addBlockAfterScroll()
        })
        var pages=[0]
        var perPage=20;
        var rows=global.get('functions').val.setRows();
        if(global.get('store').val.template.stuffListType[global.get('sectionType').val] &&
            global.get('store').val.template.stuffListType[global.get('sectionType').val].perPage){
            //console.log('perPage')
            perPage = global.get('store').val.template.stuffListType[global.get('sectionType').val].perPage;
            self.paginate.rows=perPage;
        }
        //console.log(global.get('sectionType').val)
        var url='views/template/partials/stuffs/stuffs-list/'+global.get('sectionType').val+'/'+$rootScope.$stateParams.groupUrl+'/'+$rootScope.$stateParams.categoryUrl;
        var waiting,lastElement,page=0,waitingDiv;
        var td1,td2,td3,td4,td5;
        var color = (global.get('store').val.template.dimScreenColor)?global.get('store').val.template.dimScreenColor:"#000000"
        var BGcolor = (global.get('store').val.template.dimScreenBGColor)?global.get('store').val.template.dimScreenBGColor:"#F5F5F5"
        var innerWaitingDiv=[
            '<div class="spinner-box clearfix text-center" style="width:100%;height:200px;background-color:'+BGcolor+';color:'+color+'">',
            '<span class="icon-spinner-img"></span>',
            //'<img class="spinner" src="/img/spinner.gif" style="margin-top: 70px">',
            '</div>'
        ].join('')
        var tempContentIs=false;
        $q.when()
            .then(function(){
                var params ={group:self.$stateParams.groupUrl,category:self.$stateParams.categoryUrl}
                var query={
                    brand:self.$stateParams.brand,
                    brandTag:self.$stateParams.brandTag,
                };
                for(var k in self.$stateParams){
                    params[k]=self.$stateParams[k]
                }
                //console.log('params',params)
                self.query=dQ.getQuery(params)
                //console.log('self.query',self.query)

                if(self.query && self.query['priceForFilter']){
                    if(global.get('rate').val!=1){
                        self.query['priceForFilter'].$gte=Math.ceil10(self.query['priceForFilter'].$gte/global.get('rate').val,0)
                        self.query['priceForFilter'].$lte=Math.ceil10(self.query['priceForFilter'].$lte/global.get('rate').val,0)
                    }
                }
                if(global.get('tempContent').val){
                    if($state.current.name.indexOf('.stuff')<0){
                        //var html = global.get('tempContent').val;
                        //$('#tempContent').remove()
                        var html = $('#tempContent').detach().html();

                        var o ={data:{html:html}}
                        //console.log(tempTitles)
                        if(tempTitles){
                            o.data.titles=tempTitles
                        }
                        return o;
                    }else{
                        return null
                    }
                }else{
                    //console.log(url.trim())

                    return $q.when(self.query)
                        .then(function (query) {
                            /*console.log('query',query)
                            console.log(url)*/
                            return $http.get(url.trim()+'.html', {params:{pages:pages,perPage:perPage,rows:rows,query:query,url:$location.url()}})
                        })
                }
            })
            .then(function (response) {
                if(!response){$rootScope.$emit('$stateChangeEndToStuff');return;}
                //console.log(response.data.html)
                /*console.log('ldldldl!!!!!!!!!!!!!!!!!!!!')
                console.log(response.data.html)*/
                if(global.get('tempContent').val){
                    global.set('tempContent',null)
                    //var content = response.data.html;
                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                }else{
                    //console.log('ldldldl')
                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                }

                $element.append(content);
                var style = $element.find('style')
                if(style && style[0]){
                    //console.log(style[0]);
                }
                //console.log(response.data.titles)
                var titles = {};
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        if(response.data.titles[k]){
                            if(k=='canonical'){
                                titles[k] = $sce.trustAsResourceUrl(response.data.titles[k])
                            }else if(k!='desc'){
                                titles[k]= response.data.titles[k]
                            }
                        }

                    }
                    global.set('titles',titles)
                }else{
                    seoContent.setSeopageData()
                }
                //console.log(global.get('titles').val)

                //seoContent.setDataCatalog()

                waitingDiv=$('#paginateData'+page);
                self.totalQty=waitingDiv.data('total');
                self.paginate.items=self.totalQty;
                //console.log(self.totalQty)
                self.currentQty=waitingDiv.data('qty');
                self.page=waitingDiv.data('page');
                self.lastItemId=waitingDiv.data('lastItemId');
                td1=$('#td-list-1 .td-wrapper');
                td2=$('#td-list-2 .td-wrapper');
                td3=$('#td-list-3 .td-wrapper');
                td4=$('#td-list-4 .td-wrapper');
                td5=$('#td-list-5 .td-wrapper');
                //console.log(self.totalQty,self.currentQty,page,self.lastItemId)
                $timeout(function(){
                    $anchorScroll()
                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    //console.log(lastElement)
                })
                $timeout(function () {
                    $scope.$broadcast('rzSliderForceRender');
                },500);
                var addBlockAfterScroll = function(){
                    if($state.current.name!='stuffs'){return}
                    //console.log('addBlockAfterScroll')
                    if(!waiting && lastElement && $(lastElement).isOnScreen() && self.currentQty<self.totalQty){
                        /*console.log($(lastElement).offset())
                        console.log('addBlockAfterScroll start')
                        console.log(lastElement)
                        console.log($(lastElement).isOnScreen())*/
                        waiting=true;
                        page++
                        $q.when()
                            .then(function(){
                                //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                                waitingDiv.html(innerWaitingDiv);
                                return $http.get(url.trim()+'.html', {params:{pages:[page],perPage:perPage,rows:rows,query:self.query,url:$location.url()}})
                               // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                            })
                            .then(function(response){
                                if(!response){return;}
                                lastElement=null;
                                waitingDiv.html('');
                                var addHtml=angular.element(response.data.html)
                                var atd1,atd2,atd3,atd4,atd5;
                                if(addHtml.find('#td-list-1 .td-wrapper').html()){
                                    atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-2 .td-wrapper').html()){
                                    atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-3 .td-wrapper').html()){
                                    atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-4 .td-wrapper').html()){
                                    atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-5 .td-wrapper').html()){
                                    atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                                }
                                if(atd5){td5.append(atd5)}
                                if(atd4){td4.append(atd4)}
                                if(atd3){td3.append(atd3)}
                                if(atd2){td2.append(atd2)}
                                if(atd1){td1.append(atd1)}
                                //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                                self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                                self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                                //console.log(addHtml.find('#paginateData'+page))
                                //console.log(self.currentQty,self.totalQty)
                                $timeout(function () {
                                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                                    //console.log(lastElement)
                                    waiting=false;
                                },200)
                            })
                    }
                }


                if(!global.get('store').val.template.stuffListType[global.get('sectionType').val] ||
                    !global.get('store').val.template.stuffListType[global.get('sectionType').val].paginate){
                    angular.element($window).on('scroll', addBlockAfterScroll);
                }


                $scope.$on('$destroy', function() {
                    angular.element($window).off('scroll', addBlockAfterScroll);
                });
                $timeout(function(){
                    $rootScope.$emit('$stateChangeEndToStuff');
                })
            })

        $scope.addBlockAfterScroll = function(){
            //console.log('$scope.addBlockAfterScroll',self.currentQty,self.totalQty)
            if(!waiting && lastElement && self.currentQty<self.totalQty){
                waiting=true;
                page++
                $rootScope.$emit('$stateChangeStartToStuff');
                $q.when()
                    .then(function(){
                        //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                        waitingDiv.html(innerWaitingDiv);
                        return $http.get(url.trim()+'.html', {params:{pages:[page],perPage:perPage,rows:rows,query:self.query,url:$location.url()}})
                        // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                    })
                    .then(function(response){
                        if(!response){return;}
                        lastElement=null;
                        waitingDiv.html('');
                        var addHtml=angular.element(response.data.html)
                        var atd1,atd2,atd3,atd4,atd5;
                        if(addHtml.find('#td-list-1 .td-wrapper').html()){
                            atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-2 .td-wrapper').html()){
                            atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-3 .td-wrapper').html()){
                            atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-4 .td-wrapper').html()){
                            atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-5 .td-wrapper').html()){
                            atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                        }
                        if(atd5){td5.append(atd5)}
                        if(atd4){td4.append(atd4)}
                        if(atd3){td3.append(atd3)}
                        if(atd2){td2.append(atd2)}
                        if(atd1){td1.append(atd1)}
                        //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                        self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                        self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                        //console.log(addHtml.find('#paginateData'+page))
                        //console.log(self.currentQty,self.totalQty)
                        $timeout(function () {
                            lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                            //console.log(lastElement)
                            waiting=false;
                        },200)
                        $timeout(function () {
                            //console.log("$rootScope.$emit('addBlockAfterScrollDone') from stuff-list")
                            $rootScope.$broadcast('addBlockAfterScrollDone')
                            $rootScope.$emit('$stateChangeEndToStuff')

                        },300)
                    })
                    .catch(function () {
                        $rootScope.$emit('$stateChangeEndToStuff')
                    })
            }else{
                $timeout(function () {
                    $rootScope.$broadcast('addBlockAfterScrollDone')
                },200)

            }
        }

        function filterList(){
            console.log('filterList22')
            $q.when()
                .then(function(){
                    return self.Items.setFilters()
                })
                .catch(function(err){
                    //console.log(err)
                })
        }
        function setDataForStuff(stuff) {
            //console.log(stuff.name)
            /*if($rootScope.$state.current.name!='stuffs'){
                console.log('exit')
            }*/
            //console.log(stuff.name)
            stuff = Stuff.setDataForStuff(stuff,global.get('filterTags').val)
            stuff = angular.copy(stuff)
            console.log(stuff.name+' '+stuff.artikul,stuff.sticker)
            return stuff;
        }
        function getList() {
            $q.when()
                .then(function(){
                    return $http.get(url.trim()+'.html', {params:{pages:[self.paginate.page],perPage:perPage,rows:rows,query:self.query,url:$location.url()}})
                    //return $http.post(url.trim(),{pages:[self.paginate.page],perPage:self.paginate.rows,rows:rows,query:self.query})
                })
                .then(function(response){
                    if(!response){return;}
                    $anchorScroll()
                    lastElement=null;
                    var addHtml=angular.element(response.data.html)
                    if(addHtml.find('#td-list-1').html()){
                        var atd1=$compile(addHtml.find('#td-list-1').html())($scope)
                        td1.html(atd1)
                    }
                    if(addHtml.find('#td-list-2').html()){
                        var atd2=$compile(addHtml.find('#td-list-2').html())($scope)
                        td2.html(atd2)
                    }
                    if(addHtml.find('#td-list-3').html()){
                        var atd3=$compile(addHtml.find('#td-list-3').html())($scope)
                        td3.html(atd3)
                    }
                    if(addHtml.find('#td-list-4').html()){
                        var atd4=$compile(addHtml.find('#td-list-4').html())($scope)
                        td4.html(atd4)
                    }
                    self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                    self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                    $timeout(function () {
                        lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    },200)
                })
        }

    }
    function stuffListTemplateDirectiveCampaignList($state,global){
        return {
            scope: {
                campaignCondition:'@',
            },
            bindToController: true,
            controller: campaignStuffListCtrl,
            controllerAs: '$ctrl',
            template:function () {
                //console.log($state.current)
                if($state.current.name==='likes'){
                    var s =  "<div>" +
                            "<h1 class='wishlist-header'>"+global.get("lang").val.wishlist+"</h1>"+
                        "</div>"
                }else{
                    var s =  "<div></div>"
                }
                return s;
            },
            /*templateUrl: function (el,attr) {
                var campaign = attr.campaign;
                var url = 'views/template/partials/'+campaign+'/stuffs';
                return url
            },*/
            restrict:'E'
        }
    }
    campaignStuffListCtrl.$inject=['$scope','$state','$compile','$element','$window','Stuff','$rootScope','$q','$uibModal','global','exception','FilterTags','Filters','Confirm','Helper','anchorSmoothScroll','Photo','$timeout','$anchorScroll','Category','Brands','BrandTags','seoContent','AddInfo','$http','$location','localStorage'];
    function campaignStuffListCtrl($scope,$state,$compile,$element,$window,Stuff,$rootScope,$q,$uibModal,global,exception,FilterTags,Filters,Confirm,Helper,anchorSmoothScroll,Photo,$timeout,$anchorScroll,Category,Brands,BrandTags,seoContent,AddInfo,$http,$location,localStorage){
        anchorSmoothScroll.scrollTo('topPage')

        var stuffsInList = {'td-list-1':[],'td-list-2':[],'td-list-3':[],'td-list-4':[],'td-list-5':[],'td-list-6':[]}
        global.set('stuffsInList',stuffsInList)
        var self = this;
        self.stuffs={}
        self.Items=Stuff;
        self.mobile=global.get('mobile').val;
        self.global=global;
        self.globalProperty=$rootScope.globalProperty;
        self.$state=$rootScope.$state;
        self.$stateParams=$rootScope.$stateParams;
        self.query={};
        self.paginate={page:0,rows:20,items:0}

        var cartType = ($element.data('cart'))?$element.data('cart'):'good'
        var campaignCondition = ($element.data('condition'))?$element.data('condition'):'stuffs'


        self.filterList=filterList;
        self.initStuff=setDataForStuff;
        self.getList=getList;
        $scope.$on('addBlockAfterScroll',function () {
            //console.log(" $rootScope.$on('addBlockAfterScroll', from stuff-list")
            $scope.addBlockAfterScroll()
        })





        var pages=[0]
        var perPage=20;
        var rows=global.get('functions').val.setRows();


        if(global.get('store').val.template.stuffListType[cartType] &&
            global.get('store').val.template.stuffListType[cartType].perPage){
            //console.log('perPage')
            perPage = global.get('store').val.template.stuffListType[cartType].perPage;
            self.paginate.rows=perPage;
        }
        var waiting,lastElement,page=0,waitingDiv;
        var td1,td2,td3,td4,td5;
        var color = (global.get('store').val.template.dimScreenColor)?global.get('store').val.template.dimScreenColor:"#000000"
        var BGcolor = (global.get('store').val.template.dimScreenBGColor)?global.get('store').val.template.dimScreenBGColor:"#F5F5F5"
        var innerWaitingDiv=[
            '<div class="spinner-box clearfix text-center" style="width:100%;height:200px;background-color:'+BGcolor+';color:'+color+'">',
            '<span class="icon-spinner-img"></span>',
            //'<img class="spinner" src="/img/spinner.gif" style="margin-top: 70px">',
            '</div>'
        ].join('')
        var campaign = $element.data('campaign');
        if($rootScope.$state.current.name==='likes'){
            campaign='likes';
            var likes = localStorage.get(global.get('store').val.subDomain+'-likes');
            if(likes && likes.length){
                campaignCondition = likes.join('_');
            }else{
                campaignCondition = '_';
            }
        }
        var url = 'views/template/partials/'+campaign+'/'+campaignCondition;
        console.log(url)
        $q.when()
            .then(function(){
                return $http.get(url, {params:{pages:pages,perPage:perPage,rows:rows}})
            })
            .then(function (response) {
                if(!response){$rootScope.$emit('$stateChangeEndToStuff');return;}
                //console.log(response.data.html)
                var linkFn = $compile(response.data.html);
                var content = linkFn($scope);
                $element.append(content);
                var style = $element.find('style')
                if(style && style[0]){
                    //console.log(style[0]);
                }

                waitingDiv=$('#paginateData'+page);
                self.totalQty=waitingDiv.data('total');
                self.paginate.items=self.totalQty;
                //console.log(self.totalQty)
                self.currentQty=waitingDiv.data('qty');
                self.page=waitingDiv.data('page');
                self.lastItemId=waitingDiv.data('lastItemId');
                td1=$('#td-list-1 .td-wrapper');
                td2=$('#td-list-2 .td-wrapper');
                td3=$('#td-list-3 .td-wrapper');
                td4=$('#td-list-4 .td-wrapper');
                td5=$('#td-list-5 .td-wrapper');
                //console.log(self.totalQty,self.currentQty,page,self.lastItemId)
                $timeout(function(){
                    $anchorScroll()
                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    //console.log(lastElement)
                })

                var addBlockAfterScroll = function(){
                    if(!waiting && lastElement && $(lastElement).isOnScreen() && self.currentQty<self.totalQty){
                        waiting=true;
                        page++
                        $q.when()
                            .then(function(){
                                //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                                waitingDiv.html(innerWaitingDiv);
                                return $http.get(url, {params:{pages:[page],perPage:perPage,rows:rows}})
                                // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                            })
                            .then(function(response){
                                if(!response){return;}
                                lastElement=null;
                                waitingDiv.html('');
                                var addHtml=angular.element(response.data.html)
                                var atd1,atd2,atd3,atd4,atd5;
                                if(addHtml.find('#td-list-1 .td-wrapper').html()){
                                    atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-2 .td-wrapper').html()){
                                    atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-3 .td-wrapper').html()){
                                    atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-4 .td-wrapper').html()){
                                    atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-5 .td-wrapper').html()){
                                    atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                                }
                                if(atd5){td5.append(atd5)}
                                if(atd4){td4.append(atd4)}
                                if(atd3){td3.append(atd3)}
                                if(atd2){td2.append(atd2)}
                                if(atd1){td1.append(atd1)}
                                //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                                self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                                self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                                //console.log(addHtml.find('#paginateData'+page))
                                //console.log(self.currentQty,self.totalQty)
                                $timeout(function () {
                                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                                    //console.log(lastElement)
                                    waiting=false;
                                },200)
                            })
                    }
                }


                if(!global.get('store').val.template.stuffListType[cartType] ||
                    !global.get('store').val.template.stuffListType[cartType].paginate){
                    angular.element($window).on('scroll', addBlockAfterScroll);
                }
                $scope.$on('$destroy', function() {
                    angular.element($window).off('scroll', addBlockAfterScroll);
                });
                $timeout(function(){
                    $rootScope.$emit('$stateChangeEndToStuff');
                })
            })

        $scope.addBlockAfterScroll = function(){
            if(!waiting && lastElement && self.currentQty<self.totalQty){
                waiting=true;
                page++
                $rootScope.$emit('$stateChangeStartToStuff');
                $q.when()
                    .then(function(){
                        //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                        waitingDiv.html(innerWaitingDiv);
                        return $http.get(url, {params:{pages:[page],perPage:perPage,rows:rows}})
                        // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                    })
                    .then(function(response){
                        if(!response){return;}
                        lastElement=null;
                        waitingDiv.html('');
                        var addHtml=angular.element(response.data.html)
                        var atd1,atd2,atd3,atd4,atd5;
                        if(addHtml.find('#td-list-1 .td-wrapper').html()){
                            atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-2 .td-wrapper').html()){
                            atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-3 .td-wrapper').html()){
                            atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-4 .td-wrapper').html()){
                            atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-5 .td-wrapper').html()){
                            atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                        }
                        if(atd5){td5.append(atd5)}
                        if(atd4){td4.append(atd4)}
                        if(atd3){td3.append(atd3)}
                        if(atd2){td2.append(atd2)}
                        if(atd1){td1.append(atd1)}
                        //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                        self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                        self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                        //console.log(addHtml.find('#paginateData'+page))
                        //console.log(self.currentQty,self.totalQty)
                        $timeout(function () {
                            lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                            //console.log(lastElement)
                            waiting=false;
                        },200)
                        $timeout(function () {
                            //console.log("$rootScope.$emit('addBlockAfterScrollDone') from stuff-list")
                            $rootScope.$broadcast('addBlockAfterScrollDone')
                            $rootScope.$emit('$stateChangeEndToStuff')

                        },300)
                    })
                    .catch(function () {
                        $rootScope.$emit('$stateChangeEndToStuff')
                    })
            }
        }

        function filterList(){
            $q.when()
                .then(function(){
                    return self.Items.setFilters()
                })
                .catch(function(err){
                    //console.log(err)
                })
        }
        function setDataForStuff(stuff) {
            console.log(stuff.name)
            /*if($rootScope.$state.current.name!='stuffs'){
             console.log('exit')
             }*/
            //console.log(stuff.name)
            stuff = Stuff.setDataForStuff(stuff,global.get('filterTags').val)
            stuff = angular.copy(stuff)
            console.log(stuff.name+' '+stuff.artikul,stuff.sticker)
            return stuff;
        }
        function getList() {
            //console.log('getList')
            $q.when()
                .then(function(){
                    return $http.get(url, {params:{pages:[self.paginate.page],perPage:self.paginate.rows,rows:rows}})
                    /*return $http.get(url.trim()+'.html', {params:{pages:[self.paginate.page],perPage:perPage,rows:rows,query:self.query}})
                    return $http.post(url.trim(),{pages:[self.paginate.page],perPage:self.paginate.rows,rows:rows,query:self.query})*/
                })
                .then(function(response){
                    if(!response){return;}
                    $anchorScroll()
                    lastElement=null;
                    var addHtml=angular.element(response.data.html)
                    if(addHtml.find('#td-list-1').html()){
                        var atd1=$compile(addHtml.find('#td-list-1').html())($scope)
                        td1.html(atd1)
                    }
                    if(addHtml.find('#td-list-2').html()){
                        var atd2=$compile(addHtml.find('#td-list-2').html())($scope)
                        td2.html(atd2)
                    }
                    if(addHtml.find('#td-list-3').html()){
                        var atd3=$compile(addHtml.find('#td-list-3').html())($scope)
                        td3.html(atd3)
                    }
                    if(addHtml.find('#td-list-4').html()){
                        var atd4=$compile(addHtml.find('#td-list-4').html())($scope)
                        td4.html(atd4)
                    }
                    self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                    self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                    $timeout(function () {
                        lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    },200)
                })
        }

    }

    function stuffListTemplateDirectiveCampaignListOld(global){
        return {
            scope: {
                campaignCondition:'@'
            },
            bindToController: true,
            controller: stuffListCtrl,
            controllerAs: '$ctrl',
            templateUrl: function (el,attr) {
                var url = 'views/template/partials/stuffs/stuffs-list/campaign';
                return url
            },
            restrict:'E'
        }
    }
    stuffListCtrl.$inject=['$scope','Stuff','$rootScope','$q','$uibModal','global','exception','FilterTags','Filters','Confirm','Helper','anchorSmoothScroll','Photo','$timeout','$anchorScroll','Category','Brands','BrandTags','seoContent','AddInfo','$http','$location','$element'];
    function stuffListCtrl($scope,Stuff,$rootScope,$q,$uibModal,global,exception,FilterTags,Filters,Confirm,Helper,anchorSmoothScroll,Photo,$timeout,$anchorScroll,Category,Brands,BrandTags,seoContent,AddInfo,$http,$location,$element){
        //conosole.log('&&&&')
        anchorSmoothScroll.scrollTo('topPage')
        $element.on('$destroy', function () {
            //console.log('$destroy',stamp)
            //$scope.$destroy();
        });
        var stamp = Date.now()
        console.log('stuffListCtrl from admin ',stamp)
        var self = this;
        self.Items=Stuff;
        self.mobile=global.get('mobile').val;
        self.global=global;
        self.globalProperty=$rootScope.globalProperty;
        self.$state=$rootScope.$state;
        self.$stateParams=$rootScope.$stateParams;
        self.query={};
        self.data={rows:2}
        self.itemsArr2=[[],[]]
        self.itemsArr3=[[],[],[]]
        self.itemsArr4=[[],[],[],[]]
        self.itemsArr5=[[],[],[],[],[]]
        var queryForFilter;
        self.paginate={page:0,rows:100,items:0}
        setTimeout(function(){$rootScope.displaySlideMenu=true;},400)
        self.newStuff={name:'',actived:false}
        self.listOfActions={
            filterTag:'добавить характеристику',
            unfilterTag:'снять характеристику',
            addInfo:'таблица доп. параметров',
            category:'смена категории',
            brand:'смена бренда',
            order:'способ заказа',
            brandTag:'смена коллекции',
            changePrice:'смена цены',
            changeMinMax:'смена min max кол-ва для заказа',
            deleteStuffs:'удаление товаров',

            actived:'смена видимости',
            index:'смена позиции'
        }
        self.maxIndex=0;
        self.listCriteria={actived:true}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.createItem=createItem;
        self.filterList=filterList;
        self.getTagName=getTagName;
        self.getFilterName=getFilterName;
        self.deleteItem=deleteItem;
        self.zoomImg=zoomImg;
        self.markAllStuffs=markAllStuffs;
        self.changeAction=changeAction;
        self.dropCallback=dropCallback;
        self.filteringList=filteringList;
        self.alignmentIndex=alignmentIndex;
        self.fixData=fixData;
        self.reNewKeyWords=reNewKeyWords;
        self.changeRows=changeRows;
        self.clearSearch=clearSearch;
        self.changeListCriteria=changeListCriteria;
        self.changeStock=changeStock
        self.deleteIndexPageHtml=deleteIndexPageHtml;

        //*******************************************************
        activate();
       // var d1=Date.now()
        function activate() {

            if(global.get('tempContent') && global.get('tempContent').val){
                $('#tempContent').empty()
                global.set('tempContent',null)
            }
            self.data.rows=setRows();
            if(global.get('crawler') && global.get('crawler').val && self.$state.current.name=='stuffs.stuff'){
                return
            }
            $q.when()
                .then(function(){
                    return self.Items.getQueryFromUrl(self.campaignCondition)
                })
                .then(function(query){
                    self.query=query
                    //console.log(self.query)
                    return getList()

                })
                .then(function(){
                    return FilterTags.getFilterTags()
                })
                .then(function(filterTags){
                    self.filterTags=filterTags;
                })
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){
                    self.filters=filters;
                })
                .then(function(){
                    if($rootScope.reloadStuffId){
                        //console.log($rootScope.reloadStuffId)
                        $timeout(function(){
                            anchorSmoothScroll.scrollTo('stuff'+$rootScope.reloadStuffId,-150)
                            $rootScope.reloadStuffId=null;
                        },1300)

                    }
                    return;
                    return Helper.getItem(self.$state.current.name)
                })
                .then(function(helper){
                    if(helper){
                        self.helper=helper;
                        if(!global.get('store').val.helper) {
                            self.helper.popover=null;
                        }
                    }
                })
                .then(function(){
                    seoContent.setDataCatalog();
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        $scope.$on('fromStuffToStuffs',function () {
            console.log("$rootScope.$on('fromStuffToStuffs'",stamp)
            getList(true)
        });
        function getList(reload) {
            //console.log(reload)
            if(reload){
                $rootScope.$emit('$stateChangeStartToStuff');
            }
            if(self.listCriteria && !$rootScope.$stateParams.searchStr){
                for(var k in self.listCriteria){
                    if(self.listCriteria[k]!==null){
                        self.query[k]=self.listCriteria[k]
                    }else{
                        delete self.query[k];
                    }

                }

            }
            //console.log(self.query)
            //var search;
            /*if(self.query.search){
                search=self.query.search;
                delete  self.query.search
            }*/
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    //console.log(data)
                    $anchorScroll();
                    /*self.itemsArr2=data.divideArrayWithChunk(2);
                    self.itemsArr3=data.divideArrayWithChunk(3);
                    self.itemsArr4=data.divideArrayWithChunk(4);
                    self.itemsArr5=data.divideArrayWithChunk(5);*/
                    self.items = data;
                    if(data.length){
                        self.maxIndex=data[0].index;
                        data.forEach(function(el,i){
                            (el.index>self.maxIndex)&&(self.maxIndex=el.index)
                        })
                    }
                    if(self.$state.current.name=='stuffs.stuff' && self.paginate.page){
                        console.log(':::::')
                        self.$state.go('stuffs',self.$stateParams)
                    }
                    return self.items;
                })
                .then(function(items){
                    //console.log(items)
                    if(!items || !items.length){
                        self.stateComplite=true;
                        $rootScope.$emit('$stateChangeEndToStuff');
                    }else{
                        $timeout(function(){
                            $rootScope.$emit('$stateChangeEndToStuff');
                        },100)
                    }
                })
                .catch(function(err){
                    err = err.data||err
                    exception.catcher('получение списка')(err)
                });
        }
        function setRows(){
            return (global.get('functions').val.setRows)?
                global.get('functions').val.setRows():2
        }

        $(window).resize(function(){
            $timeout(function (){
                self.data.rows=setRows();
                //console.log(self.data.rows)
            })

        })
        function filteringList(item){
            //console.log(self.filterStr)
            if (!self.filterStr || (item.name.toLowerCase().indexOf(self.filterStr.toLowerCase()) != -1) ||
                (item.artikul.toLowerCase().indexOf(self.filterStr.toLowerCase()) != -1) ){
                return true;
            }
            return false;
        }
        function searchItem(artikul){

            if(!artikul || artikul.length<3){return};
            artikul=artikul.substring(0,20)
            self.$state.current.reloadOnSearch = true;
            var o={groupUrl:'group',categoryUrl:'category',searchStr:artikul.substring(0,20),
                queryTag:null,brand:null,brandTag:null,categoryList:null}
            self.$state.go(self.$state.current.name,o,{reload:true})
        }
        function saveField(item,field,defer){
            var o={_id:item._id};
            o[field]=item[field]
            if(field=='name' || field=='artikul'){
                var lang= global.get('store').val.lang
                //console.log($scope.item.keywords[lang]);
                var k = item.name;
                if(item.artikul){
                    k+=' '+item.artikul;
                }
                if(item.category && item.category[0] && global.get('categoriesO').val && global.get('categoriesO').val[item.category[0]] && global.get('categoriesO').val[item.category[0]].nameL){
                    k+=' '+global.get('categoriesO').val[item.category[0]].nameL[lang];
                }
                if(item.brand && global.get('brands').val){
                    var id = (item.brand._id)?item.brand._id:item.brand;
                    var b = global.get('brands').val.getOFA('_id',id)
                    k+=' '+((b.nameL && b.nameL[lang])?b.nameL[lang]:b.name);
                    if(item.brandTag){
                        var bt = b.tags.getOFA('_id',item.brandTag);
                        if(bt && bt.nameL && bt.nameL[lang]){
                            k+=' '+bt.nameL[lang]
                        }
                    }
                }
                //console.log(k)
                if(!item.keywords){item.keywords={}}
                item.keywords[lang]=k;
                field +=' keywords.'+lang
                o['keywords.'+lang]=k;
            }


            //console.log(o)
            if(field=='archived' && item[field]){
                field +=' actived'
                o['actived']=false;
                item['actived']=false;

            }

            return self.Items.save({update:field},o ).$promise.then(function(){
                global.set('saving',true);
                /*if(field=='index'){
                    var reload=true
                    getList(reload)
                }*/
                $timeout(function(){
                    global.set('saving',false);
                },1500)},function(err){console.log(err)});


            /*defer =defer||0
            $timeout(function(){

            },defer)*/
        };
        function createItem(stuff,clone){
            if(!stuff){
                stuff={name:''}
                stuff.index=(self.items&&self.items[0]&& self.items[0].index)?self.items[0].index:0;
            }

            $q.when()
                .then(function(){
                    return self.Items.cloneStuff(stuff,clone)
                })
                .then(function(stuff){
                    self.newStuff=stuff
                })
                .then(function(){
                    var url=self.newStuff.url;
                    var c = global.get('categoriesO').val[self.newStuff.category]
                    /*if(c.url==self.$stateParams.categoryUrl){
                        self.getList(true);
                    }*/
                    //self.$state.go('frame.stuffs.stuff',{groupUrl:c.linkData.groupUrl,categoryUrl:c.linkData.categoryUrl,stuffUrl:url},{reload: "frame.stuffs"});
                    self.$state.go('frame.stuffs.stuff',{groupUrl:self.$stateParams.groupUrl,categoryUrl:self.$stateParams.categoryUrl,stuffUrl:url});
                })
                .catch(function(err){
                    if(err){
                        err = err.data||err
                        exception.catcher('создание товара')(err)
                        console.log(err)
                    }
                })
        }
        function filterList(){
            $q.when()
                .then(function(){
                    return self.Items.setFilters()
                })
                .catch(function(err){
                    //console.log(err)
                })
        }
        function getTagName(_id){
            //console.log(_id)
            if(!_id || !self.filterTags || _id=='notag'  || !self.filterTags.length)return;
            return self.filterTags.getOFA('_id',_id ).name||null;
        }
        function getFilterName(_id){
            if(!_id ||!self.filters){return}
            var filter=self.filters.getOFA('_id',_id );
            return (filter)?filter.name:'';
        }
        function deleteItem(stuff){
            var folder='images/'+global.get('store').val.subDomain+'/Stuff/'+stuff.url
               // console.log(folder)


            Confirm("Удалить?" )
                .then(function(){
                    self.whileActions=true;
                    return Stuff.delete({_id:stuff._id} ).$promise;
                } )
                .then(function(){
                    var reload=true;
                    return self.getList(reload);
                })
                .then(function(){
                    self.whileActions=null;
                    return Photo.deleteFolder('Stuff',folder)
                })
                .catch(function(err){
                    self.whileActions=null;
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление товара')(err)
                    }

            })

            /*Stuff.Items.delete({_id:stuff._id} ).$promise.then(function(res){
                $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
            } ).catch(function(err){
                err = err.data||err
                exception.catcher('удаление товара')(err)
            })*/
        }
        function zoomImg(stuff) {
            if(!stuff.gallery || !stuff.gallery.length){return}
            var options={
                animation: true,
                bindToController: true,
                controllerAs: '$ctrl',
                //windowClass: 'app-modal-window',
                templateUrl: 'views/template/partials/stuffDetail/modal/zoom.html',
                controller: function ($uibModalInstance,gallery,i){
                    var self=this;
                    self.gallery=gallery;
                    self.idx=i;
                    self.ok=function(){
                        $uibModalInstance.close();
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss();
                    };
                },
                //size: 'lg',
                resolve:{
                    gallery:function(){
                        return stuff.gallery
                    },
                    i:function(){
                        return 0;
                    }
                }
            }
            $uibModal.open(options)

        }
        function markAllStuffs(m){
            self.items.forEach(function(el){
                el.select=m;
            })
        }
        function selectCategory() {
            function save(id,field) {

            }
            var acts=[]
            return $q.when()
                .then(function(){
                    return Category.select()
                } )
                .then(function(item){
                    self.items.forEach(function(el){
                        if(el.select){
                            //console.log(el.category)
                            if(typeof el.category=='object'){
                                el.category[0]=item._id
                            }else{
                                el.category=[item._id]
                            }
                            acts.push(saveField(el,'category'))
                        }

                    })
                    return $q.all(acts)
                })
                .then(function () {
                    getList(0)
                })
        }
        function selectBrand(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return Brands.select()
                } )
                .then(function (item) {
                    var o={}
                    o.brand=(item)?item._id:null;
                    o.brandTag=null;
                    massSaveField(o)
                })
        }
        function selectBrandTag(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return BrandTags.select()
                } )
                .then(function (item) {
                    //console.log(item)
                    var o={}
                    if(item){
                        o.brand=item.brand._id;
                        o.brandTag=item._id;
                    }else{
                        o.brandTag=null;
                    }

                    massSaveField(o)
                })
        }
        function selectFilterTag(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return FilterTags.select()
                } )
                .then(function(item){
                    //console.log(item)
                    var tag=item._id;
                    self.items.forEach(function(el){
                        if(el.select){
                            el.select=false;
                            var k = el.tags.indexOf(tag)
                            if(k<0){
                                el.tags.push(tag)
                                acts.push(saveField(el,'tags'));
                            }
                        }
                    })
                })
                .then(function () {
                    return $q.all(acts);
                })
        }
        function unSelectFilterTag(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return FilterTags.select()
                } )
                .then(function(item){
                    //console.log(item)
                    var tag=item._id;
                    self.items.forEach(function(el){
                        if(el.select){
                            el.select=false;
                            var k = el.tags.indexOf(tag);
                            if(k>-1){
                                el.tags.splice(k,1)
                                acts.push(saveField(el,'tags'));
                            }
                        }
                    })
                })
                .then(function () {
                    return $q.all(acts);
                })
        }
        function selectAddInfo(){
            return $q.when()
                .then(function(){
                    return AddInfo.select()
                } )
                .then(function(item){
                    massSaveField({'addInfo':item._id})
                })

        }
        function selectActived(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/selectActivedModal.html',
                bindToController: true,
                controller: selectActivedCtrl,
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (actived){
                massSaveField({'actived':actived}).then(function () {
                    getList(0)
                })

            });
        }
        selectActivedCtrl.$inject=['$uibModalInstance']
        function selectActivedCtrl($uibModalInstance){
            var self=this;
            self.actived=false;
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.actived);
            };
        }
        function selectPosition(){
            if(!self.items.length){return}
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/selectPositionModal.html',
                bindToController: true,
                controller: selectPositionCtrl,
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (position){

                //console.log(position)
                if(position=='down'){
                    var minIndex=Number(self.items[self.items.length-1].index)-1;

                    self.items.forEach(function(el){
                        //el.select=false;
                        if(el.select){

                            var i=minIndex--;
                            el.index=i;
                            saveField(el,'index');
                        }
                    })
                }else if(position=='up'){
                    var minIndex=Number(self.items[0].index)+1;
                    self.items.forEach(function(el){
                        //el.select=false
                        if(el.select){
                            var i=minIndex++;
                            el.index=i;
                            saveField(el,'index');
                        }
                    })
                }
                self.items.sort(function(a,b){return b.index-a.index})

            });
        }
        selectPositionCtrl.$inject=['$uibModalInstance']
        function selectPositionCtrl($uibModalInstance){
            var self=this;
            self.position='up';
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.position);
            };
        }
        function changeOrderType(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/orderTypeModal.html',
                bindToController: true,
                controller: orderTypeCtrl,
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (orderType){
                massSaveField({orderType:orderType})
                /*var item={orderType:orderType}
                item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
                return self.Items.save({update:'orderType'},item).$promise.then(function(){
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)},function(err){console.log(err)});*/
            });
        }
        orderTypeCtrl.$inject=['$uibModalInstance']
        function orderTypeCtrl($uibModalInstance){
            var self=this;
            self.orderType=0;
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.orderType);
            };
        }

        function changeMinMax(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/changeMinMaxModal.html',
                bindToController: true,
                controller: changeMinMaxCtrl,
                size:'lg',
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (item){
                massSaveField(item)
                /*item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
                return self.Items.save({update:'single multiple minQty maxQty'},item ).$promise.then(function(){
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)},function(err){console.log(err)});*/
            });
        }
        changeMinMaxCtrl.$inject=['$uibModalInstance']
        function changeMinMaxCtrl($uibModalInstance){
            var self=this;
            self.item={minQty:1,maxQty:1,single:false,multiple:false};
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.item);
            };
        }
        function changePrice(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/changePriceModal.html',
                bindToController: true,
                controller: changePriceCtrl,
                size:'lg',
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (item){
                item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
                
                item.price=Number(item.value)
                delete item.value;
                try{

                    if(item.price){
                        if(item.sum){
                            item.$inc=true;
                            if(item.price<0){
                                self.items.forEach(function (el) {
                                    if(el.select){
                                        if(el.price+item.price<0){
                                            throw el.name+' '+'price below 0'
                                        }
                                    }
                                })
                            }
                        }else{
                            item.$mul=true;
                            if(item.price<-99){
                                throw 'percent value -99 - ~'
                            }
                            item.price +=100;

                            if(item.price>0){
                                item.price=item.price/100
                            }
                        }
                    }
                    delete item.sum;

                    //console.log(item)
                    return self.Items.save({update:'price'},item).$promise.then(function(){
                        global.set('saving',true);
                        getList(true)
                        $timeout(function(){
                            global.set('saving',false);
                        },1500)},function(err){console.log(err)});

                }catch(err){
                    exception.catcher('error')(err)
                }

            });
        }
        changePriceCtrl.$inject=['$uibModalInstance']
        function changePriceCtrl($uibModalInstance){
            var self=this;
            self.item={value:0,sum:false};
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.item);
            };
        }

        function deleteStuffs(){
            Confirm('потверждаете?').then(function () {
                var ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id}).join('_')
                var folders=self.items.filter(function(el){return el.select}).map(function(el){
                    var folder='images/'+global.get('store').val.subDomain+'/Stuff/'+el.url
                    return folder;
                })
                $q.when()
                    .then(function () {
                        return self.Items.delete({ids:ids}).$promise.then(function(){
                            global.set('saving',true);
                            getList(true)
                            $timeout(function(){
                                global.set('saving',false);
                            },1500)},function(err){console.log(err)});
                    })
                    .then(function(){
                        Photo.deleteFolders('Stuff',folders)
                    })
                
            })

        }
        function massSaveField(item) {

            var fields= Object.keys(item).join(' ')
            //console.log(fields)
            item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
            return self.Items.save({update:fields},item).$promise.then(function(){
                global.set('saving',true);
                if(item.actived || item.category){
                    getList(true)
                }
                $timeout(function(){
                    global.set('saving',false);
                },1500)},function(err){console.log(err)});
        }

        function changeAction(){
            if(!self.action){return}
            var a=angular.copy(self.action);
            self.action=null;
            self.mark=false;
            switch (a) {
                case 'category':
                    return selectCategory()
                    break;
                case 'brand':
                    return selectBrand()
                    break;
                case 'brandTag':
                    return selectBrandTag()
                    break;
                case 'filterTag':
                    return selectFilterTag()
                    break;
                case 'unfilterTag':
                    return unSelectFilterTag()
                    break;
                case 'addInfo':
                    return selectAddInfo()
                    break;
                case 'actived':
                    return selectActived()
                    break;
                case 'index':
                    return selectPosition()
                    break;
                case 'order':
                    return changeOrderType()
                    break;
                case 'changePrice':
                    return changePrice()
                    break;
                case 'changeMinMax':
                    return changeMinMax()
                    break;
                case 'deleteStuffs':
                    return deleteStuffs()
                    break;

            }
            return;
            Confirm('подтвердите действие')
                .then(function () {

                })

        }
        function dropCallback(item){
            return item;
        }
        function alignmentIndex(){
            Confirm('Подтверждаете?')
                .then(function () {
                    self.alignmentIndexDisable=true;
                    var data = {}
                    return $http({
                        method: "post",
                        url:'/api/alignmentIndex',
                        data:data,
                    })
                })
                .then(function(){})
                .catch(function (err) {
                    console.log(err)
                })



        }
        function fixData(){
            Confirm('Подтверждаете?')
                .then(function () {
                    self.fixDesable=true;
                    var data = {}
                    return $http({
                        method: "post",
                        url: '/api/fixedDB/stuff',
                        data:data,
                    })
                })
                .then(function(){
                    self.fixDesable=false
                    exception.showToaster('info','fix stucture','Ok')
                })
                .catch(function (err) {
                    exception.catcher('fix stucture')(err)
                })

        }
        function reNewKeyWords(){
            Confirm('Подтверждаете?')
                .then(function () {
                    self.reNewKeyWordsDisable=true;
                    var data = {}
                    return $http({
                        method: "GET",
                        url: '/api/reNewKeyWords',
                        data:data,
                    })
                })
                .then(function(){
                    self.reNewKeyWordsDisable=false
                    exception.showToaster('info','reNewKeyWords','Ok')
                })
                .catch(function (err) {
                    exception.catcher('reNewKeyWords')(err)
                })

        }
        function changeRows(rows) {
            if(self.paginate.rows!=rows){
                self.paginate.rows=rows;
                self.paginate.page=0;
                self.paginate.items=0;
                var reload = true;
                getList(reload);
            }
        }
        function clearSearch() {
            $location.search('searchStr',null)
        }
        function changeListCriteria(field,val) {
            if(self.listCriteria){
                self.listCriteria.actived=null
                self.listCriteria.archived=null
            }
            //console.log(self.listCriteria)
            if(field){
                self.listCriteria[field]=val;
            }
            if(field=='actived' && !val){
                self.listCriteria.archived=false
            }
            self.paginate.page=0;
            getList(true)
        }
        function changeStock(stuff,tag) {
            //console.log(stuff)
            if(stuff.stock && stuff.stock[tag._id]){
                stuff.stock[tag._id].quantity=tag.quantity
                saveField(stuff,'stock');
            }
            //console.log(tag)
            //console.log(tag.quantity)
        }
        console.log($rootScope.$stateParams)
        function deleteIndexPageHtml() {
            Confirm('перезаписать страницу?')
                .then(function () {
                    return $http.get('/api/deleteIndexPageHtml?catalog='+$rootScope.$stateParams.groupUrl+'_'+$rootScope.$stateParams.categoryUrl)
                })
                .then(function (res) {
                    exception.showToaster('info','все OK')
                })
                .catch(function(err){
                    exception.catcher('сброс страницы')(err)
                })

        }
    }


    angular.module('gmall.directives')
        .directive('filtersWrap',filtersWrapDirective)
    function filtersWrapDirective(global){
        return {
            scope: {},
            restrict:"C",
            bindToController: true,
            controller: filtersWrapCtrl,
            controllerAs: '$ctrl',
            templateUrl: function(){
                var s='';
                if(global.get('store').val){
                    var type = (global.get('sectionType') && global.get('sectionType').val)?global.get('sectionType').val:'good';
                    var sec = global.get('store').val.template.stuffListType[type];
                    if(sec.filters){
                        for(var i=0;i<sec.parts.length;i++){
                            if(sec.parts[i].name=='filters'){
                                if(sec.parts[i].templ){
                                    s=sec.parts[i].templ;
                                }
                                break;
                            }
                        }
                    }
                }
                //console.log('s','views/template/partials/stuffs/filters/filtersWrap'+s+'.html')
                return 'views/template/partials/stuffs/filters/filtersWrap'+s+'.html'
            }

        }
    }
    filtersWrapCtrl.$inject=['$element','$timeout','$q','$stateParams','Sections','$location','Filters','global','Brands','Stuff','$scope','$rootScope','$state'];
    function filtersWrapCtrl($element,$timeout,$q,$stateParams,Sections,$location,Filters,global,Brands,Stuff,$scope,$rootScope,$state) {
        var self=this;
        self.global=global;


        if($stateParams.categoryUrl!='category'){
            self.sectionName=global.get('category').val.name;
        }else{
            self.sectionName=(global.get('section') && global.get('section').val)?global.get('section').val.name:'раздел';
        }
        self.breadcrumbs=global.get('breadcrumbs').val;
        //console.log('set filers')

        //console.log(self.filters)

        self.chars=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];
        self.char=self.chars[0]
        var sT = (global.get('sectionType') && global.get('sectionType').val)?global.get('sectionType').val:'good';
        if(global.get('store').val.template.stuffListType[sT].filtersCategories){
            if(global.get('sections') && global.get('sections').val){
                self.sections = global.get('sections').val.filter(function (s) {

                    return s.viewsFilters;
                });
            }

        }else{
            self.sections = [];
        }
        //console.log(self.sections)

        self.changeAllBrands=changeAllBrands;
        self.changeAllTags=changeAllTags;
        self.clearAll=clearAll;
        self.setCountFilter=setCountFilter;
        self.clearCountFilter=clearCountFilter;
        self.openFilterForBrands=openFilterForBrands;

        self.filterBrands = filterBrands;
        self.setCharForBrands=setCharForBrands;
        self.changeCategory=changeCategory;
        self.changeAllCategories=changeAllCategories;
        self.deleteCrumb=deleteCrumb;
        self.showReset=showReset;
        self.showResetAll=AllshowReset;
        self.showResetAllBrand=showResetAllBrand;

        function showReset(filter) {
            //console.log(filter)
            return filter.tags.some(function (t) {
                return t.set
            })
        }
        function AllshowReset() {
            return self.filters.some(function (f) {
                return f.tags.some(function (t) {
                    return t.set
                })
            })
        }
        function showResetAllBrand() {
            return self.brands.some(function (f) {
                return f.tags.some(function (t) {
                    return t.set
                })
            })
        }

        $rootScope.$on('changeCurrency',function () {
            console.log('changeCurrency',global.get('rate').val)
            self.filters.forEach(function (f) {
                if(f.count && f.price){
                    console.log(f.mixSave,global.get('rate').val)
                    f.min =Math.ceil10(f.mixSave*global.get('rate').val,0)
                    console.log(f.min)
                    f.max =Math.ceil10(f.maxSave*global.get('rate').val,0)
                    f.maxValue =f.max
                    f.minValue =f.min

                    console.log(f)
                }
            })
            $timeout(function () {
                $scope.$broadcast('rzSliderForceRender');
            },500);
        })

        activate()
        //console.log(global.get('categories').val)
        /*console.log(global.get('sections').val)
        console.log(global.get('store').val.template.stuffListType[global.get('sectionType').val].filtersCategories)*/

        function activate(){
            /*console.log(global.get('section').val)
            console.log(global.get('category').val)*/
            if(global.get('category').val && global.get('category').val.filters && global.get('category').val.filters.length){
                self.displayable=true;
            }else if(global.get('section') && global.get('section').val && global.get('section').val.filters && global.get('section').val.filters.length){
                self.displayable=true;
            }
            //if(global.get('section').val)
            $q.when()
                .then(function(){
                    return Brands.getBrands()
                })
                .then(function(brands){
                    self.brands=brands
                    self.checkedBrand=0;
                    if(self.brands){
                        self.brands.forEach(function (b) {
                            if(b.set){self.checkedBrand++}
                        })
                    }
                })
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){

                    //console.log(global.get('rate').val)
                    filters.forEach(function (f) {
                        //console.log(f)
                        var rate =(global.get('rate') && global.get('rate').val)?global.get('rate').val:1;
                        if(f.count){
                            if(!f.maxSave){
                                f.maxSave =f.max
                            }
                            if(!f.mixSave){
                                f.mixSave =f.min
                            }

                            /*f.maxValue =f.maxValue*global.get('rate').val
                            f.minValue =f.minValue*global.get('rate').val*/
                            if(f.price){
                                f.min =Math.ceil10(f.mixSave*rate,0)
                                f.max =Math.ceil10(f.maxSave*rate,0)
                            }

                            if(!f.set){
                                f.minValue=f.min;
                                f.maxValue=f.max;
                            }




                            //console.log(f)
                            $scope.$watch(function () {
                                return f.open
                            },function (n,o) {
                                if(n){
                                    $timeout(function () {
                                        $scope.$broadcast('reCalcViewDimensions');
                                    },300)
                                }
                            })
                        }
                    })
                    self.filters=filters.filter(function (f) {
                        if(self.displayable){
                            if(global.get('category').val){
                                return global.get('category').val.filters.indexOf(f._id)>-1
                            }else{
                                return global.get('section').val.filters.indexOf(f._id)>-1
                            }
                        }
                    })
                    //console.log(self.filters)

                })
                /*.then(function () {
                    $timeout(function () {
                        $scope.$broadcast('reCalcViewDimensions');
                    },1500)
                })*/
        }

        self.changeTag=changeTag;
        var parentDiv=$element.offsetParent()
        var box = $element.find('div')[0];
        //console.log(box)


        $timeout(function () {

            var w = $element.parent().width();
            var w1= Math.round(w/5)
            var list = $element.parent().children()[1];

            var nav = $('.navbar-fixed-top');
            var sdvig=0;
            nav.each(function (i,n) {
                // console.log($(n).outerHeight())
                sdvig+=$(n).outerHeight()
            })

            var filtersFirstBox=$element.find('.filters-first-box')[0];
            var filtersBox=$element.find('.filter-box')[0];

            var win = $(window);
            var delta=0 // сдвиг вверх от нижнего края окна просмотра

            win.scroll(filtersForScroll)
            var lastScrollTop = 0;
            $(filtersFirstBox).height($(filtersBox).height())

            $scope.$watch(function(){return $(filtersBox).height()},function (n,o) {
                $(filtersFirstBox).height(n+'px')
                //console.log(o,n)
                return;
                if(n>o){
                    /*if($(filtersBox).css('position')=='absolute'){
                     if($(filtersBox).height()>$(filtersFirstBox).height()){
                     $(filtersFirstBox).height($(filtersBox).height()+'px')
                     }
                     }*/
                    //console.log($(filtersBox).height(),$(filtersFirstBox).height())
                    if($(filtersBox).height()>$(filtersFirstBox).height()){
                        $(filtersFirstBox).height($(filtersBox).height()+'px')
                    }
                }
            })

            function filtersForScroll(event) {
                //console.log(list)
                if(!list){return}
                if($state.current.name!='stuffs'){return}
                var docViewTop = win.scrollTop();
                var docViewBottom = docViewTop + win.height();
                var elemTop =$(filtersBox).offset().top;
                var elemBottom = elemTop + $(filtersBox).height();
                var elemWidth = $(filtersBox).width();
                var listTop = $(list).offset().top;
                var listBottom = listTop + $(list).height();
                var st = $(this).scrollTop();
                if (st > lastScrollTop){
                    downscroll()
                } else {
                    upscroll()
                }
                lastScrollTop = st;


                /*function isOnScreen(element){
                 var bounds = $(element).offset();
                 bounds.bottom = bounds.top + $(element).outerHeight();
                 return (docViewTop < bounds.top-sdvig &&  docViewBottom > bounds.bottom);
                 };
                 */


                function upscroll() {
                    if(!elemBottom){return}
                    if($(filtersBox).css('position')=='fixed'){
                        if($(filtersBox).css('bottom')=='0px'){
                            // блок зафиксирован по нижнему краю
                            $(filtersFirstBox).css('height',docViewBottom-$(filtersFirstBox).offset().top)
                            $(filtersBox).css('position','absolute')
                            $(filtersBox).css('bottom','0px')
                            $(filtersBox).css('top','auto')
                            $(filtersBox).css('width',elemWidth+'px')
                            if($(filtersFirstBox).height()<$(filtersBox).height()){
                                $(filtersFirstBox).height($(filtersBox).height())
                            }
                        }else if($(filtersBox).css('top')==sdvig+'px'){
                            if(docViewTop+sdvig<=listTop){
                                $(filtersBox).css('position','absolute')
                                $(filtersBox).css('bottom','auto')
                                $(filtersBox).css('top','0px')
                                $(filtersBox).css('width',elemWidth+'px')
                            }else{

                            }
                        }else{
                            console.log('?????????????')
                        }
                    }else if($(filtersBox).css('position')=='absolute'){

                        if(elemTop > docViewTop+sdvig && elemTop>listTop){
                            /*****************/
                            /******* 7 *******/
                            /*****************/
                            $(filtersBox).css('position','fixed')
                            $(filtersBox).css('top',sdvig+'px')
                            $(filtersBox).css('bottom','auto')
                            $(filtersBox).css('width',elemWidth+'px')
                            /*console.log('ниже',$(filtersBox).css('top'))
                             if($(filtersBox).css('top')!='0px'){
                             $(filtersBox).css('position','fixed')
                             $(filtersBox).css('top',sdvig+'px')
                             $(filtersBox).css('bottom','auto')
                             $(filtersBox).css('width',elemWidth+'px')
                             }*/
                        }else{
                            //console.log('выше')
                        }




                        /*if(isOnScreen(filtersBox)){

                         }else{
                         // не помещается на экран
                         //console.log(listTop,elemTop)

                         }*/



                    }
                }

                function downscroll() {
                    if(!elemBottom){return}
                    if($(filtersBox).css('position')=='fixed'){
                        if($(filtersBox).css('top')==sdvig+'px'){
                            // по верхнему краю
                            if(elemBottom<docViewBottom){
                                //console.log('здесь?')
                            }else{
                                var t = elemTop-$(filtersFirstBox).offset().top
                                $(filtersFirstBox).css('height',t+'px')
                                $(filtersBox).css('position','absolute')
                                $(filtersBox).css('top',t+'px')
                                $(filtersBox).css('bottom','auto')
                            }
                        }else if($(filtersBox).css('bottom')=='0px'){
                            // по нижнему краю
                            if(listBottom<=elemBottom){
                                // список поднялся выше фильтров
                                $(filtersFirstBox).css('height',$(list).height())
                                $(filtersBox).css('position','absolute')
                                $(filtersBox).css('bottom','0px')
                                $(filtersBox).css('top','auto')
                            }

                        }

                    }else if($(filtersBox).css('position')=='absolute'){
                        if(docViewTop-sdvig >=elemTop &&  elemBottom  < docViewBottom && $(filtersBox).height()<(docViewBottom-docViewTop-sdvig)){
                            // фильтры не на весь екран
                            $(filtersBox).css('position','fixed')
                            $(filtersBox).css('bottom','auto')
                            $(filtersBox).css('top',sdvig+'px')
                            $(filtersBox).css('width',elemWidth+'px')
                        } else if(elemBottom <= docViewBottom && elemBottom<listBottom  && !($(filtersBox).height()<(docViewBottom-docViewTop-sdvig))){
                            // фильтры поднялись над низом окна и есть еще список
                            $(filtersBox).css('position','fixed')
                            $(filtersBox).css('bottom','0px')
                            $(filtersBox).css('top','auto')
                            $(filtersBox).css('width',elemWidth+'px')
                        }
                    }
                }

            }
            $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
                //console.log('filtersForScroll()')
                if(to.name=='stuffs'){
                    filtersForScroll()
                }
            })
            /*$timeout(function () {
                $scope.$broadcast('rzSliderForceRender')
            },200)*/
            $scope.$on('$destroy', function() {
                angular.element(window).off('scroll', filtersForScroll);
            });
        },150)




        function changeTag(_filter,_tag){
            //console.log(_filter,_tag)
            var queryTag='',brandTag='',brand='',filterTag='';
            //console.log(self.filters)
            self.filters.forEach(function(filter){
                if(filter.count){
                    if(filter.set){
                        //console.log(filter.name)
                        if(filterTag){filterTag+='__'}
                        filterTag+=filter._id+"_"+filter.minValue+"_"+filter.maxValue
                    }
                }else{
                    filter.tags.forEach(function(tag){
                        if(_filter && _tag && _filter._id===filter._id){
                            if(_tag._id===tag._id){
                                //console.log(tag.set)
                                //tag.set=!tag.set;
                                //console.log(tag.set)
                            }else{
                                tag.set=false;
                            }

                        }
                        if (tag.set){
                            //console.log(filter.tags)
                            if(queryTag){queryTag+='__'}
                            queryTag+=tag.url;
                        }
                    })
                }

            })

            self.brands.forEach(function(b){
                if(b.set){
                    if(brand){brand+='__'}
                    brand+=b.url;
                }
                b.tags.forEach(function(tag){
                    if (tag.set){
                        if(brandTag){brandTag+='__'}
                        //console.log(tag.url,arr)
                        brandTag+=tag.url;
                    }
                })
            })
            //console.log(filterTag)
            if(brand.split('__').length>1){
                brandTag=null;
            }
            //console.log('query.brandTag при закрытии ',query.brandTag);

            if(!queryTag){
                $location.search('queryTag',null)
            }else{
                $location.search('queryTag',queryTag)
            }
            if(!brandTag){
                $location.search('brandTag',null)
            }else{
                $location.search('brandTag',brandTag)
            }

            if(brand){
                $location.search('brand',brand)
            }else{
                $location.search('brand',null)
            }
            if(filterTag){
                $location.search('filterTag',filterTag)
            }else{
                $location.search('filterTag',null)
            }
            //console.log(self.brand)

            var o={
                groupUrl:$stateParams.groupUrl,
                categoryUrl:$stateParams.categoryUrl,
                queryTag:queryTag,
                brand:self.brand,
                brandTag:brandTag,
                categoryList:undefined

            };
            //console.log(o)
        }
        function clearAllBrands() {
            self.brands.forEach(function (b) {
                b.set=false;
                if(b.tags && b.tags.length){
                    b.tags.forEach(function (t) {
                        t.set=false;
                    })
                }
            })
        }
        function changeAllBrands() {
            clearAllBrands()
            changeTag()
        }
        function clearFilter(filter) {
            filter.set=null;
            if(filter.tags && filter.tags.length){
                filter.tags.forEach(function (t) {
                    t.set=false;
                })
            }
        }
        function changeAllTags(filter) {
            clearFilter(filter)
            changeTag()
        }
        function clearAll() {
            clearAllBrands()
            self.filters.forEach(function(filter){
                clearFilter(filter)
            })
            changeTag()
        }
        function setCountFilter(filter){
            filter.set=true;
            //console.log(filter)
            changeTag();
        }
        function clearCountFilter(filter) {
            filter.set=null;
            filter.minValue=filter.min;
            filter.maxValue=filter.max;
            changeTag();

        }
        function openFilterForBrands() {
            if(self.brands && self.brands.length){
                return self.brands.some(function(b){return b.open})
            }
        }
        function setCharForBrands(char) {
            self.char=char
        }
        function filterBrands(item) {
            //console.log(item)
            return item.name.toUpperCase()[0]==self.char
        }
        function changeCategory(category) {
            var o={
                groupUrl:category.linkData.groupUrl,
                categoryUrl:category.linkData.categoryUrl,
                queryTag:null,
                brand:null,
                brandTag:null,
                categoryList:null

            };
            $state.go('stuffs',o)
        }
        function changeAllCategories(s) {
            self.sections.forEach(function (s) {
                s.categories.forEach(function (c) {
                    c.set=false;
                })
                s.child.forEach(function (child) {
                    if(child.categories && child.categories.length){
                        child.categories.forEach(function (c) {
                            c.set=false;
                        })
                    }

                })
            })
            var o={
                groupUrl:s.url,
                categoryUrl:'category',
                queryTag:null,
                brand:null,
                brandTag:null,
                categoryList:null

            };
            $state.go('stuffs',o)
        }
        function deleteCrumb(index){
            change(self.breadcrumbs.splice(index,1)[0].type)
            function change(type){
                var query = self.breadcrumbs.reduce(function(q,item){
                    if(item.type==type){
                        if(q){q+='__'}
                        q+=item.url;
                    }
                    return q;
                },'')
                if(!query){
                    query=null;
                }
                $location.search(type,query)
            }
        }





    }
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        //.directive('stuffDetailTemplate',itemDirective)
        .directive('stuffDetailTemplate',itemDirectiveFromServer)
        .directive('stuffFromServer',stuffFromServer)

        .directive('stuffCart',stuffCartDirective)
        .directive('homePageStuff',homePageStuffDirective)
        //http://stackoverflow.com/questions/16670931/hide-scroll-bar-but-still-being-able-to-scroll
        .directive('gallerySmall',gallerySmallDirective)
        .directive('directiveBlockStuff', function($compile, $interpolate) {
            return {
                template: '',
                link: function($scope, element, attributes) {
                    var attr=(attributes.blockTempl)?attributes.blockTempl:''
                    //console.log(attr)
                    var div='<div ' + attributes.directiveBlockStuff.toLowerCase() + '-block-stuff block-templ="'+attr+'"></div>'
                    //console.log(div)
                    element.append($compile(div)($scope));
                }
            };
        })
        .directive('nameBlockStuff',nameBlockStuff)
        .directive('textBlockStuff',textBlockStuff)
        .directive('text2BlockStuff',text2BlockStuff)
        .directive('bannerBlockStuff',bannerBlockStuff)
        .directive('banner1BlockStuff',banner1BlockStuff)
        .directive('sliderBlockStuff',sliderBlockStuff)
        .directive('videoBlockStuff',videoBlockStuff)
        .directive('video1BlockStuff',video1BlockStuff)
        .directive('video2BlockStuff',video2BlockStuff)
        .directive('mapBlockStuff',mapBlockStuff)
        .directive('map1BlockStuff',map1BlockStuff)
        .directive('map2BlockStuff',map2BlockStuff)
        .directive('mastersBlockStuff',mastersBlockStuff)
        .directive('feedbackBlockStuff',feedbackBlockStuff)
        .directive('feedback1BlockStuff',feedback1BlockStuff)
        .directive('feedback2BlockStuff',feedback2BlockStuff)
        .directive('stuffsBlockStuff',imgsBlockStuff)
        .directive('filterTagsBlockStuff',imgsBlockStuff)
        .directive('brandTagsBlockStuff',imgsBlockStuff)
        .directive('brandsBlockStuff',imgsBlockStuff)
        .directive('categoriesBlockStuff',imgsBlockStuff)
        .directive('campaignBlockStuff',imgsBlockStuff)
        .directive('dateBlockStuff',dateBlockStuff)
        .directive('positionBlockStuff',positionBlockStuff)
        .directive('videolinkBlockStuff',videoLinkBlockStuff)
        .directive('snBlockStuff',snBlockStuff)
        .directive('calendarBlockStuff',calendarBlockStuff)
        .directive('galleryCarouselControls',galleryСarouselControls)
        .directive('carouselControls', function() {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    scope.goNext = function() {
                        element.isolateScope().next();
                    };
                    scope.goPrev = function() {
                        element.isolateScope().prev();
                    };

                }
            };
        })
        .directive('dirDisqus', ['$window','global', function ($window,global) {
            return {
                restrict: 'E',
                scope: {
                    config: '='
                },
                template: '<div id="disqus_thread"></div><a href="http://disqus.com" class="dsq-brlink"></a>',
                link: function (scope) {
                    //if(!global.get('store').val.disqus){return}
                    scope.$watch('config', configChanged, true);

                    function configChanged(n,o) {
                        if(!n){return}
                        // Ensure that the disqus_identifier and disqus_url are both set, otherwise we will run in to identifier conflicts when using URLs with "#" in them
                        // see http://help.disqus.com/customer/portal/articles/662547-why-are-the-same-comments-showing-up-on-multiple-pages-
                        if (!scope.config.disqus_shortname ||
                            !scope.config.disqus_identifier ||
                            !scope.config.disqus_url) {
                            return;
                        }
                        //console.log(scope.config)
                        $window.disqus_shortname = scope.config.disqus_shortname;
                        $window.disqus_identifier = scope.config.disqus_identifier;
                        $window.disqus_url = scope.config.disqus_url;
                        $window.disqus_title = scope.config.disqus_title;
                        //$window.disqus_category_id = scope.config.disqus_category_id;
                        //$window.disqus_disable_mobile = scope.config.disqus_disable_mobile;
                       /* $window.disqus_config = function () {
                            this.language = scope.config.disqus_config_language;
                            this.page.remote_auth_s3 = scope.config.disqus_remote_auth_s3;
                            this.page.api_key = scope.config.disqus_api_key;
                            if (scope.config.disqus_on_ready) {
                                this.callbacks.onReady = [function () {
                                    scope.config.disqus_on_ready();
                                }];
                            }
                        };*/

                        // Get the remote Disqus script and insert it into the DOM, but only if it not already loaded (as that will cause warnings)
                        if (!$window.DISQUS) {
                            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                            dsq.src = 'https://' + scope.config.disqus_shortname + '.disqus.com/embed.js';
                            dsq.setAttribute('data-timestamp', +new Date());
                            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                            //console.log('dsq',dsq)
                        } else {
                            $window.DISQUS.reset({
                                reload: true,
                                config: function () {
                                    this.page.identifier = scope.config.disqus_identifier;
                                    this.page.url = scope.config.disqus_url;
                                    this.page.title = scope.config.disqus_title;
                                    //this.language = scope.config.disqus_config_language;
                                    /*this.page.remote_auth_s3 = scope.config.disqus_remote_auth_s3;
                                    this.page.api_key = scope.config.disqus_api_key;*/
                                }
                            });
                        }
                    }
                }
            };
        }])
        .directive('checkOrienForPhoto', ['$window', function ($window,global) {
            return {
                restrict: 'A',
                link: function (scope,elem,attrs) {
                    var img = elem[0];

                    function loaded() {
                        if(img.naturalWidth && img.naturalHeight && img.naturalWidth < img.naturalHeight){
                            elem.addClass('img-detail')
                        }else{
                            elem.removeClass('img-detail')
                        }
                    }

                    if (img.complete) {
                        loaded()
                    } else {
                        img.addEventListener('load', loaded)
                        img.addEventListener('error', function() {
                            //alert('error')
                        })
                    }
                    attrs.$observe('src', function (newValue, oldValue) {
                        if (newValue && oldValue && newValue !== oldValue) {
                            console.log(newValue)
                        }
                    });

                }
            };
        }])





    function galleryСarouselControls(){
        console.log("galleryСarouselgalleryСarousel ")
        return {
            restrict:'AC',
            scope: {
                /*homePageStuffOwl:'@',
                zoomImg:"@",
                stuffs:'@',
                items:"@",
                autoplay:'@',
                duration:'@',
                gallery:'='*/
            },
            bindToController: true,
            controllerAs: '$ctrl',
            controller: galleryСarouselCtrl
        }
    }



    function gallerySmallDirective(){
        return {
            restrict:'C',
            controller: gallerySmallCtrl
        }
    }
    function stuffCartDirective(global){
        //var s=(global.get('store').val.template.stuff)?global.get('store').val.template.stuff:'';
        return {
            templateUrl:function(){
                //console.log(global.get('campaignStuffCart').val)

                var s = (global.get('campaignStuffCart').val && global.get('campaignStuffCart').val!=0)?global.get('campaignStuffCart').val:'';
                //console.log(type,global.get('store').val.template.stuffListCart[type],s)
                var url = '/views/template/partials/stuffs/list/stuff-cart/stuff-cart'+s+'.html';
                //console.log(url)
                return '/views/template/partials/stuffs/list/stuff-cart/stuff-cart'+s+'.html'
            },
            restrict:'A'
        }
    }
    function homePageStuffDirective(global){
        return {
            restrict:'A',
            scope: {
                homePageStuff:"@"
            },
            bindToController: true,
            controllerAs: '$ctrl',
            controller: homePageStuffCtrl,
        }
    }

    function itemDirective(global,$stateParams){
        return {
            scope: {
                filtersBlock:"@"
            },
            bindToController: true,
            controller: itemCtrl,

            controllerAs: '$ctrl',
            templateUrl: function() {
                //console.log($stateParams)
                //console.log(global.get('sectionType').val)
                //return 'views/template/partials/stuffDetail/stuffDetail/'+global.get('sectionType').val+'.html'
                //console.log('itemDirective',global.get('sectionType').val)
                return 'views/template/partials/stuffDetail/stuffDetail/'+global.get('sectionType').val+'/'+$stateParams.stuffUrl

            },
            restrict:'E',
            /*link: function(scope, iElement, iAttributes, ctrl){
                console.log(ctrl)
            }*/
        }
    }
    itemCtrl.$inject=['$scope','$anchorScroll','global','Stuff','$stateParams','$window','$q','BrandTags','FilterTags','Filters','AddInfo','Comments','exception','seoContent','$location','Sections','$uibModal','$notification','$rootScope','$timeout','$element'];
    function itemCtrl($scope,$anchorScroll,global,Stuff,$stateParams,$window,$q,BrandTags,FilterTags ,Filters,AddInfo,Comments,exception,seoContent,$location,Sections,$uibModal,$notification,$rootScope,$timeout,$element){
        //console.log('new reload')
        $anchorScroll();
        //console.log(global.get('stuffsInList').val)
        var stuffsInList=[];
        var currentStuffInList=null;
        var maxNumInRow=0;


        //console.log(global.get('stuffsInList').val)
        //https://medium.freecodecamp.com/how-to-get-the-most-out-of-the-javascript-console-b57ca9db3e6d
        /*console.group();
        console.log('I will output');
        console.group();
        console.log('more indents')
        console.groupEnd();
        console.log('ohh look a bear');
        console.groupEnd();
        console.time('id for timer stuffDetail')*/
        //console.log(Comments)
        var self=this;
        if(global.get('tempContent').val){
            self.firstLook=true;
        }else{
            self.firstLook=false;
        }
        self.global=global;
        self.$stateParams=$stateParams;
        self.lang=global.get('store').val.lang;
        self.rate=global.get('rate');
        self.mobile=global.get('mobile').val;
        self.crawler=global.get('crawler').val;
        self.currency=global.get('currency');
        self.moment=moment;
        self.activeSlide=0
        self.paginate={rows:5,page:0,items:0};// for comments
        //*******************************************************
        self.getTagName=getTagName;
        self.getFilterName=getFilterName;
        /*self.getCategoryName=getCategoryName;
        self.getBrandName=getBrandName;
        self.getBrandTagName=getBrandTagName;*/

        self.createNewComment=createNewComment;
        self.getComments=getComments;
        self.increaseQty=increaseQty;
        self.decreaseQty=decreaseQty;
        self.chancheStuff=chancheStuff;
        self.chancheActiveSlide=chancheActiveSlide;
        self.nextStuff=nextStuff;
        self.prevStuff=prevStuff;
        self.returnToList=returnToList;
        var slideDelay,carousel;
        //self.filterSorts=filterSorts;


        //****************************************************************
        activate();
        function getStuff(url,reload) {
            if(reload && self.item.stockKeysArray){
                self.item.stockKeysArray=[]
            }
            console.log(JSON.stringify(self.item.stockKeysArray))

            var leftRow =  $('#stuffDetailLeftClass');
            var rightRow = $('#stuffDetailRightClass')
            return  $q.when()
                .then(function(){
                    var o;
                    if($stateParams.store){
                        o={}
                        o.store=$stateParams.store;
                    }
                    return  Stuff.getItem(url,o)
                })
                .then(function(item){
                    //console.log(global.get('category'))

                    if(item.grid!=null && item.grid!=undefined){
                        item.leftClass =ratioClassStuffDetail[item.grid]['left']
                        item.rightClass=ratioClassStuffDetail[item.grid]['right']
                    }else{
                        //console.log(global.get('store').val.template.stuffDetailType)
                        item.leftClass =ratioClassStuffDetail[global.get('store').val.template.stuffDetailType[global.get('sectionType').val].ratio]['left']
                        item.rightClass=ratioClassStuffDetail[global.get('store').val.template.stuffDetailType[global.get('sectionType').val].ratio]['right']
                        //console.log(item.leftClass,item.rightClass)
                    }
                    if(!self.item){
                        leftRow.removeAttr('class')
                        rightRow.removeAttr('class')
                    }else if(self.item.leftClass!=item.leftClass){
                        leftRow.removeAttr('class')
                    }else if(self.item.rightClass!=item.rightClass){
                        rightRow.removeAttr('class')
                    }

                    // titles
                    /*var titles = {
                        canonical:item.link
                    }
                    console.log(titles)
                    global.set('titles',titles)*/


                    //console.log(item.stock)
                    //getCategoryName(item); // set name anf url category
                    self.objShare=seoContent.setDataItem(item);
                    //console.log(self.objShare)
                    if(item.blocks && item.blocks.length){
                        /*item.blocks.forEach(function (b) {
                            console.log(b)
                        })*/
                        item.blocks.sort(function(a,b){return a.index-b.index})
                        // формирование стилей блоков в браузере
                        var styleElement = document.getElementById('style'+item.url);
                        //console.log(styleElement)
                        if(!styleElement && false){
                            var css = '';
                            var preffix = '#blocks'+item.url;
                            item.blocks.forEach(function(block,i){
                                var p =preffix+i
                                var blocksStyleArr=compileStyleForBlock(block);
                                blocksStyleArr.forEach(function(el){
                                    css += p+" "+el;
                                })

                            })
                            //console.log(css)
                            var head = document.head || document.getElementsByTagName('head')[0],
                                style = document.createElement('style');

                            style.type = 'text/css';
                            style.id='style'+item.url
                            //console.log(style.id)
                            if (style.styleSheet){
                                style.styleSheet.cssText = css;
                            } else {
                                style.appendChild(document.createTextNode(css));
                            }
                            head.appendChild(style);
                            console.log('append')
                        }
                    }

                    if(reload){
                        $rootScope.$broadcast('reloadGallery')
                        //console.log(self.item.stockKeysArray)
                        for(var key in self.item){
                            if(key!='gallery' && key!='sortsOfStuff'){
                              if(item[key] && typeof item[key]!='function'){
                                  if(key=='stockKeysArray'){
                                      //console.log('stockKeysArray',item[key])
                                      $timeout(function () {
                                          self.item.stockKeysArray=item.stockKeysArray;
                                          //console.log(key,self.item.stockKeysArray)
                                      },700)
                                  }else{
                                      self.item[key]=item[key];
                                  }

                              }else{
                                  delete self.item[key]
                              }
                            }
                        }
                        for(var key in item){
                            if(key!='gallery' && key!='sortsOfStuff' && !self.item[key]){
                                self.item[key]=item[key];
                            }
                        }
                        //console.log(self.item.stockKeysArray)
                        /*var  $params = angular.copy($rootScope.$stateParams);
                        $params['stuffUrl'] = item.url;*/
                        //$rootScope.$state.go('.', {stuffUrl:item.url});

                        //$location.search('stuffUrl', item.url)

                        /*$rootScope.$state.go('stuffs.stuff', $params, {
                            location: 'replace', //  update url and replace
                            notify: false,
                            reload: false}
                            );*/

                        //$location.path('model/123').replace();
                        //$rootScope.$state.current.reloadOnSearch = false;
                        //$location.path('/zhenskaya-odezhda-optom/platya/plate-s-zanizhennoj-taliej');
                        self.activeSlide=0
                    }else{
                        self.item=item;
                        //$anchorScroll();
                    }
                    $anchorScroll();
                    return item;
                })
                .then(function(item){
                    console.dir(item)
                    /*console.log(_filtersO)
                    console.log(item.sortsOfStuff)*/
                    //console.log('item from server %o',item)
                    if(item.sortsOfStuff && item.sortsOfStuff.stuffs && item.sortsOfStuff.stuffs.length){
                        var filterGroup,filterGroupTags=[];
                        if(item.sortsOfStuff.filterGroup){
                            //filterGroup=global.get('filters').val.getOFA('_id',item.sortsOfStuff.filterGroup)
                            filterGroup= _filtersO[item.sortsOfStuff.filterGroup]
                            if(filterGroup){
                                filterGroupTags=filterGroup.tags.map(function(t){return t._id})
                            }
                        }
                        //console.log(filterGroup)
                        item.sortsOfStuff.stuffs.forEach(function (stuff,i) {
                            //console.log(stuff)
                            stuff.gallery.forEach(function (s,ii) {
                                //console.log(ii)
                                if(!ii){
                                    s.active=true
                                }else{
                                    s.active=false
                                }

                                //console.log(s)
                            })
                            for(var ii=0;ii<stuff.tags.length;ii++){
                                var idx=filterGroupTags.indexOf(stuff.tags[ii]);
                                if(idx>-1){
                                    //console.log(filterGroup.tags[idx])
                                    if(filterGroup.tags[idx].img){
                                        //item.sortsOfStuff.stuffs[i].gallery[0].thumbSmallSave=item.sortsOfStuff.stuffs[i].gallery[0].thumbSmall;
                                        item.sortsOfStuff.stuffs[i].gallery[0].thumbSmallTag=filterGroup.tags[idx].img
                                    }
                                    break;
                                }
                            }


                            /*var c = global.get('categories').val.getOFA('_id',stuff.category)
                            var linkData={groupUrl:'group',categoryUrl:'category'}
                            if(c){
                                linkData=angular.copy(c.linkData);
                            }
                            linkData.stuffUrl=stuff.url;
                            item.sortsOfStuff.stuffs[i].link=linkData;*/
                        })
                        self.item.sortsOfStuff=item.sortsOfStuff
                    }


                })
                .then(function(){
                    self.disqusConfig={
                        disqus_shortname: global.get('store').val.disqus,//'tatiana-lux'
                        disqus_identifier: self.item._id,
                        disqus_url: $location.absUrl(),
                        disqus_title:self.item.name,
                        disqus_config_language:global.get('store').val.lang,
                    }
                    if(reload){
                        var u = self.disqusConfig.disqus_url.split('/')
                        u[u.length-1]=self.item.url
                        self.disqusConfig.disqus_url=u.join('/')
                    }
                    //console.log(self.disqusConfig.disqus_url)
                    self.getComments(0);
                    self.commentName=(global.get('user').val)?global.get('user').val.name||global.get('user').val.profile.fio:''
                    if(self.item.addInfo){
                        return getAddInfos();
                    }

                })

                .then(function () {
                    //console.timeEnd('id for timer stuffDetail')
                    $timeout(function(){
                        $rootScope.$emit('$stateChangeEndToStuff');
                        carousel=$($element).find('.gallery-carousel')
                        //console.log(carousel)


                        //if(!reload){
                        if(false){
                            $('.carousel-control.right').click(function(){
                                //console.log(self.activeSlide)
                                if(self.activeSlide<self.item.gallery.length-1){self.activeSlide++}else{
                                    self.activeSlide=0;
                                }
                                slideDelay=true
                                $timeout(function () {
                                    slideDelay=false
                                },700)
                            })
                            $('.carousel-control.left').click(function(){
                                //console.log(self.activeSlide)
                                if(self.activeSlide){self.activeSlide--}else{
                                    self.activeSlide=self.item.gallery.length-1;
                                }
                                slideDelay=true
                                $timeout(function () {
                                    slideDelay=false
                                },700)
                            })
                        }

                    },300)
                })
                .then(function () {
                    //console.log(global.get('filters').val)
                    self.item.FullTags=self.item.tags.map(function(t){
                        if(t){
                            t = angular.copy(global.get('filterTags').val.getOFA('_id',t))
                            if(t){
                                if(t.filter && !t.filter._id){
                                    t.filter=global.get('filters').val.getOFA('_id',t.filter)
                                }
                                //console.log(t.name,global.get('filters').val.getOFA('_id',t.filter),t.filter)

                                return t;
                            }
                        }
                        return null
                    })
                    //console.log(self.item.FullTags)
                })
                .then(function () {
                    prepareStuffList()
                })
                .catch(function(err){
                    console.log(err)
                    err = err.data||err
                    exception.catcher('получение товара')(err)
                })
        }

        function activate(){
            if(global.get('tempContent') && global.get('tempContent').val){
                $('#tempContent').empty()
                global.set('tempContent',null)
            }
            $location.search('searchStr',null)
            $q.when()
                .then(function(){
                    return FilterTags.getFilterTags()
                })
                .then(function(filterTags){
                    self.filterTags=filterTags;
                    return Filters.getFilters()
                })
                .then(function(filters){
                    self.filters=filters;
                    return  getStuff($stateParams.stuffUrl)
                })
        }
        function getTagName(tag){
            if(tag){
                return self.filterTags.getOFA('_id',tag ).name;
            }
        }
        function getFilterName(filter){
            if(filter && _filterO[filter]){
                return _filterO[filter].name;
            }
        }
        function decreaseQty(){
            var stuff=self.item;
            if(stuff && stuff.quantity>1){
                if(stuff.multiple && stuff.minQty){
                    if(stuff.quantity-1>=stuff.minQty){
                        stuff.quantity--
                    }
                }else{
                    stuff.quantity--
                }

            }
        }
        function increaseQty(){
            var stuff=self.item;
            if(stuff) {
                if(stuff.single && stuff.maxQty){
                    if (stuff.quantity + 1 <= stuff.maxQty) {
                        stuff.quantity++
                    }
                }else{
                    stuff.quantity++
                }


            }
        }
        function chancheStuff(item) {
            console.log(item)
            /*if(item.gallery[0].thumbSmallSave){
                item.gallery[0].thumbSmall=item.gallery[0].thumbSmallSave;
            }*/
            self.item.gallery=item.gallery
            self.activeSlide=0;
            getStuff(item.url,'reload')
        }
        function getAddInfos(){
            return $q(function(resolve,reject){
                if(self.item.addInfo){
                    AddInfo.get({id:self.item.addInfo,store:self.item.store},function(res){
                        //console.log(res)
                        self.item.addInfo=res;
                        resolve()
                    },function(err){reject(err)})
                }else{
                    resolve()
                }

            })
        }
        //$scope.$emit('cartslide',{event:'signLogin'})
        $rootScope.$on('cartslide',function (data) {
            if(global.get('user').val){
                self.commentName=global.get('user').val.name
            }

        })
        $rootScope.$on('logout',function (data) {
            self.commentName=''
        })
        /*$scope.$on('cartslide',function (data) {
            console.log(data)
        })*/
        function createNewComment(text){
            if(!text){return}
            if(!global.get('user').val){
                self.commentAccess=true;
                $timeout(function () {
                    self.commentAccess=false;
                },6000)
                return;
            }
            var newComment={text:text.substring(0,500),stuff:self.item._id,user:global.get('user' ).val.name}
            $q.when()
                .then(function(){
                    return Comments.save(newComment ).$promise;
                })
                .then(function(){
                    var o={addressee:'seller',type:'comment',content:''};
                    o.seller=global.get('store').val.seller._id;
                    o.content = "<h3>КОММЕНТАРИЙ К ТОВАРУ</h3>"+moment(Date.now()).format('LLL')+"<h4>"+self.item.name+((self.item.artikul)?' '+self.item.artikul:'')+"</h4>"+text.substring(0,30)+'...'
                    //console.log(o)
                    return $notification.save(o).$promise

                })
                .then(function () {
                    self.comment='';
                    return getComments(0)
                })
                .catch(function(err){
                    err = err.data||err
                    exception.catcher('создание комментария')(err)
                });
        }
        function getComments(page){
            if(page===0){self.paginate.page=page}else if(page==='more'){
                self.paginate.page++;
            }
            var query={stuff:self.item._id}
            //console.log(self.paginate)
            return Comments.getList(self.paginate,query)
                .then(function(data) {
                    if(self.paginate.page){
                        self.item.comments.push.apply(self.item.comments,data);
                    }else{
                        self.item.comments=data
                    }
                    //console.table(data)
                    return;
                })
                .catch(function(err){
                    err = err.data||err
                    exception.catcher('получение комментариев')(err)
                });
        }


        function chancheActiveSlide(index,swipe){
            //console.log(index,swipe)
            if(slideDelay){return}
            slideDelay=true
            $timeout(function () {
                slideDelay=false
            },700)
            //https://stackoverflow.com/questions/30300737/angular-ui-trigger-events-on-carousel
            if(swipe){
                carousel=$element.find('.gallery-carousel')
                if(swipe=='left'){
                    if(carousel && carousel.isolateScope && typeof carousel.isolateScope=='function'){
                        carousel.isolateScope().next();
                    }

                    //index = (self.activeSlide<self.item.gallery.length-1)?self.activeSlide+1:0;
                }else if(swipe=='right'){
                    if(carousel && carousel.isolateScope && typeof carousel.isolateScope=='function'){
                        carousel.isolateScope().prev();
                    }

                   // index = (self.activeSlide>0)?self.activeSlide-1:self.item.gallery.length-1;
                }
            }else{
                self.activeSlide=index;self.item.gallery[index].active=true;
            }
            //console.log(index)



        }
        function prepareStuffList() {
            // создание последовательности для перелистывания товаров
            if(global.get('stuffsInList').val){
                maxNumInRow=0;
                stuffsInList=[];
                currentStuffInList=0;
                for(var k in global.get('stuffsInList').val){
                    if(global.get('stuffsInList').val[k].length && global.get('stuffsInList').val[k].length>maxNumInRow){
                        maxNumInRow=global.get('stuffsInList').val[k].length;
                    }
                }
                for(var j=0;j<maxNumInRow;j++){
                    for(var i=1;i<=6;i++){
                        if(global.get('stuffsInList').val['td-list-'+i] && global.get('stuffsInList').val['td-list-'+i].length && global.get('stuffsInList').val['td-list-'+i][j]){
                            stuffsInList.push(global.get('stuffsInList').val['td-list-'+i][j])
                        }
                    }
                }

                for(var i=0;i<stuffsInList.length;i++){
                    if(self.item && self.item._id==stuffsInList[i]._id){
                        currentStuffInList=i;
                        break;
                    }
                }
            }
        }
        $scope.$on('addBlockAfterScrollDone',function () {
            console.log('addBlockAfterScrollDone')
            prepareStuffList()
            nextStuff()
        })
        function nextStuff() {
            /*console.log('nextStuff',stuffsInList)
            console.log(slideDelay)*/
            if(slideDelay){return}
            slideDelay=true
            $timeout(function () {
                slideDelay=false
            },400)
            //console.log(currentStuffInList,stuffsInList.length)
            if(currentStuffInList<stuffsInList.length-1){
                currentStuffInList++
                if(stuffsInList && stuffsInList[currentStuffInList]){
                    self.item=stuffsInList[currentStuffInList]
                }
            }else{
                console.log('addBlockAfterScroll')
                $rootScope.$broadcast('addBlockAfterScroll')

            }


            //getStuff(stuffsInList[currentStuffInList].url)
        }
        //console.log($scope.$parent)

        function prevStuff() {
            //console.log('prevStuff')
            if(slideDelay){return}
            slideDelay=true
            $timeout(function () {
                slideDelay=false
            },700)
            if(currentStuffInList>0){
                currentStuffInList--
            }
            if(stuffsInList && stuffsInList[currentStuffInList]){
                self.item=stuffsInList[currentStuffInList]
            }
            //getStuff(stuffsInList[currentStuffInList].url)
        }
        function returnToList() {
            $rootScope.$state.go('stuffs')
        }

    }

    homePageStuffCtrl.$inject=['$scope','global','Stuff','$q','$compile','$element','exception']
    function homePageStuffCtrl($scope,global,Stuff,$q,$compile,$element,exception) {
        var self=this;
        self.global=global;
        //console.log(self.homePageStuff,$element)
        activate();

        function activate(){
            $q.when()
                .then(function(filters){
                    return  Stuff.getItem(self.homePageStuff)
                })
                .then(function(item){
                    self.stuff=item;
                    //console.log($element[0].innerHTML)
                    var linkFn = $compile($element[0].innerHTML)
                    var content=linkFn($scope);
                    $element[0].innerHTML=null;
                    $element.append(content);

                    //console.log(content)
                    /*var linkFn = $compile($element);
                    var content = linkFn($scope);*/
                })
                .catch(function(err){
                    err = err.data||err
                    exception.catcher('get stuff home page')(err)
                })
        }

    }

    gallerySmallCtrl.$inject=['$element','$timeout','$scope','$attrs']
    function gallerySmallCtrl($element,$timeout,$scope,$attrs) {

        //var self=this;
        var galleryBigH,wrapDiv=$element.children()
        //console.log(wrapDiv)
        var paddingLeft=0,paddingRight=0;
        //self.activeSlide=0
        var arrowUp = $element.find('.arrow-up-gallery-small')
        var arrowDown = $element.find('.arrow-down-gallery-small')
        $(arrowUp).css('display','none')
        $(arrowDown).css('display','none')
        $scope.arrowUp=function(display){
            if(display){
                $(arrowUp).css('display','inline-block')
            }else{
                $(arrowUp).css('display','none')
            }
        }
        $scope.arrowDown=function(display){
            if(display){
                $(arrowDown).css('display','inline-block')
            }else{
                $(arrowDown).css('display','none')
            }
        }
        var arrowPrev = $element.find('.arrow-prev-gallery-small')
        var arrowNext = $element.find('.arrow-next-gallery-small')
        $(arrowPrev).css('display','none')
        $(arrowNext).css('display','none')
        $scope.arrowPrev=function(display){
            if(display){
                $scope.arrowPrevDisabled=false;
                $(arrowPrev).removeAttr("disabled");
                //$(arrowPrev).css('display','inline-block')
            }else{
                $scope.arrowPrevDisabled=true
                $(arrowPrev).attr("disabled", "disabled");
                //$(arrowPrev).css('display','none')
            }
            //console.log(display,$scope.arrowPrevDisabled)
        }
        $scope.arrowNext=function(display){

            if(display){
                $scope.arrowNextDisabled=false
                $(arrowNext).removeAttr("disabled");
                //$(arrowNext).css('display','inline-block')
            }else{
                $(arrowNext).attr("disabled", "disabled");
                $scope.arrowNextDisabled=true
                //$(arrowNext).css('display','none')
            }
            //console.log(display,$scope.arrowNextDisabled)
        }


        $timeout(function(){

            var images = $element.find('img');
            $scope.loadCounter=images.length+1;

            var listener=$scope.$watch('loadCounter',function(n,o){
                if(n==0){
                    listener()

                    //console.log('!!!!!!')

                    $timeout(function(){
                        top=$(child).offset().top;
                        bottom =$(child).offset().top+$(child).height()
                        left=$(child).offset().left;
                        right =$(child).offset().top+$(child).width()
                        //console.log(bottom,)

                        if(!$attrs.orientation || $attrs.orientation!="horizontal"){
                            child.style.right = child.clientWidth - child.offsetWidth + "px";
                            var topFirstImg=$(images[0]).offset().top
                            var bottomLastImg=$(images[images.length-1]).offset().top+$(images[images.length-1]).height()
                            if(top>topFirstImg){
                                $scope.arrowUp(true);
                            }
                            if(bottom<bottomLastImg){
                                $scope.arrowDown(true);
                            }
                        }else if($attrs.orientation && $attrs.orientation=="horizontal"){
                            paddingLeft=$(child).css('padding-left').replace(/[^-\d\.]/g, '');
                            paddingRight=$(child).css('padding-right').replace(/[^-\d\.]/g, '');
                            //console.log(paddingLeft,paddingRight)
                            var leftFirstImg=$(images[0]).offset().left
                            var rightLastImg=$(images[images.length-1]).offset().left+$(images[images.length-1]).width()
                            //console.log(images)
                            var www =0;
                            images.each(function (i,img) {
                                www+=$(img).width();
                            })


                            //console.log(left,leftFirstImg,left<leftFirstImg)
                            /*if(left>leftFirstImg){
                             $scope.arrowPrev(true);
                             }*/
                            //console.log(right,rightLastImg);

                            if(www>$(child).width()){
                                $(arrowPrev).css('display','inline-block')
                                $(arrowNext).css('display','inline-block')
                                $scope.arrowNext(true);
                            }
                            /*if(left<leftFirstImg){
                             $scope.arrowNext(true);
                             }else{
                             $scope.arrowNext(false);
                             }
                             //console.log(right,rightLastImg)
                             if(right>rightLastImg){
                             $scope.arrowPrev(true);
                             }else {
                             $scope.arrowPrev(false);
                             }*/
                        }
                    },500)




                }
            })

            var imagesQty=images.length,loadCounter=0;

            var imagesBig= $('.gallery-big img');
            //console.log(imagesBig.length)
            if(!imagesBig.length){
                imagesBig= $('.zoom-big-slide img');
            }
            //console.log(imagesBig.length)
            var galleryBigH;
            var child = $element.find('#gallery-small-container')[0];
            //console.log(child)
            var top=$(child).offset().top;
            var bottom =$(child).offset().top+$(child).height()
            var left=$(child).offset().left;
            var right =$(child).offset().top+$(child).width()

            //console.log($attrs,$attrs.orientation || $attrs.orientation!="horizontal")
           // console.log(child)

            imagesBig.each(function(i,img){
                if(!i){
                    if(!this.complete){
                        $(this).bind('load', function() {
                            //console.log(imagesBig.height())
                            if(!$attrs.orientation || $attrs.orientation!="horizontal"){
                                galleryBigH=imagesBig.height()
                                wrapDiv.css('height',galleryBigH)
                            }else if($attrs.orientation && $attrs.orientation=="horizontal"){
                                galleryBigH=imagesBig.width()

                                wrapDiv.css('width',galleryBigH-40)
                            }
                            top=$(child).offset().top;
                            bottom =$(child).offset().top+$(child).height()
                            left=$(child).offset().left;
                            right =$(child).offset().top+$(child).width()
                            $timeout(function(){
                                $scope.loadCounter--
                            })

                            //console.log(left,right)
                        })
                    }else{
                        //console.log(imagesBig.height())
                        if(!$attrs.orientation || $attrs.orientation!="horizontal"){
                            galleryBigH=imagesBig.height()
                            wrapDiv.css('height',galleryBigH)
                        }else if($attrs.orientation && $attrs.orientation=="horizontal"){

                            galleryBigH=imagesBig.width()
                            //console.log(galleryBigH)
                            wrapDiv.css('width',galleryBigH-40)
                        }
                        top=$(child).offset().top;
                        bottom =$(child).offset().top+$(child).height()
                        left=$(child).offset().left;
                        right =$(child).offset().top+$(child).width()
                        $timeout(function(){
                            $scope.loadCounter--
                        })
                    }
                }
            })

            



            images.each(function(img){
                if(!this.complete){
                    $(this).bind('load', function() {
                        $scope.loadCounter--
                    })
                }else{
                    $scope.loadCounter--
                }

            })
            //console.log(imagesQty)
            $(child).bind('scroll', scrollFoo);

            function scrollFoo(reload) {
                console.log('scrollFoo')
                //if(reload){self.activeSlide=0;console.log(self.activeSlide)}
                if(!$attrs.orientation || $attrs.orientation!="horizontal"){
                    var top=$(child).offset().top;
                    var bottom =$(child).offset().top+$(child).height()
                    var topFirstImg=$(images[0]).offset().top
                    var bottomLastImg=$(images[imagesQty-1]).offset().top+$(images[imagesQty-1]).height()
                    //console.log(top,bottomFirstImg,bottom,bottomLastImg)
                    //console.log(bottom,bottomLastImg)
                    if(top>topFirstImg){
                        $scope.arrowUp(true);
                    }else{
                        $scope.arrowUp(false);
                    }
                    if(bottom<bottomLastImg){
                        $scope.arrowDown(true);
                    }else {
                        $scope.arrowDown(false);
                    }
                }else if($attrs.orientation && $attrs.orientation=="horizontal"){
                    var left=$(child).offset().left;
                    var right =$(child).offset().left+$(child).width()
                    var leftFirstImg=$(images[0]).offset().left
                    var rightLastImg=$(images[imagesQty-1]).offset().left+$(images[imagesQty-1]).width()
                    /*console.log(left,leftFirstImg)
                    console.log(left<leftFirstImg)*/
                    if(left>leftFirstImg){
                        $scope.arrowPrev(true);
                    }else{
                        $scope.arrowPrev(false);
                    }
                    if(right>=rightLastImg){
                        $scope.arrowNext(false);
                    }else {
                        $scope.arrowNext(true);
                    }

                    /*if(left<leftFirstImg){
                        $scope.arrowNext(true);
                    }else{
                        $scope.arrowNext(false);
                    }

                    if(right>rightLastImg){
                        $scope.arrowPrev(true);
                    }else {
                        $scope.arrowPrev(false);
                    }*/
                }
            }
            function move_up() {
                if(!$attrs.orientation || $attrs.orientation!="horizontal"){
                    var scrollTop = child.scrollTop-500;
                    $(child).stop().animate({scrollTop:scrollTop}, '500', 'swing', function() {});
                }else if($attrs.orientation && $attrs.orientation=="horizontal"){
                    var scrollLeft = child.scrollLeft-200;
                    $(child).stop().animate({scrollLeft:scrollLeft}, '500', 'swing', function() {});
                }
            }

            function move_down() {
                console.log('move_down')
                if(!$attrs.orientation || $attrs.orientation!="horizontal"){
                    var scrollTop = child.scrollTop+500;
                    console.log(scrollTop,child)
                    $(child).stop().animate({scrollTop:scrollTop}, '500', 'swing', function() {});
                }else if($attrs.orientation && $attrs.orientation=="horizontal"){
                    //console.log(child.scrollLeft)
                    var scrollLeft = child.scrollLeft+200;
                    $(child).stop().animate({scrollLeft:scrollLeft}, '500', 'swing', function() {});
                }
            }
            function changeImg() {
                $timeout(function () {
                    var h=$('.gallery-big').height()
                    //console.log(h,galleryBigH)
                    if(h>galleryBigH){
                        galleryBigH=h;
                        wrapDiv.css('height',h)
                    }

                },700)
            }
            $scope.smallGalleryF={
                move_up:move_up,
                move_down:move_down,
                changeImg:changeImg
            };
            $scope.$on('reloadGallery',function(){
                //console.log('reload')
                $timeout(function () {
                    images = $element.find('img');
                    imagesQty=images.length;
                    scrollFoo('reload');
                    //self.activeSlide=0
                },300)

            })

        },100)


    }




    function nameBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/nameBlock.html',
        }
    }
    function positionBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/positionBlock.html',
        }
    }
    function videoLinkBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/videoLinkBlock.html',
        }
    }
    function textBlockStuff(){
        return {
            templateUrl: function(el,attrs){
                //console.log(el,attrs)
                var s=(attrs && attrs.blockTempl && attrs.blockTempl!='0')?attrs.blockTempl:'';
                return 'views/template/partials/stuffDetail/blocks/blocks/textBlock'+s+'.html'}
        }
    }
    function text2BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/text2Block.html',
        }
    }
    function bannerBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/bannerBlock.html',
        }
    }
    function banner1BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/banner1Block.html',
        }
    }
    function sliderBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/sliderBlock.html',
        }
    }
    function videoBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/videoBlock.html',
        }
    }
    function video1BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/video1Block.html',
        }
    }
    function video2BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/video2Block.html',
        }
    }
    function mapBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/mapBlock.html',
        }
    }
    function map1BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/map1Block.html',
        }
    }
    function map2BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/map2Block.html',
        }
    }
    function mastersBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/mastersBlock.html',
        }
    }
    function feedbackBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/feedbackBlock.html',
        }
    }
    function feedback1BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/feedback1Block.html',
        }
    }
    function feedback2BlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/feedback2Block.html',
        }
    }
    function imgsBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/imgsBlock.html',
        }
    }
    function dateBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/dateBlock.html',
        }
    }
    function snBlockStuff(){
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/snBlock.html',
        }
    }
    function calendarBlockStuff(){
        //console.log('sssdds')
        return {
            templateUrl: 'views/template/partials/stuffDetail/blocks/blocks/calendarBlock.html',
        }
    }


    function itemDirectiveFromServer(){
        return {
            scope: {},
            bindToController: true,
            controllerAs: '$ctrl',
            template:"<div></div>",
            controller: stuffDetailFromServerCtrl,
            restrict:'E'
        }
    }
    stuffDetailFromServerCtrl.$inject=['$scope','$element','$compile','$http','$stateParams','$state','$anchorScroll','global','$q','$rootScope','$location','$timeout','$sce']
    function stuffDetailFromServerCtrl($scope,$element,$compile,$http,$stateParams,$state,$anchorScroll,global,$q,$rootScope,$location,$timeout,$sce){
        var self=this;
        self.global=global;
        self.lang = global.get('store').val.lang;
        $q.when()
            .then(function(){
                if(global.get('tempContent').val){
                    var html = global.get('tempContent').val;
                    $('#tempContent').empty()
                    global.set('tempContent',null)
                    var o ={data:{html:html}}
                    //console.log(tempTitles)
                    if(tempTitles){
                        o.data.titles=tempTitles
                    }
                    return o;
                }else{
                    //console.log($stateParams)
                    /*var o={
                        group:$stateParams.groupUrl,
                        category:$stateParams.categoryUrl
                    }*/
                    var url ='views/template/partials/stuffDetail/stuffDetailNew/'+global.get('sectionType').val+'/'+$stateParams.stuffUrl+'.html?group='+$stateParams.groupUrl+'&category='+$stateParams.categoryUrl;
                    return $http.get(url)
                }
            })
            .then(function (response) {
                //console.log(response.data)
                var linkFn = $compile(response.data.html);
                var content = linkFn($scope);
                $element.append(content);
                //$element.append(response.data.html);
                $anchorScroll()
                //console.log(response.data.titles)
                //var titles = {}
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        //console.log(k,response.data.titles[k])
                        if(response.data.titles[k]){
                            if(k=='title_______'){
                                //console.log(global.get('titles').val[k])
                                if(response.data.titles[k].indexOf(global.get('titles').val[k])<0){
                                    global.get('titles').val[k]=response.data.titles[k]+'. '+global.get('titles').val[k];
                                }else{
                                    global.get('titles').val[k]=response.data.titles[k];
                                }
                            }else if(k=='canonical'){
                                try{
                                    global.get('titles').val[k]=$sce.trustAsResourceUrl(response.data.titles[k]);
                                }catch(err){console.log(err)}

                                //console.log(global.get('titles').val[k])
                            }else{
                                global.get('titles').val[k]=response.data.titles[k]
                            }
                        }
                    }

                    //console.log(global.get('titles').val)
                }
                $rootScope.$emit('$stateChangeEndToStuff');
            })
    }


    function stuffFromServer(global,$timeout){
        return {
            scope: {
                stuffFromServer:'@'
            },
            bindToController: true,
            controllerAs: '$ctrl',
            restrict:'A',
            controller:function($scope,Stuff,global,$attrs,$stateParams,$q,seoContent,$timeout,$rootScope,$anchorScroll,$location,Comments,exception,$element,localStorage,$animate,$uibModal){

                /*
                 ng-hide and ng-show showing at the same time for a short period of time
                /https://github.com/angular/angular.js/issues/14015 */
                var self=this;
                self.global=global;
                $scope.global=global;
                $scope.stuff=JSON.parse($attrs.stuffFromServer)
                var subDomain = global.get('store').val.subDomain;
                //console.log(JSON.parse($attrs.stuffFromServer))
                //$scope.stuff22=JSON.parse($attrs.stuffFromServer)
                //console.log($scope.stuff22)
                $scope.stuff = Stuff.setDataForStuff($scope.stuff,global.get('filterTags').val)
                self.stuff=$scope.stuff;
                console.log(self.stuff)
                self.item=$scope.stuff
                self.objShare=seoContent.setDataItem(self.item);
                //console.log(self.item)
                var stuffsInList=[];
                var currentStuffInList=null;
                var maxNumInRow=0;
                var slideDelay;
                self.global=global;
                self.lang=global.get('store').val.lang;
                self.rate=global.get('rate');
                self.mobile=global.get('mobile').val;
                self.crawler=global.get('crawler').val;
                self.currency=global.get('currency');
                self.moment=moment;
                self.activeSlide=0
                self.paginate={rows:5,page:0,items:0};// for comments
                self.gallery=[]


                self.chancheActiveSlide=chancheActiveSlide;
                self.getMastersName=getMastersName
                self.decreaseQty=decreaseQty;
                self.increaseQty=increaseQty;
                self.chancheStuff=chancheStuff;
                self.nextStuff=nextStuff;
                self.prevStuff=prevStuff;
                self.returnToList=returnToList;
                self.getComments=getComments;
                self.getTagName=getTagName;
                self.getFilterName=getFilterName;

                self.getAveragePrice=getAveragePrice;
                self.goToSchedule=goToSchedule;
                self.addToLikes=addToLikes;
                self.getAddInfoInModal=getAddInfoInModal;

                function getAddInfoInModal() {
                    var options={
                        animation: true,
                        bindToController: true,
                        controllerAs: '$ctrl',
                        windowClass:  function(){
                            return 'modalProject'
                        },
                        templateUrl:'views/template/partials/stuffDetail/addInfo/modal/addinfo.html',
                        controller: function ($uibModalInstance,global,item){
                            var self=this;
                            self.item=item;
                            self.modal=global.get('mobile').val
                            self.lang=global.get('store').val.lang
                            self.getTagName=getTagName;
                            self.ok=function(){
                                $uibModalInstance.close();
                            }
                            self.cancel = function () {
                                $uibModalInstance.dismiss();
                            };
                            function getTagName(tag) {
                                if(tag){
                                    return global.get('filterTagsO').val[tag].name;
                                }
                            }
                        },
                        resolve:{
                            item:function(){
                                return self.item
                            }
                        }
                    }
                    $uibModal.open(options);
                }


                var currency=global.get('currency').val
                //console.log(global.get('store').val.currency,currency)
                var formatAverage=global.get('store').val.currency[currency][4];
                //console.log('formatAverage',formatAverage)
                var del=-1;
                if(formatAverage==1){del=-1}else if(formatAverage==2){del=0}else if(formatAverage==3){del=1} else if(formatAverage==4){del=2}
                self.formatPrice=global.get('store').val.currency[currency][5];
                if(typeof self.formatPrice=='undefined'){
                    self.formatPrice=2;
                }
                $rootScope.$on('changeCurrency',function () {
                    //console.log(global.get('currency').val,global.get('store').val.currency)
                    currency=global.get('currency').val
                    formatAverage=global.get('store').val.currency[currency][4];
                    self.formatPrice=global.get('store').val.currency[currency][5];
                    //console.log('self.formatPrice',self.formatPrice,'formatAverage',formatAverage)
                    if(typeof self.formatPrice=='undefined'){
                        self.formatPrice=2;
                    }
                    del=-1;
                    if(formatAverage==1){del=-1}else if(formatAverage==2){del=0}else if(formatAverage==3){del=1} else if(formatAverage==4){del=2}
                    //console.log(formatAverage,del)
                })
                //console.log(formatAverage,del)
                function goToSchedule() {

                    var div= $($element).find("div[schedule-place-from-server='schedule-place-from-server']")
                    console.log(div)
                    if(div){
                        $([document.documentElement, document.body]).animate({
                            scrollTop: $(div).offset().top
                        }, 2000);
                    }
                }
                function getAveragePrice(price) {
                    //console.log('price',price)
                    //console.log(price,formatAverage)
                    if(!price){return}
                    var p=price*global.get('rate').val
                    p=(Math.round(p*100))/100
                    //console.log(p)
                    if(formatAverage){
                        if(formatAverage==4){
                            p= (Math.round(p/100))*100
                        }else if(formatAverage==3){
                            p= (Math.round(p/10))*10
                        }else if(formatAverage==2){
                            p= Math.round(p)
                        }else if(formatAverage==1){
                            p= (Math.round(p*10))/10
                        }
                    }
                    return p;

                }



                function getMastersName() {
                    self.stuff.masters=[]
                    global.get('masters').val.forEach(function (m) {
                        if(m.stuffs && m.stuffs.length){
                            if(m.stuffs.indexOf(self.stuff._id)>-1){
                                var o ={
                                    name:m.name,
                                    url:m.url,
                                }
                                self.stuff.masters.push(o)
                            }
                        }
                    })
                }
                function chancheActiveSlide(index,swipe){
                    //console.log(index,swipe)
                    if(slideDelay){return}
                    slideDelay=true
                    $timeout(function () {
                        slideDelay=false
                    },700)
                    //https://stackoverflow.com/questions/30300737/angular-ui-trigger-events-on-carousel
                    if(swipe){
                        var carousel=$element.find('.gallery-carousel')
                        if(swipe=='left'){
                            if(carousel && carousel.isolateScope && typeof carousel.isolateScope=='function'){
                                carousel.isolateScope().next();
                            }

                            //index = (self.activeSlide<self.item.gallery.length-1)?self.activeSlide+1:0;
                        }else if(swipe=='right'){
                            if(carousel && carousel.isolateScope && typeof carousel.isolateScope=='function'){
                                carousel.isolateScope().prev();
                            }

                            // index = (self.activeSlide>0)?self.activeSlide-1:self.item.gallery.length-1;
                        }
                    }else{
                        self.activeSlide=index;self.item.gallery[index].active=true;
                    }
                    //console.log(index)



                }
                function decreaseQty(){
                    var stuff=self.item;
                    if(stuff && stuff.quantity>1){
                        if(stuff.multiple && stuff.minQty){
                            if(stuff.quantity-1>=stuff.minQty){
                                stuff.quantity--
                            }
                        }else{
                            stuff.quantity--
                        }

                    }
                }
                function increaseQty(){
                    var stuff=self.item;
                    if(stuff) {
                        if(stuff.single && stuff.maxQty){
                            if (stuff.quantity + 1 <= stuff.maxQty) {
                                stuff.quantity++
                            }
                        }else{
                            stuff.quantity++
                        }


                    }
                }
                function chancheStuff(item) {
                    self.item.gallery=item.gallery;
                    self.activeSlide=0;
                    getStuff(item.url)
                }
                function getComments(page){
                    if(page===0){self.paginate.page=page}else if(page==='more'){
                        self.paginate.page++;
                    }
                    var query={stuff:self.item._id}
                    //console.log(self.paginate)
                    return Comments.getList(self.paginate,query)
                        .then(function(data) {
                            if(self.paginate.page){
                                self.item.comments.push.apply(self.item.comments,data);
                            }else{
                                self.item.comments=data
                            }
                            //console.table(data)
                            return;
                        })
                        .catch(function(err){
                            err = err.data||err
                            exception.catcher('получение комментариев')(err)
                        });
                }

                $scope.$on('logged',function () {
                    self.commentName=(global.get('user').val)?global.get('user').val.name||global.get('user').val.profile.fio:''
                    //console.log(self.commentName)
                })
                function getStuff(url) {
                    //console.log(url)



                    //console.log(JSON.stringify(self.item.stockKeysArray))
                    var leftRow =  $('#stuffDetailLeftClass');
                    var rightRow = $('#stuffDetailRightClass')
                    return  $q.when()
                        .then(function(){
                            var o;
                            if($stateParams.store){
                                o={}
                                o.store=$stateParams.store;
                            }
                            return  Stuff.getItem(url,o)
                        })
                        .then(function(item){

                            self.gallery=item.gallery
                            //console.log(item.gallery)
                            if(item.grid!=null && item.grid!=undefined){
                                item.leftClass =ratioClassStuffDetail[item.grid]['left']
                                item.rightClass=ratioClassStuffDetail[item.grid]['right']
                            }else{
                                item.leftClass =ratioClassStuffDetail[global.get('store').val.template.stuffDetailType[global.get('sectionType').val].ratio]['left']
                                item.rightClass=ratioClassStuffDetail[global.get('store').val.template.stuffDetailType[global.get('sectionType').val].ratio]['right']
                            }
                            if(!self.item){
                                leftRow.removeAttr('class')
                                rightRow.removeAttr('class')
                            }else if(self.item.leftClass!=item.leftClass){
                                leftRow.removeAttr('class')
                            }else if(self.item.rightClass!=item.rightClass){
                                rightRow.removeAttr('class')
                            }

                            self.objShare=seoContent.setDataItem(item);


                            $rootScope.$broadcast('reloadGallery')

                            // https://github.com/angular/angular.js/issues/3613 .repeat-modify
                            for(var key in self.item){
                                if(key!='gallery' && key!='sortsOfStuff'){
                                    if(item[key] && typeof item[key]!='function'){
                                        self.item[key]=item[key];

                                    }else{
                                        delete self.item[key]
                                    }
                                }
                            }
                            for(var key in item){
                                //console.log(item.desc)
                                if(key!='gallery' && key!='sortsOfStuff' && !self.item[key]){
                                    self.item[key]=item[key];
                                }
                            }
                            self.activeSlide=0
                            //$anchorScroll();
                            if(item.sortsOfStuff && item.sortsOfStuff.stuffs && item.sortsOfStuff.stuffs.length){
                                var filterGroup,filterGroupTags=[];
                                if(item.sortsOfStuff.filterGroup){
                                    filterGroup= _filtersO[item.sortsOfStuff.filterGroup]
                                    if(filterGroup){
                                        filterGroupTags=filterGroup.tags.map(function(t){return t._id})
                                    }
                                }
                                item.sortsOfStuff.stuffs.forEach(function (stuff,i) {
                                    stuff.gallery.forEach(function (s,ii) {
                                        if(!ii){
                                            s.active=true
                                        }else{
                                            s.active=false
                                        }
                                    })
                                    for(var ii=0;ii<stuff.tags.length;ii++){
                                        var idx=filterGroupTags.indexOf(stuff.tags[ii]);
                                        if(idx>-1){
                                            if(filterGroup.tags[idx].img){
                                                item.sortsOfStuff.stuffs[i].gallery[0].thumbSmallTag=filterGroup.tags[idx].img
                                            }
                                            break;
                                        }
                                    }
                                })
                                self.item.sortsOfStuff=item.sortsOfStuff
                            }
                            setComments()
                            /*if(self.item.addInfo){
                                return getAddInfos();
                            }*/
                        })
                        .then(function () {
                            $timeout(function(){
                                $rootScope.$emit('$stateChangeEndToStuff');
                            },300)
                        })
                        .then(function () {
                            //console.log(global.get('filters').val)
                            self.item.FullTags=self.item.tags.map(function(t){
                                if(t){
                                    t = angular.copy(global.get('filterTags').val.getOFA('_id',t))
                                    if(t){
                                        if(t.filter && !t.filter._id){
                                            t.filter=global.get('filters').val.getOFA('_id',t.filter)
                                        }
                                        return t;
                                    }
                                }
                                return null
                            })
                            var likes  = localStorage.get(subDomain+'-likes');
                            if(likes && likes.length && likes.some(function(s){return s ===$scope.stuff._id})){
                                $scope.stuff.inLikes=true
                            }else {
                                $scope.stuff.inLikes=false
                            }
                        })
                        .then(function () {
                            //prepareStuffList()
                            //console.log(self.item.addInfo)
                        })
                        .catch(function(err){
                            console.log(err)
                            err = err.data||err
                            exception.catcher('получение товара')(err)
                        })
                }
                function setComments() {
                    if(global.get('store').val.disqus){
                        self.disqusConfig={
                            disqus_shortname: global.get('store').val.disqus,
                            disqus_identifier: self.item._id,
                            disqus_url: $location.absUrl(),
                            disqus_title:self.item.name,
                            disqus_config_language:global.get('store').val.lang,
                        }
                        var u = self.disqusConfig.disqus_url.split('/')
                        u[u.length-1]=self.item.url
                        self.disqusConfig.disqus_url=u.join('/')
                    }else{
                        self.getComments(0);
                        self.commentName=(global.get('user').val)?global.get('user').val.name||global.get('user').val.profile.fio:''
                        //console.log(global.get('user').val,self.commentName)
                    }
                }
                function prepareStuffList() {
                    // создание последовательности для перелистывания товаров
                    if(global.get('stuffsInList').val){
                        maxNumInRow=0;
                        stuffsInList=[];
                        currentStuffInList=0;
                        for(var k in global.get('stuffsInList').val){
                            if(global.get('stuffsInList').val[k].length && global.get('stuffsInList').val[k].length>maxNumInRow){
                                maxNumInRow=global.get('stuffsInList').val[k].length;
                            }
                        }
                        for(var j=0;j<maxNumInRow;j++){
                            for(var i=1;i<=6;i++){
                                if(global.get('stuffsInList').val['td-list-'+i] && global.get('stuffsInList').val['td-list-'+i].length && global.get('stuffsInList').val['td-list-'+i][j]){
                                    stuffsInList.push(global.get('stuffsInList').val['td-list-'+i][j])
                                }
                            }
                        }

                        for(var i=0;i<stuffsInList.length;i++){
                            if(self.item && self.item._id==stuffsInList[i]._id){
                                currentStuffInList=i;
                                break;
                            }
                        }
                    }
                }

                $scope.$on('addBlockAfterScrollDone',function () {
                    //console.log('addBlockAfterScrollDone')
                    prepareStuffList()
                    nextStuff()
                })

                function nextStuff() {
                    //console.log('nextStuff',stuffsInList)
                    if(slideDelay){return}
                    slideDelay=true
                    $timeout(function () {
                        slideDelay=false
                    },150)
                    //console.log(currentStuffInList,stuffsInList.length-1)
                    if(currentStuffInList<stuffsInList.length-1){
                        currentStuffInList++
                        //console.log('currentStuffInList++',currentStuffInList)
                        if(stuffsInList && stuffsInList[currentStuffInList]){
                            self.item=stuffsInList[currentStuffInList]
                        }
                    }else{
                        //console.log('addBlockAfterScroll')
                        $rootScope.$broadcast('addBlockAfterScroll')

                    }
                }

                function prevStuff() {
                    //console.log('prevStuff')
                    if(slideDelay){return}
                    slideDelay=true
                    $timeout(function () {
                        slideDelay=false
                    },700)
                    if(currentStuffInList>0){
                        currentStuffInList--
                    }
                    if(stuffsInList && stuffsInList[currentStuffInList]){
                        self.item=stuffsInList[currentStuffInList]
                    }
                }
                function returnToList() {
                    window.history.back()
                    //$rootScope.$state.go('stuffs')
                }

                function getTagName(tag){
                    if(tag){
                        return global.get('filterTagsO').val[tag].name;
                    }
                }
                function getFilterName(filter){
                    if(filter){
                        return global.get('filtersO').val[filter].name;
                    }
                }


                var likes  = localStorage.get(subDomain+'-likes');
                if(likes && likes.length && likes.some(function(s){return s ===$scope.stuff._id})){
                    $scope.stuff.inLikes=true
                }else {
                    $scope.stuff.inLikes=false
                }
                function addToLikes($event) {
                    $event.stopPropagation()
                    console.log('addToLikes')
                    likes  = localStorage.get(subDomain+'-likes');
                    //console.log(likes)
                    if(!likes){
                        likes=[];
                    }
                    var i = likes.indexOf($scope.stuff._id);
                    if(i>-1){
                        $scope.stuff.inLikes=false;
                        likes.splice(i,1);
                    }else{
                        $scope.stuff.inLikes=true;
                        likes.push($scope.stuff._id);
                    }
                    localStorage.set(subDomain+'-likes', likes);
                    $rootScope.likes.totalCount=likes.length;
                }



                getMastersName();

                setComments()







                //$animate.enabled(false);
                $scope.$on('$destroy',
                    function() {
                        $animate.enabled(true);
                    });
            },
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                $timeout(function () {
                    if(global.get('stuffsInList').val){
                        if(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id && global.get('stuffsInList').val[element[0].parentElement.parentElement.id]){
                            global.get('stuffsInList').val[element[0].parentElement.parentElement.id].push(scope.stuff)
                        }
                    }

                    transclude(scope, function(clone) {
                        element.append(clone);
                        //console.log(scope.stuff)
                        try{
                            if(window.videojs){
                                var vv = document.getElementsByClassName("mainVideo");
                                if(vv[0]) {
                                    videojs(vv[0], {
                                        "fluid": true,
                                        "techOrder": ["vimeo"],
                                        "sources": [{ "type": "video/vimeo", "src": scope.stuff.videoLink}],
                                        "vimeo": { "color": "#fbc51b"}
                                    }, function () {
                                    });
                                }
                                var videoTizer = document.getElementsByClassName("videoTeaser");
                                if(videoTizer[0]){
                                    videojs(videoTizer[0], {"fluid": true,controls: true}, function () {
                                    });
                                }
                                var videoPreview = document.getElementsByClassName("videoPreview");
                                if(videoPreview[0]){
                                    videojs(videoPreview[0], {"fluid": true,controls: true}, function () {
                                    });
                                }
                                /*videojs(scope.stuff._id+"video", {}, function(){
                                });*/


                                //console.log('window.videojs',window.videojs)
                                //console.log(document.getElementsByClassName("video-js")[0])
                                /*var vv = document.getElementsByClassName("video-js");
                                if(vv[0]){
                                    videojs(vv[0], {
                                        controls: true,
                                        plugins: {
                                            videoJsResolutionSwitcher: {
                                                default: 'high',
                                                dynamicLabel: true
                                            }
                                        }
                                    }, function(){
                                        var player = this;
                                        var arr = [];
                                        if(scope.stuff.videoLink2){
                                            arr.push({
                                                src: scope.stuff.videoLink2,
                                                type: 'video/mp4',
                                                label: 'SD',
                                                res: 360
                                            })
                                        }
                                        if(scope.stuff.videoLink){
                                            arr.push({
                                                src: scope.stuff.videoLink,
                                                type: 'video/mp4',
                                                label: 'HD',
                                                res: 720
                                            })
                                        }
                                        player.updateSrc(arr)

                                        console.log(arr)

                                        player.on('resolutionchange', function(){
                                            console.info('Source changed to %s', player.src())
                                        })
                                    })
                                }*/


                                //var videoTizer = document.getElementsByClassName("videoTeaser");
                                /*var videoT = videojs("videoTeaser");
                                if(videoT && videoT.src && scope.stuff.video.link){
                                    videoT.src(scope.stuff.video.link);
                                }*/
                                //console.log(videoTizer)
                                /*if(videoTizer[0]){
                                    videojs(videoTizer[0], {
                                        controls: true,
                                        plugins: {
                                            videoJsResolutionSwitcher: {
                                                default: 'high',
                                                dynamicLabel: true
                                            }
                                        }
                                    }, function(){
                                        var playerT = this;
                                        window.playerT = playerT;
                                        var arr = [];
                                        //console.log(scope.stuff)
                                        if(scope.stuff.video){
                                            arr.push({
                                                src: scope.stuff.video.link,
                                                type: 'video/mp4',
                                            })
                                        }

                                        playerT.updateSrc(arr)
                                    })
                                }


*/

                                /*var videoP = videojs("videoPreview");
                                if(videoP && videoP.src && scope.stuff.video1.link){
                                    videoP.src(scope.stuff.video1.link);
                                }*/

                                /*var videoPreview = document.getElementsByClassName("videoPreview");
                                if(videoTizer[0]){
                                    videojs(videoPreview[0], {
                                        controls: true,
                                        plugins: {
                                            videoJsResolutionSwitcher: {
                                                default: 'high',
                                                //dynamicLabel: true
                                            }
                                        }
                                    }, function(){
                                        var playerP = this;
                                        window.playerP = playerP;
                                        var arr = [];
                                        //console.log(scope.stuff)
                                        if(scope.stuff.video1){
                                            arr.push({
                                                src: scope.stuff.video1.link,
                                                type: 'video/mp4',
                                            })
                                        }

                                        playerP.updateSrc(arr)
                                    })
                                }*/



                                /* videojs(document.getElementsByClassName("video-js")[0], {}, function(){

                                 });*/
                                //afterglow.init()
                            }
                            if(window.afterglow){
                                //console.log(afterglow)
                                //http://afterglowplayer.com/
                                //https://blog.bitsrc.io/5-open-source-html5-video-players-for-2018-38fa85932afb
                               //afterglow.init()
                                /*var play= $('.icon-videoplay-img');
                                 console.log(play)
                                 $(play).click(function () {
                                 console.log(this)
                                 })*/
                            }
                        }catch(err){
                            console.log(err)
                        }


                    });


                },200)




            }

        }
    }


    galleryСarouselCtrl.$inject=['$scope','$timeout','$element','$compile','global']
    function galleryСarouselCtrl($scope,$timeout,$element,$compile,global){
        console.log('galleryСarouselCtrl')
        var self = this;
        self.prev=prev;
        self.next=next;
        self.moment=moment;
        self.global=global;
        this.$onInit = function(){
            $timeout(function () {
                var navLeft=$element.find('.nav-left')
                $(navLeft).click(function () {prev()})
                var navRight=$element.find('.nav-right')
                $(navRight).click(function () {next()})
            },100)
        }
        function prev() {
            console.log('prev')
        }
        function next() {
            console.log('next')
        }
    }


})()



'use strict';
angular.module('gmall.directives')
    .directive('filterForStuffs',['$rootScope','global','$q','$location','$section','Collection','Sections','Filter','FilterTags','Brands','Category',function($rootScope,global,$q,$location,$section,Collection,Sections,Filter,FilterTags,Brands,Category){
    return {
        scope:{
           query:'=',
            section:'=',
            admin:'@'

        },
        restrict:"E",
        templateUrl:"components/stuff/filterForStuffs.html",
        link:function($scope,element,attrs){
            console.log('??????????????')
            var $state=$rootScope.$state;
            var $stateParams=$rootScope.$stateParams;
            $scope.filterDirective={};
            $scope.filterDirective.query={section:'',brand:'',category:'',tags:[],artikul:($stateParams.searchStr)?$stateParams.searchStr.clearTag(20):'',brandTag:''};
            function getTagFromCategoriesList(tag,field){
                var category=$scope.filterDirective.category;
                if(category && category.filters && category.filters.length){
                    for (var ii= 0,ll=category.filters.length;ii<ll;ii++){
                        var filter=category.filters[ii];
                        if(filter && filter.tags && filter.tags.length){
                            for (var iii= 0,lll=filter.tags.length;iii<lll;iii++){
                                if(filter.tags[iii][field]==tag){
                                    return filter.tags[iii];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            function _setBrand(brandId,filed){
                if(brandId && $scope.filterDirective.brands){
                    $scope.filterDirective.brand =  $scope.filterDirective.brands.getObjectFromArray(filed,brandId);

                    //console.log($scope.filterDirective.brand)
                    if ($scope.filterDirective.brand){
                        $scope.filterDirective.query.brand=$scope.filterDirective.brand._id;
                        $location.search('brand',$scope.filterDirective.brand.url);
                        // установка коллекций
                        $scope.filterDirective.brandCollections=$scope.filterDirective.brand.tags;
                    } else {
                        $scope.filterDirective.brandCollections=[];
                        $location.search('brand',null);
                    }
                }else{
                    $scope.filterDirective.brandCollections=[];
                    $location.search('brand',null);
                }

            }
            function _setBrandTag(brandTagId,filed){
                // если установлена коллекция
                if (brandTagId && $scope.filterDirective.brandCollections){
                    // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                    var brandTag=$scope.filterDirective.brandCollections.getObjectFromArray(filed,brandTagId);
                    if(brandTag){
                        $scope.filterDirective.query.brandTag=brandTag._id;
                        $location.search('brandTag',brandTag.url);
                    } else {
                        $location.search('brandTag',null);
                    }
                } else {
                    $location.search('brandTag',null);
                }
            }
            function _setFilterTagsUrl(){
                if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                    var queryTag = $scope.filterDirective.filterTags.map(function(tag){return tag.url} ).join('+');
                    $location.search('queryTag', queryTag|| null);
                }else{
                    $location.search('queryTag', null);
                }

            }
            function _getQueryTag(){
                var arr =[];
                $scope.filterDirective.query.tags.forEach(function(tags){
                    if (tags.length){
                        tags.forEach(function(tag){
                            arr.push(tag)
                        })
                    }
                })
                return arr;
            }
            //для сео
            function _getFilterTag(){
                var arr =_getQueryTag();
                if(arr.length){
                    return arr.map(function(tag){return $scope.filterDirective.filterTags.getObjectFromArray('_id',tag).url}).join('+')
                }else{
                    return ;
                }
            }
            function _getBrand(id){
                if ($scope.filterDirective.query.brand){
                    $scope.filterDirective.brand = $scope.filterDirective.brands.getObjectFromArray('_id',$scope.filterDirective.query.brand);
                    return $scope.filterDirective.brand.url
                }

            }
            function _getBrandTag(){
                if ($scope.filterDirective.query.brandTag){
                    return $scope.filterDirective.brandCollections.getObjectFromArray('_id',$scope.filterDirective.query.brandTag).url;
                }

            }
            //*********************
            // определяем в каком состоянии мы находимся. в разделе, категории или всем каталоге
            // затем устанавливаем параметры  в строку запроса если они соответствую  нащей логике
            // затем вызываем функцию получения списка
            // затем начинаем слущать клик на любом из фильтров
            // в функции $scope.filterDirective.changeFilter
            // если клик на категории то перегружаем контроллер если на фильтре то делаем запрос на новый список
            //*****************************************
            $q.when()
                .then(function(){
                    return Sections.getSections()
                }) // полчение списка разделов
                .then(function(sections){
                    //**************************************** Г Р У П П А   ********************************************
                    var q=$q.defer();
                    // группы категорий
                    if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                        // получение раздела
                        if($stateParams.parentGroup){
                            $scope.parentSection=Sections.getParentSection($stateParams.parentGroup);
                        }else{
                            $scope.parentSection=Sections.getParentSection($stateParams.groupUrl);
                        }
                        // получение списка категорий
                        //$scope.filterDirective.sectionCategories -- для получения списка категорий в запросе
                        //**************************************** К А Т Е Г О Р И Я  ********************************************
                        // получение выбранной категории
                        // основной шаг. от него отталкиваемся. есть категория в запросе или нет
                        // для получения брендов и фильтров
                        // если есть
                        if($stateParams.categoryList=='allCategories' || $stateParams.categoryUrl!='category'){
                            $scope.filterDirective.categories=$scope.parentSection.categories;
                            $scope.filterDirective.sectionCategories=$scope.filterDirective.categories.map(function(el){return el._id})
                            if($stateParams.categoryUrl!='category'){
                                Category.get({id:$stateParams.categoryUrl},function(res){
                                    $scope.filterDirective.query.category=res._id;
                                    $scope.filterDirective.category=res;
                                    // устанавливаем список брендов
                                    if ($scope.filterDirective.category.brands && $scope.filterDirective.category.brands.length){
                                        $scope.filterDirective.brands=$scope.filterDirective.category.brands;
                                    }
                                    q.resolve();
                                })

                                //$scope.filterDirective.query.category=
                                   // $scope.filterDirective.categories.getObjectFromArray('url',$stateParams.categoryUrl)._id;
                            }else {
                                q.resolve();
                            }
                        }else{
                            //console.log($scope.parentSection)
                            $scope.filterDirective.sectionCategories=Sections.getEmbededCategories($scope.parentSection,[])
                                .map(function(el){return el._id})
                            //console.log($scope.filterDirective.sectionCategories)
                            // у раздела нет вложенных категорий соответственно нет товаров
                            if(!$scope.filterDirective.sectionCategories.length){
                                $scope.filterDirective.sectionCategories=[null];
                            }
                            q.resolve();
                        }
                    } else {
                        q.resolve();
                    }
                    return q.promise;
                })// категория
                .then(function(){
                    console.log($scope.filterDirective.brands)
                    var q=$q.defer();
                    if($stateParams.brand && !$scope.filterDirective.brands){
                        Brands.query(function(res){
                            res.shift();
                            $scope.filterDirective.brands=res;
                            q.resolve();
                        })
                    }else{
                        q.resolve();
                    }
                    return q.promise;
                })
                .then(function(){
                    //****************************************Б Р Е Н Д   ********************************************
                    //**************************************** К О Л Л Е К Ц И И  ********************************************
                    _setBrand($stateParams.brand,'url')
                    _setBrandTag($stateParams.brandTag,'url');
                    return;
                })// end brand && collections
                .then(function(){

                    var q=$q.defer();
                    //**************************************** Т Е Г И  ********************************************
                    // получение тегов если они есть в параметрах в массив
                    //для дальнейщей установки в визуальных фильтрах
                    if($stateParams.queryTag){
                        // анализ url на наличие тегов*************
                        var queryTags=$stateParams.queryTag.split('+');
                        // удаляем возможные дубли
                        queryTags= queryTags.filter(function(item, pos) {
                            return queryTags.indexOf(item) == pos;
                        })
                        if($scope.filterDirective.categories){
                            $scope.filterDirective.filterTags=queryTags.map(function(tag){
                                return getTagFromCategoriesList(tag,'url')
                            }).filter(function(tag){return tag})
                            q.resolve()
                        }else{
                            /*var o={query:{$or:[]}};
                            queryTags.forEach(function(tag){
                                o.query.$or.push({url:tag})
                            })

                            FilterTags.query(o,function(res){
                                res.shift();
                                $scope.filterDirective.filterTags=res;
                                q.resolve()
                            })*/
                            FilterTags.getTagsByUrl(queryTags,function(res){
                                $scope.filterDirective.filterTags=res;
                                q.resolve()
                            })
                        }
                    }else{
                        q.resolve()
                    }
                    return q.promise;
                }) // end tags
                .then(function(){

                    _setFilterTagsUrl()
                    return;
                })// установка урл тегов
                .then(function(){
                    //**************************************** Ф И Л Ь Т Р Ы ********************************************
                    // установка списка и значений
                    if ($scope.filterDirective.query.category && $scope.filterDirective.category){
                        if ($scope.filterDirective.category.filters && $scope.filterDirective.category.filters.length){
                            $scope.filterDirective.category.filters.forEach(function(item,i){
                                // устанавливаем значения в фильтрах
                                if ($scope.filterDirective.filterTags &&  $scope.filterDirective.filterTags.length){
                                    $scope.filterDirective.filterTags.forEach(function(tag){
                                        if (tag.filter==item._id){
                                            if (!$scope.filterDirective.query.tags[i]){$scope.filterDirective.query.tags[i]=[]};
                                            $scope.filterDirective.query.tags[i].push(tag._id);
                                        }
                                    })
                                }
                            })
                            $scope.filterDirective.filters=$scope.filterDirective.category.filters;
                        }
                    } else {
                        if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                            $scope.filterDirective.query.tags[0]=[];
                            $scope.filterDirective.filterTags.forEach(function(tag){$scope.filterDirective.query.tags[0].push(tag._id)})
                        }
                    }
                    return
                })// фильтры
                .then(function(){
                    $scope.filterDirective.getQuery()
                })
                .catch(function(err){
                    console.log(err)
                })





            $scope.filterDirective.getQuery=function(){
                // формирование строки запроса для выбора  товаров из БД
                var query=[];
                if (global.get('nostore').val){
                    query.push({tags:{$nin:[global.get('nostore').val._id]}})
                }
                //console.log($scope.filterDirective.query)
                var queryTag=[];
                for (var key in $scope.filterDirective.query){
                    if ($scope.filterDirective.query[key]){
                        if (key=="tags"){
                            var qu=[];
                            var queryTags=$scope.filterDirective.query[key].filter(function(){return true});
                            //console.log(queryTags);
                            $scope.filterDirective.query[key].forEach(function(obj,i){
                                //console.log(i)
                                var q=[];
                                if (obj && obj.length){
                                    obj.forEach(function(objT){
                                        q.push({tags:objT});
                                    })

                                    if (q.length>1){
                                        q={$or:q}
                                        qu.push(q)
                                    } else {
                                        q=q[0];
                                        qu.push(q)
                                    }
                                }
                            })
                            if (qu.length){
                                if(qu.length==1){
                                    query.push(qu[0]);
                                } else {
                                    query.push({$and:qu});
                                }
                            }
                        } else {
                            //console.log();
                            var obj={};
                            obj[key]=$scope.filterDirective.query[key];
                            query.push(obj);
                        }
                    } else{
                        if(key=='category' && $scope.filterDirective.sectionCategories && $scope.filterDirective.sectionCategories.length){
                            var obj={};
                            obj['category']={$in:$scope.filterDirective.sectionCategories}
                            query.push(obj);
                        }
                    }
                }
                if (query.length==1){
                    query=JSON.stringify(query[0]);
                } else if(query.length>1){
                    query =JSON.stringify({$and:query});
                } else {
                    query={};
                }
                // передача данных в директиву
                $scope.query=query;
                return;
                //********* start titles
                var filterTag=_getfilterTag();
                var brandTag=_getBrandTag();
                var brand=_getBrand();
                var queryTagsForSEO='';
                if (filterTag) {
                    queryTagsForSEO+='queryTag='+queryTag;
                }
                if (brand) {
                    if(queryTagsForSEO){queryTagsForSEO+='&';}
                    queryTagsForSEO+='brand='+brand;
                }
                if (brandTag) {
                    if(queryTagsForSEO){queryTagsForSEO+='&';}
                    queryTagsForSEO+='brandTag='+brandTag;
                }
                console.log(queryTagsForSEO)
                $rootScope.$broadcast('$allDataLoaded',{state:$state.current.name,data:queryTagsForSEO});

            }
            $scope.filterDirective.changeFilter=function(reloadController){
                if (reloadController){
                    if ($scope.filterDirective.category && $scope.filterDirective.query.category==$scope.filterDirective.category._id){return}
                    if($scope.filterDirective.query.category){
                        var categoryUrl=$scope.filterDirective.categories.getObjectFromArray('_id',$scope.filterDirective.query.category);
                        categoryUrl=(categoryUrl)?categoryUrl.url:'category';
                        $location.search('categoryList', null);
                    }else{
                        var categoryUrl='category';
                        $location.search('categoryList', 'allCategories');
                    }
                    $state.current.reloadOnSearch = true;
                    var o={groupUrl:$stateParams.groupUrl,categoryUrl:categoryUrl,queryTag:undefined,brand:undefined,brandTag:undefined};
                    $state.go($state.current.name,o,{reload:true});
                    $state.current.reloadOnSearch = false;
                }else{
                    $scope.filterDirective.query.artikul='';
                    _setBrand($scope.filterDirective.query.brand,'_id');
                    _setBrandTag($scope.filterDirective.query.brandTag,'_id');
                    $scope.filterDirective.filterTags=_getQueryTag().map(function(tag){
                        return getTagFromCategoriesList(tag,'_id')
                    } ).filter(function(tag){return tag})
                    _setFilterTagsUrl()
                    $scope.filterDirective.getQuery();
                }
            }
            $scope.filterDirective.clearFilter=function(){
                console.log('clear filetrs')
                $scope.filterDirective.query.tags=[];
                $scope.filterDirective.changeFilter();
            }
        }
    }
}])
    .directive('filterForStuffsClinic',['$rootScope','global','$q','$location','$section','Collection','Sections','Filter','FilterTags','Brands','Category',function($rootScope,global,$q,$location,$section,Collection,Sections,Filter,FilterTags,Brands,Category){
        return {
            scope:{
                query:'=',
                section:'=',
                admin:'@'

            },
            restrict:"E",
            templateUrl:"views/clinic/partials/stuff/filterForStuffs.html",
            link:function($scope,element,attrs){
                var $state=$rootScope.$state;
                var $stateParams=$rootScope.$stateParams;
                $scope.filterDirective={};
                $scope.filterDirective.query={section:'',brand:'',category:'',tags:[],artikul:($stateParams.searchStr)?$stateParams.searchStr.clearTag(20):'',brandTag:''};
                function getTagFromCategoriesList(tag,field){
                    var category=$scope.filterDirective.category;
                    if(category && category.filters && category.filters.length){
                        for (var ii= 0,ll=category.filters.length;ii<ll;ii++){
                            var filter=category.filters[ii];
                            if(filter && filter.tags && filter.tags.length){
                                for (var iii= 0,lll=filter.tags.length;iii<lll;iii++){
                                    if(filter.tags[iii][field]==tag){
                                        return filter.tags[iii];
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                function _setBrand(brandId,filed){
                    if(brandId && $scope.filterDirective.brands){
                        $scope.filterDirective.brand =  $scope.filterDirective.brands.getObjectFromArray(filed,brandId);

                        //console.log($scope.filterDirective.brand)
                        if ($scope.filterDirective.brand){
                            $scope.filterDirective.query.brand=$scope.filterDirective.brand._id;
                            $location.search('brand',$scope.filterDirective.brand.url);
                            // установка коллекций
                            $scope.filterDirective.brandCollections=$scope.filterDirective.brand.tags;
                        } else {
                            $scope.filterDirective.brandCollections=[];
                            $location.search('brand',null);
                        }
                    }else{
                        $scope.filterDirective.brandCollections=[];
                        $location.search('brand',null);
                    }

                }
                function _setBrandTag(brandTagId,filed){
                    // если установлена коллекция
                    if (brandTagId && $scope.filterDirective.brandCollections){
                        // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                        var brandTag=$scope.filterDirective.brandCollections.getObjectFromArray(filed,brandTagId);
                        if(brandTag){
                            $scope.filterDirective.query.brandTag=brandTag._id;
                            $location.search('brandTag',brandTag.url);
                        } else {
                            $location.search('brandTag',null);
                        }
                    } else {
                        $location.search('brandTag',null);
                    }
                }
                function _setFilterTagsUrl(){
                    if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                        var queryTag = $scope.filterDirective.filterTags.map(function(tag){return tag.url} ).join('+');
                        $location.search('queryTag', queryTag|| null);
                    }else{
                        $location.search('queryTag', null);
                    }

                }
                function _getQueryTag(){
                    var arr =[];
                    $scope.filterDirective.query.tags.forEach(function(tags){
                        if (tags.length){
                            tags.forEach(function(tag){
                                arr.push(tag)
                            })
                        }
                    })
                    return arr;
                }
                //для сео
                function _getFilterTag(){
                    var arr =_getQueryTag();
                    if(arr.length){
                        return arr.map(function(tag){return $scope.filterDirective.filterTags.getObjectFromArray('_id',tag).url}).join('+')
                    }else{
                        return ;
                    }
                }
                function _getBrand(id){
                    if ($scope.filterDirective.query.brand){
                        $scope.filterDirective.brand = $scope.filterDirective.brands.getObjectFromArray('_id',$scope.filterDirective.query.brand);
                        return $scope.filterDirective.brand.url
                    }

                }
                function _getBrandTag(){
                    if ($scope.filterDirective.query.brandTag){
                        return $scope.filterDirective.brandCollections.getObjectFromArray('_id',$scope.filterDirective.query.brandTag).url;
                    }

                }
                //*********************
                // определяем в каком состоянии мы находимся. в разделе, категории или всем каталоге
                // затем устанавливаем параметры  в строку запроса если они соответствую  нащей логике
                // затем вызываем функцию получения списка
                // затем начинаем слущать клик на любом из фильтров
                // в функции $scope.filterDirective.changeFilter
                // если клик на категории то перегружаем контроллер если на фильтре то делаем запрос на новый список
                //*****************************************
                $q.when()
                    .then(function(){
                        return Sections.getSections()
                    }) // полчение списка разделов
                    .then(function(sections){
                        //**************************************** Г Р У П П А   ********************************************
                        var q=$q.defer();
                        // группы категорий
                        if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                            // получение раздела
                            if($stateParams.parentGroup){
                                $scope.parentSection=Sections.getParentSection($stateParams.parentGroup);
                            }else{
                                $scope.parentSection=Sections.getParentSection($stateParams.groupUrl);
                            }
                            // получение списка категорий
                            //$scope.filterDirective.sectionCategories -- для получения списка категорий в запросе
                            //**************************************** К А Т Е Г О Р И Я  ********************************************
                            // получение выбранной категории
                            // основной шаг. от него отталкиваемся. есть категория в запросе или нет
                            // для получения брендов и фильтров
                            // если есть
                            if($stateParams.categoryList=='allCategories' || $stateParams.categoryUrl!='category'){
                                $scope.filterDirective.categories=$scope.parentSection.categories;
                                $scope.filterDirective.sectionCategories=$scope.filterDirective.categories.map(function(el){return el._id})
                                if($stateParams.categoryUrl!='category'){
                                    Category.get({id:$stateParams.categoryUrl},function(res){
                                        $scope.filterDirective.query.category=res._id;
                                        $scope.filterDirective.category=res;
                                        // устанавливаем список брендов
                                        if ($scope.filterDirective.category.brands && $scope.filterDirective.category.brands.length){
                                            $scope.filterDirective.brands=$scope.filterDirective.category.brands;
                                        }
                                        console.log($scope.filterDirective.brands)
                                        q.resolve();
                                    })

                                    //$scope.filterDirective.query.category=
                                    // $scope.filterDirective.categories.getObjectFromArray('url',$stateParams.categoryUrl)._id;
                                }else {
                                    q.resolve();
                                }
                            }else{
                                //console.log($scope.parentSection)
                                $scope.filterDirective.sectionCategories=Sections.getEmbededCategories($scope.parentSection,[])
                                    .map(function(el){return el._id})
                                //console.log($scope.filterDirective.sectionCategories)
                                // у раздела нет вложенных категорий соответственно нет товаров
                                if(!$scope.filterDirective.sectionCategories.length){
                                    $scope.filterDirective.sectionCategories=[null];
                                }
                                q.resolve();
                            }
                        } else {
                            q.resolve();
                        }
                        return q.promise;
                    })// категория
                    /*.then(function(){

                    })*/
                    .then(function(){
                        var q=$q.defer();
                        if($stateParams.brand && !$scope.filterDirective.brands){
                            Brands.query(function(res){
                                res.shift();
                                $scope.filterDirective.brands=res;
                                q.resolve();
                            })
                        }else{
                            q.resolve();
                        }
                        return q.promise;
                    })
                    .then(function(){
                        //****************************************Б Р Е Н Д   ********************************************
                        //**************************************** К О Л Л Е К Ц И И  ********************************************
                        _setBrand($stateParams.brand,'url')
                        _setBrandTag($stateParams.brandTag,'url');
                        return;
                    })// end brand && collections
                    .then(function(){

                        var q=$q.defer();
                        //**************************************** Т Е Г И  ********************************************
                        // получение тегов если они есть в параметрах в массив
                        //для дальнейщей установки в визуальных фильтрах
                        if($stateParams.queryTag){
                            // анализ url на наличие тегов*************
                            var queryTags=$stateParams.queryTag.split('+');
                            // удаляем возможные дубли
                            queryTags= queryTags.filter(function(item, pos) {
                                return queryTags.indexOf(item) == pos;
                            })
                            if($scope.filterDirective.categories){
                                $scope.filterDirective.filterTags=queryTags.map(function(tag){
                                    return getTagFromCategoriesList(tag,'url')
                                }).filter(function(tag){return tag})
                                q.resolve()
                            }else{
                                /*var o={query:{$or:[]}};
                                 queryTags.forEach(function(tag){
                                 o.query.$or.push({url:tag})
                                 })

                                 FilterTags.query(o,function(res){
                                 res.shift();
                                 $scope.filterDirective.filterTags=res;
                                 q.resolve()
                                 })*/
                                FilterTags.getTagsByUrl(queryTags,function(res){
                                    $scope.filterDirective.filterTags=res;
                                    q.resolve()
                                })
                            }
                        }else{
                            q.resolve()
                        }
                        return q.promise;
                    }) // end tags
                    .then(function(){

                        _setFilterTagsUrl()
                        return;
                    })// установка урл тегов
                    .then(function(){
                        //**************************************** Ф И Л Ь Т Р Ы ********************************************
                        // установка списка и значений
                        if ($scope.filterDirective.query.category && $scope.filterDirective.category){
                            if ($scope.filterDirective.category.filters && $scope.filterDirective.category.filters.length){
                                $scope.filterDirective.category.filters.forEach(function(item,i){
                                    // устанавливаем значения в фильтрах
                                    if ($scope.filterDirective.filterTags &&  $scope.filterDirective.filterTags.length){
                                        $scope.filterDirective.filterTags.forEach(function(tag){
                                            if (tag.filter==item._id){
                                                if (!$scope.filterDirective.query.tags[i]){$scope.filterDirective.query.tags[i]=[]};
                                                $scope.filterDirective.query.tags[i].push(tag._id);
                                            }
                                        })
                                    }
                                })
                                $scope.filterDirective.filters=$scope.filterDirective.category.filters;
                            }
                        } else {
                            if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                                $scope.filterDirective.query.tags[0]=[];
                                $scope.filterDirective.filterTags.forEach(function(tag){$scope.filterDirective.query.tags[0].push(tag._id)})
                            }
                        }
                        return
                    })// фильтры
                    .then(function(){
                        $scope.filterDirective.getQuery()
                    })
                    .catch(function(err){
                        console.log(err)
                    })





                $scope.filterDirective.getQuery=function(){
                    // формирование строки запроса для выбора  товаров из БД
                    var query=[];
                    if (global.get('nostore').val){
                        query.push({tags:{$nin:[global.get('nostore').val._id]}})
                    }
                    //console.log($scope.filterDirective.query)
                    var queryTag=[];
                    for (var key in $scope.filterDirective.query){
                        if ($scope.filterDirective.query[key]){
                            if (key=="tags"){
                                var qu=[];
                                var queryTags=$scope.filterDirective.query[key].filter(function(){return true});
                                //console.log(queryTags);
                                $scope.filterDirective.query[key].forEach(function(obj,i){
                                    //console.log(i)
                                    var q=[];
                                    if (obj && obj.length){
                                        obj.forEach(function(objT){
                                            q.push({tags:objT});
                                        })

                                        if (q.length>1){
                                            q={$or:q}
                                            qu.push(q)
                                        } else {
                                            q=q[0];
                                            qu.push(q)
                                        }
                                    }
                                })
                                if (qu.length){
                                    if(qu.length==1){
                                        query.push(qu[0]);
                                    } else {
                                        query.push({$and:qu});
                                    }
                                }
                            } else {
                                //console.log();
                                var obj={};
                                obj[key]=$scope.filterDirective.query[key];
                                query.push(obj);
                            }
                        } else{
                            if(key=='category' && $scope.filterDirective.sectionCategories && $scope.filterDirective.sectionCategories.length){
                                var obj={};
                                obj['category']={$in:$scope.filterDirective.sectionCategories}
                                query.push(obj);
                            }
                        }
                    }
                    if (query.length==1){
                        query=JSON.stringify(query[0]);
                    } else if(query.length>1){
                        query =JSON.stringify({$and:query});
                    } else {
                        query={};
                    }
                    // передача данных в директиву
                    $scope.query=query;
                    return;
                    //********* start titles
                    var filterTag=_getfilterTag();
                    var brandTag=_getBrandTag();
                    var brand=_getBrand();
                    var queryTagsForSEO='';
                    if (filterTag) {
                        queryTagsForSEO+='queryTag='+queryTag;
                    }
                    if (brand) {
                        if(queryTagsForSEO){queryTagsForSEO+='&';}
                        queryTagsForSEO+='brand='+brand;
                    }
                    if (brandTag) {
                        if(queryTagsForSEO){queryTagsForSEO+='&';}
                        queryTagsForSEO+='brandTag='+brandTag;
                    }
                    console.log(queryTagsForSEO)
                    $rootScope.$broadcast('$allDataLoaded',{state:$state.current.name,data:queryTagsForSEO});

                }
                $scope.filterDirective.changeFilter=function(reloadController){
                    if (reloadController){
                        if ($scope.filterDirective.category && $scope.filterDirective.query.category==$scope.filterDirective.category._id){return}
                        if($scope.filterDirective.query.category){
                            var categoryUrl=$scope.filterDirective.categories.getObjectFromArray('_id',$scope.filterDirective.query.category);
                            categoryUrl=(categoryUrl)?categoryUrl.url:'category';
                            $location.search('categoryList', null);
                        }else{
                            var categoryUrl='category';
                            $location.search('categoryList', 'allCategories');
                        }
                        $state.current.reloadOnSearch = true;
                        var o={groupUrl:$stateParams.groupUrl,categoryUrl:categoryUrl,queryTag:undefined,brand:undefined,brandTag:undefined};
                        $state.go($state.current.name,o,{reload:true});
                        $state.current.reloadOnSearch = false;
                    }else{
                        $scope.filterDirective.query.artikul='';
                        _setBrand($scope.filterDirective.query.brand,'_id');
                        _setBrandTag($scope.filterDirective.query.brandTag,'_id');
                        $scope.filterDirective.filterTags=_getQueryTag().map(function(tag){
                            return getTagFromCategoriesList(tag,'_id')
                        } ).filter(function(tag){return tag})
                        _setFilterTagsUrl()
                        $scope.filterDirective.getQuery();
                    }
                }
                $scope.filterDirective.clearFilter=function(){
                    console.log('clear filetrs')
                    $scope.filterDirective.query.tags=[];
                    $scope.filterDirective.changeFilter();
                }
            }
        }
    }])
'use strict';
angular.module('gmall.directives')
.directive('stuffsAdminListWithPaginate',['$rootScope','Stuff','$timeout','$q','Sections','createStuffService','queryFromUrlService','filterStuffsListService','FilterTags','Filters',function($rootScope,Stuff,$timeout,$q,Sections,createStuffService,queryFromUrlService,filterStuffsListService,FilterTags,Filters){
    return {
        restrict:"E",
        scope:{
            query:'=',
            rate:'=',
            mobile:'@'
        },
        //controller:"stuffsLWPCtrl",
        templateUrl:"components/stuff/stuffsAdminListWithPaginate.html",
        link:function($scope,element,attrs,ctrl){
            var $state=$rootScope.$state;
            var $stateParams=$rootScope.$stateParams;
            $scope.global=$rootScope.global;
            setTimeout(function(){$rootScope.displaySlideMenu=true;},400)

            var query,queryForFilter; // save current state params
            $scope.paginate={page:0,rows:20,totalItems:0}
            $scope.newStuff={name:'',actived:false}
            $scope.saveStuff = function(stuff,field){
                var f=field.split(' ');
                var o={_id:stuff._id}
                f.forEach(function(el){o[el]=stuff[el]})
                /*console.log(f)
                console.log(stuff)*/
                Stuff.Items.save({update:field},o,function(res){
                    console.log(res)
                    if(f[0]=='index'){
                        $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    }
                })
            }
            $scope.getList=function(page,rows,reload){
                if ($scope.paginate.page!=page){
                    $scope.paginate.page=page;
                }
                return $q(function(resolve,reject){
                    var queryString;
                    if(reload){queryString=query}else{queryString=$scope.query}
                    Stuff.getList(queryString,null,page,rows,$scope.paginate).then(function(res){
                        $scope.items=res;
                        $scope.newStuff.index=($scope.items && $scope.items[0])?$scope.items[0].index:1;
                        //$timeout(function(){$scope.$emit('endLoadStuffs');},300)
                        if(!reload){
                            try {
                                query=JSON.parse($scope.query);
                            } catch (err) {
                                query={};
                            }
                            $scope.query=null;
                        }
                        resolve();
                    },function(err){
                        reject(err)
                    });
                })
            }
            var i=0;
            //*************************************************************************************************************
            //******************************************* для формирования url
            $scope.getUrlParams = Stuff.getUrlParams;
            //$scope.getUrlParams = Stuff.getUrlParams;
            //************************* for stuff URL *************************
            $scope.getCategoryName = Stuff.getCategoryName;
            $scope.getBrandName = Stuff.getBrandName;
            // работа со списком

            $scope.reloadList = function(){
                $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
            }
            $scope.searchStuff = function(artikul){
                if(!artikul || artikul.length<3){return};
                artikul=artikul.substring(0,20)

                $state.current.reloadOnSearch = true;
                var o={groupUrl:'group',categoryUrl:'category',searchStr:artikul.substring(0,20),
                queryTag:null,brand:null,brandTag:null,categoryList:null}
                $state.go($state.current.name,o,{reload:true})
            }
            $scope.filterList=function(){
                $q.when()
                    .then(function(){
                        return filterStuffsListService.setFilters(queryForFilter)
                    })
                    .then(function(query){
                        queryForFilter=query;
                        $scope.query=prepareQueryForRequest(query)
                        //console.log($scope.query);
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows);
                    })
                    .then(function(){
                    })
                    .catch(function(err){
                        console.log(err)
                    })
            }
            $scope.cloneStuff=function(stuff){
                var newStuff=angular.copy(stuff);
                $q.when()
                    .then(function(){
                        return createStuffService.cloneStuff(newStuff,true)
                    })
                    .then(function(stuff){
                        console.log($scope.newStuff==stuff)
                        $scope.newStuff=stuff
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    })
                    .then(function(){
                        var url=newStuff.url;
                        //$scope.newStuff={name:'',actived:false}
                        $state.go('frame.stuffs.stuff',{groupUrl:'group',categoryUrl:'category',stuffUrl:url});
                    })
                    .catch(function(err){
                        console.log(err)
                    })




               /* var newStuff=angular.copy(stuff);
                $q.when()
                    .then(function(){
                        return createStuffService.cloneStuff(newStuff,true,$scope.reloadList)
                    })
                    .then(function(stuffFromResolve){
                        //console.log('stuffFromResolve-',stuffFromResolve);
                        console.log(newStuff===stuffFromResolve);

                    } )
                    .catch(function(err){
                        console.log(err)
                    })*/

            }
            $scope.createNewStuff = function(){
                $q.when()
                    .then(function(){
                        return createStuffService.cloneStuff($scope.newStuff)
                    })
                    .then(function(stuff){
                        console.log($scope.newStuff==stuff)
                        $scope.newStuff=stuff
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    })
                    .then(function(){
                        var url=$scope.newStuff.url;
                        $scope.newStuff={name:'',actived:false}
                        $state.go('frame.stuffs.stuff',{groupUrl:'group',categoryUrl:'category',stuffUrl:url});
                    })
                    .catch(function(err){
                        console.log(err)
                    })

                /*if(!$scope.newStuff.name){return}
                $scope.newStuff.index=($scope.items && $scope.items[0])?$scope.items[0].index:1;
                var stuffUrl;
                $q.when()
                    .then(function(){
                        return Sections.getSections()
                    }) // полчение списка разделов
                    .then(function(sections){
                    // получение категорий и разделов
                        if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                            var section=sections.getOFA('url',$stateParams.groupUrl);
                            if(sections){
                                $scope.newStuff.section=section._id;
                                $scope.newStuff.store=section.store;
                                if($stateParams.categoryUrl!='category'){
                                    if(query['$and']){
                                        var a=query.$and;
                                        for(var j=0,l=a.length;j<l;j++){
                                            if(a[j].category && !a[j].category.$in){
                                                $scope.newStuff.category= a[j].category;
                                                break;
                                            }
                                        }

                                    }else{
                                        if(query.category && !query.category.$in){
                                            $scope.newStuff.category= query.category
                                        }
                                    }
                                }
                            }

                        }
                        return;
                    })
                    .then(function(){
                       // console.log($scope.newStuff);return;
                        var q=$q.defer();
                        Stuff.Items.save($scope.newStuff,function(res){
                            $scope.newStuff={name:'',actived:false};
                            q.resolve(res.url);
                        },function(err){q.reject(err)})
                        return q.promise;
                    })
                    .then(function(url){
                        stuffUrl=url;
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');

                    } )
                    .then(function(){
                        $state.go('frame.stuffs.stuff',{stuffUrl:stuffUrl});
                    })
                    .catch(function(err){
                        console.log(err)
                    })*/
            }
            $scope.deleteStuff=function(stuff){
                if(confirm("удалить???")){
                    Stuff.Items.delete({_id:stuff._id},function(res){
                        $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    })
                }
            }

            function prepareQueryForRequest(queryStart){
                // формирование строки запроса для выбора  товаров из БД
                var query=[];
                for (var key in queryStart){
                    if (queryStart[key]){
                        if (key=="tags"){
                            var qu=[];
                            for (var key2 in queryStart[key]){
                                var obj=queryStart[key][key2];
                                var q=[];
                                if (obj && obj.length){
                                    obj.forEach(function(objT){
                                        q.push({tags:objT});
                                    })

                                    if (q.length>1){
                                        q={$or:q}
                                        qu.push(q)
                                    } else {
                                        q=q[0];
                                        qu.push(q)
                                    }
                                }
                            }
                            if (qu.length){
                                if(qu.length==1){
                                    query.push(qu[0]);
                                } else {
                                    query.push({$and:qu});
                                }
                            }
                        } else {
                            var obj={};
                            obj[key]=queryStart[key];
                            query.push(obj);
                        }
                    }
                }
                if (query.length==1){
                    query=JSON.stringify(query[0]);
                } else if(query.length>1){
                    query =JSON.stringify({$and:query});
                } else {
                    query={};
                }
                return query;
            }

            $q.when()
                .then(function(){
                    return queryFromUrlService.get()
                })
                .then(function(query){
                    queryForFilter=query;
                    $scope.query=prepareQueryForRequest(query)
                    return $scope.getList($scope.paginate.page,$scope.paginate.rows);

                })
                .then(function(){
                    return FilterTags.getFilterTags()
                })
                .then(function(filterTags){
                    $scope.filterTags=filterTags;
                })
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){
                    $scope.filters=filters;
                })
                .catch(function(err){
                    console.log(err)
                })

            $scope.getTagName=function(_id){
                if(!_id)return;
                return $scope.filterTags.getOFA('_id',_id ).name||null;
            }
            $scope.getFilterName=function(_id){
                return $scope.filters.getOFA('_id',_id ).name||null;
            }
            $scope.changeSortOfStuff=function(stuff){
                var sort=stuff.stock[stuff.sort];
                //console.log(sort)
                stuff.price=sort.price;
                stuff.priceSale=sort.priceSale;
                stuff.retail=sort.retail;
            }
            $scope.filterSorts=function(sort){
                return sort.value.quantity
            }
            $scope.onSelected=function(){
                setTimeout(function(){
                    $(':focus').blur();
                })
            }
        }
    }
}])

'use strict';
angular.module('gmall.directives')
.directive('additionaInfo', function () {
    function additionaInfo(){

    }
    return {
        scope: {
            stuff: '=',
        },
        bindToController: true,
        controller: additionaInfoCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/additionaInfo/additionaInfo.html'
    };
})
.service('AddInfo', function ($resource,$q,$uibModal) {
    var Items= $resource('/api/collections/AddInfo/:id',{id:'@_id'});
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;
    this.editTable=editTable;
    this.select=selectItem;

    function selectItem(){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/additionalInfo/selectItem.html',
                controller: selectItemCtrl,
                size: 'lg',
                controllerAs:'$ctrl',
            }
            $uibModal.open(options).result.then(function(selected){resolve(selected)},function(){reject()});
        })
    }
    selectItemCtrl.$inject=['Filters','AddInfo','$uibModalInstance','$q','global'];
    function selectItemCtrl(Filters,AddInfo,$uibModalInstance,$q,global){
        var self=this;
        self.global=global;
        self.lang=global.get('lang').val
        $q.when()
            .then(function(){
                return Filters.getFilters();
            } )
            .then(function(filters){
                self.filters=filters;
                return AddInfo.query().$promise;
            } )
            .then(function(addInfos){
                self.filters.forEach(function(f){
                    f.addInfos=[];
                    addInfos.forEach(function(a){
                        if(a.filter==f._id){
                            f.addInfos.push(a)
                        }
                    })
                })
                //console.log(addInfos)
            })
        self.cancel = function () {$uibModalInstance.dismiss();};
        self.ok = function (item) {$uibModalInstance.close(item);};
    }

    function editTable(filter,addInfo){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/additionalInfo/additionalInfo.html',
            controller: function(filter,carrentAddInfo,AddInfo,$uibModalInstance,global,exception,Confirm){
                var self=this;
                self.global=global;
                self.lang=global.get('store').val.lang
                var langArr = global.get('store').val.langArr;
                console.log(langArr)
                if(!filter){$uibModalInstance.dismiss('cancel');}else{self.filter=filter}

                var query={filter:filter._id};
                self.items=[];


                activate()
                function activate(){
                    initItem();
                    AddInfo.query({query:query},function(res){
                        res.shift();
                        self.items=res;
                    },function(err){console.log(err)})
                }
                function initItem(){
                    self.item={headerTable:{},table:{},name:'',filter:filter._id};
                    filter.tags.forEach(function(tag){
                        self.item.table[tag._id]={}
                    })
                    if(langArr && langArr.forEach&& langArr.length ){
                        langArr.forEach(function(lang){
                            if(!self.item.headerTable){self.item.headerTable={}}
                            self.item.headerTable[lang]=['']
                            for(var key in self.item.table){
                                self.item.table[key][lang]=['']
                            }
                        })
                    }else{
                        if(!self.item.headerTable){self.item.headerTable={}}
                        self.item.headerTable[self.lang]=['']
                        for(var key in self.item.table){
                            self.item.table[key][self.lang]=['']
                        }
                    }
                    //console.log(self.item)
                }

                self.getTagName=function(id){
                    for(var i= 1,l=self.filter.tags.length;i<l;i++){
                        if(self.filter.tags[i]._id==id){
                            return self.filter.tags[i].name;
                            break;
                        }
                    }
                    return 'noname'
                }
                /*self.selectAddInfo=function(addInfo){
                    $uibModalInstance.close(addInfo);
                }*/
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                self.saveTable=function(){
                    //console.log(self.item)
                    //if (self.item.headerTable[self.lang].length==1){return}
                    //self.item.headerTable[self.lang].pop()
                    /*filter.tags.forEach(function(tag){
                        self.item.table[tag._id][self.lang].pop();
                    })*/
                    if(!self.item.name){self.item.name=filter.name}

                    if(self.item._id){
                        AddInfo.save({'update':'headerTable table name'},self.item,function(res){
                            activate()
                        })
                    } else{
                        AddInfo.save(self.item,function(res){
                            activate()
                        })
                    }
                }
                self.addRow = function(){
                    if(langArr && langArr.forEach && langArr.length){
                        langArr.forEach(function(lang){
                            if(!self.item.headerTable){self.item.headerTable={}}
                            self.item.headerTable[lang].push('');
                            for(var key in self.item.table){
                                self.item.table[key][lang].push('');
                            }
                        })
                    }else{
                        if(!self.item.headerTable){self.item.headerTable={}}
                        self.item.headerTable[self.lang].push('');
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].push('');
                        }
                    }
                    console.log(self.item)
                }
                self.deleteRow = function(i){
                    if(langArr && langArr.forEach&& langArr.length ){
                        langArr.forEach(function(lang){
                            self.item.headerTable[lang].splice(i,1);
                            for(var key in self.item.table){
                                self.item.table[key][lang].splice(i,1);
                            }
                        })
                    }else{
                        self.item.headerTable[self.lang].splice(i,1);
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].splice(i,1);
                        }
                    }
                    /*

                     self.item.headerTable.splice(i,1);
                     filter.tags.forEach(function(tag){
                     self.item.table[tag._id].splice(i,1);
                     })*/
                }
                self.editTable = function(item){
                    console.log(item)
                    self.item=item;
                    if(langArr && langArr.forEach && langArr.length ){
                        langArr.forEach(function(lang){
                            self.item.headerTable[lang].push('');
                            for(var key in self.item.table){
                                self.item.table[key][lang].push('');
                            }
                        })
                    }else{
                        self.item.headerTable[self.lang].push('');
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].push('');
                        }
                    }

                    /*self.item.headerTable.push('');
                     filter.tags.forEach(function(tag){
                     self.item.table[tag._id].push('')
                     })*/


                }
                self.deleteTable = function(item){
                    Confirm("удалить?" )
                        .then(function(){
                            return AddInfo.delete({id:item._id} ).$promise;
                        } )
                        .then(function(){
                            return activate();
                        })
                        .catch(function(err){
                            err = (err &&err.data)||err
                            if(err){
                                exception.catcher('удаление')(err)
                            }

                        })
                }
                self.setTable = function(item){
                    self.item=item;
                    if(langArr && langArr.forEach&& langArr.length ){
                        langArr.forEach(function(lang){
                            if(!self.item.headerTable){
                                self.item.headerTable={}
                                self.item.headerTable[lang]=[];
                                self.item.headerTable[lang].push('');
                            }
                            for(var key in self.item.table){
                                if(!self.item.table[key][lang]){
                                    self.item.table[key][lang]=[];
                                    self.item.table[key][lang].push('');
                                }
                            }
                        })
                    }else{
                        if(!self.item.headerTable){
                            self.item.headerTable={}
                            self.item.headerTable[self.lang]=[];
                            self.item.headerTable[self.lang].push('');
                        }
                        for(var key in self.item.table){
                            if(self.item.table[key].length){
                                self.item.table[key]={}
                                self.item.table[key][self.lang]=[];
                                self.item.table[key][self.lang].push('');
                            }

                        }
                    }
                    console.log(self.item)

                }
            },
            controllerAs:'$ctrl',
            size: 'lg',
            resolve: {
                filter: function () {
                    return filter;
                },
                carrentAddInfo:function(){
                    return addInfo;
                }
            }
        });
        return modalInstance.result.then(function (addInfo) {
            console.log(addInfo)
            //self.stuff.sortsOfStuff.addInfo=addInfo._id

        },function () {});
    }



})

'use strict';
angular.module('gmall.services')
.service('$order',['localStorage','global','Orders','$q','$uibModal','CartInOrder','exception','$email','CreateContent','$notification','$state','$window','Coupon','$user','$rootScope','$timeout','$http',function(localStorage,global,Orders,$q,$uibModal,CartInOrder,exception,$email,CreateContent,$notification,$state,$window,Coupon,$user,$rootScope,$timeout,$http){
    //console.log(global.get('seller').val);
    var order;
    var storageName;
    this.type=null;
    this.reinitCart=function(){
        //console.log('reinitCart')
        order.comment='';
        delete order.action;
        delete order._id;
        delete order.num;
        delete order.date;
        delete order.seller;
        var seller=global.get('store').val.seller;
        order.setSellerData(seller._id,seller.cascade,seller.opt);
    }
    this.initOrderInList=function (res) {
        var order= myShareData.getOrder();
        //console.log(order)
        //var order1= myShareData.getOrder();
        var campaign=(global.get('campaign'))?global.get('campaign').val:null;
        // console.log(campaign)
        var mainCurrency = global.get('store').val.mainCarrency;
        var currencyStore = global.get('store').val.currency;

        var currency = (global.get('currency') && global.get('currency').val)?global.get('currency').val:'UAH';
        var seller=global.get('store').val.seller;

        order.type='order';
        order._id=res._id;
        order.init(res.campaign,mainCurrency,currencyStore);
        order.setCurrency(res.currency);
        order.kurs=order.currencyStore[order.currency][0];
        order.payInfo=res.seller.payInfo;
        order.setSellerData(res.seller,res.cascade,res.opt)
        order.unitOfMeasure=order._getUnitOfMeasure()
        /*order.setCart(res.cart.stuffs)
         */
        order.cart._id=res.cart;
        order.setDiscount(res.discount)
        order.setCoupon(res.coupon)
        //order.totalCount= order._cartCount();
        order.date=res.date;
        order.date2=res.date2;
        order.date3=res.date3;
        order.date4=res.date4;
        order.date5=res.date5;
        order.invoice=res.invoice;
        order.invoiceInfo=res.invoiceInfo;
        order.pay=res.pay;
        order.shipCost=res.shipCost;
        order.num=res.num;
        order.status=res.status;
        order.profile=res.profile;
        order.comment=res.comment;
        order.note=res.note;
        order.user=res.user;
        order.shipDetail=res.shipDetail;
        order.domain=global.get('store').val.domain||global.get('store').val.subDomain;
        order.paySum=res.paySum;
        return order;
    }
    this.init=function(type,id){
        storageName=global.get('store').val._id;
        var q = $q.defer();
        order= myShareData.getOrder();
        //console.log(order)
        //var order1= myShareData.getOrder();
        var campaign=(global.get('campaign'))?global.get('campaign').val:null;
       // console.log(campaign)
        var mainCurrency = global.get('store').val.mainCarrency;
        var currencyStore = global.get('store').val.currency;

        var currency = (global.get('currency') && global.get('currency').val)?global.get('currency').val:'UAH';
        var seller=global.get('store').val.seller;
        this.type=type;
        order.type=type;
        // получили новый объект с меьлдами для расчета цены
        // создание нового ордера или корзина
        if(type=='cart'){
            //корзина
            order.init(campaign,mainCurrency,currencyStore);
            order.setSellerData(seller._id,seller.cascade,seller.opt)
            order.setCurrency(currency);
            order.kurs=order.currencyStore[order.currency][0];
            //localStorage.set(storageName,[]);
            var o= localStorage.get(storageName);
            //console.log(o)
            if(!o){
                o=[];
                localStorage.set(storageName,o);
            }
            order.setCart(o);
            order.unitOfMeasure=order._getUnitOfMeasure()
            //console.log(order.unitOfMeasure)
            order.totalCount= order._cartCount();
            q.resolve(order)
        }else if(type=='order') {
            Orders.get({_id:id},function(res){
                if(!res || !res._id){q.reject('404')}
                /*res.prototype=order.prototype;
                console.log(order)
                console.log(res)*/
                /*for(var k in res) order[k]=res[k];
                order.init(res.campaign,mainCurrency,currencyStore);
                order.setCurrency(res.currency);
                order.kurs=order.currencyStore[order.currency][0];
                order.payInfo=res.seller.payInfo;
                order.setSellerData(res.seller,res.cascade,res.opt)
                order.setCart(res.cart.stuffs)
                order.setDiscount(res.discount)
                order.setCoupon(res.coupon)
                order.totalCount= order._cartCount();*/
                order._id=res._id;
                order.init(res.campaign,mainCurrency,currencyStore);
                order.setCurrency(res.currency);
                order.kurs=order.currencyStore[order.currency][0];
                order.payInfo=res.seller.payInfo;
                order.setSellerData(res.seller,res.cascade,res.opt)
                order.setCart(res.cart.stuffs)
                order.unitOfMeasure=order._getUnitOfMeasure()
                order.cart._id=res.cart._id;
                order.setDiscount(res.discount)
                order.setCoupon(res.coupon)
                order.totalCount= order._cartCount();
                order.date=res.date;
                order.date2=res.date2;
                order.date3=res.date3;
                order.date4=res.date4;
                order.date5=res.date5;
                order.invoice=res.invoice;
                order.invoiceInfo=res.invoiceInfo;
                order.pay=res.pay;
                order.shipCost=res.shipCost;
                order.num=res.num;
                order.status=res.status;
                order.profile=res.profile;
                order.comment=res.comment;
                order.note=res.note;
                order.user=res.user;
                order.shipDetail=res.shipDetail;
                order.domain=global.get('store').val.domain||global.get('store').val.subDomain;
                order.pn=res.pn;
                order.rn=res.rn;
                //order=res;
                q.resolve(order)
            },function(err){
                q.reject(order)
            })
            order.totalCount= order._cartCount();
        }
        return q.promise;

    };
    this.getOrder=function(){
        return order;
    }
    this.addItemToCart = function(itemTo){
        //console.log(itemTo);return;
       //console.log(global.get('seller').val,itemTo.seller)
        itemTo.seller=global.get('seller').val;
        /*if (!itemTo.seller){
            itemTo.seller=global.get('seller').val;
        }
        console.log(itemTo)*/
        //if(itemTo.seller!=global.get('seller').val){return};
        itemTo.img=(itemTo.gallery && itemTo.gallery.length && itemTo.gallery[0].thumbSmall)?itemTo.gallery[0].thumbSmall:'';
        itemTo.quantity||(itemTo.quantity=1);
        //console.log(itemTo)
        order.addStuffToOrder(itemTo)
        this.updateOrder(itemTo);
    }
    this.checkInCart=function(item){
        //console.log(item.sort,item.name)
        return order.checkInCart(item)
    }
    this.updateOrder=function(itemTo){
        order.totalCount= order._cartCount();
        order.unitOfMeasure=order._getUnitOfMeasure()
        if(itemTo){
            //console.log('send message &')
            $rootScope.$broadcast('$updateOrder',itemTo);
        }
        //console.log(this.type)
        if (this.type=='cart'){
            //console.log(order.cart.stuffs)
            localStorage.set(storageName,order.cart.stuffs);
            order.totalCount= order._cartCount();
        }else{
            $timeout( function(){}, 100 )
                .then(function(){
                    var o=angular.copy(order.cart);
                    o.order=order._id;
                    return CartInOrder.save(o).$promise;
                })
                .then(function(){
                    order.priceSaleHandle=order.cart.stuffs.some(function(s){return s.priceSaleHandle})
                    order.maxDiscountOver=order.cart.stuffs.some(function(s){return s.maxDiscountOver})
                    return Orders.save({update:'totalCount sum paySum maxDiscountOver priceSaleHandle'},
                        {_id:order._id,
                            totalCount:order.totalCount,
                        sum:order.sum,
                        paySum:order.paySum,
                            priceSaleHandle:order.priceSaleHandle,
                            maxDiscountOver:order.maxDiscountOver,
                        }).$promise;
                })
                .then(function(){

                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                    //exception.showToaster('note','обновлено','')
                })
                .catch(function(error){
                    exception.catcher('сохранение изменений')(error)
                })

        }


    }
    this.removeItem=function(i){
        //console.log(i)
        order.cart.stuffs.splice(i,1);
        this.updateOrder();
    }
    this.decreaseQty=function(i){
        var stuff=order.cart.stuffs[i]
        if(stuff && stuff.quantity>1){
            if(stuff.multiple && stuff.minQty){
                if(stuff.quantity-1>=stuff.minQty){
                    stuff.quantity--
                    this.updateOrder();
                }
            }else{
                stuff.quantity--
                this.updateOrder();
            }

        }
    }
    this.increaseQty=function(i){
        var stuff=order.cart.stuffs[i]
        if(stuff) {
            if(stuff.single && stuff.maxQty){
                if (stuff.quantity + 1 <= stuff.maxQty) {
                    stuff.quantity++
                    this.updateOrder();
                }
            }else{
                stuff.quantity++
                this.updateOrder();
            }


        }
    }

    this.clearCart=function(){
        order.clearOrder();
        this.updateOrder();
    }
    this.cartCount=function(){
        return order.totalCount;
    }
    this.sendOrder=function(user){
        var self=this;
        return $q.when()
            .then(function () {
                try{
                    if(user){
                        if(!user._id){
                            //console.log(user)
                            throw  'не авторизирован!';
                        }
                    } else{
                        if(global.get('user' ).val && global.get('user' ).val._id){
                            order.user=global.get('user' ).val;
                            //order.profile=global.get('user').val.profile;
                            order.profile=angular.copy(global.get('user').val.profile);
                        }else{
                            throw  'не авторизирован!';
                        }
                    }
                    order.action='order'
                    if (order.comment){
                        order.comment.clearTag(400);
                    }else{
                        order.comment=''
                    }
                    //*********************************************
                    if (order.coupon && order.coupon._id){
                        order.paySum=order.kurs*order.getCouponSum();

                    }else{
                        order.paySum=order.kurs*order.getTotalSum();
                    }
                }catch(err){
                    throw err
                }

            })
            .then(function(){
                // проверка купона. если есть купон в ордере.
                // если его нет у пользователя. получаем его, если купон активен и не просрочен, то
                //записываем его в использованные купоны у пользователя.
                // при удалении ордера купон у пользователя аннулируется.
                return $q(function(resolve,reject){
                    if (order.coupon && order.coupon._id){
                        if (!global.get('user' ).val.coupons){global.get('user' ).val.coupons=[]}
                        //user.coupons=[]
                        if (global.get('user' ).val.coupons.indexOf(order.coupon._id)>-1){
                            // купон уже был использован
                            order.coupon=null;
                            resolve();
                        }else{
                            var now= Date.now();
                            Coupon.get({_id:order.coupon._id},function(coupon){
                                //console.log(coupon)
                                if (coupon){
                                    // добавляем купон в список использованных
                                    if(!global.get('user' ).val.coupons){
                                        global.get('user' ).val.coupons=[];
                                    }
                                    global.get('user' ).val.coupons=global.get('user' ).val.coupons.filter(function(el){return el})
                                    global.get('user' ).val.coupons.push(coupon._id);
                                    //console.log(global.get('user' ).val.coupons)
                                    $user.save({update:'coupons'},{_id:global.get('user' ).val._id,coupons:global.get('user' ).val.coupons},function(res){
                                        resolve();
                                    },function(err){
                                        if(err){return reject(err)}
                                    });
                                }else{
                                    // купон просрочен или не активен
                                    order.coupon=null;
                                    resolve();
                                }
                            })
                        }
                    }else{
                        resolve();
                    }
                })
            })// coupon
            .then(function(){
                //throw order;
                //console.log(order)
                return Orders.save(order).$promise
            })//сам заказ
            .then(function(res){
                if(!res.num || !res._id){
                    throw 'заказ не отправлен. произошла ошибка на сервере. не присвоен номер ордеру';
                }
                try{
                    order._id = res.id;
                    order.num = res.num;
                    order.date = Date.now();
                    order.seller = global.get( 'store' ).val.seller;
                    order.status=1;
                }catch(err){
                    throw err
                }
                // для отправка письма

            })
            .then(function(){
                if(!global.get('store').val.seller.salemail){
                    return;
                }
                try{
                    // письмо
                    order.profile.admin='Admin'
                    var email=global.get('store').val.seller.salemail;
                    var content=CreateContent.order(order,false,true)
                    delete order.profile.admin;

                    var domain=global.get('store').val.domain,
                        subj = ((global.get('langOrder').val.neworder)?global.get('langOrder').val.neworder.toUpperCase()+' ✔':'НОВЫЙ ЗАКАЗ'+' ✔')
                    var o={email:email,content:content,
                        subject:subj,from:  global.get('store').val.name+'<sales@'+domain+'>'};
                }catch(err){
                    throw err
                }

                return $q(function(resolve,reject){
                    $email.save(o,function(res){
                        exception.showToaster('note',global.get('langNote').val.emailSent,'');
                        resolve()
                    },function(err){
                        exception.showToaster('warning',global.get('langNote').val.error,err.data)
                        resolve()
                    } )
                })
            }) //email
            .then(function(){
                //order.profile=global.get('user').val.profile;
                try{
                    // письмо
                    order.user=(user)?user:global.get('user').val;
                    var email =(user)?user.email:global.get('user').val.email;
                    /*if(global.get('store').val.seller.salemail){
                     email=[email,global.get('store').val.seller.salemail]
                     }*/
                    var content=CreateContent.order(order,false,true)
                    var domain=global.get('store').val.domain,
                        subj = ((global.get('langOrder').val.neworder)?global.get('langOrder').val.neworder.toUpperCase()+' ✔':'НОВЫЙ ЗАКАЗ'+' ✔')
                    var o={email:email,content:content,
                        //subject:global.get('langOrder').val.order+' ✔',from:  global.get('store').val.name+'<'+global.get('store').val.subDomain+'@'+domain+'>'};
                        subject:subj,from:  global.get('store').val.name+'<sales@'+domain+'>'};
                }catch(err){
                    throw err
                }

                return $q(function(resolve,reject){
                    $email.save(o,function(res){
                        resolve()
                    },function(err){
                        exception.showToaster('warning',global.get('langNote').val.error,err.data)
                        resolve()
                    } )
                })
            }) //email admin
            .then(function(){
                try{
                    // отправка уведомления
                    var content=CreateContent.orderNote(order)
                    var o={addressee:'seller',
                        type:'order',
                        content:content,order:order._id,
                        num:order.num,
                        seller:order.seller._id};
                }catch(err){
                    throw err
                }

                return $q(function(resolve,reject){
                    $notification.save(o,function(res){
                        exception.showToaster('note', global.get('langNote').val.sent,'');
                        resolve()
                    },function(err){
                        exception.catcher('error')(err);
                        resolve()
                    } )
                })
            })//notification
            .then(function(){
                try{
                    var states= $state.get();
                    if(global.get('paps') && states.some(function(state){return state.name=='thanksPage'})){
                        var pap = global.get('paps').val.getOFA('action','order');
                        //console.log(pap)
                        if(pap && pap.url){
                            $state.go('thanksPage',{id:pap.url})
                        }else{
                            exception.showToaster('note',global.get('langNote').val.orderSuccess,'');
                        }
                    }else{
                        exception.showToaster('note',global.get('langNote').val.orderSuccess,'');
                    }
                }catch(err){
                    throw err
                }


            })
            .catch(function(err){
               throw err
            })
    }

    this.changeCurrency=function(lan){
        order.changeCurrency(lan)
    }
    this.checkCampaign=function(stuff){
        if(order && order.type){
            return order.checkCampaign(stuff);
        }else{
            return null;
        }

    }
    this.checkOutFromList = function(user){
        order.comment= (user.comment)?user.comment:'';
        order.profile=user.profile;
        order.user=user._id;
        order.seller=global.get('store').val.seller._id;
        return this.sendOrder(user)
    }
    this.getShipInfo=function(short){
        return $q(function(resolve,reject){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/order/modal/shipInfo.html',
                controller: shipInfoCtrl,
                controllerAs:'$ctrl',
                //size: 'lg',
                windowClass:'modalProject',
                //windowTopClass:'modalTopProject',
                backdropClass:'modalBackdropClass',
                //openedClass:'modalOpenedClass'
                resolve: {
                    short :function () {
                        return short;
                    }
                }
            });
            $rootScope.$emit('modalOpened')
            modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
        })
    }
    shipInfoCtrl.$inject=['$uibModalInstance','$rootScope','short']
    function shipInfoCtrl($uibModalInstance,$rootScope,short) {

        var self = this;
        self.short=short;
        //console.log(self.short)
        $rootScope.$on('closeShipModal',function(){
            $uibModalInstance.close();
        })
        self.ok = function () {
            $uibModalInstance.close();
        }
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
    }

    this.getCheckOutLiqpayHtml=function(order,invoice) {
        //console.log(order)
        return $q.when()
            .then(function () {
                if(invoice){
                    return $http.post('/api/orders/checkoutLiqpayInvoice',order)
                }else{
                    return $http.post('/api/orders/checkoutLiqpay',order)
                }

            })
            .then(function (res) {
                //console.log(res)
                if(!res || !res.data.html){
                    return;
                }
                order.checkOutLiqpayHtml=res.data.html
                order.checkOutLiqpayHtmlIs=true;
            })
            .then(function(res){
            })
            .catch(function(err){
                exception.catcher('error')(err);
            })


        /*LiqPayCheckout.init({
         data: "eyAidmVyc2lvbiIgOiAzLCAicHVibGljX2tleSIgOiAieW91cl9wdWJsaWNfa2V5IiwgImFjdGlv" +
         "biIgOiAicGF5IiwgImFtb3VudCIgOiAxLCAiY3VycmVuY3kiIDogIlVTRCIsICJkZXNjcmlwdGlv" +
         "biIgOiAiZGVzY3JpcHRpb24gdGV4dCIsICJvcmRlcl9pZCIgOiAib3JkZXJfaWRfMSIgfQ==",
         signature: "QvJD5u9Fg55PCx/Hdz6lzWtYwcI=",
         embedTo: "#liqpay_checkout",
         mode: "popup" // embed || popup
         }).on("liqpay.callback", function(data){
         console.log(data.status);
         console.log(data);
         }).on("liqpay.ready", function(data){
         // ready
         }).on("liqpay.close", function(data){
         // close
         });*/
    }


    this.checkWarehouse=function () {
        //console.log(order)
        var virtualAccount;
        return $q.when()
            .then(function () {
                if(!global.get('store').val.virtualAccount){
                    return $http.get('/api/collections/VirtualAccount')
                }
            })
            .then(function (r) {
                //console.log(r)
                if(r && r.data && r.data.length){
                    global.get('store').val.virtualAccount=r.data[1]._id
                }
                virtualAccount=global.get('store').val.virtualAccount;
                if(!virtualAccount){
                    throw 'невозможно установить подразделение'
                }

            })
            .then(function () {
                var acts = order.cart.stuffs.map(function (s) {
                    var q = {stuff:s._id,sort:s.sort}
                    var url = '/api/collections/Material?query='+JSON.stringify(q)
                    return $http.get(url)
                })
                return $q.all(acts)
            })
            .then(function (checkResult) {
                //console.log(checkResult)
                if(checkResult){
                    var r = checkResult.map(function (rr,index) {
                        if(rr.data && rr.data.length && rr.data[1]){
                            var material =  rr.data[1];
                            for(var i =0;i<material.data.length;i++){
                                if(((material.data[i].virtualAccount && material.data[i].virtualAccount._id)?material.data[i].virtualAccount._id:material.data[i].virtualAccount)==virtualAccount && material.data[i].qty>=order.cart.stuffs[index].quantity){
                                    order.cart.stuffs[index].priceUchet=material.data[i].price;
                                    order.cart.stuffs[index].supplierType=material.data[i].supplierType;
                                    order.cart.stuffs[index].supplier=((material.data[i].supplier && material.data[i].supplier._id)?material.data[i].supplier._id:material.data[i].supplier);
                                    order.cart.stuffs[index].virtualAccount=virtualAccount;
                                    //console.log(order.cart.stuffs[index])
                                    return;
                                }
                            }
                        }
                        return order.cart.stuffs[index]
                    })
                    return r;
                }else{
                    throw 'не возможно проверить наличие на складе'
                }
            })
            .then(function (stuffs) {
                //console.log(stuffs)
                stuffs = stuffs.filter(function (s) {
                    return s
                })
                if(stuffs.length){
                    var error='';
                    stuffs.forEach(function (s) {
                        var n = s.name;
                        if(s.artikul){
                            n+=' '+s.artikul;
                        }
                        if(s.sortName){
                            n+=' '+s.sortName;
                        }
                        error +="Необходимое количество "+n+" отсутствует. Перейдите на страницу товара и уточните наличие."
                    })
                    throw {status : "checkWarehouse", message : error};
                    //throw {status:''checkWarehouse,message:error};
                }

            })
    }
    this.makeRn = function (){
        console.log('makeRn')
        //console.log(global.get('store'))
        var o ={
            currency: order.currency,
            name:'Расходная накладная на заказ '+order.num,
            materials:[],
            typeOfZakaz: "order",
            virtualAccount: global.get('store').val.virtualAccount,
            store: global.get('store')._id,
            worker: 'any',
            zakaz: order._id,
            invoice:order._id,
            makeReserve:true,
            customer:{
                name : order.profile.fio, email : order.user.email
            }
        };


        if(order.profile.phone){
            o.customer.phone=order.profile.phone;
        }
        if(order.profile.city){
            o.customer.field1=order.profile.city;
        }

        if(order.shipCost){
            o.delivery = Math.round((Number(order.shipCost))*100)/100;
        }


        order.cart.stuffs.forEach(function (s) {
            //console.log(s)
            var m = {}
            /*m.name=s.name;
            if(s.brand){
                var b = global.get('brands').val.getOFA('_id',s.brand)
                if(b){
                    m.producer=b.name;
                }
            }
            if(s.artikul){
                m.sku = s.artikul
            }
            if(s.sortName){
                m.sku+=' '+s.sortName;
            }*/
            m.stuff = s._id;
            m.sort = s.sort;
            m.qty = s.quantity;
            m.priceForSale = Math.round((s.sum/s.quantity)*100)/100;
            m.price = Math.round((s.priceUchet)*100)/100;
            m.supplier = s.supplier;
            m.supplierType = s.supplierType;
            m.virtualAccount=global.get('store').val.virtualAccount;
            //m.supplier = m.supplier.charAt(0).toUpperCase() + m.supplier.slice(1);
            o.materials.push(m)

        })
        console.log(o)


        if(!o.materials.length){
            return exception.catcher('создание накладной','не выбраны товары');
        }
        return $q.when()
            .then(function () {
                return $http.post('/api/bookkeep/Rn/createByAPIFromSite',o);
            })
            .then(function (res) {
                exception.showToaster('info','обработка данных в бухгалтерии','накладная в резерве');
                return res
            })



    }
    this.cancelRn = function (){
        console.log('cancelRn',order)
        var o ={
            store: global.get('store').val._id,
            rn:order.rn
        };
        if(order.pn){
            o.pn=order.pn;
        }
        console.log(o)
        return $q.when()
            .then(function () {
                return $http.post('/api/bookkeep/Rn/cancelByAPIFromSite',o);
            })
            .then(function (res) {
                console.log(res)
            })
            .then(function () {
                exception.showToaster('info','обработка данных в бухгалтерии','накладная отменена');
            })
            /*.catch(function (err) {
                console.log(err);
                if(err){
                    exception.catcher('обработка данных в бухгалтерии')(err);
                }
            });*/


    }
    this.holdZakaz = function (){
        console.log('holdZakaz')
        var o ={
            store: global.get('store').val._id,
            rn:order.rn
        };
        console.log(o)
        return $q.when()
            .then(function () {
                return $http.post('/api/bookkeep/Rn/holdByAPIFromSite',o);
            })
            .then(function (res) {
                console.log(res)
            })
            .then(function () {
                exception.showToaster('info','обработка данных в бухгалтерии','накладная проведена');
            })
            /*.catch(function (err) {
                console.log(err);
                if(err){
                    exception.catcher('обработка данных в бухгалтерии')(err);
                }
            });*/


    }
    this.cancelZakaz = function (){
        console.log('cancelZakaz')
        var o ={
            store: global.get('store').val._id,
            rn:order.rn
        };
        if(order.pn){
            o.pn=order.pn;
        }
        console.log(o)
        return $q.when()
            .then(function () {
                return $http.post('/api/bookkeep/Rn/cancelZakazByAPIFromSite',o);
            })
            .then(function (res) {
                console.log(res)
            })
            .then(function () {
                exception.showToaster('info','обработка данных в бухгалтерии','накладная отменена');
            })
    }


}])
.factory('localStorage', function(){
    var APP_ID =  'frame-local-storage';

    // api exposure
    return {
        // return item value
        getB: function(item){

            return JSON.parse(localStorage.getItem(item) || 'false');
        },
        // return item value
        getN: function(item){
            var i = localStorage.getItem(item);
            if (i!='undefined'){
                return JSON.parse(i)
            }
            else
                return '';
        },
        // return item value
        get: function(item){
            return JSON.parse(localStorage.getItem(item) || '[]');
        },
        set: function(item, value){
            // set item value
            localStorage.setItem(item, JSON.stringify(value));
        }

    };

})
'use strict';
(function(){

    angular.module('gmall.services')
        .service('Orders', orderService);

    orderService.$inject=['$resource','$uibModal','$q'];
    function orderService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Order/:_id',{_id:'@_id'});
        this.query=Items.query;
        this.get=Items.get;
        this.delete=Items.delete;
        this.save=Items.save;
        return {
            getList:getList,
            getItem:getItem,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                if(response && response.length){
                    response.forEach(function(o){
                        o.totalPay=(o.pay && o.pay.length)?o.pay.reduce(function(s,i){return s+=i.sum},0):0;
                    })
                }
                return response;
            }
            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(o) {
                //console.log(o)
                return o;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }

    }
})()


'use strict';
(function(){

    angular.module('gmall.services')
        .service('CartInOrder', cartInOrderService);

    cartInOrderService.$inject=['$resource','$uibModal','$q'];
    function cartInOrderService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/CartInOrder/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }

    }
})()


'use strict';
(function(){

    angular.module('gmall.services')
        .service('News', newsService);
    newsService.$inject=['$resource','$uibModal','$q','global'];
    function newsService($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/News/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
            viewEmail:viewEmail,
            select:selectItem,
            search:search
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            /*if(global.get('crawler').val){
                query={$and:[{store:global.get('store').val._id},{actived:true}]}
            }*/
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }

            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function search(search,setData){
            // setData - если ищем товар в админке для дальнейшего использования необходимо получить с сервера все данные
            var data ={search:search,setData:setData};
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                //response.shift()

                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(name){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/news/createNews.html',
                    controller: function($uibModalInstance,name){
                        var self=this;
                        self.name=name;
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    resolve:{
                        name:function () {
                            return name
                        }
                    }
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function viewEmail(item,content){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/news/viewEmail.html',
                    controller: function($q,$uibModalInstance,SubscibtionList,item,content){
                        var self=this;
                        self.item=item;
                        self.except=false;
                        self.list
                        self.content=content;
                        self.ok=function(){
                            $uibModalInstance.close({lists:self.lists,except:self.except});
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        activate()
                        function activate(){
                            $q.when()
                                .then(function() {
                                    return SubscibtionList.getList( {page: 0, rows: 1, items: 0}, {} )
                                })
                                .then(function(data){

                                    if(data && data[0]){
                                        if(!data[0].list){data[0].list=[]}
                                        for(var key in data[0].list){
                                            if(!data[0].list[key]){
                                                delete data[0].list[key]
                                            }
                                        }
                                        self.subscibtionList = data[0];
                                    }else{
                                        self.subscibtionList={list:[]}
                                    }
                                    //console.log(self.subscibtionList)
                                })
                        }
                    },
                    size:'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        item:function(){
                            return item;

                        },
                        content:function(){
                            return content;

                        }
                    }
                });
                modalInstance.result.then(function (item) {
                   resolve(item)
                }, function (err) {
                    reject(err)
                });
            })

        }
        function selectItem(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/news/selectNews.html',
                    controller: function(News,$uibModalInstance,$q){
                        var self=this;
                        self.stuffs=[];
                        self.name='';
                        var query;
                        var paginate={page:0,rows:30,items:0}
                        self.search = function(name){
                            if (name.length<3){return}
                            query={name:name}



                            News.search(name,true)
                                .then(function(res){
                                    self.items=res;
                                    //console.log(self.items)
                                })


                            /*News.getList(paginate,query).then(function(res){
                                self.items=res;
                            })*/
                        }
                        self.selectItem=function(item){
                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',
                });

                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('newsList',newsListDirective)
        .directive('newsListTemplate',newsListTemplateDirective)
        .directive('newsCart',newsCartDirective)
        .directive('newsCart1',newsCartDirective1)
        .directive('newsCart2',newsCartDirective2)
        .directive('newsCart3',newsCartDirective3)
        .directive('newsCart4',newsCartDirective4)
        .directive('newsCart5',newsCartDirective5)
    function newsCartDirective(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart.html',
            restrict:'A'
        }
    }
    function newsCartDirective1(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart1.html',
            restrict:'A'
        }
    }
    function newsCartDirective2(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart2.html',
            restrict:'A'
        }
    }
    function newsCartDirective3(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart3.html',
            restrict:'A'
        }
    }
    function newsCartDirective4(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart4.html',
            restrict:'A'
        }
    }
    function newsCartDirective5(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart5.html',
            restrict:'A'
        }
    }
    function newsListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: newsListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/news/newsList.html',
        }
    };
    function newsListTemplateDirective($stateParams){
        return {
            template:"<div ui-view></div></div><div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$http','$stateParams','global',function ($http,$stateParams,global) {
                var self=this;
                $http.get('/views/template/partials/news').then(function(response){
                    console.log(response)
                    self.content=response.data.html;
                    console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
            /*templateUrl: function () {
             return 'views/template/partials/News/itemPage/'+$stateParams.id;
             }*/
        }
    }

    function newsListTemplateDirective1(global){
        var s=(global.get('store').val.template.newsList)?global.get('store').val.template.newsList:'';
        return {
            scope: {
                actived:'@'
            },
            rescrict:"E",
            bindToController: true,
            controller: newsListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/news/newsList'+s+'.html',
            /*templateUrl:'views/'+global.get('store').val.template.folder+'/partials/news/newsList.html',
            templateProvider: function(global,$http) {

                var url = 'views/'+global.get('store').val.template.folder+'/partials/news/newsList.html';
                console.log(url)
                return $http.get(url).then(function(tpl){return tpl.data;});
            },*/
        }
    };
    newsListTemplateDirective.$inject=['global']
    newsListCtrl.$inject=['News','$state','global','$timeout','$anchorScroll','Photo','Confirm','Label'];
    function newsListCtrl(News,$state,global,$timeout,$anchorScroll,Photo,Confirm,Label){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        //self.moment=moment;
        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD-MMMM-YYYY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            date:{
                startDate: null, endDate: null
            }
        }
        self.$state=$state;
        self.Items=News;
        self.moment=moment;
        self.query={};
        self.paginate={page:0,rows:20,totalItems:0}
        self.newNews={name:'Новая иноформация',actived:false}
        self.data={rows:2}
        self.itemsArr2=[[],[]]
        self.itemsArr3=[[],[],[]]
        self.itemsArr4=[[],[],[],[]]
        self.getList=getList;
        self.saveField = saveField;
        self.searchNews=searchNews;
        self.createNews=createNews;
        self.deleteItem=deleteItem;
        self.setRows=setRows;

        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                return Label.getList({page:0,rows:100},{list:'news'})
                //console.log('Activated news list View');
            }).then(function (data) {
                console.log(data)
                self.labels=data
            });
        }
        function getList() {
            if(!Object.keys(self.query ).length && self.actived){
                self.query={actived:true}
            }
            return News.getList(self.paginate,self.query)
                .then(function(data) {
                    self.itemsArr2=data.divideArrayWithChunk(2);
                    self.itemsArr3=data.divideArrayWithChunk(3);
                    self.itemsArr4=data.divideArrayWithChunk(4);
                    self.items = data;
                    //console.log(self.data.rows)
                    $timeout(function (){
                        self.data.rows=setRows();
                        $anchorScroll();
                        //console.log(self.data.rows)
                    })

                    return self.items;
                });
        }
        function setRows(){
            return (global.get('functions').val.setRows)?
                global.get('functions').val.setRows():2
        }
        $(window).resize(function(){
            $timeout(function (){
                self.data.rows=setRows();
                //console.log(self.data.rows)
            })

        })

        function searchNews(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated news list View');
            });
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){

                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)


                },function(err){console.log(err)});
            },defer)
        };
        function cloneItem(item){
            var name;
            self.Items.create()
                .then(function (res) {
                    name=res;
                    return self.Items.getItem(item._id)
                })
                .then(function(master){
                    self.newItem=angular.copy(master)
                    self.newItem.name=name;
                    self.newItem.nameL={};

                    delete self.newItem._id
                    delete self.newItem.__v
                    delete self.newItem.url;
                    console.log( self.newItem)
                    self.newItem.blocks.forEach(function (block) {
                        delete block.img;
                        delete block._id;
                        if(block.type=='stuffs'){
                            if(block.stuffs && block.stuffs.length){
                                block.stuffs=block.stuffs.map(function (s) {
                                    return s._id
                                })
                            }
                        }
                        block.imgs=[]
                    })
                    //throw 'test'
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.master.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }

        function createNews(item){
            var name =(item)?item.name:''
            self.Items.create(name)
                .then(function(res){
                    name=res;
                    if(item){
                        return self.Items.get({_id:item._id,clone:'clone'}).$promise
                    }else{
                        return {name:res}
                    }

                } )
                .then(function(res){
                    if(res._id){
                        self.newNews=angular.copy(res)
                        self.newNews.send={date:null,quantity:0}
                        self.newNews.name=name;
                        self.newNews.actived=false;
                        delete self.newNews.date
                        delete self.newNews._id
                        delete self.newNews.url
                        delete self.newNews.__v;
                        self.newNews.nameL={}
                        self.newNews.blocks.forEach(function (block) {
                            delete block.img;
                            delete block._id;
                            if(block.type=='stuffs'){
                                if(block.stuffs && block.stuffs.length){
                                    block.stuffs=block.stuffs.map(function (s) {
                                        if(s._id){
                                            return s._id
                                        }else{
                                            return s
                                        }

                                    })
                                }
                            }
                            block.imgs=[]
                        })
                    }else{
                        self.newNews={actived:false}
                        self.newNews.name=name;
                    }


                    return self.Items.save(self.newNews).$promise
                } )
                .then(function(res){
                    self.newNews._id=res.id;
                    self.newNews.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newNews._id;
                    delete self.newNews._id
                    setTimeout(function(){
                        $state.go('frame.news.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/News/'+item.url
            // console.log(folder)
            Confirm("удалить?" )
                .then(function(){
                    return News.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return getList();
                })
                .then(function(){
                    return Photo.deleteFolder('News',folder)
                })
                .catch(function(err){
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление новости')(err)
                    }

                })

            /*Stuff.Items.delete({_id:stuff._id} ).$promise.then(function(res){
             $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
             } ).catch(function(err){
             err = err.data||err
             exception.catcher('удаление товара')(err)
             })*/
        }


    }
})()

'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('newsItem',newsItemDirective)
        .directive('newsDetailTemplate',itemTemplateDirective);
    function itemTemplateDirective($stateParams){
        return {
            template:"<div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$http','$stateParams','global',function ($http,$stateParams,global) {
                var self=this;
                $http.get('views/template/partials/News/itemPage/'+$stateParams.id).then(function(response){
                    console.log(response)
                    self.content=response.data.html;
                    console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
            /*templateUrl: function () {
                return 'views/template/partials/News/itemPage/'+$stateParams.id;
            }*/
        }
    }
    function newsItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: newsItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/news/newsItem.html',
        }
    }
    newsItemCtrl.$inject=['News','$stateParams','$q','$uibModal','global','exception','Stuff','CreateContent','Email','seoContent','Photo','$resource','$anchorScroll','$timeout','FilterTags','BrandTags','Brands','Campaign','Category','$scope','Confirm','SetCSS'];
    function newsItemCtrl(News,$stateParams,$q,$uibModal,global,exception,Stuff,CreateContent,Email,seoContent,Photo,$resource,$anchorScroll,$timeout,FilterTags,BrandTags,Brands,Campaign,Category,$scope,Confirm,SetCSS){
        var self = this;
        self.Items=News;
        self.type='News'
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.listOfBlocksForNewsDetailPage=listOfBlocksForAll;
        self.listOfBlocks=listOfBlocksForAll;
        self.animationTypes=animationTypes;
        //console.log(self.listOfBlocksForNewsDetailPage)
        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD-MMMM-YYYY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            date:{
                startDate: null, endDate: null
            }
        }
        self.setStyles=setStyles;
        self.saveField=saveField;
        /*self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        self.addStuff=addStuff;
        self.movedStuff=movedStuff;
        self.deleteStuff=deleteStuff;*/
        self.sendEmail = sendEmail;
        var Store=$resource('/api/collections/Store/:_id',{_id:'@_id'});
        //*********************************************************************
        self.newBlock=null;
        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        self.filterBlocks=filterBlocks;
        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;
        self.clearDesc=clearDesc;
        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate();
        })
        /*var d = new Date();
        var n = d.getMonth();
        console.log(n)*/
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {
                //console.log('Activated item View');
            } ).catch(function(err){
                err = err.data||err
                exception.catcher('получение новости')(err)
            });
        }
        function getItem(id) {
            //console.log(id)
            return self.Items.getItem(id)
                //console.log(id)
                .then(function(data) {
                    console.log(data)
                    if(data && !data.blocks){
                        data.blocks=[];
                        saveField('blocks',[])
                    }
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                    })
                    /*data.blocks.sort(function (a,b) {
                        return a.index-b.index
                    })*/
                    //self.item.addProperties(data);
                    for(var key in data){
                        self.item[key]=data[key];
                    }

                    self.objShare=seoContent.setDataItem(data,true)
                    $anchorScroll();
                    /*$timeout(function(){
                        window.scrollTo(0, 0);
                    },400)*/
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField('blocks.'+block.i,block)
                })
        }
        function saveField(field,value,defer,indexImgs){
            //console.log(field)
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }
            defer =(defer)?defer:100;
            $timeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                //console.log(defer,value)
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }

        function addBlock(type){
            //console.log(type)
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;
            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            if(type=='slider' || type=='stuffs' || type=="campaign" || type=="filterTags"|| type=="brandTags"|| type=="brands"|| type=="categories"){
                o.imgs=[];
                update.update+=' imgs'
            }

            //console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    activate()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            //console.log(block,index)
            var o={_id:self.item._id};
            o['id']=block.id;
            var update={update:'id',embeddedName:'blocks'};
            update.embeddedPull=true;

            console.log(update,o)
            //return;
            Confirm('Подтверждаете?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    self.item.blocks.splice(index,1)
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })



        }
        function deleteSlide(block,index){
            Photo.deleteFiles('Stat',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            //console.log(index)
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/staticPage/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
            }, function () {
            });
        }
        var keyParts=global.get('store').val.template.news.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        // collections
        function addItemInBlock(block,$index) {
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    //console.log(link)
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link})
                    }

                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    //saveField('blocks.'+block.i,block)
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }


        function sendEmail(){

            var item = angular.copy(self.item)
            if(item.blocks && item.blocks.length){
                item.blocks.forEach(function (b) {
                    if(b.type=='stuffs'){
                        b.imgs=b.stuffs
                    }
                })
            }
            //console.log(item)
            var content =CreateContent.emailFromNews(item);
            //console.log(content)
            var d = new Date();
            var n = d.getMonth()+1;
            //console.log(global.get('store').val.seller)
            var ownerDomain;
            if(global.get('store').val.seller.mailgun && global.get('store').val.seller.mailgun['domain']){
                ownerDomain=global.get('store').val.seller.mailgun['domain'];
            }
            //console.log(ownerDomain)
            $q.when()
                .then(function(){
                    return ;
                })
                .then(function(){
                    return self.Items.viewEmail(self.item,content)
                })
                .then(function(data){
                    var lists= data.lists;
                    var except=data.except;
                    //console.log(global.get('store').val.mailData);

                    if( !ownerDomain &&
                        global.get('store').val.mailData && global.get('store').val.mailData.month &&
                        global.get('store').val.mailData.month==n
                        && global.get('store').val.mailData.quantity>500){
                        throw 'Превышен лимит количества писем в месяц'
                    }
                    var o={
                        content:content,lists:lists,
                        except:except,
                        subject:self.item.name.substring(0,50)
                    }
                    return Email.save(o).$promise

                })
                .then(function(res){
                    exception.showToaster('note','Сообщение','Рассылка отправлена');
                    if(!self.item.send){self.item.send={}}
                    self.item.send.date=Date.now();
                    //console.log(self.item.send)
                    saveField('send',self.item.send);
                    if(res.quantity && !ownerDomain){
                        if(!global.get('store').val.mailData){
                            global.get('store').val.mailData={
                                month:n,
                                quantity:res.quantity
                            }
                        }else{
                            if(!global.get('store').val.mailData.month){
                                global.get('store').val.mailData={
                                    month:n,
                                    quantity:res.quantity
                                }
                            }else{
                                if(global.get('store').val.mailData.month!=n){
                                    global.get('store').val.mailData={
                                        month:n,
                                        quantity:res.quantity
                                    }
                                } else{
                                    if(!global.get('store').val.mailData.quantity){
                                        global.get('store').val.mailData.quantity=0;
                                    }
                                    global.get('store').val.mailData.quantity+=res.quantity;
                                }
                            }
                        }
                        //save data in store about quantity mails
                        var o= {_id:global.get('store').val._id}
                        o['mailData']=global.get('store').val.mailData;
                        Store.save({update:'mailData'},o)
                    }

                } )
                .catch(function(err){
                    if(err){
                        exception.catcher('отправка писем')(err)
                    }

                })
        }
        function clearDesc(block) {
            console.log('???????????????')
            block.desc='';
            saveField('blocks.'+block.i+'.index',block.desc)
        }

        /*function movedSlide(){
            self.item.imgs.forEach(function(el,i){
                el.index=i;
            })
            self.saveField('imgs')
        }
        function deleteSlide(images,index){
            //var data={file:images.img,id:self.item._id,_id:'fileDeleteFromImgs'}
            //News.save(data).$promise
            Photo.deleteFiles('News',[images.img])
            .then(function(response) {
                self.item.imgs.splice(index,1)
                self.saveField('imgs')
            }, function(err) {
                console.log(err)
            });

        }
        function editSlide(slide,index){
            //console.log(slide)
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/news/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                resolve: {
                    slide: function () {
                        return slide;
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                console.log(slide)
                self.saveField('imgs')
            }, function () {
            });
        }
        function addStuff(){
            $q.when()
                .then(function(){
                    //return selectStuffModalService.selectStuff();
                    return Stuff.selectItem()
                })
                .then(function(stuff){
                    //console.log(stuff)
                    if(stuff){
                        if(!self.item.stuffs){self.item.stuffs=[];}
                        if(!self.item.stuffs.some(function(el){return el._id==stuff._id})){
                            self.item.stuffs.push(stuff);
                            self.saveField('stuffs');
                        }

                    }
                })
                .catch(function(err){
                    err = err.data||err
                    if(err){
                        exception.catcher('получение новости')(err)
                    }
                })

        }
        function movedStuff(){
            self.saveField('stuffs')
        }
        function deleteStuff(index){
            self.item.stuffs.splice(index,1);
            self.saveField('stuffs')
        }*/







    }
    //=====================newsTemplateDirective
    /*function itemTemplateDirective(global){
        var s=(global.get('store').val.template.newsTempl)?global.get('store').val.template.newsTempl:'';
        return {
            scope: {},
            bindToController: true,
            controller: newsItemCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/news/newsDetail'+s+'.html',
            restrict:'E'
        }
    }*/
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        //.directive('socialHub',itemDirective);
        .component('socialHub',{
            bindings:{
                objShare:'=',
                textCenter:'<',
                item:'<',
                state:'<',
            },
            controller: itemCtrl,
            templateUrl: '/components/socialHub/socialHub.html',
        });
    function itemDirective(){
        return {
            scope: {
                textCenter:'@',
                item:'@',
            },
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/socialHub/socialHub.html',
            restrict:'AE'
        }
    }
    function itemCtrl($scope,global,$location,$timeout,$state,$element){
        //console.log('??????????????????')

        /*$('.rrssb-buttons').rrssb({
            // required:
            title: 'This is the email subject and/or tweet text',
            url: 'http://kurtnoble.com/labs/rrssb/',

            // optional:
            description: 'Longer description used with some providers',
            emailBody: 'Usually email body is just the description + url, but you can customize it if you want'
        });*/
        var self=this;


        self.global=global;


        //self.shareData=global.get('titles').val;
        //console.log(global.get('titles').val)
        self.$onInit=function(){
            /*console.log(self.item)
            console.log($element.data())*/

            $timeout(function () {
                var shareItem=angular.copy(global.get('titles').val);
                if(shareItem.url && shareItem.url.indexOf && shareItem.url.indexOf('http')<0){
                    shareItem.url=global.get('store').val.link+shareItem.url
                }

                if(self.item){
                    if(self.item.url){
                        if($state.current.name=='news' || $state.current.name=='master' || $state.current.name=='stat' || $state.current.name=='campaign' ||$state.current.name=='additional' || $state.current.name=='workplace' ){
                            shareItem.url+='/'+self.item.url
                        }else if($state.current.name=='home'){
                            shareItem.url+='/'+self.state+'/'+self.item.url
                        }
                    }
                    try {
                        if(self.item.name){
                            shareItem.title=self.item.name
                        }
                        if(self.item.desc){
                            shareItem.description=self.item.desc
                        }
                        if(self.item.img){
                            shareItem.image=photoHost+"/"+self.item.img
                        }
                    }catch(err){
                        console.log(err)
                    }
                }
                self.shareItem=shareItem;
               // console.log(self.shareItem)
            },400)
        }

       // console.log(self.shareData)
    }
})()



'use strict';
/*var lengthStyleBlock=19;
var arrEmptyForProperties=[];
for(var i=0;i<lengthStyleBlock;i++){arrEmptyForProperties.push('')}*/

angular.module('gmall.services')
.service('HomePage', function($resource,$uibModal){
    //console.log(stuffHost)
    var Items= $resource('/api/collections/HomePage/:_id',{_id:'@_id'});
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;
    this.selectItemFromList=selectItemFromList;

    function selectItemFromList(items,header){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/homePage/selectItem.html',
            controllerAs:'$ctrl',
            controller: function ($uibModalInstance ,global,items,header) {
                var self=this;
                self.items=items;
                self.header=header||'выберите из предложенного списка'
                self.selectItem=selectItem;
                self.cancel = cancel;

                function selectItem(item){
                    $uibModalInstance.close(item);
                }
                function cancel() {
                    $uibModalInstance.dismiss();
                };
            },
            resolve: {
                items:function () {
                    return items
                },
                header:function () {
                    return header
                }
            }
        });
        return modalInstance.result
    }


})
    .directive('parallaxBanner',function($timeout) {
        return {
            scope: {},
            restrict: 'C',
            link:function (scope,elem,attr) {
                //console.log('link',elem,$(elem).offset().top)
                var $window=$(window)
                //doIt();
                $timeout(function () {
                    doIt()
                },100)

                $(window).scroll(doIt);
                function doIt() {
                    //console.log(elem,$(elem).offset().top);
                    var elementTop = $(elem).offset().top;
                    var elementBottom = elementTop + $(elem).outerHeight();
                    var viewportTop = $(window).scrollTop();
                    var viewportBottom = viewportTop + $(window).height();
                    var viewportHeight = $(window).height();
                    if (elementTop<viewportBottom){
                        var lastPositionY=parseInt(elem.css('background-position-y'));
                        var yPos = (elementTop-viewportBottom+$(elem).height())/4;
                        var delta = lastPositionY-yPos;
                        /*if(delta>150){
                         console.log(delta)
                         }*/
                        var coords = '0% '+ yPos + 'px';
                        elem.css({
                            backgroundPosition: coords
                        });

                    }
                }
                /*scope.$on('$destroy', function() {
                    console.log('$destroy$destroy')
                    angular.element($window).off('scroll',doIt);
                });
                this.$onInit = function () {
                    console.log('$onInit')
                };

                this.$onDestroy = function () {
                    console.log('$onDestroy')
                };*/
                elem.on('$destroy', function(){
                    //console.log('$destroy')
                    angular.element($window).off('scroll',doIt);
                });

            }
        }
    })
.directive('homePage',function(){
    return {
        scope: {},
        restrict:'E',
        bindToController: true,
        controller: homePageCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/homePage/homePage.html',
    }
    homePageCtrl.$inject=['HomePage','$stateParams','$state','$q','global','$http','$uibModal','Stuff','Filters','FilterTags','Category','BrandTags','exception','Store','Brands','EditModelData','Photo','News','Campaign','Info','$scope','$timeout','Confirm','SetCSS','$rootScope'];
    function homePageCtrl(HomePage,$stateParams,$state,$q,global,$http,$uibModal,Stuff,Filters,FilterTags,Category,exception,BrandTags,Store,Brands,EditModelData,Photo,News,Campaign,Info,$scope,$timeout,Confirm,SetCSS,$rootScope){
        var self = this;
        self.Items=HomePage;
        self.global=global;
        self.$state=$state;
        self.activeSide='left'
        self.store=global.get('store').val
        /*self.listOfBlocksForMainPage=listOfBlocksForMainPage;
        self.listOfBlocks=listOfBlocksForMainPage*/
        self.listOfBlocks=listOfBlocksForAll
        self.blockEditPermission={}

        self.animationTypes=animationTypes;
        self.addBlock=addBlock;
        self.deleteBlock=deleteBlock;

        self.saveInfo=saveInfo;
        self.saveField=saveField;
        self.movedSlide=movedSlide;
        self.deleteSlide =deleteSlide;
        self.editSlide=editSlide;
        self.movedStuff =movedStuff;
        self.editModelData=editModelData;
        self.setCollection=setCollection;
        self.deleteCollection=deleteCollection;
        self.saveFieldInSide=saveFieldInSide;
        self.addItemInBlock=addItemInBlock;
        self.getNameCollection=getNameCollection;
        self.setColor=setColor;
        self.uploadHP=uploadHP;
        self.downloadHP=downloadHP;
        self.deleteIndexPageHtml=deleteIndexPageHtml;

        self.cloneBlock=cloneBlock;
        self.getBlockConfig=getBlockConfig;
        self.getNameBlock=getNameBlock;
        self.refreshBlocks=refreshBlocks;

        function getNameBlock(type) {
            if(listOfBlocksForAll[type]){
                return listOfBlocksForAll[type]
            }else{
                return type;
            }
        }

        activate();
        $scope.$on('changeLang',function(){
            activate();
        })


        function activate(){
            $q.when()
                .then(function(){
                    self.blockForAdd=null
                    return $q(function(resolve,reject){
                        self.Items.get({_id:self.store.subDomain},function(res){resolve(res)},function(err){
                            console.log(err)
                            if(err && err.status && err.status==404){
                                resolve(404)
                            }else{
                                resolve()
                            }
                        })
                    })
                    //return self.Items.get({_id:self.store.subDomain} ).$promise
                })
                .then(function (res) {
                    /*var o={_id:res._id,url:null,left:[]}
                    console.log(o)
                    self.Items.save({update:'url left'},o)
                    throw 0;*/

                    if(res && res!=404){
                        self.item=res;
                        if(!self.item.blocks){
                            self.item.blocks=[];
                        }
                        self.item.blocks.forEach(function (el,index) {
                            el.i=index
                        })
                        //console.log(self.item.left)
                       /* self.item.left=self.item.left.filter(function (b) {
                            //console.log(b._id)
                            return b;
                        })*/

                        /*if(!self.item.left.length){
                            self.Items.save({update:'left'},{_id:self.item._id,left:[]});
                        }
                        self.item['left'].forEach(function (el,index) {
                            el.dbIndex=index
                        })
                        self.item['left'].sort(function (a,b) {
                            return a.index-b.index;
                        })
                        self.item['right'].forEach(function (el,index) {
                            el.dbIndex=index
                        })
                        self.item['right'].sort(function (a,b) {
                            return a.index-b.index;
                        })
                        self.item['header'].forEach(function (el,index) {
                            el.dbIndex=index
                        })
                        self.item['header'].sort(function (a,b) {
                            return a.index-b.index;
                        })*/
                    }else if(res==404){
                        self.item={
                            url:self.store.subDomain,
                            header:[],
                            left:[],
                            right:[],
                            blocks:[],
                        }
                        return self.Items.save(self.item).$promise
                    }
                })
                .then(function(res){
                    if(self.item && !self.item._id && res && res.id){
                        self.item._id = res.id;
                    }
                })

                .catch(function(err){
                    exception.catcher('получение home page')(err)
                })
        }


        function addBlock(type){
            if(!type){return}
            console.log('addNewBlock')
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;


            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                //console.log(block.index,index)
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,position:self.activeSide};
            var update={update:'type index position',embeddedName:'blocks',embeddedPush:true};
            console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                    activate()
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        var delay=false;
        function cloneBlock(block){
            if(delay){return}
            delay=true;
            $timeout(function () {
                delay=false
            },2000)
            var newBlock = angular.copy(block)
            delete newBlock._id
            delete newBlock.__v
            if(!newBlock.index){newBlock.index=1}else{newBlock.index++}
            newBlock.img=null;
            newBlock.imgs=[];
            var arr=['stuffs','filterTags','brandTags','categories','brands','news','campaign','info','filters']
            arr.forEach(function (field) {
                if(newBlock[field] && newBlock[field].length){
                    newBlock[field]=newBlock[field].map(function (item) {
                        return item._id
                    })
                }
            })
            self.item.blocks.forEach(function(block){
                //console.log(block.index,index)
                if(block.index && block.index>=newBlock.index){
                    newBlock.index=block.index+1;
                }
            })
            self.item.blocks.push(newBlock)
            var o={_id:self.item._id};
            o[blocks]=self.item.blocks
            var update={update:'blocks'};
            Confirm('потверждаете?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                    activate()
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function refreshBlocks() {
            self.item.blocks=null
            return self.Items.get({_id:self.store.subDomain} ).$promise
                .then(function(data) {
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })

                    self.item.blocks=data.blocks

                })
        }
        function deleteBlock(block) {
            //console.log(block)
            var o={_id:self.item._id};
            var update;
            Confirm('потверждаете?')
                .then(function () {
                    self.item.blocks.splice(block.i,1)
                    if(!block._id){
                        update={update:'blocks'};
                        o.blocks=self.item.blocks
                    } else{
                        o['_id_id']=block._id;
                        update={update:'_id_id',embeddedName:'blocks'};
                        update.embeddedPull=true;
                    }
                    //console.log(update,o)
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })
                    }
                    if(images.length){
                        return Photo.deleteFiles('Homepage',images)
                    }

                })
                .then(function () {
                    activate()
                })
        }

        function saveInfo(){
            saveField('info')
        }
        function saveField(field,value){
            console.log(field,value)
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }

            setTimeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                //console.log(defer,value)
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                    if(field.indexOf('.type')>-1){
                        activate()
                    }
                });
            },100)
        }
        function saveField1001(field,value){
            //console.log(self.activeSide);
            var lang=global.get('store').val.lang;
            self.item[self.activeSide].sort(function (a,b) {
                return a.index-b.index;
            })
            self.item[self.activeSide].forEach(function (b) {
                if(b.name ||  b.name!=undefined){
                    if(!b.nameL){b.nameL={}}
                    b.nameL[lang]=b.name;
                }
                if(b.name1 ||  b.name1!=undefined){
                    if(!b.name1L){b.name1L={}}
                    b.name1L[lang]=b.name1;
                }
                if(b.desc ||  b.desc!=undefined){
                    if(!b.descL){b.descL={}}
                    b.descL[lang]=b.desc;
                }
                if(b.desc1 ||  b.desc1!=undefined){
                    if(!b.desc1L){b.desc1L={}}
                    b.desc1L[lang]=b.desc1;
                }
                if(b.imgs && b.imgs.length){
                    b.imgs.forEach(function (img) {
                        if(img.name ||  img.name!=undefined){
                            if(!img.nameL){img.nameL={}}
                            img.nameL[lang]=img.name;
                        }
                        if(img.desc ||  img.desc!=undefined){
                            if(!img.descL){img.descL={}}
                            img.descL[lang]=img.desc;
                        }
                    })
                }
            })
            var o={_id:self.item._id};
            o[self.activeSide]=self.item[self.activeSide]
            var field=self.activeSide
            var query={update:field}
            var defer = 300
            return $q(function (resolve,reject) {
                $timeout(function(){
                    self.Items.save(query,o,function () {
                        resolve()
                        global.set('saving',true)
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                    })
                },defer)
            })

        };

        function saveFieldOld(block,index,f,defer,indexImgs){
            console.log(self.activeSide);
            if(f=='index'){
                self.item[self.activeSide].sort(function (a,b) {
                    return a.index-b.index;
                })
            }
            var o={_id:self.item._id};
            o[self.activeSide]=self.item[self.activeSide]
            var field=self.activeSide

            return;
            defer =defer||200
            setTimeout(function(){
                var o={_id:self.item._id};
                var field=self.activeSide+'.'+block.dbIndex;
                if(f){
                    field=field+'.'+f;
                    o[field]=block[f];
                }else{
                    o[field]=block;
                }
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                })
                if(f=='index'){
                    self.item[self.activeSide].sort(function (a,b) {
                        return a.index-b.index;
                    })
                }
            },defer)
        };

        function movedSlide(block,field,item){
            setTimeout(function(){
                block[field].forEach(function(el,i){
                    el.index=i;
                })
                //console.log($index)
                self.saveField(block,null,field)
            },100)
            return item;
        }
        function deleteSlide(block,index,$index){
            Confirm('Удалить?')
                .then(function(){
                    return Photo.deleteFiles('Homepage',[block.imgs[index].img])
                })
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField(block,$index,'imgs')
                },function(err) {console.log(err)});

        }
        function editSlide(block,index,$index){
            //console.log(slide)
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/homePage/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    if(!slide.button){slide.button={}}
                    self.item=slide;
                    self.animationTypes=animationTypes;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField(block,$index,'imgs',null,index)
            }, function () {
            });
        }


        function movedStuff(block,item){
            setTimeout(function(){
                saveFieldInSide(block)
            },100)

            return item;
        }




        function editModelData(block,i){
            var model=block.type,
                items=block[block.type]

            if(items[i] && items[i]._id){
                var field;
                 if(model=='brands'){
                    field='Brand';
                 } else if(model=='categories'){
                    field='Category';
                 } else if(model=='filterTags'){
                    field='FilterTags';
                 }else if(model=='filters'){
                    field='Filters';
                 }else if(model=='brandTags'){
                    field='BrandTags';
                 }else if(model=='stuffs'){
                     field='Stuff';
                 }else if(model=='news'){
                     field='News';
                 }else if(model=='campaign'){
                     field='Campaign';
                 }else if(model=='info'){
                     field='Info';
                 }
                $q.when()
                    .then(function(){
                        return EditModelData.doIt(field,items[i]._id,items[i])
                    })
                    .then(function(img){
                        console.log(img==items[i].img)
                        if(img && img!=items[i].img){
                            items[i].img=img
                            console.log(img)
                        }
                        
                    })
                    /*.catch(function(item){
                        if(item && item._id){
                            items[i]=res;
                        }
                    })*/


            } else{
                /*var field;
                if(model=='Brand'){
                    field='brands';
                } else if(model=='Category'){
                    field='categories';
                } else if(model=='FilterTags'){
                    field='filterTags';
                }else if(model=='BrandTags'){
                    field='brandTags';
                }*/

                setCollection(items,i,model)
            }

        }
        function addItemInBlock(block) {
            var field=block.type;
            if(!block[block.type]){block[block.type]=[]}
            var collections=block[block.type]
            var Items;
            if(field=='brands'){
                Items=Brands;
            } else if(field=='categories'){
                Items=Category;
            } else if(field=='filterTags'){
                Items=FilterTags;
            }else if(field=='filters'){
                Items=Filters;
            }else if(field=='brandTags'){
                Items=BrandTags;
            }else if(field=='stuffs'){
                Items=Stuff;
            }else if(field=='news'){
                Items=News;
            }else if(field=='campaign'){
                Items=Campaign;
            }else if(field=='info'){
                Items=Info;
            }
            $q.when()
                .then(function(){
                    return Items.select({actived:true})
                })
                .then(function(item){
                    //console.log(item)
                    collections.push(item);
                    self.saveFieldInSide(block)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function setCollection(block,idx){
            var field=block.type;
            var collections=block[block.type]
            var Items;
            if(field=='brands'){
                Items=Brands;
            } else if(field=='categories'){
                Items=Category;
            } else if(field=='filterTags'){
                Items=FilterTags;
            } else if(field=='filters'){
                Items=Filters;
            }else if(field=='brandTags'){
                Items=BrandTags;
            }else if(field=='stuffs'){
                Items=Stuff;
            }else if(field=='news'){
                Items=News;
            }else if(field=='campaign'){
                Items=Campaign;
            }else if(field=='info'){
                Items=Info;
            }
            $q.when()
                .then(function(){
                    return Items.select()
                })
                .then(function(item){
                    collections[idx]=item;
                    self.saveFieldInSide(block)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function saveFieldInSide(item) {
            var field=item.type;
            console.log(item[item.type])
            //console.log('saveField',item)
            //console.log('saveField',item)
            var o={_id:self.item._id};
            o[field]=item[field].map(function(e){return e._id});
            var update={update:field,embeddedName:self.activeSide};
            update.embeddedVal=item._id
            console.log(update,o)
            return self.Items.save(update,o).$promise;


        }


        function deleteCollection(block,idx){
            block[block.type].splice(idx,1);
            saveFieldInSide(block)
        }
        function getNameCollection(type) {
            switch (type) {
                case 'categories': return 'категории'
                case 'brands': return 'бренды'
                case 'brandTags': return 'коллекции'
                case 'filterTags': return 'признаки'
                case 'filters': return 'характеристики'
                default: return '???????';
            }

        }

        function setColor(block,idx){
            //console.log(block,idx)
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField(block,idx,'blockStyle')
                    console.log(block.elements)
                    saveField(block,idx,'elements')
                })

        }
        function uploadHP() {
            Confirm('выгрузить?')
                .then(function () {
                    return $http.post('/api/setTemplateHP', {
                        template:{
                            blocks:self.item.blocks,
                            /*left:self.item.left,
                            right:self.item.right*/
                        },
                        store:global.get('store').val._id}
                    )
                })
                .then(function (res) {
                    exception.showToaster('success','статус','обновлено')
                })
                .catch(function(err){
                    exception.catcher('выгрузка шаблона')(err)
                })
        }
        function downloadHP() {
            Confirm('загрузить?')
                .then(function () {
                    return $http.get('/views/templatesHP/'+global.get('store').val.subDomain+'.json')
                })
                .then(function (res) {
                    console.log(res.data)
                    /*self.item.template=res.data;
                    Store.save({update:'template'},{_id:self.item._id,template:self.item.template})*/
                    if(res.data && res.data.blocks){
                       var o={_id: self.item._id}
                       o.blocks=res.data.blocks
                        /*console.log(res.data.left)
                        res.data.left.splice(2,1)
                        res.data.left.splice(4,1)
                        res.data.left.splice(5,1)*/

                        //console.log(res.data.left)
                        self.Items.save({update:'blocks'},o,function(){
                            self.item.blocks=res.data.blocks;
                            /*self.item.left=res.data.left;
                            self.item.right=res.data.right;*/
                            exception.showToaster('success','статус','обновлено')
                        })
                    }else{
                        throw 'не верный формат данных'
                    }



                })
                .catch(function(err){
                    exception.catcher('загрузка шаблона')(err)
                })

        }
        function deleteIndexPageHtml() {
            Confirm('перезаписать страницу?')
                .then(function () {
                    return $http.get('/api/deleteIndexPageHtml')
                })
                .then(function (res) {
                    exception.showToaster('info','все OK')
                })
                .catch(function(err){
                    exception.catcher('сброс страницы')(err)
                })

        }
        function getBlockConfig(block) {
            $q.when()
                .then(function () {
                    return $http.get('/api/getBlocksHP/'+block.type)
                })
                .then(function (res) {
                    //console.log(res)
                    if(res.data){
                        return HomePage.selectItemFromList(res.data)
                    }
                })
                .then(function (b) {
                    //console.log(b)
                    if(b){
                        if(block.img){
                            //Photo.deleteFiles('Homepage',[block.img])
                        }else if(block.video){
                            Photo.deleteFiles('Homepage',[block.video])
                        }else if(block.imgs && block.type!='stuffs'){
                            var a=[];
                            block.imgs.forEach(function (i) {
                                a.push(i.img)
                            })
                            if(a.length){
                                Photo.deleteFiles('Homepage',a)
                            }
                        }
                        for(var key in block){
                            if(key!='_id' && key!='index'){
                                delete block[key]
                            }
                        }
                        var photos=[];
                        for(var key in b){
                            if(key!='_id' && key!='template' && key !='nameTemplate' && key!='index'){
                                if(key=='img' && b[key]){
                                    var p = b[key].split('/')
                                    p[p.length-2]=self.item.url;
                                    p[p.length-4]=global.get('store').val.subDomain;

                                    var img = p[p.length-1].split('.')
                                    img[img.length-2] +='copy'
                                    p[p.length-1]=img.join('.')
                                    block[key]=p.join('/')
                                    photos.push([b[key],block[key]])
                                }else if(key=='imgs' && b[key] && b[key].length){
                                    b[key].forEach(function (i) {
                                        if(i.img){
                                            var p = i.img.split('/')
                                            p[p.length-2]=self.item.url;
                                            p[p.length-4]=global.get('store').val.subDomain;

                                            var img = p[p.length-1].split('.')
                                            img[img.length-2] +='copy'
                                            p[p.length-1]=img.join('.')
                                            photos.push([i.img,p.join('/')])
                                            i.img=p.join('/');
                                        }

                                    })
                                    block[key] = b[key];

                                }else if(key=='video' && b[key]){
                                    var p = b[key].split('/')
                                    p[p.length-2]=self.item.url;
                                    p[p.length-4]=global.get('store').val.subDomain;
                                    var img = p[p.length-1].split('.')
                                    img[img.length-2] +='copy'
                                    p[p.length-1]=img.join('.')
                                    block[key]=p.join('/')
                                    photos.push([b[key],block[key]])
                                }else{
                                    block[key] = b[key];
                                }

                            }
                        }
                        var folder = '/images/'+global.get('store').val.subDomain+'/HomePage/'+self.item.url;
                        var o={folder:folder,photos:photos};
                        return $http.post(photoUpload+'/api/copyPhotosFromBrowser',o)

                    }
                })
                .then(function () {
                    return saveField(block,block.i)
                })
                .then(function () {
                    activate()
                })
        }
    }
})


function HPtransform(HP,template){
    function setData(e){
        var o={type:e.name}
        if(e.templ){o.templ=e.templ}
        if(e.style){o.style=e.style};
        if(e.name=='stuffs'){
            if(HP.stuffs && HP.stuffs.length){
                o.stuffs=HP.stuffs;
            }

            if(e.namebox){
                o.name=e.namebox;
            }
            //console.log(o)
        }else if(e.name=='brands'){
            if(HP.brands && HP.brands.length){
                o.brands=HP.brands;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='brandTags'){
            if(HP.brandTags && HP.brandTags.length){
                o.brandTags=HP.brandTags;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='filterTags'){
            if(HP.filterTags && HP.filterTags.length){
                o.filterTags=HP.filterTags;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='filters'){
            if(HP.filters && HP.filters.length){
                o.filters=HP.filters;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='categories'){
            if(HP.categories && HP.categories.length){
                o.categories=HP.categories;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='campaign'){
            if(HP.campaign && HP.campaign.length){
                o.campaign=HP.campaign
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='news'){
            if(HP.news && HP.news.length){
                o.news=HP.news
            }
            if(e.namebox){
                o.name=e.namebox;
            }

        }else if(e.name=='text'){
            o.name=HP.textName;
            o.desc=HP.textDesc;
            if(HP.textButton){
                o.button={
                    is:HP.textButton.button,
                    link:HP.textButton.link,
                    text:HP.textButton.text,
                }
            }
        }else if(e.name=='mission'){
            o.name=HP.name;
            o.desc=HP.desc;
            if(HP.descButton){
                o.button={
                    is:HP.descButton.button,
                    link:HP.descButton.link,
                    text:HP.descButton.text,
                }
            }
        }else if(e.name=='banner'){
            o.img=HP.bannerSrc;
            if(HP.banner){
                o.desc=HP.banner.desc;
                o.button={
                    is:HP.banner.button,
                    link:HP.banner.link,
                    text:HP.banner.text,
                }
            }
        }else if(e.name=='video'){
            o.video=HP.videoSrc;
            if(HP.video){
                o.audio=HP.video.audio;
                o.desc=HP.video.desc;
                o.button={
                    is:HP.video.button,
                    link:HP.video.link,
                    text:HP.video.text,
                }
            }

        }else if(e.name=='slider'){
            if(HP.imgs){
                o.imgs=HP.imgs;
            }
        } else if(e.name=='info'){
            o.img=HP.infoImg;
            if(HP.info){
                o.name=HP.info.name;
                o.button={link:HP.info.link};
            }

        }
        return o;
    }
    if(!HP.url){
        var hp={header:[],left:[],right:[]};
        //console.log(template)
        template.left.forEach(function(e){
            hp.left.push(setData(e))
        })
        template.right.forEach(function(e){
            hp.right.push(setData(e))
        })
    }else{
        var hp=HP;
    }
    return hp;
}



// blocks
angular.module('gmall.directives')
    .directive('directivehp', function($compile, $interpolate) {
        return {
            template: '',
            link: function($scope, element, attributes) {
                element.append($compile('<div ' + attributes.directivehp.toLowerCase() + 'hp-block></div>')($scope));
            }
        };
    })
    .directive('styleBlock',styleBlock)
    .directive('bannerhpBlock',bannerHPBlock)
    .directive('banneronehpBlock',banneroneHPBlock)
    .directive('infohpBlock',infohpBlock)
    .directive('sliderhpBlock',sliderhpBlock)
    .directive('texthpBlock',texthpBlock)
    .directive('texttwohpBlock',texttwohpBlock)
    .directive('videohpBlock',videohpBlock)
    .directive('missionhpBlock',missionhpBlock)
    .directive('brandshpBlock',brandshpBlock)
    .directive('stuffshpBlock',stuffshpBlock)
    .directive('newshpBlock',newshpBlock)
    .directive('campaignhpBlock',campaignhpBlock)
    .directive('maphpBlock',maphpBlock)
    .directive('reviewhpBlock',reviewhpBlock)
    .directive('subscriptionhpBlock',subscriptionhpBlock)
    .directive('callhpBlock',callhpBlock)
    .directive('feedbackhpBlock',feedbackhpBlock)
    .directive('brandtagshpBlock',brandTagshpBlock)
    .directive('subscriptionaddhpBlock',subscriptionAddhpBlock)
    .directive('filtertagshpBlock',filterTagshpBlock)
    .directive('filtershpBlock',filtershpBlock)
    .directive('categorieshpBlock',categorieshpBlock)
    .directive('calendarhpBlock',calendarhpBlock)
    .directive('videolinkhpBlock',videolinkhpBlock)
    .directive('pricegoodshpBlock',pricegoodshpBlock)
    .directive('priceserviceshpBlock',priceserviceshpBlock)
    .directive('scheduleplacehpBlock',scheduleplacehpBlock)
    .directive('hpBlock',undefinedhpBlock)

    .directive('googlePlaceReviews',googlePlaceReviews)






function googlePlaceReviews(global) {
    /*https://support.google.com/business/answer/7035772?hl=ru*/
    return{
        restrict :'C',
        scope:true,
        link:function(scope,element){
            if(global.get('store').val.glPlaceId){
                console.log("global.get('store').val.glPlaceId",global.get('store').val.glPlaceId)
                $(element).googlePlaces({
                    //placeId: 'ChIJp2QxV_sJVFMR1DEp1x_16F8' //Find placeID @: https://developers.google.com/places/place-id
                    placeId: global.get('store').val.glPlaceId
                    , render: ['reviews']
                    , min_rating: 1
                    , max_rows:4
                });
            }
            //console.log($(element).find("#google-reviews"))
        }
    }
}


function undefinedhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/undefinedBlock.html',
    }
}

function styleBlock(){
    return {
        templateUrl: 'components/homePage/blocks/styleBlock.html',
    }
}


function bannerHPBlock(){
    return {
        templateUrl: 'components/homePage/blocks/bannerBlock.html',
    }
}
function banneroneHPBlock(){
    return {
        templateUrl: 'components/homePage/blocks/banneroneBlock.html',
    }
}
function infohpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/infoBlock.html',
    }
}
function sliderhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/sliderBlock.html',
    }
}
function texthpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/textBlock.html',
    }
}
function texttwohpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/texttwoBlock.html',
    }
}
function videohpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/videoBlock.html',
    }
}
function missionhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/missionBlock.html',
    }
}
function brandshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/brandsBlock.html',
    }
}
function stuffshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/stuffsBlock.html',
    }
}
function newshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/newsBlock.html',
    }
}
function campaignhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/campaignBlock.html',
    }
}
function maphpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/mapBlock.html',
    }
}
function reviewhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/reviewBlock.html',
    }
}
function subscriptionhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/subscriptionBlock.html',
    }
}
function callhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/callBlock.html',
    }
}
function feedbackhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/feedbackBlock.html',
    }
}
function brandTagshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/brandTagsBlock.html',
    }
}
function subscriptionAddhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/subscriptionAddBlock.html',
    }
}
function filterTagshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/filterTagsBlock.html',
    }
}
function filtershpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/filtersBlock.html',
    }
}
function categorieshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/categoriesBlock.html',
    }
}
function calendarhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/calendarBlock.html',
    }
}
function videolinkhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/videolinkhpBlock.html',
    }
}
function pricegoodshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/pricegoodsBlock.html',
    }
}
function priceserviceshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/priceservicesBlock.html',
    }
}
function scheduleplacehpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/scheduleplaceBlock.html',
    }
}


/*
var map, infoWindow;
function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: -34.397, lng: 150.644},
        zoom: 6
    });
    infoWindow = new google.maps.InfoWindow;

    // Try HTML5 geolocation.
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            console.log(position)
            var pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            infoWindow.setPosition(pos);
            infoWindow.setContent('Location found.');
            infoWindow.open(map);
            map.setCenter(pos);

            //http://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&sensor=false

        }, function () {
            handleLocationError(true, infoWindow, map.getCenter());
        });
    } else {
        // Browser doesn't support Geolocation
        handleLocationError(false, infoWindow, map.getCenter());
    }
}

function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    console.log(error)
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ?
        'Error: The Geolocation service failed.' :
        'Error: Your browser doesn\'t support geolocation.');
    infoWindow.open(map);
}
*/

'use strict';
angular.module('gmall.directives')
.directive('paginatorMain', function (anchorSmoothScroll,$anchorScroll,global) {
        return {
            restrict:'E',
            scope :{
                paginate:'=',
                getlist:'&',
                scroll:"@"
            },
            link: function (scope, element, attrs, controller) {
               //console.log('likn paginator',scope.paginate);
                var store = global.get('store').val
                var stuffListType = (global.get('sectionType'))?global.get('sectionType').val:'good';
                //console.log(store.template.stuffListType)
                var rows=(store.template.stuffListType[stuffListType] && store.template.stuffListType[stuffListType].rows)||3;
                var filterBlock=store.template.stuffListType[stuffListType].parts.find(function(e){return e.name=='filters' && e.is && e.is!='false'})
                var filtersInModal=store.template.stuffListType[stuffListType].filtersInModal;
                if(filterBlock && !global.get('mobile').val && !filtersInModal){
                    rows--
                }

                //console.log(rows,filterBlock,filtersInModal)

               if(!scope.paginate || typeof scope.paginate!='object'){
                   //console.log('exit')
                   return;
               }

                var l;
                scope.paginator={};
                scope.$watch('paginate.items',function(n,o){
                    //console.log(n)
                    if (n || n===0) {
                        scope.paginate.items=Number(n)
                        l=scope.paginator.pageCount();
                        scope.arrayPage=scope.getListPage();
                    }
                })


                function getList(){
                    //console.log(scope.scroll)
                    if(scope.scroll){
                        anchorSmoothScroll.scrollTo(scope.scroll,200);
                    }
                    scope.getlist();
                }

                scope.paginator.setPage = function (page) {
                    //console.log(page)
                    page = Number(page);
                    if (!page && page!==0) return;
                    if (page > scope.paginator.pageCount() || page==scope.paginate.page) {
                        return;
                    }
                    scope.paginate.page = page;

                    if (scope.paginate.page==0){
                        //console.log('думаем');
                        scope.arrayPage=scope.getListPage(2)

                    }
                    //console.log(l)
                    if (scope.paginate.page==(l-1)){
                        //console.log('посдедняя страница');
                        scope.arrayPage=scope.getListPage(6)
                    }

                    if (scope.paginate.page==scope.arrayPage[3] && scope.arrayPage.length==6&& ((l-1)-scope.paginate.page)>2){
                        scope.arrayPage=scope.getListPage()
                    } else if(scope.paginate.page==scope.arrayPage[4] && scope.arrayPage.length==7){
                        scope.arrayPage=scope.getListPage()
                    } else if (scope.paginate.page==scope.arrayPage[2] && scope.paginate.page-scope.arrayPage[0]>=2){
                        scope.arrayPage=scope.getListPage()
                    }


                    getList()
                };
                scope.paginator.nextPage = function () {
                    if (scope.paginator.isLastPage()) {
                        return;
                    }
                    scope.paginate.page++;
                    if (scope.paginate.page==scope.arrayPage[3] && scope.arrayPage.length==6&& ((l-1)-scope.paginate.page)>2){
                        scope.arrayPage=scope.getListPage()
                    } else if(scope.paginate.page==scope.arrayPage[4] && scope.arrayPage.length==7){
                        scope.arrayPage=scope.getListPage()
                    } else if (scope.paginate.page==scope.arrayPage[2] && scope.paginate.page-scope.arrayPage[0]>=2){
                        scope.arrayPage=scope.getListPage()
                    }
                    getList()
                };
                scope.paginator.perviousPage = function () {
                    if (scope.paginator.isFirstPage()) {
                        return;
                    }
                    scope.paginate.page--;
                    if (scope.paginate.page==scope.arrayPage[3] && scope.arrayPage.length==6&& ((l-1)-scope.paginate.page)>2){
                        scope.arrayPage=scope.getListPage()
                    } else if(scope.paginate.page==scope.arrayPage[4] && scope.arrayPage.length==7){
                        scope.arrayPage=scope.getListPage()
                    } else if (scope.paginate.page==scope.arrayPage[2] && scope.paginate.page-scope.arrayPage[0]>=2){
                        scope.arrayPage=scope.getListPage()
                    }
                    getList()
                };
                scope.paginator.firstPage = function() {
                    scope.paginate.page = 0;
                    getList()
                };
                scope.paginator.lastPage = function () {
                    scope.paginate.page = scope.paginator.pageCount() - 1;
                    getList()
                };
                scope.paginator.isFirstPage = function () {
                    return scope.paginate.page == 0;

                };
                scope.paginator.isLastPage = function () {
                    return scope.paginate.page == scope.paginator.pageCount() - 1;
                };
                scope.paginator.pageCount = function () {
                    var perPage =scope.paginate.rows;
                    var delta = perPage%rows;
                    var midleRows=Math.round(rows/2);
                    if(delta>=midleRows){
                        perPage+=(rows-delta)
                    }else{
                        perPage-=delta
                    }
                    //console.log(perPage,delta)

                    var count = Math.ceil(parseInt(scope.paginate.items, 10) / parseInt(perPage, 10));
                    /*count = Math.ceil(parseInt(scope.paginate.items, 10) / parseInt(scope.paginate.rows, 10));*/
                    //console.log(count)
                    if (count === 1) { scope.paginate.page = 0; }
                    return count;
                };


                scope.changeRow = function(rows){
                    scope.paginate.rows=rows;
                    while (scope.paginator.pageCount()<(scope.paginate.page-1)){
                        scope.paginate.page--;
                    }
                    getList()
                }
                scope.arrayPage=[];

                scope.getListPage = function(num){
                    //console.log(num)
                    //if (!page){page=}
                    var page=scope.paginate.page;
                    var arrayPage=[];
                    if (num===0 || num){page = num}
                    //var page=scope.paginate.page;
                    //console.log(page,l)
                    if (l<=6){
                        for(var i=0;i<l;i++){
                            arrayPage.push(i)
                        }
                    }else{
                        if (page>=3 ){
                            arrayPage.push(0)
                            arrayPage.push('...');
                            arrayPage.push(page-1)
                            arrayPage.push(page)
                            arrayPage.push(page+1)
                        } else{
                            for(var i=0;i<4;i++){
                                arrayPage.push(i)
                            }
                        }
                        if(((l-1)-page)>2){
                            arrayPage.push('...');
                        }
                        arrayPage.push(l-1)
                    }
                    //console.log(arrayPage)
                    return arrayPage;
                }
                scope.getPageStr = function(i){
                    if (Number(i) || i===0){return i+1} else {return i}
                }

            },
            templateUrl: 'components/paginator/paginator.html'
        };
    })

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('iSubscription',itemDirective);
    function itemDirective(){
        return {
            scope: {
                modalClose:'&'
            },
            rescrict:"E",
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/subscription/subscription.html',
        }
    }
    itemCtrl.$inject=['$q','global','$state','$user','exception']
    function itemCtrl($q,global,$state,$user,exception){
        var self = this;
        self.ok=ok;
        self.email='';
        function ok(form){
            if(!form.$valid) {return}
            $q.when()
                .then(function(){
                    return $user.newUser(null,self.email)
                })
                .then(function(){
                    if(self.modalClose && typeof self.modalClose=='function'){
                        self.modalClose();
                    }
                    var pap;
                    if (global.get('paps' ) && global.get('paps' ).val && (pap=global.get('paps' ).val.getOFA('action','subscription'))){
                        $state.go('thanksPage',{url:pap.url})
                    }
                })
                .catch(function(err){
                    err = err.data;
                    self.errors = {};
                    if (err && err.error){
                        form['email'].$setValidity('mongoose', false);
                        self.errors['email'] = err.error;
                        exception.catcher('подписка')(err.error)
                    } else {
                        exception.catcher('подписка')(err)
                    }
                })
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('categoriesForList', categoriesForListDirective)
        .directive('categoriesForListTatiana', categoriesForListTatiana)
        .directive('categoriesForListTemplate', categoriesForListTemplate)
        .directive('categoriesForListTemplate1', categoriesForListTemplate1)
        .directive('categoriesForListTemplate2', categoriesForListTemplate2)
        .directive('categoriesForListTemplate3', categoriesForListTemplate3);

    function categoriesForListTatiana(global) {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/'+global.get('store').val.template.folder+'/partials/category/categoriesForList.html',
        };
    }
    function categoriesForListTemplate() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList.html',
        };
    }
    function categoriesForListTemplate1() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList1.html',
        };
    }
    function categoriesForListTemplate2() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList2.html',
        };
    }
    function categoriesForListTemplate3() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList3.html',
        };
    }
    function categoriesForListDirective() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/categoriesForList/categoriesForList.html'
        };
    }
    categoriesForListCtrl.$inject=['$stateParams','$state','$q','$location','global']
    function categoriesForListCtrl($stateParams,$state,$q,$location,global){
        if(!global.get('store').val){return}
        //console.log('sss')
        var self = this;
        var $ctrl=self;
        self.getFilterTagsPhoto=getFilterTagsPhoto;


        self.global=global;
        self.prop={};
        self.category=$stateParams.categoryUrl;
        self.parentSection=global.get('parentSection').val;
        //console.log(self.parentSection)
        self.breadcrumbs=global.get('breadcrumbs').val;
        //console.log(self.padding)
        self.changeCategory=changeCategory;
        self.deleteCrumb=deleteCrumb;
        self.checkInnerData=checkInnerData;
        self.queryTag=null;
        if($stateParams.queryTag){
            if(global.get('store').val.saleTag && global.get('store').val.saleTag==$stateParams.queryTag){
                self.queryTag='sale'
            }else if(global.get('store').val.newTag && global.get('store').val.newTag==$stateParams.queryTag){
                self.queryTag='new'
            }
        }
        active();

        function active(){}
        function changeCategory(category,tag){
            var brand = ($stateParams.brand)?brand=$stateParams.brand:null
            var queryTag=null;
            if(tag){
                if(tag=='sale'){
                    queryTag=global.get('store').val.saleTag
                }else if(tag='new'){
                    queryTag=global.get('store').val.newTag
                }
            }
            var o={
                groupUrl:$stateParams.groupUrl,
                categoryUrl:category,
                queryTag:queryTag,
                brand:brand,
                brandTag:null,
                searchStr:undefined,
            };
            //console.log(o)
            /*$state.transitionTo($state.current, o, {
                reload: true, inherit: false, notify: false
            });*/
            //$state.reload()
            $state.go('stuffs',o,{reload:true,lacation:true,inherit: false, notify: true});
        }
        function deleteCrumb(index){
            change(self.breadcrumbs.splice(index,1)[0].type)
            function change(type){
                var query = self.breadcrumbs.reduce(function(q,item){
                    if(item.type==type){
                        if(q){q+='__'}
                        q+=item.url;
                    }
                    return q;
                },'')
                if(!query){
                    query=null;
                }
                $location.search(type,query)
            }
        }
        function checkInnerData() {
            if($ctrl.parentSection){
                return $ctrl.parentSection.categories.length && $ctrl.parentSection.categories.filter(function(c){return !c.notActive}).length>1
            }else{return false}

        }
        function getFilterTagsPhoto(url) {
            //console.log(url)
            return global.get('filterTags').val.getOFA('url',url)
        }


    }
})()


'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('mongooseError', function () {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function(scope, element, attrs, ngModel) {
                    element.on('keydown', function() {
                        return ngModel.$setValidity('mongoose', true);
                    });
                }
            };
        })
})()


'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('ngAutocompleteCity', function($parse,$timeout,global) {
            return {
                scope: {
                    user:'=',
                    change:'&'
                },

                link: function(scope, element, attrs, model,contorller) {
                    var placeChosen=false;
                    setTimeout(function(){
                        activate()
                    },500)
                    function activate(){
                        if(!scope.user){scope.user={}}
                        if(!scope.user.profile){scope.user.profile={}}
                        if(!scope.user.profile.city){scope.user.profile.city=''}
                        element[0].value=scope.user.profile.city;
                        if (scope.gPlace == undefined) {
                            //console.log(google.maps.places)
                            scope.gPlace = new google.maps.places.Autocomplete(element[0], {types: ['(cities)']});
                        }
                        google.maps.event.addListener(scope.gPlace, 'place_changed',place_changed);
                        google.maps.event.addDomListener(element[0], 'keydown', function(e) {
                            if (e.keyCode == 13) {
                                e.preventDefault();
                            }
                            //console.log(scope.user.profile.cityId)
                        });
                    }
                    scope.$watch(function(){return element.val()},function (o,n) {
                        //console.log(o,n)
                        if(n && n!=o && !placeChosen){
                            scope.user.profile.cityId=null;
                            scope.user.profile.city= element.val();
                            //scope.$apply()
                        }
                    })
                    function place_changed() {
                        placeChosen=true;
                        var place = scope.gPlace.getPlace();
                        if(place.place_id){

                            setTimeout(function(){
                                scope.user.profile.city= element.val();
                                $timeout(function () {
                                    scope.user.profile.cityId=place.place_id;
                                },200)

                                scope.$apply()
                                if(scope.change && typeof scope.change=='function'){
                                    scope.change()
                                }
                            },50)
                        }else{
                            scope.cityId=null;
                            scope.user.profile.city= element.val();
                            scope.$apply()
                        }
                        $timeout(function () {
                            placeChosen=false;
                        },1000)
                    }
                }
            };
        });
})()


'use strict';
(function(){
    angular.module('gmall.services')
        .service('Witget', serviceFunction);
    serviceFunction.$inject=['$uibModal','$q','$state','$timeout','$rootScope'];
    function serviceFunction($uibModal,$q,$state,$timeout,$rootScope){
        return {
            show:show,
        }
        function show(item,delay){
            if(item.showOnes){
                var k = getCookie('witget'+item._id)
                //console.log("getCookie('witget'+item._id)",k)
                if(k){
                    return;
                }else{
                    var options ={
                        path:'/',
                        expires:3600
                    }
                    setCookie('witget'+item._id, '111', options)
                }
            }

            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/TEMPLATE/witget/index.html',
                    controller: function($scope,$uibModalInstance,item){
                        $scope.flag=false;
                        var self=this;
                        self.item=item;
                        if(item.stuff && item.stuff.name){
                            self.stuff=item.stuff.name+((item.stuff.artikul)?' '+item.stuff.artikul:'')
                        }
                        //console.log(self.stuff)
                        self.ok=function(state){
                            //console.log(state)
                            $uibModalInstance.close(state);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };

                        $scope.$on('closeWitget',function () {
                            $uibModalInstance.close()
                        })
                    },
                    resolve:{item:function(){return item}},
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                }
                if (delay){
                    if(item.delay){
                        delay=Number(item.delay)*1000;
                    }else{
                        delay=0;
                    }
                }else{
                    delay=0;
                }
                //console.log(item.delay,delay)
                $timeout(function(){
                    $rootScope.$emit('modalOpened')
                    $uibModal.open(options ).result.then(function () {
                        $rootScope.$emit('modalClosed')
                        resolve()
                    }, function (err) {
                        $rootScope.$emit('modalClosed')
                        reject(err)
                    })
                },delay)
            })

        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .service('Stat', statService);
    statService.$inject=['$resource','$uibModal','$q'];
    function statService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Stat/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            create:create,
            selectItem:selectItem
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/staticPage/createStaticPage.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function selectItem(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/staticPage/selectItem.html',
                    controller: selectItemCtrl,
                    controllerAs:'$ctrl',
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedFilterTag) {
                    resolve(selectedFilterTag)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectItemCtrl.$inject=['Stat','$uibModalInstance','$q'];
        function selectItemCtrl(Stat,$uibModalInstance,$q){
            var self=this;
            $q.when()
                .then(function(){
                    return Stat.getList({rows:100,page:0});
                } )
                .then(function(stats){
                    self.stats=stats;
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (stat) {
                $uibModalInstance.close(stat);
            };
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('gmallSlider',gmallSliderDirective)
        .directive('gmallSliderHome',gmallSliderHomeDirective)
        .directive('gmallSliderHomeNivo',gmallSliderHomeNivoDirective)
        .directive('gmallSliderPage',gmallSliderPageDirective)
        .directive('gmallSliderPageByHover',gmallSliderPageByHoverDirective);
    function gmallSliderDirective(){
        return {
            scope: {
                images:"=",
                index:"="
            },
            restrict:"E",
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            template:[
                '<div  class="slider-fade">',
                    '<div class="mytoggle" ng-repeat="slide in $ctrl.images" ng-init="$first && $ctrl.finished()" ng-show="$ctrl.currentIndex==$index">',
                        '<a  href="{{slide.link}}">',
                            '<img class="img-responsive" ng-src="{{slide.img}}">',
                            '<div class="box-overlay"></div>',
                            '<div>',
                                '<h1 ng-bind="slide.name"></h1>',
                                '<p ng-bind-html="slide.desc|unsafe"></p>',
                            '</div>',
                        '</a>',
                    '</div>',
                    '<a ng-click="$ctrl.prev()" class="navleft-carousel">',
                        '<img src="img/icon/back.png">',
                    '</a>',
                    '<a ng-click="$ctrl.next()" class="navright-carousel">',
                        '<img src="img/icon/next.png">',
                    '</a>',
                    '<ol class="carousel-indicators">',
                        '<li ng-repeat="slide in $ctrl.images track by $index" ng-click="$ctrl.setSlide($index)" ng-class="{active:$ctrl.currentIndex==$index}">',
                        '</li>',
                    '</ol>',
                '</div>'
            ].join(''),
            //templateUrl111: 'components/TEMPLATE/slider/slider.html',
        }
    }
    function gmallSliderPageDirective($timeout,$rootScope,global){
        return {
            restrict:"A",
            replace:false,
            link:function(scope,element,attr){
                //console.log('active')
                var index=0;
                var timeSlide=4000;
                if(global.get('mobile').val){
                    timeSlide=3000
                }
                var innerDiv = element.find('.mytoggle-page'),substrate;
                var imgs=[]
                var links=[];
                var lastLink;
                var maxHeight=0;
                innerDiv.each(function (i,div) {
                    //console.log(div,$(div).attr('id'))
                    imgs.push($(div).attr('id'))
                    links.push($(div).find('a'));
                    if(!i){
                        $(div).css('opacity', 1)
                    }
                })
                try{
                    lastLink=links[links.length-1]
                    links= links.map(function (l) {
                        return l.attr('href');
                    })
                }catch (err){console.log(err)}

                element.find('.substrate').each(function(i,div){
                    if(i){return}
                    substrate=$(div);
                    substrate.find('img').each(function(i,img){
                        //console.log(i,img)
                        if(i){return}
                        //console.log(this.complete)
                        var self=this;
                        if(!this.complete){
                            $(this).bind('load', function() {
                                /*console.log(self.complete)
                                 console.log($(this).height())*/

                                var k = 1000+ getRandomInt(100,2000)
                                //console.log('k',k)
                                $timeout(function(){sliderFunc()},k)

                                setHeight($(self).height())
                                $timeout(function () {
                                    $(div).css('opacity', 0)
                                },50)


                            })
                        }else{

                            var k = 1000+ getRandomInt(100,2000)
                            //console.log('k1',k)
                            $timeout(function(){sliderFunc()},k)
                            //console.log(self,$(self).height())
                            setHeight($(self).height())
                            $timeout(function () {
                                $(div).css('opacity', 0)
                            },50)
                        }
                    })
                })

                function next() {
                    //console.log('next',imgs[index],index,innerDiv.length)
                    $('#'+imgs[index]).css('opacity',0)
                    index < innerDiv.length - 1 ? index++ : index = 0;
                    $('#'+imgs[index]).css('opacity',1)
                    try{$(lastLink).attr('href',links[index])}catch (err){console.log(err)}
                };


                function setHeight(h){
                    //console.log(h)
                    innerDiv.each(function(i,div){
                        //console.log(div)
                        //console.log(h,this)
                        $(div).height(h)

                    })
                    /*$timeout(function () {
                        innerDiv.each(function(i,div){
                            var img =$(div).find('img');
                            if(maxHeight<$(img).height()){
                                maxHeight=$(img).height()
                            }
                            if(maxHeight<$(div).height()){
                                maxHeight=$(div).height()
                            }
                        })
                        //console.log(maxHeight)
                        element.find('.substrate').each(function(i,div){
                            $(div).height(maxHeight)
                        })
                    },1500)*/

                }
                var timer;
                function sliderFunc() {
                    timer =  $timeout(function() {
                        //console.log(timer)
                        $timeout.cancel(timer)
                        next();
                        sliderFunc()
                    }, timeSlide);
                };

                $(window).resize(function(){
                    setHeight(element.height())
                })

            }
        }
    }
    function gmallSliderPageByHoverDirective($timeout,$rootScope,global){
        return {
            restrict:"A",
            replace:false,
            link:function(scope,element,attr){
                //console.log('active')
                var index=0;
                var timeSlide=4000;
                if(global.get('mobile').val){
                    timeSlide=3000
                }
                var innerDiv = element.find('.mytoggle-page'),substrate;
                var imgs=[]
                var links=[];
                var lastLink;
                var maxHeight=0;
                innerDiv.each(function (i,div) {
                    //console.log(div,$(div).attr('id'))
                    imgs.push($(div).attr('id'))
                    links.push($(div).find('a'));
                    if(!i){
                        $(div).css('opacity', 1)
                    }
                })
                try{
                    lastLink=links[links.length-1]
                    links= links.map(function (l) {
                        return l.attr('href');
                    })
                }catch (err){console.log(err)}

                element.find('.substrate').each(function(i,div){
                    if(i){return}
                    substrate=$(div);
                    substrate.find('img').each(function(i,img){
                        //console.log(i,img)
                        if(i){return}
                        //console.log(this.complete)
                        var self=this;
                        if(!this.complete){
                            $(this).bind('load', function() {
                                /*console.log(self.complete)
                                 console.log($(this).height())*/

                                var k = 1000+ getRandomInt(100,2000)
                                //console.log('k',k)
                                //$timeout(function(){sliderFunc()},k)

                                setHeight($(self).height())
                                $timeout(function () {
                                    $(div).css('opacity', 0)
                                },50)


                            })
                        }else{

                            var k = 1000+ getRandomInt(100,2000)
                            //console.log('k1',k)
                            //$timeout(function(){sliderFunc()},k)
                            //console.log(self,$(self).height())
                            setHeight($(self).height())
                            $timeout(function () {
                                $(div).css('opacity', 0)
                            },50)
                        }
                    })
                })

                function next() {
                    //console.log('next',imgs[index],index,innerDiv.length)
                    $('#'+imgs[index]).css('opacity',0)
                    index < innerDiv.length - 1 ? index++ : index = 0;
                    $('#'+imgs[index]).css('opacity',1)
                    try{$(lastLink).attr('href',links[index])}catch (err){console.log(err)}
                };


                function setHeight(h){
                    //console.log(h)
                    innerDiv.each(function(i,div){
                        //console.log(div)
                        //console.log(h,this)
                        $(div).height(h)

                    })
                }
                var timer;
                function sliderFunc() {
                    timer =  $timeout(function() {
                        //console.log(timer)
                        $timeout.cancel(timer)
                        next();
                        sliderFunc()
                    }, 1700);
                };

                $(window).resize(function(){
                    setHeight(element.height())
                })
                $(element).mouseenter( handlerIn ).mouseleave( handlerOut );
                function handlerIn() {
                    //console.log('in ')
                    next()
                    sliderFunc()
                }
                function handlerOut() {
                    $timeout.cancel(timer)
                    //console.log('out' )
                }

            }
        }
    }

    var iii=0;
    function gmallSliderHomeDirective($timeout,$compile,global){
        return {
            restrict:"A",
            scope: true,
            link:function(scope,element,attr){

                var timeSlide=4000;
                if(global.get('mobile').val){
                    timeSlide=3000
                }
                var duration = attr['duration']
                //console.log('duration',duration)
                if(duration){
                    try{
                        duration=Number(duration)
                        if(duration>0 && duration<10){
                            timeSlide=duration*1000;
                        }
                    }catch(err){console.log(err)}
                }
                //console.log('timeSlide',timeSlide)
                var number =iii++;var timer;
                var index=0;


                var innerDiv = element.find('.mytoggle'),substrate;
                var innerDivBox = element.find('.box-overlay');
                scope.foo={}
                scope.foo.setSlide=setSlide;
                scope.slideswipeLeft=function () {
                    $timeout.cancel(timer)
                    next()
                }

                scope.slideswipeRight= function() {
                    $timeout.cancel(timer)
                    prev()
                }

                var imgs=[]
                var links=[];
                var ngClick=[]
                var lastLink=[];
                innerDiv.each(function (i,div) {
                    imgs.push($(div).attr('id'));
                    links.push($(div).find('a'));
                    if(!i){
                        $(div).css('opacity', 1)
                    }
                })
                //console.log(links)
                try{
                    lastLink=links[links.length-1]
                    ngClick= links.map(function (l) {
                        return l.attr('ng-click');
                    })
                    links= links.map(function (l) {
                        return l.attr('href');
                    })

                }catch (err){console.log(err)}

                $timeout(function(){
                    element.find('.prev').each(function (i,a) {
                        $(a).click(function(e) {
                            $timeout.cancel(timer)
                            prev()


                        });
                    })
                    element.find('.navright-carousel').each(function (i,a) {
                        $(a).click(function(e) {
                            $timeout.cancel(timer)
                            next()
                        });
                    })
                    element.find('.carousel-box li').each(function (i,li) {
                        $(li).click(function(e) {
                            $timeout.cancel(timer)
                            setSlide(i)
                        });
                    })
                },200)

                var slideMark=[]
                element.find('.set-slide').each(function (i,li) {
                    slideMark.push($(li).attr('id'))
                    if(!i){
                        $(li).addClass('active')
                    }
                })
                element.find('.substrate').each(function(i,div){
                    substrate=$(div);
                    //console.log(substrate.find('img').length)
                    substrate.find('img').each(function(){
                       //console.log(this.complete)
                        var self=this;
                        if(!this.complete){
                            $(this).bind('load', function() {
                                /*console.log(self.complete)
                                 console.log($(this).height())*/
                                $(div).css('opacity', 0)

                                $timeout(function () {
                                    sliderFunc()
                                },500*iii)

                                $timeout(function () {
                                    setHeight($(self).height())
                                    setDivAgainstOverlapping(0,imgs.length-1)
                                },50)

                            })
                        }else{
                            $(div).css('opacity', 0)
                            $timeout(function () {
                                sliderFunc()
                            },1000*iii)
                            //console.log(self)
                            $timeout(function () {
                                setHeight($(self).height())
                                setDivAgainstOverlapping(0,imgs.length-1)
                            },50)

                            //console.log($(this).height())
                        }
                    })
                })
                var slideDelay;
                /*console.log(links)
                console.log(ngClick)*/

                function setDivAgainstOverlapping(idx,oldIdx) {
                    $timeout(function () {
                        $(innerDiv[idx]).insertAfter(innerDiv[oldIdx])
                    },1600)

                }


                function next() {
                    if(slideDelay){return}
                    slideDelay=true
                    $timeout(function () {
                        slideDelay=false
                    },700)
                    var oldIdx=index;
                    $('#'+slideMark[index]).removeClass('active')
                    $('#'+imgs[index]).css('opacity',0)
                    var oldIndex = index;
                    index < innerDiv.length - 1 ? index++ : index = 0;

                    //$('#'+imgs[index]).css('display','block')

                    $('#'+imgs[index]).css('opacity',1)
                    $('#'+slideMark[index]).addClass('active')
                    setDivAgainstOverlapping(index,oldIdx)

                    $timeout(function () {
                        //$('#'+imgs[oldIndex]).css('display','none')
                    },2500)
                };
                function prev(){
                    if(slideDelay){return}
                    var oldIdx=index;
                    slideDelay=true
                    $timeout(function () {
                        slideDelay=false
                    },700)
                    $('#'+slideMark[index]).removeClass('active')
                    $('#'+imgs[index]).css('opacity',0)

                    index == 0 ? index=innerDiv.length - 1  : index--;
                    $('#'+imgs[index]).css('opacity',1)
                    $('#'+slideMark[index]).addClass('active')

                    //try{$(lastLink).attr('href',links[index])}catch (err){console.log(err)}
                    //setLinks(index)
                    setDivAgainstOverlapping(index,oldIdx)

                };
                function setSlide(i) {
                    var oldIdx=index;
                    //console.log(i,scope.timer)
                    $timeout.cancel(timer)
                    $('#'+slideMark[index]).removeClass('active')
                    $('#'+imgs[index]).css('opacity',0)
                    index = i;
                    $('#'+imgs[index]).css('opacity',1)
                    $('#'+slideMark[index]).addClass('active')
                    //try{$(lastLink).attr('href',links[index])}catch (err){console.log(err)}
                    //setLinks(index)
                    //$compile(element)(scope);
                    setDivAgainstOverlapping(index,oldIdx)
                };


                function setHeight(h){
                    //console.log(h)
                    innerDiv.each(function(){
                        var self=this;
                        /*$(this).hover(function () {
                            console.log('in',self)
                        },function () {
                            console.log('out',self)
                        })*/
                        $(this).height(h)
                    })
                }
                function sliderFunc() {
                    timer = $timeout(function() {
                        $timeout.cancel(timer)
                        next();
                        sliderFunc()
                    }, timeSlide);
                };

                scope.zoomSliderImg=function(i,images){
                    //console.log(i,images)
                    global.get('functions').val.zoomImg(index,images)
                }

                $(window).resize(function(){
                    setHeight(element.height())
                })

            }
        }
    }
    function gmallSliderHomeNivoDirective($timeout,global){
        return {
            restrict:"A",
            scope: true,
            link:function(scope,element,attr){
                var options={};
                if(attr.effect){
                    options.effect = attr.effect;
                }else{
                    options.effect='fade'
                }
                if(attr.pausetime){
                    options.pauseTime = Number(attr.pausetime);
                    if(!options.pauseTime || options.pauseTime<2 || options.pauseTime>20){
                        options.pauseTime=3000
                    }else{
                        options.pauseTime=1000*options.pauseTime;
                    }
                }
                options.controlNavThumbs=true;
                //console.log(options)


                $(window).on('load', function() {
                    $(element).nivoSlider(options);
                    var nextEl=$(element).find('.nivo-nextNav')
                    var prevEl=$(element).find('.nivo-prevNav')
                    $(element).bind('swipeleft',function(e){
                        console.log('left')
                        $(nextEl).trigger('click');
                            e.stopImmediatePropagation();
                            return false;
                    });
                    $(element).bind('swiperight',function(e){
                        console.log('swiperight')
                        $(prevEl).trigger('click');
                        e.stopImmediatePropagation();
                        return false;
                    });
                    /*$(‘#slider’).bind(‘swiperight’,function(e){
                        $(‘#slider img’).attr(“data-transition”,“slideInRight”);
                        $(‘a.nivo-prevNav’).trigger(‘click’);
                        e.stopImmediatePropagation();
                        returnfalse;}
                    );*/



                });
                return;



                var imgs=[]
                var links=[];
                var lastLink=[];
                innerDiv.each(function (i,div) {
                    imgs.push($(div).attr('id'));
                    links.push($(div).find('a'));
                    if(!i){
                        $(div).css('opacity', 1)
                    }
                })
                //console.log(imgs)
                try{
                    lastLink=links[links.length-1]
                    links= links.map(function (l) {
                        return l.attr('href');
                    })
                }catch (err){console.log(err)}

                $timeout(function(){
                    element.find('.prev').each(function (i,a) {
                        $(a).click(function(e) {
                            $timeout.cancel(timer)
                            prev()


                        });
                    })
                },200)

                var slideMark=[]
                element.find('.set-slide').each(function (i,li) {
                    slideMark.push($(li).attr('id'))
                    if(!i){
                        $(li).addClass('active')
                    }
                })
                element.find('.substrate').each(function(i,div){
                    substrate=$(div);
                    //console.log(substrate.find('img').length)
                    substrate.find('img').each(function(){
                        //console.log(this.complete)
                        var self=this;
                        if(!this.complete){
                            $(this).bind('load', function() {
                                /*console.log(self.complete)
                                 console.log($(this).height())*/
                                $(div).css('opacity', 0)

                                $timeout(function () {
                                    sliderFunc()
                                },500*iii)

                                $timeout(function () {
                                    setHeight($(self).height())
                                },50)

                            })
                        }else{
                            $(div).css('opacity', 0)
                            $timeout(function () {
                                sliderFunc()
                            },1000*iii)
                            //console.log(self)
                            $timeout(function () {
                                setHeight($(self).height())
                            },50)

                            //console.log($(this).height())
                        }
                    })
                })
                var slideDelay;
                function next() {
                    if(slideDelay){return}
                    slideDelay=true
                    $timeout(function () {
                        slideDelay=false
                    },700)
                    var oldIdx=index;
                    $('#'+slideMark[index]).removeClass('active')
                    $('#'+imgs[index]).css('opacity',0)
                    var oldIndex = index;
                    index < innerDiv.length - 1 ? index++ : index = 0;

                    //$('#'+imgs[index]).css('display','block')

                    $('#'+imgs[index]).css('opacity',1)
                    $('#'+slideMark[index]).addClass('active')
                    try{$(lastLink).attr('href',links[index])}catch (err){console.log(err)}

                    $timeout(function () {
                        //$('#'+imgs[oldIndex]).css('display','none')
                    },2500)
                };
                function prev(){
                    if(slideDelay){return}
                    slideDelay=true
                    $timeout(function () {
                        slideDelay=false
                    },700)
                    $('#'+slideMark[index]).removeClass('active')
                    $('#'+imgs[index]).css('opacity',0)

                    index == 0 ? index=innerDiv.length - 1  : index--;
                    $('#'+imgs[index]).css('opacity',1)
                    $('#'+slideMark[index]).addClass('active')

                    try{$(lastLink).attr('href',links[index])}catch (err){console.log(err)}

                };
                function setSlide(i) {
                    //console.log(i,scope.timer)
                    $timeout.cancel(timer)
                    $('#'+slideMark[index]).removeClass('active')
                    $('#'+imgs[index]).css('opacity',0)
                    index = i;
                    $('#'+imgs[index]).css('opacity',1)
                    $('#'+slideMark[index]).addClass('active')
                    try{$(lastLink).attr('href',links[index])}catch (err){console.log(err)}
                };


                function setHeight(h){
                    //console.log(h)
                    innerDiv.each(function(){
                        var self=this;
                        /*$(this).hover(function () {
                         console.log('in',self)
                         },function () {
                         console.log('out',self)
                         })*/
                        $(this).height(h)
                    })
                }
                function sliderFunc() {
                    timer = $timeout(function() {
                        $timeout.cancel(timer)
                        next();
                        sliderFunc()
                    }, timeSlide);
                };

                scope.zoomSliderImg=function(i,images){
                    //console.log(i,images)
                    global.get('functions').val.zoomImg(index,images)
                }

                $(window).resize(function(){
                    setHeight(element.height())
                })

            }
        }
    }
    itemCtrl.$inject=['$element','$timeout','$scope'];
    function itemCtrl($element,$timeout,$scope){
        var h=0;
        var self = this;
        setTimeout(function(){
            setHeight();
        })
        console.log($scope.images)

        /*$scope.$on('$allImagesLoadedInHomePage', function(){
            console.log('$allImagesLoadedInHomePage')
            console.log('2')
            setHeight()
        })*/
        self.currentIndex = 0;
        self.prev = function() {
            //self.images[self.currentIndex].visible = false;
            self.currentIndex == 0 ? self.currentIndex=self.images.length - 1 : self.currentIndex--;
            self.index=self.currentIndex;
            //self.images[self.currentIndex].visible = true;

        };
        self.next = function() {
            //self.images[self.currentIndex].visible = false;
            self.currentIndex < self.images.length - 1 ? self.currentIndex++ : self.currentIndex = 0;
            self.index=self.currentIndex;
            //self.images[self.currentIndex].visible = true;

        };
        self.setSlide = function(i) {
            //self.images[self.currentIndex].visible = false;
            self.currentIndex =i;
            self.index=self.currentIndex;
            //self.images[self.currentIndex].visible = true;

        };
        var timer;
        var sliderFunc = function() {
            timer = $timeout(function() {
                self.next();
                timer = $timeout(sliderFunc, 3000);
            }, 3000);
        };
        $timeout(function(){sliderFunc();},1000)
        self.finished=function(){
            self.height=0;
            $($element.find('.mytoggle img')[0]).bind('load', function() {
                //console.log('1')
                setHeight()
            })
        }
        function setHeight(){
            self.height=0;
            $element.find('.mytoggle img').each(function() {
                var h=$(this).height();
                /*console.log(this)
                 console.log($(this).height())*/
                if(h>self.height){
                    self.height=h;
                }
            });

            if(self.height>h && self.height>100){
                //console.log(self.height)
                h=self.height;
                $($element[0]).find('.slider-fade').height(self.height)
            }


        }
        $(window).resize(function(){
            h=0;
            setHeight()
        })
        
    }
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

})()


'use strict';
//http://upshots.org/javascript/jquery-test-if-element-is-in-viewport-visible-on-screen
/*
* Original Version
 returns true if any portion of the element is visible in the viewport (considering element’s position and dimension, compared to dimension and scroll position of window). See after for the most recent version, with configurable minimum values.
* */
$.fn.isOnScreen = function(){

    var win = $(window);

    var viewport = {
        top : win.scrollTop(),
        left : win.scrollLeft()
    };
    viewport.right = viewport.left + win.width();
    viewport.bottom = viewport.top + win.height();

    var bounds = this.offset();
    /*if(this[0].id=='item-57a980ca859956040638265c'){
        //console.log(bounds)
    }*/
    //console.log(bounds)
    //if(!bounds || (!bounds.top && !bounds.left)){return}
    if(!bounds){return}

    bounds.right = bounds.left + this.outerWidth();
    bounds.bottom = bounds.top + this.outerHeight();

    return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));

};

angular.module('gmall.directives')

.directive('lastViewed', function($compile,$timeout,localStorage,Stuff,global) {
    return {
        restrict: 'EA',
        scope:{
            current:'=',
            header:'@',
            mobile:'@',
            blockElement:'@'
        },
        templateUrl: function(element,attrs){
            var s=(attrs && attrs.templ && attrs.templ!='0')?attrs.templ:'';
            //var sM=(attrs && attrs.mobile)?'Mobile':'';
            var sM='';
            var url = 'views/template/partials/stuffDetail/lastViewed/directive/lastViewed'+s+sM+'.html'
            //console.log(url)
            return url
        },
        link: function(scope, element, attrs) {
            var subDomain = global.get('store').val.subDomain
            
            //console.log('lastViewed')
            scope.localId=Date.now();
            var viewedStuffs=localStorage.get(subDomain+'-viewed');
            //console.log(viewedStuffs)

            if(!viewedStuffs ){
                viewedStuffs=[];
            }
            scope.itemsInList=4;
            //viewedStuffs=[];
            function activate() {
                //console.log(scope.mobile)
                scope.position=JSON.parse(scope.blockElement).position
                //console.log(scope.position)
               /* if(scope.position && scope.position=='bottom'){
                    if(!scope.mobile){
                        scope.itemsInList=8;
                    }else{
                        scope.itemsInList=3;
                    }
                }else{
                    if(!scope.mobile){
                        scope.itemsInList=8;
                    }else{
                        scope.itemsInList=3;
                    }
                }*/
                if(scope.mobile){
                    scope.itemsInList=3;
                }else if(scope.position && scope.position=='bottom'){
                    scope.itemsInList=6;
                }
                
                setViewed(angular.copy(scope.current))
                //console.log(viewedStuffs);
                if (viewedStuffs.length>2){
                    scope.stuffs=viewedStuffs//.reverse();
                    scope.stuffs.forEach(function(el){el.getUrlParams=Stuff.getUrlParams;})
                    // console.log(Stuff)

                    $timeout(function(){
                        $("#lastViewedWrapper").owlCarousel({
                            items : scope.itemsInList,
                            itemsMobile	:[479,3],
                            itemsTablet	:[768,scope.itemsInList],
                            itemsDesktop : [1199,scope.itemsInList],
                            itemsDesktopSmall : [979,scope.itemsInList]

                        });
                    },150);
                    //$timeout(function(){$('#carouse'+scope.localId).elastislide();},50);
                }else{
                    scope.stuffs=[];
                }
                if (!scope.header){
                    scope.header='Последние просмотренные.';
                }
            }


            function setViewed (stuff){
                var posItem = -1;
                for (var i= 0,l=viewedStuffs.length;i<l;i++){
                    if (viewedStuffs[i]._id==stuff._id) {
                        posItem=i;
                        break;
                    }
                }
                // уже смотрели товар. удаляем его из ранее просмотренных
                if (posItem>-1){
                    viewedStuffs.splice(posItem,1);
                }
                // добавляем его к конец списка
                if(stuff.gallery[0]){
                    var img=(stuff.gallery[0].thumbSmall)?stuff.gallery[0].thumbSmall:stuff.gallery[0].thumb;
                }else{
                    var img=null;
                }

                var linkData=global.get('categories').val.getOFA('_id',stuff.category).linkData;
                linkData.stuffUrl=stuff.url;
                var o={_id:stuff._id,linkData:linkData,url:stuff.url, img:img,name:stuff.name}
                    if(stuff.artikul){
                        o.artikul = stuff.artikul;
                    }
                viewedStuffs.unshift(o)
                // ограничиваем список
                if (viewedStuffs.length>15){
                    viewedStuffs.splice(15,1);
                }
                //console.log(viewedStuffs);
                localStorage.set(subDomain+'-viewed', viewedStuffs);
            };
            /*scope.$watch('current',function(n,o){
                if (n) {
                    setViewed(n);                        
                }
            })*/
            scope.$watch('current',function(n){
                if(n){
                    activate()
                }
            })
            scope.$on('$destroy', function() {
                $('#carouse'+scope.localId).remove();
            });
        }
    }
})
.directive('fullImg', function ($timeout) {
        return {
            restrict: 'A',
            scope:{
                index: '=fullImg',
                gallery:'='
            },
            link: function(scope, element, attrs, ngModel) {
                //console.log('fullimg')
                var touchStart,touchEnd;
                var keys = {37: 1, 38: 1, 39: 1, 40: 1};

                function preventDefault(e) {
                  e = e || window.event;
                  if (e.preventDefault)
                      e.preventDefault();
                  e.returnValue = false;  
                }

                function preventDefaultForScrollKeys(e) {
                    if (keys[e.keyCode]) {
                        preventDefault(e);
                        return false;
                    }
                }

                function disableScroll() {
                  if (window.addEventListener) // older FF
                      window.addEventListener('DOMMouseScroll', preventDefault, false);
                  window.onwheel = preventDefault; // modern standard
                  window.onmousewheel = document.onmousewheel = preventDefault; // older browsers, IE
                  window.ontouchmove  = preventDefault; // mobile
                  document.onkeydown  = preventDefaultForScrollKeys;
                }

                function enableScroll() {
                    if (window.removeEventListener)
                        window.removeEventListener('DOMMouseScroll', preventDefault, false);
                    window.onmousewheel = document.onmousewheel = null; 
                    window.onwheel = null; 
                    window.ontouchmove = null;  
                    document.onkeydown = null;  
                }


                element.bind("click", function(event){
                    //disableScroll()
                    scope.currentPhoto=scope.index;
                    var height= $(window).height();
                    var width= $(window).width();
                    var elem = angular.element('<div id="outer_container" style="max-height:'+height+'px; max-width:'+width+'px;margin:2px auto; padding:0px;">'+
                    '<div id="imagePan" style="max-height:'+height+'px; max-width:'+width+'px;position:relative; overflow:hidden; cursor:crosshair;">'+
                    '<div class="containerImg" style="position:relative; left:0;">'+
                    '<div><img src="'+scope.gallery[scope.currentPhoto].img+'" class="panning"></div>'+
                    '</div></div></div>');


                    /*console.log(event);
                    console.log(scope.index);
                    console.log(scope.gallery);*/



                    var mainWrapper=angular.element('<div class="photo-container" style="width:'
                    +width+
                    'px;height:'+height+'px;"></div>');

                    $(window).resize(function() {
                        $imagePan.unbind("mousemove");
                        height= $(window).height();
                        width= $(window).width();
                        mainWrapper.css("width",width).css("height",height);
                        setHeightWigth()
                    });
                    /*var $outer_container=angular.element('<div id="outer_container" ' +
                    'style="margin:0 auto; padding: 0; border:1px solid #dadada;"><div>');
                    var $imagePan=angular.element('<div id="imagePan" style="' +
                    'position:relative; overflow:hidden;"><div>');
                    var $imagePan_panning=angular.element('<div class="text-center" style="cursor:crosshair;"><img src="'+scope.gallery[scope.currentPhoto].img+'" class="panning hiddenMy"></div>');
                    var $imagePan_panningImg = $imagePan_panning.find('img');
                    var $imagePan_container=angular.element('<div class="containerImg" style="position:relative; left:0;"><div>');
                    $imagePan_container.prepend($imagePan_panning);
                    $imagePan.prepend($imagePan_container);
                    $outer_container.prepend($imagePan);

                    $outer_container.css('height',height);
                    $imagePan.css('height',height);*/


                    mainWrapper.prepend(elem);
                    //console.log(mainWrapper);
                    $('body').prepend(mainWrapper);
                    //$('body').prepend(elem);
                    function changePhoto(){
                        $imagePan_panningImg.attr('src',scope.gallery[scope.currentPhoto].img)
                            //.removeClass('visibleMy').addClass('hiddenMy');
                        console.log(1)

                        setHeightWigth()
                    }
                    var next= angular.element('<div><img src="img/logo/navright.png" class="navright"></div>');
                    next.bind('click',function(event){
                        //console.log(scope.currentPhoto);
                        if (scope.currentPhoto<scope.gallery.length-1){
                            scope.currentPhoto++;
                        } else {
                            scope.currentPhoto=0;
                        }
                        //console.log(scope.gallery[scope.currentPhoto].img);
                        changePhoto()
                        event.preventDefault();
                        return false;

                    })
                    var prev= angular.element('<div><img src="img/logo/navleft.png" class="navleft"></div>');
                    prev.bind('click',function(event){
                        // console.log($scope.currentPhoto);
                        if (scope.currentPhoto>0){
                            scope.currentPhoto--;
                        } else {
                            scope.currentPhoto=scope.gallery.length-1;
                        }
                        //console.log($scope.stuff.gallery[$scope.currentPhoto].img);

                        changePhoto();
                        event.preventDefault();
                        return false;

                    })
                    mainWrapper.prepend(next)
                    mainWrapper.prepend(prev)

                    mainWrapper.bind('click',function(event){
                        //console.log(event);
                        enableScroll()
                        mainWrapper.remove();
                    })
                    var containerWidth,containerHeight,totalContentW,totalContentH,
                        $outer_container,$imagePan_panning,$imagePan,$imagePan_container,$imagePan_panningImg;
                    function setHeightWigth(){
                        $timeout(function(){
                            $outer_container=$("#outer_container");
                            $imagePan_panning=$("#imagePan .panning");
                            $imagePan=$("#imagePan");
                            $imagePan.css('overflow','auto');

                            $imagePan_container=$("#imagePan .containerImg");
                            $imagePan_panningImg=$("#imagePan img");
                            if ($imagePan_panningImg.width()<$imagePan.width()){
                                $imagePan.css('width',$imagePan_panningImg.width());
                                $outer_container.css('width',$imagePan_panningImg.width());
                            }
                            if ($imagePan_panningImg.height()<$imagePan.height()){
                                $imagePan.css('height',$imagePan_panningImg.height());
                                $outer_container.css('height',$imagePan_panningImg.height());
                            }


                            /*$imagePan.css('width',width);
                            $imagePan_panning.css('width',width);
                            $imagePan.css('height',height);
                            $imagePan_panning.css('height',height);*/



                            //$imagePan_panning.css("margin-top",($imagePan.height()-$imagePan_panning.height())/2+"px");
                            //$imagePan_panning.css("margin-left",($imagePan.width()-$imagePan_panning.width())/2+"px");



                            containerWidth=$imagePan.width();
                            containerHeight=$imagePan.height();
                            totalContentW=$imagePan_panning.width();
                            totalContentH=$imagePan_panning.height();
                            $imagePan_container.css("width",totalContentW).css("height",totalContentH);

                            $imagePan.bind("mousemove", function(event){
                                //console.log('qqqqq');
                                MouseMove(event);
                            });
                            $imagePan.bind("touchmove", function(event){
                                //console.log('ddd');
                                touchMove(event);
                            });
                            $imagePan.bind('touchstart', function(event) 
                            {
                                touchStart=event.originalEvent.touches[0].clientY;
                                console.log('start-',event.originalEvent.touches[0].clientY)
                            });

                           

                            $imagePan.bind('touchend', function(event) 
                            {
                                //touchEnd=event.originalEvent.touches[0].clientY;
                                //console.log('end-',event.originalEvent.touches[0].clientY)
                            });

                            //$imagePan_panning.css("margin-left",($imagePan.width()-$imagePan_panning.width())/2).css("margin-top",($imagePan.height()-$imagePan_panning.height())/2);
                        },400)
                    }

                    setHeightWigth();


                    function MouseMove1(e){
                        var mouseCoordsX=(e.pageX - $imagePan.offset().left);
                        var mouseCoordsY=(e.pageY - $imagePan.offset().top);
                        console.log($imagePan.offset().left,$imagePan.offset().top);
                        console.log(e.pageX, e.pageY,e.clientX,e.clientY);
                        var mousePercentX=mouseCoordsX/containerWidth;
                        var mousePercentY=mouseCoordsY/containerHeight;
                        var destX=-(((totalContentW-(containerWidth))-containerWidth)*(mousePercentX));
                        var destY=-(((totalContentH-(containerHeight))-containerHeight)*(mousePercentY));
                        var thePosA=mouseCoordsX-destX;
                        var thePosB=destX-mouseCoordsX;
                        var thePosC=mouseCoordsY-destY;
                        var thePosD=destY-mouseCoordsY;
                        var marginL=$imagePan_panning.css("marginLeft").replace("px", "");
                        var marginT=$imagePan_panning.css("marginTop").replace("px", "");
                        var animSpeed=300; //ease amount
                        var easeType="easeOutCirc";
                        if(mouseCoordsX>destX || mouseCoordsY>destY){
                            //console.log('1-',destX);
                            //$imagePan_container.css("left",-thePosA-marginL); $imagePan_container.css("top",-thePosC-marginT); //without easing
                            $imagePan_container.stop().animate({left: -thePosA-marginL, top: -thePosC-marginT}, animSpeed,easeType); //with easing
                            console.log('left:', -thePosA-marginL,' top:', -thePosC-marginT);
                        } else if(mouseCoordsX<destX || mouseCoordsY<destY){
                            //console.log('2-',destY);
                            //$imagePan_container.css("left",thePosB-marginL); $imagePan_container.css("top",thePosD-marginT); //without easing
                            $imagePan_container.stop().animate({left: thePosB-marginL, top: thePosD-marginT}, animSpeed,easeType); //with easing
                        } else {
                            //console.log('3-',destX,' ',destY);
                            $imagePan_container.stop();
                        }

                    }
                    function touchMove(e){
                        var deltaY = touchStart-e.originalEvent.touches[0].clientY;
                        var moveY;
                        console.log($imagePan_container.offset().top)
                        var top=$imagePan.offset().top;
                        if (top<0 && deltaY<0){
                            if (top-deltaY<0){
                                moveY=top-deltaY;
                            }else{
                                moveY=0;
                            }
                        }
                        console.log(deltaY,moveY)
                        var posX = $imagePan.offset().left;
                        var posY = $imagePan.offset().top;
                        //console.log(posX,posY,$imagePan.offset());
                        $imagePan_container.stop().animate({top:moveY})
                    }

                    function MouseMove(e){

                            if(e.offsetX==undefined){
                                //console.log('ff');
                                var posX = $imagePan.offset().left;
                                var posY = $imagePan.offset().top;
                                //console.log(posX,posY,$imagePan.offset());
                            }
                            else {
                                //console.log('chrom');
                                var posX = $imagePan.offset().left;
                                var posY = $imagePan.offset().top;
                                //console.log(posX,posY);
                                /*var posX = $imagePan.offset().left;
                                var posY = $imagePan.offset().top;
                                scope.new = e.clientX-e.offsetX+element.width()/2;
                                scope.posY = e.clientY-e.offsetY;*/
                            }

                        var mouseCoordsX=(e.pageX - $imagePan.offset().left);
                        var mouseCoordsY=(e.pageY - $imagePan.offset().top);
                        var mousePercentX=mouseCoordsX/containerWidth;
                        var mousePercentY=mouseCoordsY/containerHeight;
                        var destX=-(((totalContentW-(containerWidth))-containerWidth)*(mousePercentX));
                        var destY=-(((totalContentH-(containerHeight))-containerHeight)*(mousePercentY));
                        var thePosA=mouseCoordsX-destX;
                        var thePosB=destX-mouseCoordsX;
                        var thePosC=mouseCoordsY-destY;
                        var thePosD=destY-mouseCoordsY;
                        var marginL=$imagePan_panning.css("marginLeft").replace("px", "");
                        var marginT=$imagePan_panning.css("marginTop").replace("px", "");
                       // console.log(marginL,marginT);
                        var animSpeed=500; //ease amount
                        var easeType="easeOutCirc";
                        if(mouseCoordsX>destX || mouseCoordsY>destY){
                            //console.log($imagePan.offset().left,$imagePan.offset().top);
                            //$imagePan_container.css("left",-thePosA-marginL); $imagePan_container.css("top",-thePosC-marginT); //without easing
                            $imagePan_container.css('left',-thePosA-marginL).css('top',-thePosC-marginT);
                            //$imagePan_container.stop().animate({left: -thePosA-marginL, top: -thePosC-marginT}, animSpeed,easeType); //with easing
                        } else if(mouseCoordsX<destX || mouseCoordsY<destY){
                            //$imagePan_container.css("left",thePosB-marginL); $imagePan_container.css("top",thePosD-marginT); //without easing
                            $imagePan_container.stop().animate({left: thePosB-marginL, top: thePosD-marginT}, animSpeed,easeType); //with easing
                        } else {
                            $imagePan_container.stop();
                        }
                    }






                });

                scope.$on('$destroy', function() {
                    //console.log('destroy');
                    //spinner.remove();
                    //$('#spinner').remove();
                });


            }
        };
    })
.directive('displayNavbar', ['$timeout',function ($timeout) {
    return {
        restrict: 'A',
        link: function (scope, element, attr) {
            $('html, body').animate({scrollTop: 0});
            var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
            if (w<1220){return}


            var ii;// номер блока
            var direct;
            var block;
            var h;
            var divForFix,divForFix2,divForFix3,w,w2,w3,logo,logoContainer;
            var fixedPos;
            var firstnavbar,anhorForScroll,sizeAnhorForScroll,prevBlock,sclollWithMouse;
            var visibleBlock=true;
            var visibleMenu;
            var block_top,hh,cont_top;
            var posEl,fixedElHide,divFFHeight,distance;
            var parallaxImage;
            var OpacityFixBanner;
            $timeout(function(){
                firstnavbar=$("#firstnavbar");
                h= firstnavbar.height();
                block = $('#photovideoblock');
                divForFix = $('#divforfix');
                divForFix2 = $('#divforfix2');
                divForFix3 = $('#divforfix3');
                $timeout(function(){
                    initFixBanner();
                },300);


            },300);

            function initFixBanner(){

                divFFHeight=$(divForFix).outerHeight()
                //console.log(divFFHeight,$(divForFix).offset().top);
                posEl={};
                posEl.top=($(divForFix)&&$(divForFix).offset()&&$(divForFix).offset().top)?$(divForFix).offset().top:0;
                posEl.left=($(divForFix)&&$(divForFix).offset() &&$(divForFix).offset().left)?$(divForFix).offset().left:0;
                w=$(divForFix).width();
                // второй блок
                var posEl2={};
                //console.log($(divForFix).offset().top);
                posEl2.top=posEl.top;
                posEl2.left=($(divForFix2).offset())?$(divForFix2).offset().left:0;
                //console.log(posEl);
                w2=$(divForFix2).width();
                var posEl3={};
                //console.log($(divForFix).offset().top);
                posEl3.top=posEl.top;
                posEl3.left=($(divForFix3).offset())?$(divForFix3).offset().left:0;
                //console.log(posEl);
                w3=$(divForFix3).width();
                $(divForFix).css('position','fixed').width(w).offset(posEl);
                $(divForFix2).css('position','fixed').width(w2).offset(posEl2);
                $(divForFix3).css('position','fixed').width(w3).offset(posEl3);
                block_top= ($(block).offset())?$(block).offset().top:0;
                hh = block_top + $(block).outerHeight();
                distance = hh - posEl.top;
                //console.log(distance)

            }
            OpacityFixBanner=1;
            function fixBanner(cont_top){
                var delta=(distance-cont_top)/distance;

                var l = Math.round10(delta, -2);
                //console.log(l)
                if (l>-0.1){
                    if (l<0) {
                        l=0;
                        OpacityFixBanner=0;
                        $(divForFix).css('display','none');
                        $(divForFix2).css('display','none');
                        $(divForFix3).css('display','none');
                    }
                    if (l!=0&&OpacityFixBanner===0){
                        OpacityFixBanner=1;
                        $(divForFix).css('display','block');
                        $(divForFix2).css('display','block');
                        $(divForFix3).css('display','block');
                    }
                    //console.log(l)
                    $(divForFix).css('opacity',l);
                    $(divForFix2).css('opacity',l);
                    $(divForFix3).css('opacity',l);
                }
            }

            $(document).scroll(function () {
                cont_top = window.pageYOffset ? window.pageYOffset : document.body.scrollTop;
                fixBanner(cont_top);
            });

            $(window).resize(function(){
                console.log('resize');
                h= $("#firstnavbar").height();
                $(divForFix).css('position','absolute').css('top','20%');
                $(divForFix2).css('position','absolute').css('top','20%').css('left',0);
                $(divForFix3).css('position','absolute').css('top','20%').css('left',0);;
                $timeout(function(){
                    initFixBanner();
                },50)
            });
        }
    };
}])
.directive('backStretch', ['$timeout',function ($timeout) {
    return {
        restrict: 'AC',
        link: function (scope, element, attr) {
            if(attr['backStretch'].indexOf('http')<0){
                var src=photoHost+'/'+attr['backStretch'];
            }else{
                var src=attr['backStretch'];
            }

            //console.log(src)
            var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
            var val="url("+src+") top right no-repeat fixed";
            $(element).css('background',val);
            if(w<400){ //w.width<400
                $(element).css('background-position','80% 70%');
                $(element).css('background-size','400%');
                $(element).css('height','650px');
            }
            //$(element).css('height','1800px')
           /* $(element).vegas({
                slides: [
                    { src: src }
                ]
            });*/
            //$('.half-section2').backstretch([src]);
        }
    }
}])
    .directive('slideMenuTwo', ['$timeout',function ($timeout) {
    return {
        restrict: 'AC',
        link: function (scope, element, attr) {
            return;
            element.click(function () {
                $timeout(function(){
                    if(element[0].scrollHeight>window.innerHeight){
                        element.removeClass('scrollbar')
                    }else{
                        element.addClass('scrollbar')
                    }
                },400)
            })




            /*$timeout(function(){
                $(element).css('overflow-y','scroll')

                paddind_right=$(element).css('padding-right')
                console.log(paddind_right)
                paddind_left=$(element).css('padding-left')
                console.log(paddind_left)
            })*/
            return;
           console.log(element)
            var paddind_right,paddind_left;
            $timeout(function(){
                paddind_right=$(element).css('padding-right')
                console.log(paddind_right)
                paddind_left=$(element).css('padding-left')
                console.log(paddind_left)
            })
            var timerId;
            element.click(function () {
                if(timerId){
                    clearInterval(timerId)
                }
                timerId = setInterval(function(){
                    if(element[0].scrollHeight>window.innerHeight){
                        if(paddind_right){
                            console.log('set')
                            $(element).css('padding-right',0)
                        }else if(paddind_left){
                            $(element).css('padding-left',0)
                        }
                    }else{
                        if(paddind_right){
                            $(element).css('padding-right',paddind_right)
                        }else if(paddind_left){
                            $(element).css('padding-left',paddind_left)
                        }
                    }
                },5)
                return;

                $timeout(function(){
                    console.log(element[0].scrollHeight,$(window).height(),window.innerHeight)


                    if(element[0].scrollHeight>window.innerHeight){
                        if(paddind_right){
                            console.log('set')
                            $(element).css('padding-right',0)
                        }else if(paddind_left){
                            $(element).css('padding-left',0)
                        }

                    }else{
                        if(paddind_right){
                            $(element).css('padding-right',paddind_right)
                        }else if(paddind_left){
                            $(element).css('padding-left',paddind_left)
                        }
                    }
                },300)

            })
        }
    }
}])
.directive('halfSection', ['$timeout',function ($timeout) {
    return {
        restrict: 'AC',
        link: function (scope, element, attr) {
            if(attr['backgroundImage']){
                var src=photoHost+'/'+attr['backgroundImage'];
                console.log(src)
                var val="url("+src+")";
                $(element).css('background-image',val);
            }

        }
    }
}])
.directive('audioMute', ['$timeout',function ($timeout) {
    return {
        restrict: 'A',
        link: function (scope, element, attr) {
            //console.log(attr['audioMute'])
            if(attr['audioMute']=='false'){
                //console.log(attr['audioMute'])
                $(element).prop('muted', true);
            }
        }
    }
}])

    .directive('centerMenu1', ['$timeout',function ($timeout) {
        return {
            restrict: 'C',
            link: function (scope, element, attr) {
               /* console.log(element.width(),element.parent().width())
                console.log(Math.round(element.parent().width()/2-element.width()/2))*/
                $timeout(function(){
                    element.css('margin-left',Math.round(element.parent().width()/2-element.width()/2))
                },50)

                $(window).resize(function () {
                    element.css('margin-left',Math.round(element.parent().width()/2-element.width()/2))
                })
            }
        }
    }])
    .directive('contentLoaded', ['$timeout','$rootScope','anchorSmoothScroll',function ($timeout,$rootScope,anchorSmoothScroll){
        return {
            restrict: 'AC',
            link: function (scope, element, attr) {
                /*$rootScope.$on('$allImagesLoadedInHomePage',function(){
                    $(element).fadeOut();
                });*/
                $rootScope.$on('$stateChangeStartToStuff',function(){
                    //console.log('$stateChangeStartToStuff')
                    $(element).fadeIn();
                });
                $rootScope.$on('$stateChangeEndToStuff',function(){
                   // console.log('$stateChangeEndToStuff')
                    $(element).fadeOut();
                });
            }

        }
    }])



.directive('setAnimate', ['$timeout','global',function ($timeout,global) {
     return {
         restrict: 'A',
         link: function (scope, element, attr) {
             var $animationName = attr['animation'];
             var $animationRepeat = attr['animationRepeat'];
             var $animationDelay = attr['animationDelay'];
             if(!$animationDelay){$animationDelay=0}else{
                 $animationName=$animationName+'-'+$animationDelay
             }
             //$(element).css('display','none')

             var firstLook=true;
             //console.log($animationRepeat)
             var isOnScreen=false
             //console.log($animationName)
             if($(element).isOnScreen()){
                 //console.log(isOnScreen)
                 isOnScreen=true;
                 $(element).addClass($animationName);
                 //$(element).addClass('animated').addClass($animationName);
                 $(element).css('visibility','visible')

             }
             $(window).scroll(doIt)

             function doIt(){
                 if($(element).isOnScreen()){
                     if(!isOnScreen && ($animationRepeat||firstLook)){
                         firstLook=false;
                         isOnScreen=true
                         $(element).addClass($animationName);
                     }
                 }else{
                     if(isOnScreen && $animationRepeat){
                         isOnScreen=false
                         $(element).removeClass($animationName);
                     }
                 }
             }

             scope.$on('openMenu',function () {
                 //$(element).addClass($animationName);
                 if(!$(element).hasClass($animationName)){
                     $(element).addClass($animationName);
                 }

             })

             scope.$on('closeMenu',function () {
                 // зачем?? - что бы анамацию повторять для елементов слайд меню
                 if(!$(element).hasClass('pre-animate-opacity')){
                     $(element).removeClass($animationName);
                 }
             })

             scope.$on('$allImagesLoadedInHomePage1',function(){
                 /*if(attr['name']=='banner'){
                     $(element).offset()
                 }*/
                 if ($(element).isOnScreen() && !$(element).hasClass('animated')){
                     $(element).addClass('animated').addClass($animationName);
                     $(element).css('visibility','visible')
                 }else {
                     $(element).appear()
                     $(element).on('appear', function(event, $all_appeared_elements){
                         console.log('!!!!!! setAnimate')
                         if(!$(element).hasClass('animated')){
                             $(element).addClass('animated').addClass($animationName);
                             $(element).css('visibility','visible')
                         }else{

                         }
                     })
                 }
             })
             element.on('$destroy', function(){
                 //console.log('$destroy')
                 $(window).off('scroll',doIt);
             });
         }
     };
}])
.directive('scaleImg', ['$timeout',function ($timeout) {
        return {
            restrict: 'A',

            link: function (scope, element, attr) {
                scope.hover=false;
                $timeout(function(){
                    /*var scaleSize = attr['scaleSize'];
                     console.log(scaleSize);*/
                    //console.log($('#'+attr['divId']));
                    $('#'+attr['divId']).hover(function(){
                        scope.onDiv=true;
                        //console.log(scope.onDiv);
                    },function(){
                        scope.onDiv=false;
                    });
                    $(element).wrap('<div style="overflow:hidden"></div>');

                    //var $animationDelay = "delay-"+attr['animationDelay'];
                },10)
                $(element).hover(function(){
                    console.log()
                    $(element).addClass('scaleImg');
                },function(){
                    $timeout(function(){
                        //console.log(scope.onDiv);
                        if (!scope.onDiv){
                            $(element).removeClass('scaleImg');
                        }
                    })


                });

            }
        };
    }])

.directive('parallaxBox', ['$timeout',function ($timeout) {
    return {
        restrict: 'AC',
        link: function (scope, elem, arrts) {

            var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
            //if (w<1220){return}
            //console.log('scroll')
            var win =$(window);
            var el=$(elem);
            document.addEventListener('scroll', function (event) {
                if (el.offset().top < win.scrollTop()) {
                    var difference = win.scrollTop() - el.offset().top;
                    var half = (difference *0.5) + 'px';
                    el.css('top', half);
                }else{
                    el.css('top', '0');
                }
            });
            $timeout(function(){
                $(elem).wrap('<div style="height:'+($(elem).height()+70)+'px;overflow:hidden"></div>')
                $timeout(function(){
                    //console.log('scroll2')
                    $(elem).css('position','relative')
                },200)

            },500)
            /*$(window).bind('scroll',function(){
                console.log('scroll')
            })
            $(document).scroll(function () {
                console.log('scroll')
            })*/
        }
    };
}])

 .directive('fixAndHideWhenScroll', ['$timeout',function ($timeout) {
        return {
            restrict: 'A',
            link: function (scope, element, attr) {
                return;
                var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
                if (w<1220){return};
                var block=element.parent().parent();

                // фиксирование элемента
                console.log(element.find('div'))
                var rect = element[0].getBoundingClientRect();

                var posEl={
                    top: rect.top + document.body.scrollTop,
                    left: rect.left + document.body.scrollLeft
                }
                console.log(posEl)
                //w=element.width();
                element.css('position','fixed')
                    //.width(w).offset(posEl);
                var block_top= $(block).offset()
                var hh = block_top + $(block).outerHeight();
                var distance = hh - posEl.top;
                console.log(distance)
                var opacityFixBanner=1;
                //console.log(element.parent().parent());
                $(document).scroll(function () {
                    var cont_top = window.pageYOffset ? window.pageYOffset : document.body.scrollTop;
                    var delta=(distance-cont_top)/distance;
                    var l = Math.round10(delta, -2);
                    //console.log(l)
                    if (l>-0.1){
                        if (l<0) {
                            l=0;
                            opacityFixBanner=0;
                            element.css('display','none');
                        }
                        if (l!=0&&opacityFixBanner===0){
                            opacityFixBanner=1;
                            element.css('display','block');
                        }
                        //console.log(l)
                        element.css('opacity',l);
                    }

                });
            }
        }
 }])
    .directive('backImg', function(){
        return function(scope, element, attrs){
            //console.log(attrs.backImg)
            var url = attrs.backImg;
            element.css({
                'background-image': 'url(' + url +')',
                /*'background-size' : 'cover',
                'min-height':'100%'*/
            });
        };
    })

    .directive('angParallax', ['$window', function ($window) {
        return {
                restrict: 'A',
                scope: {
                    pCss: '@',
                    pInitVal: '@',
                    pRatio: '@'
                },
                link: function(iScope, iElem, iAttr) {
                    console.log(iElem)
                    var cssKey,
                        cssValue,
                        isSpecialVal,
                        pCssVal,
                        pOffset,
                        pRatio,
                        pInitVal,
                        cssValArray;

                    pCssVal = iScope.pCss ? iScope.pCss : 'top';
                    cssValArray = pCssVal.split(':');
                    cssKey = cssValArray[0];
                    cssValue = cssValArray[1];

                    isSpecialVal = cssValue ? true : false;
                    if (!cssValue) cssValue = cssKey;

                    pRatio = iScope.pRatio ? +iScope.pRatio : 1.1;
                    pInitVal = iScope.pInitVal ? +iScope.pInitVal : 0;

                    iElem.css(cssKey, pInitVal + 'px');

                    function _onScroll() {
                        var resultVal;
                        var calcVal = $window.pageYOffset * pRatio + pInitVal;

                        if (isSpecialVal) {
                            resultVal = '' + cssValue + '(' + calcVal + 'px)';
                        } else {
                            resultVal = calcVal + 'px';
                        }
                        console.log(cssKey,resultVal)
                        iElem.css(cssKey, resultVal);
                    };

                    $window.addEventListener('scroll', _onScroll);
                    angular.element($window).bind("scroll", function() {
                        console.log('scroll')
                    });
                    $(window).bind('scroll',function(){
                        console.log('scroll')
                    })
                    $(document).scroll(function () {
                        console.log('scroll')
                    })
                    document.addEventListener('scroll', function (event) {
                        console.log('scroll')
                        var resultVal;
                        var calcVal = $window.pageYOffset * pRatio + pInitVal;

                        if (isSpecialVal) {
                            resultVal = '' + cssValue + '(' + calcVal + 'px)';
                        } else {
                            resultVal = calcVal + 'px';
                        }
                        console.log(cssKey,resultVal)
                        iElem.css(cssKey, resultVal);

                    }, true);

                }
            };
        }
    ]);

/*! VelocityJS.org (1.2.3). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */
/*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */
!function(a){function b(a){var b=a.length,d=c.type(a);return"function"===d||c.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===d||0===b||"number"==typeof b&&b>0&&b-1 in a}if(!a.jQuery){var c=function(a,b){return new c.fn.init(a,b)};c.isWindow=function(a){return null!=a&&a==a.window},c.type=function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?e[g.call(a)]||"object":typeof a},c.isArray=Array.isArray||function(a){return"array"===c.type(a)},c.isPlainObject=function(a){var b;if(!a||"object"!==c.type(a)||a.nodeType||c.isWindow(a))return!1;try{if(a.constructor&&!f.call(a,"constructor")&&!f.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(d){return!1}for(b in a);return void 0===b||f.call(a,b)},c.each=function(a,c,d){var e,f=0,g=a.length,h=b(a);if(d){if(h)for(;g>f&&(e=c.apply(a[f],d),e!==!1);f++);else for(f in a)if(e=c.apply(a[f],d),e===!1)break}else if(h)for(;g>f&&(e=c.call(a[f],f,a[f]),e!==!1);f++);else for(f in a)if(e=c.call(a[f],f,a[f]),e===!1)break;return a},c.data=function(a,b,e){if(void 0===e){var f=a[c.expando],g=f&&d[f];if(void 0===b)return g;if(g&&b in g)return g[b]}else if(void 0!==b){var f=a[c.expando]||(a[c.expando]=++c.uuid);return d[f]=d[f]||{},d[f][b]=e,e}},c.removeData=function(a,b){var e=a[c.expando],f=e&&d[e];f&&c.each(b,function(a,b){delete f[b]})},c.extend=function(){var a,b,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;for("boolean"==typeof h&&(k=h,h=arguments[i]||{},i++),"object"!=typeof h&&"function"!==c.type(h)&&(h={}),i===j&&(h=this,i--);j>i;i++)if(null!=(f=arguments[i]))for(e in f)a=h[e],d=f[e],h!==d&&(k&&d&&(c.isPlainObject(d)||(b=c.isArray(d)))?(b?(b=!1,g=a&&c.isArray(a)?a:[]):g=a&&c.isPlainObject(a)?a:{},h[e]=c.extend(k,g,d)):void 0!==d&&(h[e]=d));return h},c.queue=function(a,d,e){function f(a,c){var d=c||[];return null!=a&&(b(Object(a))?!function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;)a[e++]=b[d++];if(c!==c)for(;void 0!==b[d];)a[e++]=b[d++];return a.length=e,a}(d,"string"==typeof a?[a]:a):[].push.call(d,a)),d}if(a){d=(d||"fx")+"queue";var g=c.data(a,d);return e?(!g||c.isArray(e)?g=c.data(a,d,f(e)):g.push(e),g):g||[]}},c.dequeue=function(a,b){c.each(a.nodeType?[a]:a,function(a,d){b=b||"fx";var e=c.queue(d,b),f=e.shift();"inprogress"===f&&(f=e.shift()),f&&("fx"===b&&e.unshift("inprogress"),f.call(d,function(){c.dequeue(d,b)}))})},c.fn=c.prototype={init:function(a){if(a.nodeType)return this[0]=a,this;throw new Error("Not a DOM node.")},offset:function(){var b=this[0].getBoundingClientRect?this[0].getBoundingClientRect():{top:0,left:0};return{top:b.top+(a.pageYOffset||document.scrollTop||0)-(document.clientTop||0),left:b.left+(a.pageXOffset||document.scrollLeft||0)-(document.clientLeft||0)}},position:function(){function a(){for(var a=this.offsetParent||document;a&&"html"===!a.nodeType.toLowerCase&&"static"===a.style.position;)a=a.offsetParent;return a||document}var b=this[0],a=a.apply(b),d=this.offset(),e=/^(?:body|html)$/i.test(a.nodeName)?{top:0,left:0}:c(a).offset();return d.top-=parseFloat(b.style.marginTop)||0,d.left-=parseFloat(b.style.marginLeft)||0,a.style&&(e.top+=parseFloat(a.style.borderTopWidth)||0,e.left+=parseFloat(a.style.borderLeftWidth)||0),{top:d.top-e.top,left:d.left-e.left}}};var d={};c.expando="velocity"+(new Date).getTime(),c.uuid=0;for(var e={},f=e.hasOwnProperty,g=e.toString,h="Boolean Number String Function Array Date RegExp Object Error".split(" "),i=0;i<h.length;i++)e["[object "+h[i]+"]"]=h[i].toLowerCase();c.fn.init.prototype=c.fn,a.Velocity={Utilities:c}}}(window),function(a){"object"==typeof module&&"object"==typeof module.exports?module.exports=a():"function"==typeof define&&define.amd?define(a):a()}(function(){return function(a,b,c,d){function e(a){for(var b=-1,c=a?a.length:0,d=[];++b<c;){var e=a[b];e&&d.push(e)}return d}function f(a){return p.isWrapped(a)?a=[].slice.call(a):p.isNode(a)&&(a=[a]),a}function g(a){var b=m.data(a,"velocity");return null===b?d:b}function h(a){return function(b){return Math.round(b*a)*(1/a)}}function i(a,c,d,e){function f(a,b){return 1-3*b+3*a}function g(a,b){return 3*b-6*a}function h(a){return 3*a}function i(a,b,c){return((f(b,c)*a+g(b,c))*a+h(b))*a}function j(a,b,c){return 3*f(b,c)*a*a+2*g(b,c)*a+h(b)}function k(b,c){for(var e=0;p>e;++e){var f=j(c,a,d);if(0===f)return c;var g=i(c,a,d)-b;c-=g/f}return c}function l(){for(var b=0;t>b;++b)x[b]=i(b*u,a,d)}function m(b,c,e){var f,g,h=0;do g=c+(e-c)/2,f=i(g,a,d)-b,f>0?e=g:c=g;while(Math.abs(f)>r&&++h<s);return g}function n(b){for(var c=0,e=1,f=t-1;e!=f&&x[e]<=b;++e)c+=u;--e;var g=(b-x[e])/(x[e+1]-x[e]),h=c+g*u,i=j(h,a,d);return i>=q?k(b,h):0==i?h:m(b,c,c+u)}function o(){y=!0,(a!=c||d!=e)&&l()}var p=4,q=.001,r=1e-7,s=10,t=11,u=1/(t-1),v="Float32Array"in b;if(4!==arguments.length)return!1;for(var w=0;4>w;++w)if("number"!=typeof arguments[w]||isNaN(arguments[w])||!isFinite(arguments[w]))return!1;a=Math.min(a,1),d=Math.min(d,1),a=Math.max(a,0),d=Math.max(d,0);var x=v?new Float32Array(t):new Array(t),y=!1,z=function(b){return y||o(),a===c&&d===e?b:0===b?0:1===b?1:i(n(b),c,e)};z.getControlPoints=function(){return[{x:a,y:c},{x:d,y:e}]};var A="generateBezier("+[a,c,d,e]+")";return z.toString=function(){return A},z}function j(a,b){var c=a;return p.isString(a)?t.Easings[a]||(c=!1):c=p.isArray(a)&&1===a.length?h.apply(null,a):p.isArray(a)&&2===a.length?u.apply(null,a.concat([b])):p.isArray(a)&&4===a.length?i.apply(null,a):!1,c===!1&&(c=t.Easings[t.defaults.easing]?t.defaults.easing:s),c}function k(a){if(a){var b=(new Date).getTime(),c=t.State.calls.length;c>1e4&&(t.State.calls=e(t.State.calls));for(var f=0;c>f;f++)if(t.State.calls[f]){var h=t.State.calls[f],i=h[0],j=h[2],n=h[3],o=!!n,q=null;n||(n=t.State.calls[f][3]=b-16);for(var r=Math.min((b-n)/j.duration,1),s=0,u=i.length;u>s;s++){var w=i[s],y=w.element;if(g(y)){var z=!1;if(j.display!==d&&null!==j.display&&"none"!==j.display){if("flex"===j.display){var A=["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex"];m.each(A,function(a,b){v.setPropertyValue(y,"display",b)})}v.setPropertyValue(y,"display",j.display)}j.visibility!==d&&"hidden"!==j.visibility&&v.setPropertyValue(y,"visibility",j.visibility);for(var B in w)if("element"!==B){var C,D=w[B],E=p.isString(D.easing)?t.Easings[D.easing]:D.easing;if(1===r)C=D.endValue;else{var F=D.endValue-D.startValue;if(C=D.startValue+F*E(r,j,F),!o&&C===D.currentValue)continue}if(D.currentValue=C,"tween"===B)q=C;else{if(v.Hooks.registered[B]){var G=v.Hooks.getRoot(B),H=g(y).rootPropertyValueCache[G];H&&(D.rootPropertyValue=H)}var I=v.setPropertyValue(y,B,D.currentValue+(0===parseFloat(C)?"":D.unitType),D.rootPropertyValue,D.scrollData);v.Hooks.registered[B]&&(g(y).rootPropertyValueCache[G]=v.Normalizations.registered[G]?v.Normalizations.registered[G]("extract",null,I[1]):I[1]),"transform"===I[0]&&(z=!0)}}j.mobileHA&&g(y).transformCache.translate3d===d&&(g(y).transformCache.translate3d="(0px, 0px, 0px)",z=!0),z&&v.flushTransformCache(y)}}j.display!==d&&"none"!==j.display&&(t.State.calls[f][2].display=!1),j.visibility!==d&&"hidden"!==j.visibility&&(t.State.calls[f][2].visibility=!1),j.progress&&j.progress.call(h[1],h[1],r,Math.max(0,n+j.duration-b),n,q),1===r&&l(f)}}t.State.isTicking&&x(k)}function l(a,b){if(!t.State.calls[a])return!1;for(var c=t.State.calls[a][0],e=t.State.calls[a][1],f=t.State.calls[a][2],h=t.State.calls[a][4],i=!1,j=0,k=c.length;k>j;j++){var l=c[j].element;if(b||f.loop||("none"===f.display&&v.setPropertyValue(l,"display",f.display),"hidden"===f.visibility&&v.setPropertyValue(l,"visibility",f.visibility)),f.loop!==!0&&(m.queue(l)[1]===d||!/\.velocityQueueEntryFlag/i.test(m.queue(l)[1]))&&g(l)){g(l).isAnimating=!1,g(l).rootPropertyValueCache={};var n=!1;m.each(v.Lists.transforms3D,function(a,b){var c=/^scale/.test(b)?1:0,e=g(l).transformCache[b];g(l).transformCache[b]!==d&&new RegExp("^\\("+c+"[^.]").test(e)&&(n=!0,delete g(l).transformCache[b])}),f.mobileHA&&(n=!0,delete g(l).transformCache.translate3d),n&&v.flushTransformCache(l),v.Values.removeClass(l,"velocity-animating")}if(!b&&f.complete&&!f.loop&&j===k-1)try{f.complete.call(e,e)}catch(o){setTimeout(function(){throw o},1)}h&&f.loop!==!0&&h(e),g(l)&&f.loop===!0&&!b&&(m.each(g(l).tweensContainer,function(a,b){/^rotate/.test(a)&&360===parseFloat(b.endValue)&&(b.endValue=0,b.startValue=360),/^backgroundPosition/.test(a)&&100===parseFloat(b.endValue)&&"%"===b.unitType&&(b.endValue=0,b.startValue=100)}),t(l,"reverse",{loop:!0,delay:f.delay})),f.queue!==!1&&m.dequeue(l,f.queue)}t.State.calls[a]=!1;for(var p=0,q=t.State.calls.length;q>p;p++)if(t.State.calls[p]!==!1){i=!0;break}i===!1&&(t.State.isTicking=!1,delete t.State.calls,t.State.calls=[])}var m,n=function(){if(c.documentMode)return c.documentMode;for(var a=7;a>4;a--){var b=c.createElement("div");if(b.innerHTML="<!--[if IE "+a+"]><span></span><![endif]-->",b.getElementsByTagName("span").length)return b=null,a}return d}(),o=function(){var a=0;return b.webkitRequestAnimationFrame||b.mozRequestAnimationFrame||function(b){var c,d=(new Date).getTime();return c=Math.max(0,16-(d-a)),a=d+c,setTimeout(function(){b(d+c)},c)}}(),p={isString:function(a){return"string"==typeof a},isArray:Array.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)},isFunction:function(a){return"[object Function]"===Object.prototype.toString.call(a)},isNode:function(a){return a&&a.nodeType},isNodeList:function(a){return"object"==typeof a&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(a))&&a.length!==d&&(0===a.length||"object"==typeof a[0]&&a[0].nodeType>0)},isWrapped:function(a){return a&&(a.jquery||b.Zepto&&b.Zepto.zepto.isZ(a))},isSVG:function(a){return b.SVGElement&&a instanceof b.SVGElement},isEmptyObject:function(a){for(var b in a)return!1;return!0}},q=!1;if(a.fn&&a.fn.jquery?(m=a,q=!0):m=b.Velocity.Utilities,8>=n&&!q)throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");if(7>=n)return void(jQuery.fn.velocity=jQuery.fn.animate);var r=400,s="swing",t={State:{isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isAndroid:/Android/i.test(navigator.userAgent),isGingerbread:/Android 2\.3\.[3-7]/i.test(navigator.userAgent),isChrome:b.chrome,isFirefox:/Firefox/i.test(navigator.userAgent),prefixElement:c.createElement("div"),prefixMatches:{},scrollAnchor:null,scrollPropertyLeft:null,scrollPropertyTop:null,isTicking:!1,calls:[]},CSS:{},Utilities:m,Redirects:{},Easings:{},Promise:b.Promise,defaults:{queue:"",duration:r,easing:s,begin:d,complete:d,progress:d,display:d,visibility:d,loop:!1,delay:!1,mobileHA:!0,_cacheValues:!0},init:function(a){m.data(a,"velocity",{isSVG:p.isSVG(a),isAnimating:!1,computedStyle:null,tweensContainer:null,rootPropertyValueCache:{},transformCache:{}})},hook:null,mock:!1,version:{major:1,minor:2,patch:2},debug:!1};b.pageYOffset!==d?(t.State.scrollAnchor=b,t.State.scrollPropertyLeft="pageXOffset",t.State.scrollPropertyTop="pageYOffset"):(t.State.scrollAnchor=c.documentElement||c.body.parentNode||c.body,t.State.scrollPropertyLeft="scrollLeft",t.State.scrollPropertyTop="scrollTop");var u=function(){function a(a){return-a.tension*a.x-a.friction*a.v}function b(b,c,d){var e={x:b.x+d.dx*c,v:b.v+d.dv*c,tension:b.tension,friction:b.friction};return{dx:e.v,dv:a(e)}}function c(c,d){var e={dx:c.v,dv:a(c)},f=b(c,.5*d,e),g=b(c,.5*d,f),h=b(c,d,g),i=1/6*(e.dx+2*(f.dx+g.dx)+h.dx),j=1/6*(e.dv+2*(f.dv+g.dv)+h.dv);return c.x=c.x+i*d,c.v=c.v+j*d,c}return function d(a,b,e){var f,g,h,i={x:-1,v:0,tension:null,friction:null},j=[0],k=0,l=1e-4,m=.016;for(a=parseFloat(a)||500,b=parseFloat(b)||20,e=e||null,i.tension=a,i.friction=b,f=null!==e,f?(k=d(a,b),g=k/e*m):g=m;;)if(h=c(h||i,g),j.push(1+h.x),k+=16,!(Math.abs(h.x)>l&&Math.abs(h.v)>l))break;return f?function(a){return j[a*(j.length-1)|0]}:k}}();t.Easings={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},spring:function(a){return 1-Math.cos(4.5*a*Math.PI)*Math.exp(6*-a)}},m.each([["ease",[.25,.1,.25,1]],["ease-in",[.42,0,1,1]],["ease-out",[0,0,.58,1]],["ease-in-out",[.42,0,.58,1]],["easeInSine",[.47,0,.745,.715]],["easeOutSine",[.39,.575,.565,1]],["easeInOutSine",[.445,.05,.55,.95]],["easeInQuad",[.55,.085,.68,.53]],["easeOutQuad",[.25,.46,.45,.94]],["easeInOutQuad",[.455,.03,.515,.955]],["easeInCubic",[.55,.055,.675,.19]],["easeOutCubic",[.215,.61,.355,1]],["easeInOutCubic",[.645,.045,.355,1]],["easeInQuart",[.895,.03,.685,.22]],["easeOutQuart",[.165,.84,.44,1]],["easeInOutQuart",[.77,0,.175,1]],["easeInQuint",[.755,.05,.855,.06]],["easeOutQuint",[.23,1,.32,1]],["easeInOutQuint",[.86,0,.07,1]],["easeInExpo",[.95,.05,.795,.035]],["easeOutExpo",[.19,1,.22,1]],["easeInOutExpo",[1,0,0,1]],["easeInCirc",[.6,.04,.98,.335]],["easeOutCirc",[.075,.82,.165,1]],["easeInOutCirc",[.785,.135,.15,.86]]],function(a,b){t.Easings[b[0]]=i.apply(null,b[1])});var v=t.CSS={RegEx:{isHex:/^#([A-f\d]{3}){1,2}$/i,valueUnwrap:/^[A-z]+\((.*)\)$/i,wrappedValueAlreadyExtracted:/[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,valueSplit:/([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi},Lists:{colors:["fill","stroke","stopColor","color","backgroundColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor"],transformsBase:["translateX","translateY","scale","scaleX","scaleY","skewX","skewY","rotateZ"],transforms3D:["transformPerspective","translateZ","scaleZ","rotateX","rotateY"]},Hooks:{templates:{textShadow:["Color X Y Blur","black 0px 0px 0px"],boxShadow:["Color X Y Blur Spread","black 0px 0px 0px 0px"],clip:["Top Right Bottom Left","0px 0px 0px 0px"],backgroundPosition:["X Y","0% 0%"],transformOrigin:["X Y Z","50% 50% 0px"],perspectiveOrigin:["X Y","50% 50%"]},registered:{},register:function(){for(var a=0;a<v.Lists.colors.length;a++){var b="color"===v.Lists.colors[a]?"0 0 0 1":"255 255 255 1";v.Hooks.templates[v.Lists.colors[a]]=["Red Green Blue Alpha",b]}var c,d,e;if(n)for(c in v.Hooks.templates){d=v.Hooks.templates[c],e=d[0].split(" ");var f=d[1].match(v.RegEx.valueSplit);"Color"===e[0]&&(e.push(e.shift()),f.push(f.shift()),v.Hooks.templates[c]=[e.join(" "),f.join(" ")])}for(c in v.Hooks.templates){d=v.Hooks.templates[c],e=d[0].split(" ");for(var a in e){var g=c+e[a],h=a;v.Hooks.registered[g]=[c,h]}}},getRoot:function(a){var b=v.Hooks.registered[a];return b?b[0]:a},cleanRootPropertyValue:function(a,b){return v.RegEx.valueUnwrap.test(b)&&(b=b.match(v.RegEx.valueUnwrap)[1]),v.Values.isCSSNullValue(b)&&(b=v.Hooks.templates[a][1]),b},extractValue:function(a,b){var c=v.Hooks.registered[a];if(c){var d=c[0],e=c[1];return b=v.Hooks.cleanRootPropertyValue(d,b),b.toString().match(v.RegEx.valueSplit)[e]}return b},injectValue:function(a,b,c){var d=v.Hooks.registered[a];if(d){var e,f,g=d[0],h=d[1];return c=v.Hooks.cleanRootPropertyValue(g,c),e=c.toString().match(v.RegEx.valueSplit),e[h]=b,f=e.join(" ")}return c}},Normalizations:{registered:{clip:function(a,b,c){switch(a){case"name":return"clip";case"extract":var d;return v.RegEx.wrappedValueAlreadyExtracted.test(c)?d=c:(d=c.toString().match(v.RegEx.valueUnwrap),d=d?d[1].replace(/,(\s+)?/g," "):c),d;case"inject":return"rect("+c+")"}},blur:function(a,b,c){switch(a){case"name":return t.State.isFirefox?"filter":"-webkit-filter";case"extract":var d=parseFloat(c);if(!d&&0!==d){var e=c.toString().match(/blur\(([0-9]+[A-z]+)\)/i);d=e?e[1]:0}return d;case"inject":return parseFloat(c)?"blur("+c+")":"none"}},opacity:function(a,b,c){if(8>=n)switch(a){case"name":return"filter";case"extract":var d=c.toString().match(/alpha\(opacity=(.*)\)/i);return c=d?d[1]/100:1;case"inject":return b.style.zoom=1,parseFloat(c)>=1?"":"alpha(opacity="+parseInt(100*parseFloat(c),10)+")"}else switch(a){case"name":return"opacity";case"extract":return c;case"inject":return c}}},register:function(){9>=n||t.State.isGingerbread||(v.Lists.transformsBase=v.Lists.transformsBase.concat(v.Lists.transforms3D));for(var a=0;a<v.Lists.transformsBase.length;a++)!function(){var b=v.Lists.transformsBase[a];v.Normalizations.registered[b]=function(a,c,e){switch(a){case"name":return"transform";case"extract":return g(c)===d||g(c).transformCache[b]===d?/^scale/i.test(b)?1:0:g(c).transformCache[b].replace(/[()]/g,"");case"inject":var f=!1;switch(b.substr(0,b.length-1)){case"translate":f=!/(%|px|em|rem|vw|vh|\d)$/i.test(e);break;case"scal":case"scale":t.State.isAndroid&&g(c).transformCache[b]===d&&1>e&&(e=1),f=!/(\d)$/i.test(e);break;case"skew":f=!/(deg|\d)$/i.test(e);break;case"rotate":f=!/(deg|\d)$/i.test(e)}return f||(g(c).transformCache[b]="("+e+")"),g(c).transformCache[b]}}}();for(var a=0;a<v.Lists.colors.length;a++)!function(){var b=v.Lists.colors[a];v.Normalizations.registered[b]=function(a,c,e){switch(a){case"name":return b;case"extract":var f;if(v.RegEx.wrappedValueAlreadyExtracted.test(e))f=e;else{var g,h={black:"rgb(0, 0, 0)",blue:"rgb(0, 0, 255)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",red:"rgb(255, 0, 0)",white:"rgb(255, 255, 255)"};/^[A-z]+$/i.test(e)?g=h[e]!==d?h[e]:h.black:v.RegEx.isHex.test(e)?g="rgb("+v.Values.hexToRgb(e).join(" ")+")":/^rgba?\(/i.test(e)||(g=h.black),f=(g||e).toString().match(v.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g," ")}return 8>=n||3!==f.split(" ").length||(f+=" 1"),f;case"inject":return 8>=n?4===e.split(" ").length&&(e=e.split(/\s+/).slice(0,3).join(" ")):3===e.split(" ").length&&(e+=" 1"),(8>=n?"rgb":"rgba")+"("+e.replace(/\s+/g,",").replace(/\.(\d)+(?=,)/g,"")+")"}}}()}},Names:{camelCase:function(a){return a.replace(/-(\w)/g,function(a,b){return b.toUpperCase()})},SVGAttribute:function(a){var b="width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";return(n||t.State.isAndroid&&!t.State.isChrome)&&(b+="|transform"),new RegExp("^("+b+")$","i").test(a)},prefixCheck:function(a){if(t.State.prefixMatches[a])return[t.State.prefixMatches[a],!0];for(var b=["","Webkit","Moz","ms","O"],c=0,d=b.length;d>c;c++){var e;if(e=0===c?a:b[c]+a.replace(/^\w/,function(a){return a.toUpperCase()}),p.isString(t.State.prefixElement.style[e]))return t.State.prefixMatches[a]=e,[e,!0]}return[a,!1]}},Values:{hexToRgb:function(a){var b,c=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,d=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;return a=a.replace(c,function(a,b,c,d){return b+b+c+c+d+d}),b=d.exec(a),b?[parseInt(b[1],16),parseInt(b[2],16),parseInt(b[3],16)]:[0,0,0]},isCSSNullValue:function(a){return 0==a||/^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(a)},getUnitType:function(a){return/^(rotate|skew)/i.test(a)?"deg":/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(a)?"":"px"},getDisplayType:function(a){var b=a&&a.tagName.toString().toLowerCase();return/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(b)?"inline":/^(li)$/i.test(b)?"list-item":/^(tr)$/i.test(b)?"table-row":/^(table)$/i.test(b)?"table":/^(tbody)$/i.test(b)?"table-row-group":"block"},addClass:function(a,b){a.classList?a.classList.add(b):a.className+=(a.className.length?" ":"")+b},removeClass:function(a,b){a.classList?a.classList.remove(b):a.className=a.className.toString().replace(new RegExp("(^|\\s)"+b.split(" ").join("|")+"(\\s|$)","gi")," ")}},getPropertyValue:function(a,c,e,f){function h(a,c){function e(){j&&v.setPropertyValue(a,"display","none")}var i=0;if(8>=n)i=m.css(a,c);else{var j=!1;if(/^(width|height)$/.test(c)&&0===v.getPropertyValue(a,"display")&&(j=!0,v.setPropertyValue(a,"display",v.Values.getDisplayType(a))),!f){if("height"===c&&"border-box"!==v.getPropertyValue(a,"boxSizing").toString().toLowerCase()){var k=a.offsetHeight-(parseFloat(v.getPropertyValue(a,"borderTopWidth"))||0)-(parseFloat(v.getPropertyValue(a,"borderBottomWidth"))||0)-(parseFloat(v.getPropertyValue(a,"paddingTop"))||0)-(parseFloat(v.getPropertyValue(a,"paddingBottom"))||0);return e(),k}if("width"===c&&"border-box"!==v.getPropertyValue(a,"boxSizing").toString().toLowerCase()){var l=a.offsetWidth-(parseFloat(v.getPropertyValue(a,"borderLeftWidth"))||0)-(parseFloat(v.getPropertyValue(a,"borderRightWidth"))||0)-(parseFloat(v.getPropertyValue(a,"paddingLeft"))||0)-(parseFloat(v.getPropertyValue(a,"paddingRight"))||0);return e(),l}}var o;o=g(a)===d?b.getComputedStyle(a,null):g(a).computedStyle?g(a).computedStyle:g(a).computedStyle=b.getComputedStyle(a,null),"borderColor"===c&&(c="borderTopColor"),i=9===n&&"filter"===c?o.getPropertyValue(c):o[c],(""===i||null===i)&&(i=a.style[c]),e()}if("auto"===i&&/^(top|right|bottom|left)$/i.test(c)){var p=h(a,"position");("fixed"===p||"absolute"===p&&/top|left/i.test(c))&&(i=m(a).position()[c]+"px")}return i}var i;if(v.Hooks.registered[c]){var j=c,k=v.Hooks.getRoot(j);e===d&&(e=v.getPropertyValue(a,v.Names.prefixCheck(k)[0])),v.Normalizations.registered[k]&&(e=v.Normalizations.registered[k]("extract",a,e)),i=v.Hooks.extractValue(j,e)}else if(v.Normalizations.registered[c]){var l,o;l=v.Normalizations.registered[c]("name",a),"transform"!==l&&(o=h(a,v.Names.prefixCheck(l)[0]),v.Values.isCSSNullValue(o)&&v.Hooks.templates[c]&&(o=v.Hooks.templates[c][1])),i=v.Normalizations.registered[c]("extract",a,o)}if(!/^[\d-]/.test(i))if(g(a)&&g(a).isSVG&&v.Names.SVGAttribute(c))if(/^(height|width)$/i.test(c))try{i=a.getBBox()[c]}catch(p){i=0}else i=a.getAttribute(c);else i=h(a,v.Names.prefixCheck(c)[0]);return v.Values.isCSSNullValue(i)&&(i=0),t.debug>=2&&console.log("Get "+c+": "+i),i},setPropertyValue:function(a,c,d,e,f){var h=c;if("scroll"===c)f.container?f.container["scroll"+f.direction]=d:"Left"===f.direction?b.scrollTo(d,f.alternateValue):b.scrollTo(f.alternateValue,d);else if(v.Normalizations.registered[c]&&"transform"===v.Normalizations.registered[c]("name",a))v.Normalizations.registered[c]("inject",a,d),h="transform",d=g(a).transformCache[c];else{if(v.Hooks.registered[c]){var i=c,j=v.Hooks.getRoot(c);e=e||v.getPropertyValue(a,j),d=v.Hooks.injectValue(i,d,e),c=j}if(v.Normalizations.registered[c]&&(d=v.Normalizations.registered[c]("inject",a,d),c=v.Normalizations.registered[c]("name",a)),h=v.Names.prefixCheck(c)[0],8>=n)try{a.style[h]=d}catch(k){t.debug&&console.log("Browser does not support ["+d+"] for ["+h+"]")}else g(a)&&g(a).isSVG&&v.Names.SVGAttribute(c)?a.setAttribute(c,d):a.style[h]=d;t.debug>=2&&console.log("Set "+c+" ("+h+"): "+d)}return[h,d]},flushTransformCache:function(a){function b(b){return parseFloat(v.getPropertyValue(a,b))}var c="";if((n||t.State.isAndroid&&!t.State.isChrome)&&g(a).isSVG){var d={translate:[b("translateX"),b("translateY")],skewX:[b("skewX")],skewY:[b("skewY")],scale:1!==b("scale")?[b("scale"),b("scale")]:[b("scaleX"),b("scaleY")],rotate:[b("rotateZ"),0,0]};m.each(g(a).transformCache,function(a){/^translate/i.test(a)?a="translate":/^scale/i.test(a)?a="scale":/^rotate/i.test(a)&&(a="rotate"),d[a]&&(c+=a+"("+d[a].join(" ")+") ",delete d[a])})}else{var e,f;m.each(g(a).transformCache,function(b){return e=g(a).transformCache[b],"transformPerspective"===b?(f=e,!0):(9===n&&"rotateZ"===b&&(b="rotate"),void(c+=b+e+" "))}),f&&(c="perspective"+f+" "+c)}v.setPropertyValue(a,"transform",c)}};v.Hooks.register(),v.Normalizations.register(),t.hook=function(a,b,c){var e=d;return a=f(a),m.each(a,function(a,f){if(g(f)===d&&t.init(f),c===d)e===d&&(e=t.CSS.getPropertyValue(f,b));else{var h=t.CSS.setPropertyValue(f,b,c);"transform"===h[0]&&t.CSS.flushTransformCache(f),e=h}}),e};var w=function(){function a(){return h?B.promise||null:i}function e(){function a(){function a(a,b){var c=d,e=d,g=d;return p.isArray(a)?(c=a[0],!p.isArray(a[1])&&/^[\d-]/.test(a[1])||p.isFunction(a[1])||v.RegEx.isHex.test(a[1])?g=a[1]:(p.isString(a[1])&&!v.RegEx.isHex.test(a[1])||p.isArray(a[1]))&&(e=b?a[1]:j(a[1],h.duration),a[2]!==d&&(g=a[2]))):c=a,b||(e=e||h.easing),p.isFunction(c)&&(c=c.call(f,y,x)),p.isFunction(g)&&(g=g.call(f,y,x)),[c||0,e,g]}function l(a,b){var c,d;return d=(b||"0").toString().toLowerCase().replace(/[%A-z]+$/,function(a){return c=a,""}),c||(c=v.Values.getUnitType(a)),[d,c]}function n(){var a={myParent:f.parentNode||c.body,position:v.getPropertyValue(f,"position"),fontSize:v.getPropertyValue(f,"fontSize")},d=a.position===I.lastPosition&&a.myParent===I.lastParent,e=a.fontSize===I.lastFontSize;I.lastParent=a.myParent,I.lastPosition=a.position,I.lastFontSize=a.fontSize;var h=100,i={};if(e&&d)i.emToPx=I.lastEmToPx,i.percentToPxWidth=I.lastPercentToPxWidth,i.percentToPxHeight=I.lastPercentToPxHeight;else{var j=g(f).isSVG?c.createElementNS("http://www.w3.org/2000/svg","rect"):c.createElement("div");t.init(j),a.myParent.appendChild(j),m.each(["overflow","overflowX","overflowY"],function(a,b){t.CSS.setPropertyValue(j,b,"hidden")}),t.CSS.setPropertyValue(j,"position",a.position),t.CSS.setPropertyValue(j,"fontSize",a.fontSize),t.CSS.setPropertyValue(j,"boxSizing","content-box"),m.each(["minWidth","maxWidth","width","minHeight","maxHeight","height"],function(a,b){t.CSS.setPropertyValue(j,b,h+"%")}),t.CSS.setPropertyValue(j,"paddingLeft",h+"em"),i.percentToPxWidth=I.lastPercentToPxWidth=(parseFloat(v.getPropertyValue(j,"width",null,!0))||1)/h,i.percentToPxHeight=I.lastPercentToPxHeight=(parseFloat(v.getPropertyValue(j,"height",null,!0))||1)/h,i.emToPx=I.lastEmToPx=(parseFloat(v.getPropertyValue(j,"paddingLeft"))||1)/h,a.myParent.removeChild(j)}return null===I.remToPx&&(I.remToPx=parseFloat(v.getPropertyValue(c.body,"fontSize"))||16),null===I.vwToPx&&(I.vwToPx=parseFloat(b.innerWidth)/100,I.vhToPx=parseFloat(b.innerHeight)/100),i.remToPx=I.remToPx,i.vwToPx=I.vwToPx,i.vhToPx=I.vhToPx,t.debug>=1&&console.log("Unit ratios: "+JSON.stringify(i),f),i}if(h.begin&&0===y)try{h.begin.call(o,o)}catch(r){setTimeout(function(){throw r},1)}if("scroll"===C){var u,w,z,A=/^x$/i.test(h.axis)?"Left":"Top",D=parseFloat(h.offset)||0;h.container?p.isWrapped(h.container)||p.isNode(h.container)?(h.container=h.container[0]||h.container,u=h.container["scroll"+A],z=u+m(f).position()[A.toLowerCase()]+D):h.container=null:(u=t.State.scrollAnchor[t.State["scrollProperty"+A]],w=t.State.scrollAnchor[t.State["scrollProperty"+("Left"===A?"Top":"Left")]],z=m(f).offset()[A.toLowerCase()]+D),i={scroll:{rootPropertyValue:!1,startValue:u,currentValue:u,endValue:z,unitType:"",easing:h.easing,scrollData:{container:h.container,direction:A,alternateValue:w}},element:f},t.debug&&console.log("tweensContainer (scroll): ",i.scroll,f)}else if("reverse"===C){if(!g(f).tweensContainer)return void m.dequeue(f,h.queue);"none"===g(f).opts.display&&(g(f).opts.display="auto"),"hidden"===g(f).opts.visibility&&(g(f).opts.visibility="visible"),g(f).opts.loop=!1,g(f).opts.begin=null,g(f).opts.complete=null,s.easing||delete h.easing,s.duration||delete h.duration,h=m.extend({},g(f).opts,h);var E=m.extend(!0,{},g(f).tweensContainer);for(var F in E)if("element"!==F){var G=E[F].startValue;E[F].startValue=E[F].currentValue=E[F].endValue,E[F].endValue=G,p.isEmptyObject(s)||(E[F].easing=h.easing),t.debug&&console.log("reverse tweensContainer ("+F+"): "+JSON.stringify(E[F]),f)}i=E}else if("start"===C){var E;g(f).tweensContainer&&g(f).isAnimating===!0&&(E=g(f).tweensContainer),m.each(q,function(b,c){if(RegExp("^"+v.Lists.colors.join("$|^")+"$").test(b)){var e=a(c,!0),f=e[0],g=e[1],h=e[2];if(v.RegEx.isHex.test(f)){for(var i=["Red","Green","Blue"],j=v.Values.hexToRgb(f),k=h?v.Values.hexToRgb(h):d,l=0;l<i.length;l++){var m=[j[l]];g&&m.push(g),k!==d&&m.push(k[l]),q[b+i[l]]=m}delete q[b]}}});for(var H in q){var K=a(q[H]),L=K[0],M=K[1],N=K[2];H=v.Names.camelCase(H);var O=v.Hooks.getRoot(H),P=!1;if(g(f).isSVG||"tween"===O||v.Names.prefixCheck(O)[1]!==!1||v.Normalizations.registered[O]!==d){(h.display!==d&&null!==h.display&&"none"!==h.display||h.visibility!==d&&"hidden"!==h.visibility)&&/opacity|filter/.test(H)&&!N&&0!==L&&(N=0),h._cacheValues&&E&&E[H]?(N===d&&(N=E[H].endValue+E[H].unitType),P=g(f).rootPropertyValueCache[O]):v.Hooks.registered[H]?N===d?(P=v.getPropertyValue(f,O),N=v.getPropertyValue(f,H,P)):P=v.Hooks.templates[O][1]:N===d&&(N=v.getPropertyValue(f,H));var Q,R,S,T=!1;if(Q=l(H,N),N=Q[0],S=Q[1],Q=l(H,L),L=Q[0].replace(/^([+-\/*])=/,function(a,b){return T=b,""}),R=Q[1],N=parseFloat(N)||0,L=parseFloat(L)||0,"%"===R&&(/^(fontSize|lineHeight)$/.test(H)?(L/=100,R="em"):/^scale/.test(H)?(L/=100,R=""):/(Red|Green|Blue)$/i.test(H)&&(L=L/100*255,R="")),/[\/*]/.test(T))R=S;else if(S!==R&&0!==N)if(0===L)R=S;else{e=e||n();var U=/margin|padding|left|right|width|text|word|letter/i.test(H)||/X$/.test(H)||"x"===H?"x":"y";switch(S){case"%":N*="x"===U?e.percentToPxWidth:e.percentToPxHeight;break;case"px":break;default:N*=e[S+"ToPx"]}switch(R){case"%":N*=1/("x"===U?e.percentToPxWidth:e.percentToPxHeight);break;case"px":break;default:N*=1/e[R+"ToPx"]}}switch(T){case"+":L=N+L;break;case"-":L=N-L;break;case"*":L=N*L;break;case"/":L=N/L}i[H]={rootPropertyValue:P,startValue:N,currentValue:N,endValue:L,unitType:R,easing:M},t.debug&&console.log("tweensContainer ("+H+"): "+JSON.stringify(i[H]),f)}else t.debug&&console.log("Skipping ["+O+"] due to a lack of browser support.")}i.element=f}i.element&&(v.Values.addClass(f,"velocity-animating"),J.push(i),""===h.queue&&(g(f).tweensContainer=i,g(f).opts=h),g(f).isAnimating=!0,y===x-1?(t.State.calls.push([J,o,h,null,B.resolver]),t.State.isTicking===!1&&(t.State.isTicking=!0,k())):y++)}var e,f=this,h=m.extend({},t.defaults,s),i={};switch(g(f)===d&&t.init(f),parseFloat(h.delay)&&h.queue!==!1&&m.queue(f,h.queue,function(a){t.velocityQueueEntryFlag=!0,g(f).delayTimer={setTimeout:setTimeout(a,parseFloat(h.delay)),next:a}}),h.duration.toString().toLowerCase()){case"fast":h.duration=200;break;case"normal":h.duration=r;break;case"slow":h.duration=600;break;default:h.duration=parseFloat(h.duration)||1}t.mock!==!1&&(t.mock===!0?h.duration=h.delay=1:(h.duration*=parseFloat(t.mock)||1,h.delay*=parseFloat(t.mock)||1)),h.easing=j(h.easing,h.duration),h.begin&&!p.isFunction(h.begin)&&(h.begin=null),h.progress&&!p.isFunction(h.progress)&&(h.progress=null),h.complete&&!p.isFunction(h.complete)&&(h.complete=null),h.display!==d&&null!==h.display&&(h.display=h.display.toString().toLowerCase(),"auto"===h.display&&(h.display=t.CSS.Values.getDisplayType(f))),h.visibility!==d&&null!==h.visibility&&(h.visibility=h.visibility.toString().toLowerCase()),h.mobileHA=h.mobileHA&&t.State.isMobile&&!t.State.isGingerbread,h.queue===!1?h.delay?setTimeout(a,h.delay):a():m.queue(f,h.queue,function(b,c){return c===!0?(B.promise&&B.resolver(o),!0):(t.velocityQueueEntryFlag=!0,void a(b))}),""!==h.queue&&"fx"!==h.queue||"inprogress"===m.queue(f)[0]||m.dequeue(f)}var h,i,n,o,q,s,u=arguments[0]&&(arguments[0].p||m.isPlainObject(arguments[0].properties)&&!arguments[0].properties.names||p.isString(arguments[0].properties));if(p.isWrapped(this)?(h=!1,n=0,o=this,i=this):(h=!0,n=1,o=u?arguments[0].elements||arguments[0].e:arguments[0]),o=f(o)){u?(q=arguments[0].properties||arguments[0].p,s=arguments[0].options||arguments[0].o):(q=arguments[n],s=arguments[n+1]);var x=o.length,y=0;if(!/^(stop|finish|finishAll)$/i.test(q)&&!m.isPlainObject(s)){var z=n+1;s={};for(var A=z;A<arguments.length;A++)p.isArray(arguments[A])||!/^(fast|normal|slow)$/i.test(arguments[A])&&!/^\d/.test(arguments[A])?p.isString(arguments[A])||p.isArray(arguments[A])?s.easing=arguments[A]:p.isFunction(arguments[A])&&(s.complete=arguments[A]):s.duration=arguments[A]}var B={promise:null,resolver:null,rejecter:null};h&&t.Promise&&(B.promise=new t.Promise(function(a,b){B.resolver=a,B.rejecter=b}));var C;switch(q){case"scroll":C="scroll";break;case"reverse":C="reverse";break;case"finish":case"finishAll":case"stop":m.each(o,function(a,b){g(b)&&g(b).delayTimer&&(clearTimeout(g(b).delayTimer.setTimeout),g(b).delayTimer.next&&g(b).delayTimer.next(),delete g(b).delayTimer),"finishAll"!==q||s!==!0&&!p.isString(s)||(m.each(m.queue(b,p.isString(s)?s:""),function(a,b){p.isFunction(b)&&b()}),m.queue(b,p.isString(s)?s:"",[]))});var D=[];return m.each(t.State.calls,function(a,b){b&&m.each(b[1],function(c,e){var f=s===d?"":s;return f===!0||b[2].queue===f||s===d&&b[2].queue===!1?void m.each(o,function(c,d){d===e&&((s===!0||p.isString(s))&&(m.each(m.queue(d,p.isString(s)?s:""),function(a,b){p.isFunction(b)&&b(null,!0)
}),m.queue(d,p.isString(s)?s:"",[])),"stop"===q?(g(d)&&g(d).tweensContainer&&f!==!1&&m.each(g(d).tweensContainer,function(a,b){b.endValue=b.currentValue}),D.push(a)):("finish"===q||"finishAll"===q)&&(b[2].duration=1))}):!0})}),"stop"===q&&(m.each(D,function(a,b){l(b,!0)}),B.promise&&B.resolver(o)),a();default:if(!m.isPlainObject(q)||p.isEmptyObject(q)){if(p.isString(q)&&t.Redirects[q]){var E=m.extend({},s),F=E.duration,G=E.delay||0;return E.backwards===!0&&(o=m.extend(!0,[],o).reverse()),m.each(o,function(a,b){parseFloat(E.stagger)?E.delay=G+parseFloat(E.stagger)*a:p.isFunction(E.stagger)&&(E.delay=G+E.stagger.call(b,a,x)),E.drag&&(E.duration=parseFloat(F)||(/^(callout|transition)/.test(q)?1e3:r),E.duration=Math.max(E.duration*(E.backwards?1-a/x:(a+1)/x),.75*E.duration,200)),t.Redirects[q].call(b,b,E||{},a,x,o,B.promise?B:d)}),a()}var H="Velocity: First argument ("+q+") was not a property map, a known action, or a registered redirect. Aborting.";return B.promise?B.rejecter(new Error(H)):console.log(H),a()}C="start"}var I={lastParent:null,lastPosition:null,lastFontSize:null,lastPercentToPxWidth:null,lastPercentToPxHeight:null,lastEmToPx:null,remToPx:null,vwToPx:null,vhToPx:null},J=[];m.each(o,function(a,b){p.isNode(b)&&e.call(b)});var K,E=m.extend({},t.defaults,s);if(E.loop=parseInt(E.loop),K=2*E.loop-1,E.loop)for(var L=0;K>L;L++){var M={delay:E.delay,progress:E.progress};L===K-1&&(M.display=E.display,M.visibility=E.visibility,M.complete=E.complete),w(o,"reverse",M)}return a()}};t=m.extend(w,t),t.animate=w;var x=b.requestAnimationFrame||o;return t.State.isMobile||c.hidden===d||c.addEventListener("visibilitychange",function(){c.hidden?(x=function(a){return setTimeout(function(){a(!0)},16)},k()):x=b.requestAnimationFrame||o}),a.Velocity=t,a!==b&&(a.fn.velocity=w,a.fn.velocity.defaults=t.defaults),m.each(["Down","Up"],function(a,b){t.Redirects["slide"+b]=function(a,c,e,f,g,h){var i=m.extend({},c),j=i.begin,k=i.complete,l={height:"",marginTop:"",marginBottom:"",paddingTop:"",paddingBottom:""},n={};i.display===d&&(i.display="Down"===b?"inline"===t.CSS.Values.getDisplayType(a)?"inline-block":"block":"none"),i.begin=function(){j&&j.call(g,g);for(var c in l){n[c]=a.style[c];var d=t.CSS.getPropertyValue(a,c);l[c]="Down"===b?[d,0]:[0,d]}n.overflow=a.style.overflow,a.style.overflow="hidden"},i.complete=function(){for(var b in n)a.style[b]=n[b];k&&k.call(g,g),h&&h.resolver(g)},t(a,l,i)}}),m.each(["In","Out"],function(a,b){t.Redirects["fade"+b]=function(a,c,e,f,g,h){var i=m.extend({},c),j={opacity:"In"===b?1:0},k=i.complete;i.complete=e!==f-1?i.begin=null:function(){k&&k.call(g,g),h&&h.resolver(g)},i.display===d&&(i.display="In"===b?"auto":"none"),t(this,j,i)}}),t}(window.jQuery||window.Zepto||window,window,document)});





    









angular.module('i-comments',[])
//Communication between nested directives
    //http://programmers.stackexchange.com/questions/223006/communication-between-nested-directives
    //Call function in controller from a nested directive
//stackoverflow.com/questions/21088364/call-function-in-controller-from-a-nested-directive
    //Building Nested Recursive Directives in Angular
    //sporto.github.io/blog/2013/06/24/nested-recursive-directives-in-angular/
    .directive('commentsWrap',function(Comments){
        return {
            restrict: "E",
            replace: true,
            scope :{
                parent:"=",
                what:'@'
            },
            controller: function($scope,global,$timeout) {
                $scope.comments=[];
                Comments.setComments($scope.comments);
                $scope.comment={};
                $scope.user=global.get('user');
                $scope.addChildComment = Comments.addChildComment;
                $scope.deleteComment=Comments.deleteComment;
                $scope.paginate=Comments.getPaginate();
                $scope.moreComments = Comments.moreComments;
            },
            templateUrl:'components/comment/commentsWrap.html',
            link:function(scope, element, attrs){
                
                scope.$watch('parent', function(n,o) {
                    if (n){
                        //Comments.setEmpty()
                        //console.log(n); 
                        
                        Comments.setStuffId(scope.parent,scope.what);
                        //$scope.comments=Comments.getComments(scope.parent,scope.what); 
                    }
                    
                    /*Comments.setStuffId(attrs['parent']);
                    scope.parent=attrs['parent'];*/
                });
                
                scope.$on('$destroy', function() {
                    Comments.setEmpty()
                })
            }
        }
    })

    .directive('comments', function () {
        return {
            restrict: "E",
            replace: true,
            scope: {
                comments: '=',
                depth:'='
            },
            template: "<ul class='content-comments'><comment ng-repeat='comment in comments' comment ='comment' depth='depth'></comment></ul>",
            link: function (scope, element, attrs){
                /*var c={};
                c.comments=[];
                scope.$watch('comments',function(n,o){
                    console.log(n);
                    if(n && n.length){
                        c.comments=n;
                        //console.log(scope.comments);
                    }
                },true)*/
                
            }
        }
    })

    .directive('comment', function ($compile,global,Comments) {
        return {
            restrict: "E",
            replace: true,
            scope: {
                comment: '=',
                depth:'='
            },
            /*controller : function($scope,global){
             $scope.user=global.get('user');
             },*/
            transclude: true,
            templateUrl:'components/comment/member.html',
            link: function (scope, element, attrs,controller, $transclude) {
                //console.log(scope.comment);
                scope.depth =parseInt(scope.depth)+1;
                scope.user=global.get('user');
                scope.deleteComment=Comments.deleteComment;
                $transclude(function (clone, $outerScope) {
                    scope.comments=$outerScope['comments'];
                });
                var collectionSt = '<comments comments="comment.children"  depth="depth"></comments>';
                if (angular.isArray(scope.comment.children)) {
                    $compile(collectionSt)(scope, function(cloned, scope)   {
                        $(element[0].children[3]).append(cloned);
                    });
                }
                scope.toggled = true;
                scope.btnText = 'ответить';

                scope.toggle = function() {
                    scope.toggled = !scope.toggled;
                    scope.btnText = (scope.toggled) ? 'ответить' : 'закрыть';
                    scope.child = {};
                };
                scope.toggleEdit = function() {
                    scope.toggled = !scope.toggled;
                    scope.btnText = (scope.toggled) ? 'ответить' : 'закрыть';
                    //console.log(scope.comment)
                    scope.child = scope.comment;
                };
                scope.collapsed = true;
                scope.collapse = function() {
                    scope.collapsed=!scope.collapsed;
                }
                scope.addComment=function(child){
                    scope.toggle();
                    if (!child.parent)
                        child.parent=scope.comment._id;
                    if (!scope.comment.children || !scope.comment.children){
                        scope.comment.children=[];
                    }
                    Comments.addChildComment(child,scope.comment.children);
                }
            }
        }
    })
    .factory('Comments',['$resource','global',function($resource,global){
        var Comment=$resource('/api/collections/Comment/:id',{id:'@_id'});
        var paginate={page:0,totalItems:0},query;
        var comments;
        var what;
        function getComment(){
            Comment.query({query:query,perPage:5 , page:paginate.page},function(res){
                if (paginate.page==0 && res.length>0){
                    paginate.totalItems=res.shift().index;
                }
                for (var i= 0,l=res.length;i<l;i++){
                    comments.push(res[i]);
                }
                // или так
                //comments.push.apply(comments,res);
            })
        }
        return {
            setStuffId:function(id,wh){
                what=wh;
                var w={};
                w[what]=id;
                query= JSON.stringify(w);
                //console.log(query); 
                /*if (!global.get('local').val){
                   getComment(JSON.stringify({parent:id})) 
                }*/
                getComment() 
                
            },
            moreComments:function(){
                paginate.page++;
                getComment();
            },
            addChildComment :function(comment,parent,what) {
                console.log('&&&&')
                //console.log(comment,parent);return
                // todo сделать валидацию формы с ошибками
                if (!comment.date)
                    comment.date=new Date();
                if (global.get('user').val){
                    if (!comment.name)
                        comment.name=global.get('user').val.name;
                    if (!comment.profileUrl && global.get('user').val.profileUrl)
                        comment.profileUrl=global.get('user').val.profileUrl;
                }
                if (!comment.text ||!comment.name){
                    console.log('не заполнены поля.');
                    return;
                }
                comment.text= comment.text.substring(0,500);
                comment.name=comment.name.substring(0,100);
                if (comment.profileUrl)
                    comment.profileUrl=comment.profileUrl.substring(0,100);
                // для редактирования комментария. приводим заполненный массив вложенных комментариев к обычному массивы их id
                var commentForServer = angular.copy(comment);
                if (commentForServer.children){
                    commentForServer.children=commentForServer.children.map(function(el){return el._id})
                } else {
                    commentForServer.children=[];
                }

                Comment.save(commentForServer,function(res){
                    if (!comment._id){ //новый
                        comment._id=res.id;
                        comment.children=[];
                        parent.unshift(angular.copy(comment));
                    }
                },function(err){
                    return false;
                });
            },
            deleteComment : function(id,comments){
                /*var dlg = dialogs.confirm('Подтверждение','Вы уверены?');
                dlg.result.then(function(btn){
                    var i,l;
                    for (i= 0,l=comments.length;i<l;i++){
                        if (comments[i]._id==id){
                            break;
                        }
                    }
                    comments.splice(i,1);
                    Comment.delete({id:id},function(res){},function(err){console.log(err)})
                },function(btn){ });*/
                var i,l;
                for (i= 0,l=comments.length;i<l;i++){
                    if (comments[i]._id==id){
                        break;
                    }
                }
                comments.splice(i,1);
                Comment.delete({id:id},function(res){},function(err){console.log(err)})
            },
            setEmpty : function(){
                comments.length=0;
                paginate.page=0;
                paginate.totalItems=0;
            },
            getComments:function(id,wh){
                /*what=wh;
                var w={};
                w[what]=id;
                query= JSON.stringify(w);*/
                //query= JSON.stringify({parent:id});
                //console.log(query);
                return comments;
            },
            setComments:function(c){
                comments=c;
                //console.log(comments);
            },
            getPaginate:function(){
                return paginate;
            }
            /*getPage:function(){
             return paginate.page;
             }*/


        }
    }])
'use strict';
angular.module('gmall.directives')
    //https://github.com/deltreey/angular-simple-focus/blob/master/simple-focus.js
.directive('focusElement',['$timeout',function($timeout){
    return{
        scope:{
            focusElement:'=',
        },
        link:function($scope, $element, $attr){
            $scope.$watch('focusElement', function(value) {
                console.log(value)
                if (value) {
                    setTimeout(function(){
                        $element[0].focus();
                        $scope.focusElemen=false;
                    },200)
                    return;
                }
            })
        }
    }
}])
    .directive('simpleFocusElement',[function(){
        return{
            restrict: 'A',
            link:function(scope,element,attrs){
                setTimeout(function() {
                    element[0].focus();
                    //console.log(element[0])
                },300);
                if(attrs.simpleFocusElement=='false'){
                    console.log('focus',element[0])
                    //element[0].focus();
                    setTimeout(function() {
                        element[0].focus();
                    },200);
                }

            }
        }
    }])
    //http://stackoverflow.com/questions/14833326/how-to-set-focus-on-input-field
    .directive('focusMe1', function($timeout, $parse) {
        return {
            //scope: true,   // optionally create a child scope
            link: function(scope, element, attrs) {
                var model = $parse(attrs.focusMe);
                scope.$watch(model, function(value) {
                    console.log('value=',value);
                    if(value === true) {
                        $timeout(function() {
                            element[0].focus();
                            //https://docs.angularjs.org/error/$rootScope/inprog?p0=$apply
                        },300, false);
                    }
                });
                // to address @blesh's comment, set attribute value to 'false'
                // on blur event:
                element.bind('blur', function() {
                    console.log('blur');
                    scope.$apply(model.assign(scope, false));
                });
            }
        };
    })
.directive('focusMe', function($timeout) {
    return {
        link: function(scope, element, attrs) {
            scope.$watch(attrs.focusMe, function(value) {
                if(value === true) {
                    //console.log('value=',value);
                    $timeout(function() {
                        element[0].focus();
                        scope[attrs.focusMe] = false;
                    },300,false);
                }
            });
        }
    };
});



'use strict';
(function(){

    angular.module('gmall.services')
        .directive('lookbookList',lookbookListDirective)
        .directive('lookbookTemplate',lookbookListTemplateDirective);
    function lookbookListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: lookbookListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/lookbook/lookbookList.html',
        }
    };
    lookbookListTemplateDirective.$inject=['global']
    function lookbookListTemplateDirective(global){
        var s=(global.get('store').val.template.newsList)?global.get('store').val.template.newsList:'';
        return {
            scope: {
                actived:'@'
            },
            rescrict:"E",
            bindToController: true,
            controller: lookbookListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/lookbook/lookbookList'+s+'.html',
        }
    };

    lookbookListCtrl.$inject=['Lookbook','$state','global','exception','Confirm','Photo','$timeout'];
    function lookbookListCtrl(Lookbook,$state,global,exception,Confirm,Photo,$timeout){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD-MMMM-YYYY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            date:{
                startDate: null, endDate: null
            }
        }
        self.$state=$state;
        self.Items=Lookbook;
        self.moment=moment;
        self.query={};
        self.paginate={page:0,rows:50,totalItems:0}
        self.newItem={name:'Новая иноформация',actived:false}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.createItem=createItem;
        self.deleteItem=deleteItem;
        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                //console.log('Activated news list View');
            });
        }
        function getList() {
            if(!Object.keys(self.query ).length && self.actived){
                self.query={actived:true}
            }
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItem(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated list View');
            });
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                },function(err){console.log(err)});
            },defer)
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={actived:false}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    return getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    $state.go('frame.lookbook.item',{id:id})
                })
                .catch(function(err){
                    delete self.newItem._id
                    err = err.data||err
                    exception.catcher('создание объекта')(err)
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Lookbook/'+item.url
            console.log(folder)
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return self.getList();
                })
                .then(function(){
                    Photo.deleteFolder('Lookbook',folder)
                })
                .catch(function(err){
                    if(!err){return}
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление объета')(err)
                    }

                })
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Lookbook', lookbookService);
    lookbookService.$inject=['$resource','$uibModal','$q','global'];
    function lookbookService($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/Lookbook/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/lookbook/createLookbook.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Info', infoService);
    infoService.$inject=['$resource','$uibModal','$q'];
    function infoService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Info/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            create:create,
            selectInfo:selectInfo,
            select:selectInfo
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getPaps.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            //console.log(id)
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(header,button){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/info/createItem.html',
                    controller: createCtrl,
                    size:'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        header:function(){
                            return header
                        },
                        button:function(){
                            return button;
                        }
                    }
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        createCtrl.$inject=['$uibModalInstance','header','button']
        function createCtrl($uibModalInstance,header,button){
            var self=this;
            self.header=(header)?header:'создание информационной страницы'
            self.button=(button)?button:'создать страницу'
            self.name=''
            self.ok=function(){
                $uibModalInstance.close(self.name);
            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }

        function selectInfo(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/info/selectInfo.html',
                    controller: selectInfoCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl',
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedItem) {
                    resolve(selectedItem)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectInfoCtrl.$inject=['Info','$uibModalInstance','$q'];
        function selectInfoCtrl(Info,$uibModalInstance,$q){
            var self=this;
            $q.when()
                .then(function(){
                    return Info.getList();
                } )
                .then(function(items){
                    self.items=items;
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (item) {
                $uibModalInstance.close(item);
            };
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('infoList',listDirective)
        .directive('infoListTemplate',listTemplateDirective);
    function listDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: listCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/info/infoList.html',
        }
    };
    function listTemplateDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: listCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/info/info.html',
        }
    };
    listCtrl.$inject=['Info','$q','$state','$stateParams','global','Confirm','exception','$fileUpload','Photo'];
    function listCtrl(Items,$q,$state,$stateParams,global,Confirm,exception,$fileUpload,Photo){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.$state=$state;
        self.Items=Items;
        self.query={};
        self.paginate={page:0,rows:50,totalItems:0}
        self.newItem={name:'Новый информационный раздел',index:1}
        //console.log('Новый информационный раздел')
        self.getList=getList;
        self.saveField = saveField;
        self.searchItems=searchItems;
        self.createItem=createItem;
        self.deleteItem=deleteItem;
        self.dropCallback=dropCallback;
        self.loadPhoto=loadPhoto;
        self.deletePhoto=deletePhoto;
        //*******************************************************
        activate();

        function activate(page) {

            if(page || page===0){
                self.paginate.page=0;
            }
            return getList().then(function() {
                //console.log('Activated info list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.block=0;
                    if($stateParams.block){
                        for(var i =0;i<data.length;i++){
                            if($stateParams.block==data[i]._id){
                                self.block=i;
                                break;
                            }
                        }
                    }
                    self.items = data;
                    return self.items;
                });
        }
        function searchItems(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }
            self.paginate.page=0;
            activate();
        }
        function saveField(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            return self.Items.save({update:field},o ).$promise
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    return getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id;
                    //$state.go('frame.seoPages.item',{id:id})
                })
                .catch(function(err){
                    if(err){
                        err = err.datsa||err;
                        exception.catcher('создание объекта')(err)
                    }

                })
        }
        function deleteItem(item){
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    activate(0);
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('удаление страницы')(err)
                    }

                })
        }
        function dropCallback(item){
            //console.log(item)
            var actions=[];
            setTimeout(function(){
                self.items.forEach(function(item,idx){
                    item.index=idx+1;
                    actions.push(saveField(item,'index'))

                })
                $q.all(actions)
                //saveField('main')
            },100)
            return item
        }

        function loadPhoto(item){
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=Info";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=Info"
            $q.when()
                .then(function () {
                    return $fileUpload.fileUpload(self.uploadUrl,'img')
                })
                .then(function (res) {
                    //console.log(res)
                    var a=[];
                    if(res && res.length){
                        if(item.img){
                            a.push(item.img)
                        }
                        item.img=res[0].data.img
                        saveField(item,'img')
                        if(a.length){
                            Photo.deleteFiles('Info',a)
                        }

                    }
                })
                .catch(function (err) {
                    console.log(err)
                })
        }
        function deletePhoto(item){
            Confirm('удалить?').then(function () {
                var a=[];
                if(item.img){
                    a.push(item.img)
                }
                item.img=null
                console.log(item)
                saveField(item,'img')
                if(a.length){
                    Photo.deleteFiles('Info',a)
                }
            })

        }

    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('infoItem',itemDirective)
        .directive('infoItemTemplate',itemTemplateDirective)
        /*.component('infoItemTemplate',{
            bindings :{
                img:'@',
                info:'@'
            },
            controller: itemTemplateCtrl,
            templateUrl: 'views/template/partials/info/infoItem.html',
        })*/
        .directive('createInfoLink',itemInfoLinkDirective);
    function itemInfoLinkDirective(){
        return {
            scope: {
                info:'=',
                do:'&',
                title:'@'
            },
            rescrict:"E",
            bindToController: true,
            controller: itemInfoLinkCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/info/createLink.html',
        }
    }
    itemInfoLinkCtrl.$inject=['$q','Info','global']
    function itemInfoLinkCtrl($q,Info,global){
        var self = this;
        //console.log(self.change)
        if(!self.info){self.info={}}
        self.setInfoLink=setInfoLink;
        self.deleteLink=deleteLink;
        function setInfoLink(){
            $q.when()
                .then(function(){
                    return Info.selectInfo();
                })
                .then(function(tag){
                    self.info.link=tag._id;
                    self.info.name=tag.name;
                    //console.log(self.change())
                    self.do()
                    //console.log(self.info)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function deleteLink(){
            self.info.link=null;
            self.info.name='';
            console.log(self.info)
            self.do()

        }
    }
    function itemDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/info/infoItem.html',
        }
    }
    itemCtrl.$inject=['Info','$stateParams','$q','$uibModal','exception','global','$scope','$timeout','Confirm'];
    function itemCtrl(Items,$stateParams,$q,$uibModal,exception,global,$scope,$timeout,Confirm){
        var self = this;
        //console.log('!!')
        self.Items=Items;
        self.global=global;
        self.mobile=global.get('mobile' ).val;
        self.saveField=saveField;
        self.saveEmbeddedField=saveEmbeddedField;
        self.dropCallback=dropCallback;
        self.createNewRazdel=createNewRazdel;


        function createNewRazdel() {
            self.Items.create('создание раздела','создать раздел')
                .then(function(res){
                    if(res){
                        saveEmbeddedField({name:res},'name')
                    }
                })
        }

        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate();
        })
        //*******************************************************
        function activate() {
            return getItem($stateParams.id).then(function() {
            }).catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    self.item = data;
                    return self.item;
                } ).catch(function(err){
                    return $q.reject(err)
                });
        }
        function saveField(field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=self.item[field]
                var query={update:field}
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function saveEmbeddedField(item,field){
            //console.log(item)
            var o={_id:self.item._id};
            if(field){
                o[field]=item[field];
            }

            var update={update:field,embeddedName:'blocks'};
            if(item._id){
                if(!field){
                    update.embeddedPull=true;
                    update.update='name';
                    o.name=item.name;
                }else{
                    update.embeddedVal=item._id
                }

            }else{
                update.embeddedPush=true;
            }
            if(!field){
                Confirm('удалить?')
                    .then(function(){
                        return self.Items.save(update,o).$promise;
                    })
                    .then(function(){
                        global.set('saving',true)
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                        if(update.embeddedPush || update.embeddedPull){
                            activate($stateParams.id);
                        }
                    })
            }else{
                $q.when()
                    .then(function(){
                        return self.Items.save(update,o).$promise;
                    })
                    .then(function(){
                        global.set('saving',true)
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                        if(update.embeddedPush || update.embeddedPull){
                            activate($stateParams.id);
                        }
                    })
                    .catch(function(err){
                        if(err){
                            exception.catcher('saving')(err)
                            console.log(err)
                            if(err.data && err.data.message && err.data.message.indexOf('cannot use the part')>-1){
                                console.log(field)
                                update.update=field+'L';
                                delete o[field];
                                o[update.update]={}
                                $q.when()
                                    .then(function(){
                                        return self.Items.save(update,o).$promise;
                                    })
                                    .then(function(){
                                        global.set('saving',true)
                                        $timeout(function () {
                                            global.set('saving',false);
                                        },1500)
                                        if(update.embeddedPush || update.embeddedPull){
                                            activate($stateParams.id);
                                        }
                                    })
                                    .catch(function(err){
                                        if(err){
                                            exception.catcher('saving')(err)
                                        }

                                    })
                            }
                        }

                    })
            }


        }
        function dropCallback(item){
            //console.log(item)
            var actions=[];
            setTimeout(function(){
                saveField('blocks')
                /*self.item.blocks.forEach(function(item,idx){
                 item.index=idx+1;
                 actions.push(saveField(item,'index'))

                 })
                 $q.all(actions)
                 saveField('main')*/
            },100)
            return item
        }


    }

    /*********************************itemTemplateDirective*****************************/
    function itemTemplateDirective(global){
       /* var templ=global.get('store').val.template.main.left.getOFA('name','info')
        if(!templ){
            templ=global.get('store').val.template.main.right.getOFA('name','info')
        }*/
        //var s=(templ && templ.templ)?templ.templ:'';
        //console.log(s)
        return {
            scope: {
                img:'@',
                info:'@'
            },
            bindings :{
                img:'@',
                info:'@'
            },
            bindToController: true,
            controller: itemTemplateCtrl,
            controllerAs: '$ctrl',
            templateUrl: function(element, attrs) {

                if(attrs && attrs['templ'] && attrs['templ']!='0'){
                    console.log(attrs['templ'])
                }
                var s = (attrs && attrs['templ'] && attrs['templ']!='0')?attrs['templ']:'';

                return 'views/template/partials/home/info/infoItem'+s+'.html'
            }
        }
    }
    itemTemplateCtrl.$inject=['$scope','Info','$stateParams','$q','$uibModal','exception','global','$attrs'];
    function itemTemplateCtrl($scope,Items,$stateParams,$q,$uibModal,exception,global,$attrs){
        var self = this;
        self.$onInit = function() {
            if(self.info){
                activate(self.info);
            }

        }
        if(self.info){
            activate(self.info);
        }
        self.Items=Items;
        self.global=global;
        self.mobile=global.get('mobile').val;
        function activate(id) {
            return getItem(id);
        }
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    if(data && data.blocks && data.blocks.length){
                        data.blocks=data.blocks.filter(function (b) {
                            return b.actived
                        })
                    }
                    self.item = data;
                    return self.item;
                } ).catch(function(err){
                    exception.catcher('получение данных')(err)
                });
        }
    }

})()
'use strict';
(function(){

    angular.module('gmall.services')
        .service('Master', serviceFoo);
    serviceFoo.$inject=['$resource','$uibModal','$q','global'];
    function serviceFoo($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/Master/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
           if(!paginate){
               paginate={page:0}
           }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                //.catch(getItemFailed);
            function getItemComplete(response) {
                if(response && response.blocks && response.blocks.length){
                    response.blocks.forEach(function (b) {
                        if(b.type=='stuffs'){
                            if(b.stuffs && b.stuffs.length){
                                b.imgs=b.stuffs.map(function(s){
                                    if(s.gallery && s.gallery.length && s.gallery[0].img){
                                        s.img=s.gallery[0].img;
                                    }
                                    return s;
                                });
                            }else{b.imgs=[]}
                        }
                    })
                }
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(clone){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/CONTENT/master/createMaster.html',
                    controller: function($uibModalInstance,clone){
                        var self=this;
                        self.header=(clone)?'Клонирование объекта':'Создание объекта';
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    resolve:{
                        clone:function () {
                            return clone;
                        }
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,50))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        
        /*selectServiceCtrl.$inject=['$uibModalInstance'];
        function selectServiceCtrl($uibModalInstance){
            var self=this;
            console.log(services )
            //self.services=services;
            self.ok=function(item){
                $uibModalInstance.close(item);
            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }*/
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('masterList',masterListDirective)
        .directive('masterListTemplate',masterListTemplateDirective)
        .directive('mastersStaticPage',mastersStaticPage);
    function mastersStaticPage(){
        return {
            scope: {},
            bindToController: true,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/stat/masters/masters.html',
            controller:function(global){
                console.log(global.get('masters').val)
                var self=this;
                self.global=global;
                self.mobile=global.get('mobile').val;
            }
        }
    };

    function masterListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: masterListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/master/masterList.html',
        }
    };
    function masterListTemplateDirective(global){
        var s=(global.get('store').val.template.masterList)?global.get('store').val.template.masterList:'';
        return {
            scope: {},
            rescrict:"E",
            bindToController: true,
            controller: masterListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/master/masterList'+s+'.html',
        }
    };
    //masterListTemplateDirective.$inject=['global']
    masterListCtrl.$inject=['Master','$state','global','Confirm','$q','exception','Photo','$timeout','Label'];
    function masterListCtrl(Master,$state,global,Confirm,$q,exception,Photo,$timeout,Label){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        //self.moment=moment;
        self.$state=$state;
        self.Items=Master;
        self.query={};
        self.labels=[]
        self.paginate={page:0,rows:50,totalItems:0}
        self.newItem={name:'имя мастера'}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.deleteItem=deleteItem;
        self.createItem=createItem;
        self.dropCallback=dropCallback;
        self.cloneItem=cloneItem;
        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                return Label.getList({page:0,rows:100},{list:'master'})
                //console.log('Activated news list View');
            }).then(function (data) {
                self.labels=data
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItem(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated list View');
            });
        }
        function saveField(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            self.Items.save({update:field},o ,function () {
                global.set('saving',true)
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            })
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.master.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }
        function cloneItem(item){
            var name;
            self.Items.create('clone')
                .then(function (res) {
                    name=res;
                    return self.Items.getItem(item._id)
                })
                .then(function(master){
                    self.newItem=angular.copy(master)
                    self.newItem.name=name;
                    self.newItem.nameL={};

                    delete self.newItem._id
                    delete self.newItem.__v
                    delete self.newItem.url;
                    console.log( self.newItem)
                    self.newItem.blocks.forEach(function (block) {
                        delete block.img;
                        delete block._id;
                        if(block.type=='stuffs'){
                            if(block.stuffs && block.stuffs.length){
                                block.stuffs=block.stuffs.map(function (s) {
                                    return s._id
                                })
                            }
                        }
                        block.imgs=[]
                    })
                    //throw 'test'
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.master.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Master/'+item.url
            // console.log(folder)


            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return self.getList();
                })
                .then(function(){
                    Photo.deleteFolder('Master',folder)
                })
                .catch(function(err){
                    if(!err){return}
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление объекта')(err)
                    }

                })

            /*Stuff.Items.delete({_id:stuff._id} ).$promise.then(function(res){
             $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
             } ).catch(function(err){
             err = err.data||err
             exception.catcher('удаление товара')(err)
             })*/
        }
        function dropCallback(item){
            var i=0;
            //http://stackoverflow.com/questions/28983424/make-angular-foreach-wait-for-promise-after-going-to-next-object
            setTimeout(function(){
                self.items.reduce(function(p, item) {
                    return p.then(function() {
                        i++;
                        item.index=i;
                        return saveField(item,'index')
                    });
                }, $q.when(true)).then(function(){
                    console.log(self.items.map(function(el){return el.index}))
                });
            },50)


            /*setTimeout(function(){
                self.items.forEach(function(m,i){
                    console.log(i)
                    m.index=i;
                    saveField(item,'index')
                })
            })*/
            return item;
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('masterItem',masterItemDirective)
        .directive('masterDetailTemplate',masterTemplateDirective)
        .directive('masterSchedule',masterScheduleDirective);
    function masterItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: masterItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/master/masterItem.html',
        }
    }
    masterItemCtrl.$inject=['Master','$stateParams','$q','$uibModal','global','exception','Stuff','Photo','$scope','$timeout','Confirm','SetCSS','$user','Workplace','$rootScope'];
    function masterItemCtrl(Master,$stateParams,$q,$uibModal,global,exception,Stuff,Photo,$scope,$timeout,Confirm,SetCSS,$user,Workplace,$rootScope){
        var self = this;
        self.Items=Master;
        self.type='Master'
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.listOfBlocksForMasterPage=listOfBlocksForAll;
        self.listOfBlocks=listOfBlocksForAll;
        self.moment=moment;
        self.saveField=saveField;

        self.setStyles=setStyles;

        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        //self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;


        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;

        self.deleteReview=deleteReview;
        self.toggleEdit=toggleEdit;
        self.addReview=addReview;
        self.toggleAdd =toggleAdd;
        self.saveReview=saveReview;
        self.newReview={name:'',desc:'',date:Date.now()}
        self.savePhone=savePhone;
        self.refreshUsers=refreshUsers;
        self.changeUser=changeUser;
        self.clearUser=clearUser;

        self.workplaces=[];
        self.deleteWorkplace=deleteWorkplace;
        self.addWorkplace=addWorkplace;
        self.getWorkplaces=getWorkplaces;


        //********************activate***************************
        activate();
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {
                //console.log('Activated item View');
                if(self.item.user){
                    return $user.getItem(self.item.user)
                }
            } ).then(function (user) {
                if(user){
                    if(user.profile && user.profile.phone && user.profile.phone[0]=="+"){
                        user.profile.phone=user.profile.phone.substring(1)
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length<10){
                        while(user.profile.phone.length<10){
                            user.profile.phone+='0'
                        }
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length==10){
                        user.profile.phone='38'+user.profile.phone
                    }
                    user.phone=(user.profile)?user.profile.phone:null;
                    self.item.user=user
                }
            }).catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        $scope.$on('changeLang',function(){
            activate();
        })
        function getItem(id) {
            //console.log(id)
            return self.Items.getItem(id)
                //console.log(id)
                .then(function(data) {
                    //self.item.addProperties(data);
                    if(data && !data.blocks){
                        data.blocks=[];
                        saveField('blocks',[])
                    }
                    var bl=data.blocks.filter(function (b) {
                        return b
                    })
                    if(bl.length!=data.blocks.length){
                        saveField('blocks',bl)
                        data.blocks=bl;
                    }
                    data.blocks.forEach(function (b,i) {
                        if(b.type=='stuffs' && b.stuffs.length){
                            //b.imgs=b.stuffs
                            b.stuffs=b.stuffs.map(function (s) {
                                return (s._is || s)
                            })
                        }
                        b.i=i;
                    })
                    data.blocks.sort(function (a,b) {
                        return a.index-b.index
                    })
                    if(data.notification==undefined){
                        data.notification=0
                    }
                    self.item=data;
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                    console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    if(block.elements){
                        saveField('blocks.'+block.i+'.elements',block.elements)
                    }
                    if(block.blockStyle){
                        saveField('blocks.'+block.i+'.blockStyle',block.blockStyle)
                    }

                })
        }
        function saveField(field,value,defer,indexImgs){
            //console.log(field)
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }

            defer =(defer)?defer:100;
            setTimeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                //console.log(defer,value)
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };

        function addBlock(type){
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;
            console.log(self.item.blocks)
            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            o.imgs=[];
            update.update+=' imgs'
            /*if(type=='slider' || type=='stuffs' || type=="campaign" || type=="filterTags"|| type=="brandTags"|| type=="brands"|| type=="categories"){
                o.imgs=[];
                update.update+=' imgs'
            }
*/
            //console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    refreshBlocks()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            //console.log(block,index)
            var o={_id:self.item._id};
            var update={update:'_id_id',embeddedName:'blocks'};
            o['id']=block.id;
            update.embeddedPull=true;

            Confirm('потверждаете?')
                .then(function () {
                    self.item.blocks.splice(index,1)
                    if(!block._id){
                        update={update:'blocks'};
                        o['blocks']=self.item['blocks']
                    } else{
                        o['_id_id']=block._id;
                        update={update:'_id_id',embeddedName:'blocks'};
                        update.embeddedPull=true;
                    }
                    //console.log(update,o)
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })
                .then(function () {
                    activate()
                })



        }

        /*function movedSlide(){
            self.item.imgs.forEach(function(el,i){
                el.index=i;
            })
            self.saveField('imgs')
        }*/
        function deleteSlide(block,index){
            Photo.deleteFiles('Master',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/CONTENT/master/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        //console.log(global.get('store').val.template.master)
        if(!global.get('store').val.template.master){
            global.get('store').val.template.master={parts:[]}
        }
        var keyParts=global.get('store').val.template.master.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        function savePhone(phone) {
            saveField('phone',phone)
        }
        function clearUser() {
            console.log(self.user)
            changeUser(self.user)
            /*self.item.user=null;
            saveField('user',null)*/



        }

        function refreshUsers(phone){
            if (phone.length<3){return}
            self.cachePhone=phone
            searchUser(phone)
        }
        function searchUser(phone){
            var q= {$or:[{'profile.phone':phone},{name:phone},{email:phone}]}
            $user.getList({page:0,rows:20},q).then(function(res){
                self.users=res.map(function (user) {
                    if(user.profile && user.profile.phone && user.profile.phone[0]=="+"){
                        user.profile.phone=user.profile.phone.substring(1)
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length<10){
                        while(user.profile.phone.length<10){
                            user.profile.phone+='0'
                        }
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length==10){
                        user.profile.phone='38'+user.profile.phone
                    }
                    user.phone=(user.profile)?user.profile.phone:null;
                    return user
                });
            })
        }
        function changeUser(user) {
            /*console.log(self.item.user)
            console.log(user)*/
            if(self.item.user && self.item.user._id){
                if(!user || user._id!=self.item.user._id){
                    var o ={_id:self.item.user._id,master:null}
                    $user.save({update:'master'},o,function () {
                        //exception.showToaster('succes','статус','обновлено!')
                    })
                }
            }


            var u=null;
            if(user){u=user._id;self.item.user=user}else{self.item.user=null;}

            saveField('user',u)
            self.user=null;


            if(self.item.user && self.item.user._id){
                var o ={_id:self.item.user._id,master:self.item._id}
                $user.save({update:'master'},o,function () {
                    //exception.showToaster('succes','статус','обновлено!')
                })
            }
        }

        function getWorkplaces() {
            Workplace.getList({page:0,rows:50}).then(function(res){
                console.log(res,res && res.length)
                if(res && res.length){
                    self.workplaces=res;
                    console.log(self.workplaces)
                }

            })
        }
        function addWorkplace(wp) {
            console.log(wp)
            if(!self.item.workplaces){self.item.workplaces=[]}
            self.item.workplaces=self.item.workplaces.filter(function (wp) {
                return wp
            })
            var value=self.item.workplaces.map(function (wp) {
                return wp._id
            });
            if(value.indexOf(wp._id)>-1){return}else{
                value.push(wp._id)
                self.item.workplaces.push(wp)
            }
            console.log(value)
            saveField('workplaces',value);
            $timeout(function () {
                //self.workplace=null;
            },1000)

        }
        function deleteWorkplace(idx) {
            if(!self.item.workplaces){self.item.workplaces=[]}
            self.item.workplaces.splice(idx,1)
            var value=self.item.workplaces.map(function (wp) {
                return wp._id
            });
            saveField('workplaces',value);
        }



// collections
        function addItemInBlock(block,$index) {
            //console.log(block)
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(block.type=='stuffs'){
                        if(block.stuffs && block.stuffs.length && block.stuffs.some(function(s){ if(s && s._id){return s._id==item._id}else{return s==item._id}})){
                            throw 'такой объект уже есть'
                        }
                    }
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link;
                    name=item.name;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    //console.log(link)
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link,_id:item._id};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link,_id:item._id})
                    }

                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    if(block.type=='stuffs'){
                        block.stuffs=block.imgs.map(function (img) {
                            return img._id
                        })
                        saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                    }


                    //saveField('blocks.'+block.i,block)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('добавление')(err)
                    }
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
                if(block.type=='stuffs'){
                    block.stuffs=block.imgs.map(function (img) {
                        return img._id
                    })
                    saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                }
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
            if(block.type=='stuffs'){
                block.stuffs=block.imgs.map(function (img) {
                    return img._id
                })
                saveField('blocks.'+block.i+'.stuffs',block.stuffs)
            }
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }




        function toggleEdit(item){
            item.editMode = !item.editMode;
        }
        function toggleAdd() {
            self.addMode = !self.addMode;
        }
        function saveReview(item){
            item.name=item.name.substring(0,20);
            item.desc=item.desc.substring(0,200);
            delete item.editMode
            saveField('reviews',item.reviews);

        }
        function deleteReview(i){
            self.item.reviews.splice(i,1);
            saveField('reviews',item.reviews);
        }
        function addReview(admin){
            //self.newReview;
            if(admin){
                var o =self.newReview;
            }else{
                var o={name:global.get('user').val.profile.fio||global.get('user').val.name,
                    date:Date.now(),
                    desc:self.newReviewText.substring(0,200)
                }
            }
            self.newReviewText='';
            self.unableAddReview=false;
            if(!self.item.reviews){
                self.item.reviews=[];
            }
            self.item.reviews.unshift(o)
            saveField('reviews',self.item.reviews);
            if(admin){
                toggleAdd()
            }
        }
    }

    //=====================newsTemplateDirective
    /*function masterTemplateDirective(global){
        var s=(global.get('store').val.template.masterTempl)?global.get('store').val.template.masterTempl:'';
        return {
            scope: {},
            bindToController: true,
            controller: masterItemCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/master/masterDetail'+s+'.html',
            restrict:'E'
        }
    }*/
    function masterTemplateDirective($stateParams){
        return {
            template:"<div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$http','$stateParams','global',function ($http,$stateParams,global) {
                var self=this;
                $http.get('views/template/partials/Master/itemPage/'+$stateParams.id).then(function(response){
                    console.log(response)
                    self.content=response.data.html;
                    console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
        }
    }
    function masterScheduleDirective($stateParams){
        return {
            bindToController: true,
            scope: {
                master:'@'
            },
            controllerAs: '$ctrl',
            controller: masterScheduleCtrl,
            templateUrl:'components/CONTENT/master/masterSchedule.html'
        }
    }
    masterScheduleCtrl.$inject=['$http','$stateParams','global']
    function masterScheduleCtrl($http,$stateParams,global) {
        var self=this;
        console.log('init',self.master)
    }
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('catalogMainPage',catalogMainPageDirective)
    function catalogMainPageDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: catalogMainPageCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/catalog/catalog.html',
        }
    }
    catalogMainPageCtrl.$inject=['global','Stuff'];
    function catalogMainPageCtrl(global,Stuff){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.stuffs=[];
        self.currentState='section'
        self.sectionsClass;
        self.breadcrumbs=[];
        self.forwardToSubsections=forwardToSubsections;
        self.forwardToCategories=forwardToCategories;
        self.backInSection=backInSection;
        self.backInSubSection=backInSubSection;
        self.getStuffs=getStuffs;
        self.backToCatalog=backToCatalog;
        self.backToBC=backToBC;
        self.getStuff=getStuff;
        //********************activate***************************
        activate();
        //*******************************************************
        function activate() {
           self.sections=global.get('sections').val.filter(function(el){return el._id});
            console.log(self.sections)
        }
        function forwardToSubsections(s){
            self.breadcrumbs.push(s)
            self.sectionsClass='animated slideOutLeft'
            s.class='animated slideInRight';
            //console.log(s)
        }
        function forwardToCategories(sec,sub){
            self.breadcrumbs.push(sub)
            sec.class='animated slideOutLeft'
            sub.class='animated slideInRight';
        }
        function backInSection(s){
            s.class='animated slideOutRight';
            self.sectionsClass='animated slideInLeft'
        }
        function backInSubSection(sub,sec){
            sec.class='animated slideInLeft'
            sub.class='animated slideOutRight';

        }

        function backToCatalog(){
            if(!self.breadcrumbs.length){return;}
            self.breadcrumbs[self.breadcrumbs.length-1].class='animated slideOutRight';
            self.sectionsClass='animated slideInLeft';
            self.breadcrumbs.length=0;
        }
        function backToBC(i){
            if(i){return}
            self.breadcrumbs[self.breadcrumbs.length-1].class='animated slideOutRight';
            self.breadcrumbs[self.breadcrumbs.length-2].class='animated slideInLeft';
            self.breadcrumbs.splice(self.breadcrumbs.length-1,1);
        }
        function getStuffs(category){
            self.category=category;
            Stuff.getList(null,{category:category._id})
                .then(function(res){
                    self.items=res
                })

        }
        function getStuff(item,i){
            item.isOpen=!item.isOpen;
            if(item.isOpen){
                if(!item.getData){
                    item.getData=true;
                    Stuff.getItem(item._id).then(function(res){
                        console.log(res)
                        self.items[i].desc=res.desc;
                        self.items[i].desc1=res.desc1;
                        self.items[i].desc2=res.desc2;
                        self.items[i].gallery=res.gallery;
                    })
                }
            }
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('itemsList',itemsList)
        .directive('itemsDetail',itemsDetail)

    function itemsList(){
        return {
            template:"<div ui-view></div><div></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: listCtrl
        }
    }
    function itemsDetail(){
        return {
            template:"<div></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: detailCtrl
        }
    }


    function listCtrl($scope,$http,$element,global,$state,$q,$anchorScroll,$timeout,$window,$compile,$rootScope,seoContent,$sce,$location){
        //console.log(!!global.get('tempContent').val)
        //console.log('??????')

        var self=this;
        self.global=global;
        self.$state=$state;
        self.$stateParams=$rootScope.$stateParams;
        self.setLabel=setLabel;

        function setLabel(label) {

            //console.log(label,labelsFromQuery)
            if(labelsFromQuery && labelsFromQuery.length){

                var i = labelsFromQuery.indexOf(label)
                labelsFromQuery=[];
                if(i==-1){
                    labelsFromQuery.push(label)
                }
                /*if(i>-1){
                    labelsFromQuery.splice(i,1)
                }else{
                    labelsFromQuery.push(label)
                }*/
                //console.log(labelsFromQuery)
                if(labelsFromQuery.length){
                    var str = labelsFromQuery.reduce(function (s,el) {
                       if(s){
                           s+='__'
                       }
                       return s+=el
                    },'')
                    $location.search('labels',str)
                }else{
                    $location.search('labels',null)
                }
            }else{
                $location.search('labels',label)
            }
        }

        //console.log(self.$stateParams);

        var labels='',labelsFromQuery,query;
        if(self.$stateParams && self.$stateParams.labels && global.get('labels').val){
            labelsFromQuery=self.$stateParams.labels.split('__');
            if(global.get('labels').val && global.get('labels').val.length && labelsFromQuery && labelsFromQuery.length){
                /* формируем запрос для получения позиций привязанных к меткам*/
                labelsFromQuery.forEach(function (name) {
                    var ll = global.get('labels').val.getOFA('name',name)
                    if(ll){
                        if(labels){
                            labels+='__'
                        }
                        labels+=ll.name;
                    }
                })
            }
            //console.log(labels)
            if(labels && labels.length){
                query='labels='+labels
            }
            console.log(query)
        }
        var waiting,lastElement,page=0,waitingDiv;
        var td1,td2,td3;
        var model=getModel($state);
        //console.log(model,global.get('store').val);

        var url = 'views/template/partials/'+model+'.html';
        var color = (global.get('store').val.template.dimScreenColor)?global.get('store').val.template.dimScreenColor:"#000000"
        var BGcolor = (global.get('store').val.template.dimScreenBGColor)?global.get('store').val.template.dimScreenBGColor:"#F5F5F5"
        var innerWaitingDiv=[
            '<div style="width:100%;height:200px;background-color:'+BGcolor+';color:'+color+'" class="clearfix text-center">',
            '<img src="/img/spinner.gif" style="margin-top: 70px">',
            '</div>'
        ].join('')
        self.hideList= global.get('store').val.template[model+'List'].hideList;
        self.hideCart= (global.get('store').val.template[model+'List'].hideCart)?global.get('store').val.template[model+'List'].hideCart:false;
        //console.log(self.hideCart)
        //console.log((self.$state.current.name!='news'&&self.$state.current.name!='stat'||self.$state.current.name!='additional'||self.$state.current.name!='campaign'||self.$state.current.name!='master'||self.$state.current.name!='info'||self.$state.current.name!='lookbook'))
        $q.when()
            .then(function(){

                if(global.get('tempContent').val){
                    if($state.current.name.indexOf('.item')<0 && $state.current.name.indexOf('.detail')<0){
                        var html = global.get('tempContent').val;
                        $('#tempContent').empty()
                        global.set('tempContent',null)
                        var o ={data:{html:html}}
                        if(tempTitles){
                            o.data.titles=tempTitles
                        }
                        return o;
                    }else{
                        return null
                    }
                }else{
                    /*if(global.get('cache').val[model+'list']) {
                        return {data:{html:global.get('cache').val[model + 'list']}};
                    }else {
                        return $http.get(url.trim())
                    }*/
                    return $http.get(url.trim()+((query)?'?'+query:''))

                }
            })
            .then(function (response) {
                if(!response){return;}
                var linkFn = $compile(response.data.html);
                var content = linkFn($scope);
                $element.append(content);
                /*if(!global.get('cache').val[model+'list']) {
                    global.get('cache').val[model + 'list']=response.data.html;
                }*/
               // $element.append(response.data.html)
                //console.log(response.data)
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        if(response.data.titles[k]){
                            if(k=='title'){
                                global.get('titles').val[k]=response.data.titles[k];

                                /*if(response.data.titles[k].indexOf(global.get('titles').val[k])<0){
                                    global.get('titles').val[k]=response.data.titles[k]+'. '+global.get('titles').val[k];
                                }else{
                                    global.get('titles').val[k]=response.data.titles[k];
                                }*/
                            }else if(k=='canonical'){
                                try{
                                    global.get('titles').val[k]=$sce.trustAsResourceUrl(response.data.titles[k]);
                                }catch(err){console.log(err)}

                                //console.log(global.get('titles').val[k])
                            }else{
                                global.get('titles').val[k]=response.data.titles[k]
                            }
                        }

                    }
                }else{
                    var key = model+'List'
                    var name= (global.get('store').val.nameLists && global.get('store').val.nameLists[key])?global.get('store').val.nameLists[key]:'list'
                    seoContent.setDataList(model,name)
                }

                waitingDiv=$('#paginateData'+page);
                self.totalQty=waitingDiv.data('total');
                self.currentQty=waitingDiv.data('qty');
                self.page=waitingDiv.data('page');
                self.lastItemId=waitingDiv.data('lastItemId');
                td1=$('#td-list-1-items');
                td2=$('#td-list-2-items');
                td3=$('#td-list-3-items');
                //console.log(self.totalQty,self.currentQty,page,self.lastItemId)

                $timeout(function(){
                    $anchorScroll()
                    lastElement=(self.lastItemId!=null)?$('#item-'+self.lastItemId):null;
                    /*self.td1HideCart=(td1.find('.list-item').length>1)?true:false;
                    self.td2HideCart=(td2.find('.list-item').length>1)?true:false;
                    self.td3HideCart=(td3.find('.list-item').length>1)?true:false;*/
                })
               /* $timeout(function(){
                    lastElement=(self.lastItemId!=null)?$('#item-'+self.lastItemId):null;
                },100)*/
                var addBlockAfterScroll = function (){
                    //console.log('!!!!!!!!!!!!!!')
                    if(!waiting && lastElement && $(lastElement).isOnScreen() && self.currentQty<self.totalQty){
                        waiting=true;
                        page++
                        $q.when()
                            .then(function(){
                                waitingDiv.html(innerWaitingDiv);
                                //console.log(url)
                                return $http.get(url.trim()+'?page='+page+((query)?'&'+query:''))
                            })
                            .then(function(response){
                                //console.log('response',response)
                                if(!response){return;}
                                lastElement=null;
                                waitingDiv.html('');
                                var addHtml=angular.element(response.data.html)
                                var atd1=addHtml.find('#td-list-1-items').html()
                                var atd2=addHtml.find('#td-list-2-items').html()
                                var atd3=addHtml.find('#td-list-3-items').html()
                                //console.log(atd1,atd2,atd3)
                                self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                                self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                                td1.append(atd1)
                                td2.append(atd2)
                                td3.append(atd3)
                                $timeout(function () {
                                    lastElement=(self.lastItemId!=null)?$('#item-'+self.lastItemId):null;
                                    waiting=false;
                                },200)
                            })
                    }
                }
                angular.element($window).on('scroll', addBlockAfterScroll);
                $scope.$on('$destroy', function() {
                    angular.element($window).off('scroll', addBlockAfterScroll);
                });
                $timeout(function(){
                    $rootScope.$emit('$stateChangeEndToStuff');
                },100)
            })
     }

    function detailCtrl($scope,$element,$compile,$http,$stateParams,$state,$anchorScroll,global,$q,$rootScope,$location,$timeout,$sce,localStorage){
        //console.log(!!global.get('tempContent').val)
        //console.log('!S')
        var self=this;
        self.global=global;
        $scope.global=global;
        var model=getModel($state)
        model= model[0].toUpperCase() + model.substr(1);
        $q.when()
            .then(function(){
                //console.log(global.get('tempContent').val)
                if(global.get('tempContent').val){
                    var html = global.get('tempContent').val;
                    $('#tempContent').empty()
                    global.set('tempContent',null)
                    var o ={data:{html:html}}
                    if(tempTitles){
                        o.data.titles=tempTitles
                    }
                    return o;
                    //return {data:{html:html}};
                }else{
                    if($stateParams.id){
                        var id = $stateParams.id;
                    }else{
                        var likes = localStorage.get(global.get('store').val.subDomain+'-likes');
                        if(likes && likes.length){
                            var id = likes.join('_');
                        }else{
                            var id = '_';
                        }
                    }
                    return $http.get('views/template/partials/'+model+'/itemPage/'+id+'.html')
                }
            })
            .then(function (response) {
                //console.log('response',response)
                /*var linkFn = $compile(response.data.html);
                var content = linkFn($scope);*/
                var appendContent = $compile(response.data.html)($scope);
                //console.log(appendContent)
                $element.append(appendContent);
                //$element.append(response.data.html);
                $anchorScroll()
               /* console.log('response.data.titles',response.data.titles)
                console.log(JSON.stringify(global.get('titles').val.title))*/
                //var titles = {}
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        //console.log(k)
                        if(response.data.titles[k]){
                            if(k=='title'){
                                //console.log(global.get('titles').val[k])
                                if(response.data.titles[k].indexOf(global.get('titles').val[k])<0){
                                    global.get('titles').val[k]=response.data.titles[k]+'. '+global.get('titles').val[k];
                                }else{
                                    global.get('titles').val[k]=response.data.titles[k];
                                }
                            }else if(k=='canonical'){
                                try{
                                    global.get('titles').val[k]=$sce.trustAsResourceUrl(response.data.titles[k]);
                                }catch(err){console.log(err)}

                                    //console.log(global.get('titles').val[k])
                            }else{
                                global.get('titles').val[k]=response.data.titles[k]
                            }
                        }
                    }

                    //global.set('titles',titles)
                }

                //console.log(model)
                if(model!="Campaign" || model!="Likes"){
                    $rootScope.$emit('$stateChangeEndToStuff');
                }else{
                    $timeout(function () {
                        $rootScope.$emit('$stateChangeEndToStuff');
                    },600)
                }


            })


        //info

        $timeout(function(){
            self.$stateParams=$stateParams;
            if($stateParams.block && self.isOpen){
                self.isOpen[$stateParams.block]=true;
            }

        },500)

        self.openBlock=openBlock;
        function openBlock(url) {
           // console.log(url)
            $timeout(function(){
                if(self.isOpen[url]){
                    $location.search('block',url)
                }else{
                    $location.search('block',null)
                }
            },200)
        }


    }
    function getModel($state){
        //console.log($state)
        var model='news'
        if($state.current.name=='lookbook'||$state.current.name=='lookbook.item'){
            model='lookbook'
        }else if($state.current.name=='stat'||$state.current.name=='stat.item'){
            model='stat'
        }else if($state.current.name=='additional'||$state.current.name=='additional.item'){
            model='additional'
        }else if($state.current.name=='workplace'||$state.current.name=='workplace.item'){
            model='workplace'
        }else if($state.current.name=='news'||$state.current.name=='news.item'){
            model='news'
        }else if($state.current.name=='master'||$state.current.name=='master.item'){
            model='master'
        }else if($state.current.name=='info'||$state.current.name=='info.item'){
            model='info'
        }else if($state.current.name=='campaign'||$state.current.name=='campaign.detail'){
            model='campaign'
        }else if($state.current.name=='likes'){
            model='likes'
        }
        return model;
    }

})()




'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('dateTimeEntry',itemDirective)

    function itemDirective(){

        return {
            scope: {

            },
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            //templateUrl: 'components/TEMPLATE/dateTimeEntry/dateTimeEntry.html',
            //templateUrl: 'views/template/partials/dateTime/dateTimeEntry'+s+'.html',
            template: '<div ng-include="::$ctrl.getContentUrl()"></div>'
            /*templateUrl: function(){
                console.log(global.get('store').val)
                var s = (global.get('store').val.template.addComponents.datetime.templ)?global.get('store').val.template.addComponents.datetime.templ:'';
                return 'views/template/partials/dateTime/dateTimeEntry'+s+'.html'
            }*/
        }
    }
    itemCtrl.$inject=['$scope','Booking','UserEntry','$user','$element','$timeout','Stuff','Master','$stateParams','$state','$q','$uibModal','exception','global','$rootScope','$auth','Account','$http','CreateContent','$notification'];
    function itemCtrl($scope,Booking,UserEntry,$user,$element,$timeout,Stuff,Master,$stateParams,$state,$q,$uibModal,exception,global,$rootScope,$auth,Account,$http,CreateContent,$notification){
        var self = this;
        function getContentUrl() {
            var s = (global.get('store').val.template.addcomponents.datetime.templ)?global.get('store').val.template.addcomponents.datetime.templ:'';
            //console.log('views/template/partials/dateTime/dateTime/dateTime'+s+'.html')
            return 'views/template/partials/dateTime/dateTime/dateTime'+s+'.html'
        }
        self.moment=moment;
        var blocks, widthBlock;
        var w2;
        var opened;
        self.Items=Stuff;
        self.items=[];
        //console.log(self.selectedStuff)
        /*if (self.stuff){
            self.selectedStuff=self.stuff;
        }*/
        //self.selectedTime=null;
        /*self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
        self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';*/

        //2223333344

        //self.themeUIselect=(!global.get('mobile').val)?'selectize':'bootstrap';
        //self.searchUIselect=(!global.get('mobile').val)?true:false;
        //self.themeUIselect='bootstrap';
        //self.searchUIselect=false;

        self.minDurationForService=global.get('store').val.seller.minDurationForService||15;
        var delta=0;
        //console.log(self.minDurationForService)
        switch (self.minDurationForService){
            case 30: delta=1;break;
            case 60: delta=3;break;
            case 90: delta=5;break;
            case 120:delta=7;break;
            default :delta=0;
        }
        self.timePartsI=[];
        for(var i=0;i<96;i=i+1+delta){
            self.timePartsI.push(i)
        }


        self.selectedStuff=[];
        self.timeTable15min=Booking.timeTable15min;
        self.timeParts=Booking.timeParts;
        self.timeRemindArr=Booking.timeRemindArr;
        var month, day, year;
        self.moment=moment;
        self.global=global;
        self.mobile=global.get('mobile' ).val;
        self.today=moment(Date.now())
        self.dateEnd=moment(self.today + (30 * 24 * 60 * 60 * 1000))

        self.countries = [ // Taken from https://gist.github.com/unceus/6501985
            {name: 'Afghanistan', code: 'AF'},
            {name: 'Åland Islands', code: 'AX'},
            {name: 'Albania', code: 'AL'},
            {name: 'Algeria', code: 'DZ'},
            {name: 'American Samoa', code: 'AS'},
            {name: 'Andorra', code: 'AD'},
            {name: 'Angola', code: 'AO'},
            {name: 'Anguilla', code: 'AI'},
            {name: 'Antarctica', code: 'AQ'},
            {name: 'Antigua and Barbuda', code: 'AG'},
            {name: 'Argentina', code: 'AR'},
            {name: 'Armenia', code: 'AM'},
            {name: 'Aruba', code: 'AW'},
            {name: 'Australia', code: 'AU'},
            {name: 'Austria', code: 'AT'},
            {name: 'Azerbaijan', code: 'AZ'},
            {name: 'Bahamas', code: 'BS'},
            {name: 'Bahrain', code: 'BH'},
            {name: 'Bangladesh', code: 'BD'}
        ];





        //****************** set data for date
        self.td= new Date();
        self.altInputFormats = ['M!/d!/yyyy'];
        var today = new Date()
        self.dateOptions={
            minDate: new Date(),
            maxDate: new Date().setDate(today.getDate()+30)
            //dateDisabled: disabled,
            //formatYear: 'yy',
            //startingDay: 1
        };
        // Disable weekend selection
        function disabled(data) {
            var date = data.date,
                mode = data.mode;
            return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
        }
        //********************************************************

        //self.orderDate=moment(Date.now()).format('LLLL');
        //console.log(self.orderDate)
        self.getContentUrl=getContentUrl;

        self.back=back;
        self.forward=forward;
        self.authComplite=authComplite;


        //stuff
        self.addStuff=addStuff;
        self.deleteStuff=deleteStuff;
        self.clearStuff=clearStuff;
        self.getStuffDuration=getStuffDuration;

        self.selectMaster=selectMaster;
        self.clearMaster=clearMaster;
        self.selectMasterFromList=selectMasterFromList;
        self.displaySelectMasterBlock=displaySelectMasterBlock;
        self.otherFreeTime=otherFreeTime;

        self.setDay=setDay;
        self.handleTimePart=handleTimePart;
        self.setTimePart=setTimePart;
        self.clearTimePart=clearTimePart;
        self.filterTimePart=filterTimePart;
        self.filterNearesBlock=filterNearesBlock;
        self.filterTimePartForAll=filterTimePartForAll;// фильтр для отображения текста о том что нет свободного времени для записи

        self.orderService=orderService;
        self.sendCodeToPhone=sendCodeToPhone;
        self.verifyCode=verifyCode;
        self.sendMessage=sendMessage;// отправка уведомления о записи на телефон

        self.checkDisable=checkDisable;

        function checkDisable(form) {
            console.log(form)
        }



        //self.getTagName=getTagName;
        /*self.getFilterName=getFilterName;
        var stuffs;*/

        //********************activate***************************
        self.$onInit=function () {
            activate();
        }

        //*******************************************************
        function activate() {
            self.searchEnabled=(!global.get('mobile').val)?true:false;
            self.dateTimeImg=(global.get('store').val.dateTimeImg)?global.get('store').val.dateTimeImg:null;
            self.masterName=global.get('lang').val.masters;
            if(global.get('store').val.texts && global.get('store').val.texts.masterName && global.get('store').val.texts.masterName[global.get('store').val.lang]){
                self.masterName=global.get('store').val.texts.masterName[global.get('store').val.lang]
            }
            $timeout(function(){
                $($element).height($($element).parent().height())
                $($element).find('#wrapper-for-entry1').height('100%')
                self.currentBlock=0;
            },1500)

            $(window).resize(function(){
                $($element).height($($element).parent().height())
                $($element).find('#wrapper-for-entry1').height('100%')
                if(blocks && blocks[0]){
                    widthBlock=$(blocks[0]).width()
                }

            })
            $(window).bind('orientationchange', function(event) {
                $($element).height($($element).parent().height())
                $($element).find('#wrapper-for-entry1').height('100%')
                if(blocks && blocks[0]){
                    widthBlock=$(blocks[0]).width()
                }
            });
            $scope.$on('dateTime',function(e,argsObj){
                //console.log(argsObj)
                self.currentBlock=0;
                var stuff=null;
                var master=null;
                if(argsObj){
                    if(argsObj.stuff){
                        stuff=argsObj.stuff
                    }
                    if(argsObj.master){
                        master=argsObj.master
                    }

                }

                self.name=(global.get('user').val && global.get('user').val.profile && global.get('user').val.profile.fio)?global.get('user').val.profile.fio:'';
                self.phone=(global.get('user').val && global.get('user').val.profile && global.get('user').val.profile.phone)?global.get('user').val.profile.phone:'1';
                //console.log(self.name,self.phone)
                if(!opened){
                    opened=true;
                    $q.when()
                        .then(function () {
                            return getMasters()
                        })
                        .then(function () {
                            return getItems();
                        })
                        .then(function () {
                            //console.log(self.masters)
                            if(self.masters && self.masters.length && self.masters.length==1){
                                master=self.masters[0]._id;
                            }
                            if(master){
                                setMaster(master)
                                return Booking.filterListServices(self.masters,self.items,self.selectedStuff);
                            }
                            //self.currentBlock=0;

                        })
                        .then(function () {
                            if(!stuff){return Booking.filterListServices(self.masters,self.items,self.selectedStuff);}else{
                                if(stuff.getDataForBooking){
                                    addStuff(stuff.getDataForBooking())
                                }else{
                                    var s= Stuff.getDataForBooking.call(stuff)
                                    addStuff(s)
                                }

                            }

                        })
                        .then(function () {
                            self.showMasterBlock=displaySelectMasterBlock()
                        })
                        .then(function () {
                            if(argsObj && argsObj.date){
                                self.td= new Date(argsObj.date)
                                setDataForDay(argsObj.date)
                            }
                            if(argsObj && argsObj.timePart){
                                argsObj.timePart.master=self.masters.getOFA('_id',argsObj.timePart.master)
                                self.timePart= argsObj.timePart

                            }

                        })
                        .catch(function (err) {
                            console.log(err)
                            if(err){
                                exception.catcher('init')(err)
                            }
                        })

                }else{
                    if(self.masters && self.masters.length && self.masters.length==1){
                        master=self.masters[0]._id;
                        setMaster(master)
                        Booking.filterListServices(self.masters,self.items,self.selectedStuff);
                        if(stuff){
                            self.selectedStuff.length=0;
                            if(stuff.getDataForBooking){
                                addStuff(stuff.getDataForBooking())
                            }else{
                                var s= Stuff.getDataForBooking.call(stuff)
                                addStuff(s)
                            }
                        }
                        if(argsObj && argsObj.date){
                            self.td= new Date(argsObj.date)
                            setDataForDay(argsObj.date)
                        }
                        if(argsObj && argsObj.timePart){
                            argsObj.timePart.master=self.masters.getOFA('_id',argsObj.timePart.master)
                            self.timePart= argsObj.timePart

                        }
                    }else{
                        if(master){
                            setMaster(master)
                            self.selectedStuff.length=0;
                            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
                        }
                        if(stuff){
                            self.selectedStuff.length=0;
                            //clearMaster()
                            if(stuff.getDataForBooking){
                                addStuff(stuff.getDataForBooking())
                            }else{
                                var s= Stuff.getDataForBooking.call(stuff)
                                addStuff(s)
                            }
                        }
                        if(argsObj && argsObj.date){
                            self.td= new Date(argsObj.date)
                            setDataForDay(argsObj.date)
                        }
                        if(argsObj && argsObj.timePart){
                            argsObj.timePart.master=self.masters.getOFA('_id',argsObj.timePart.master)
                            self.timePart= argsObj.timePart
                            console.log(self.timePart)

                        }
                        Booking.filterListServices(self.masters,self.items,self.selectedStuff);
                    }
                    self.showMasterBlock=displaySelectMasterBlock()
                }
            })
        }
        function getMasters(){
            return $q.when()
                .then(function(){
                    return global.get('masters').val;
                })
                .then(function(data){
                    //console.log(data)
                    self.masters=data.map(function(m){
                        //m.stuffs=m.stuffs.map(function(s){return s._id})
                        return m
                    }).filter(function(m){return (m.stuffs && m.stuffs.length)});

                })
                .catch(function(err){
                    exception.catcher('получение списка мастеров')(err)
                });
        }
        function setMaster(master){
            self.masters.forEach(function (m) {
                if(m._id==master){
                    m.selected=true;
                    self.selectedMaster=m;
                    m.show=true;
                    //console.log(m)
                }else{
                    m.selected=null;
                    m.show=false;
                }
            })
            self.timePart=null
            //console.log(self.master)
        }
        function getItems() {
            return $q.when()
                .then(function () {
                    return self.Items.getServicesForOnlineEntry()
                })
                .then(function (res) {
                    //console.log(res)
                    return self.items=res;
                })
                .catch(function(err){
                    exception.catcher('получение списка услуг')(err)
                });

            return;
        }
        function back() {
            self.currentBlock=0;
            return;
            console.log(self.currentBlock)
            if(self.currentBlock==4){
                self.currentBlock=3;
            } else {
                self.currentBlock=0;
            }

        }
        function forward(){
            self.currentBlock=0;
        }
        function authComplite() {
            self.currentBlock=0;
        }


        //***********************stuff
        function addStuff(stuff) {
            if(self.selectedStuff.map(function(s){return s.name}).indexOf(stuff.name)>-1){
                console.log('already is in list')
                return;
            }
            if(!self.selectedMaster || self.selectedMaster._id=='any'){
                self.selectedStuff.length=0;
            }
            self.selectedStuff.push(stuff);
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            self.showMasterBlock=displaySelectMasterBlock()
            //console.log(self.showMasterBlock)
            if(!self.showMasterBlock){
                selectMaster('any')
            }
            self.timePart=null
            self.stuffForEntry=null;
            back()
            //console.log(self.masters)
        }
        function deleteStuff(i,event) {
            //console.log(event)
            event.stopPropagation();
            self.selectedStuff.splice(i,1);
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            self.showMasterBlock=displaySelectMasterBlock()
            if(!self.showMasterBlock && self.selectedStuff.length){
                selectMaster('any')
            }
            console.log(!self.selectedStuff.length && self.selectedMaster && self.selectedMaster._id=='any')
            if(!self.selectedStuff.length && self.selectedMaster && self.selectedMaster._id=='any'){
                clearMaster()
            }
            self.timePart=null
        }
        function clearStuff(){
            self.selectedStuff.length=0
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            self.showMasterBlock=displaySelectMasterBlock()
            if(!self.showMasterBlock){
                selectMaster('any')
            }
            if(!self.selectedStuff.length && self.selectedMaster && self.selectedMaster._id=='any'){
                clearMaster()
            }
            self.timePart=null
        }
        function getStuffDuration(stuff) {
            if(stuff.timePart){
                return stuff.timePart*minTimePart
            }else{
                return 30
            }
        }

        //**********************************************
        //***********master
        function selectMaster(master){
            if(master && master=='any'){
                self.selectedMaster={_id:'any',name:global.get('langForm').val.noObject}
            }else{
                self.masters.forEach(function (m) {
                    if(master){
                        if(master._id==m._id){
                            m.selected=true;
                            self.selectedMaster=m
                            //m.show=true;
                            //console.log(self.selectedMaster)
                        }else{
                            m.selected=null;
                            //m.show=false;
                        }
                    }else{
                        m.selected=true;
                    }

                })
            }
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            forward()
            self.timePart=null
        }
        function clearMaster(){
            //console.log('clearMaster')
            self.selectedMaster=null;
            self.masters.forEach(function (m) {
                m.selected=null;
            })
            //self.selectedStuff.length=1;
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            self.timePart=null
        }
        function selectMasterFromList() {
            self.masters.forEach(function (m) {
                m.nearestBlocks=null;
            })
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            self.currentBlock=2

            if(global.get('store').val.timeTable && !global.get('store').val.timeTable.some(function(day){return day.is})){return}// если нет ни одного рабочего дня

            var daysForCheck = 7;
            var date = self.td;
            var month = date.getMonth()
            var day = date.getDate();
            var year = date.getFullYear();


            var queryArr={$or:[]};
            var helpQuery=[]
            var helpQueryO={}
            var dayOfWeek;
            var monthStr

            var today = new Date()
            self.hours=today.getHours();
            self.minutes=Math.ceil(today.getMinutes()/15)-1;
            //console.log(self.hours,self.minutes)
            /*todo убрать 0*/
            var startBlockForCurrentDay=self.hours*4+self.minutes;
            var currentMonth = today.getMonth()
            var currentday =   today.getDate();
            var currentDayOfYear =  Booking.getDayOfYear(currentMonth,currentday-1);
            var daysOfMonth = Booking.getDaysOfMonth(month,year)
            var storeTimeTable = global.get('store').val.timeTable;
            /*формирование запроса*/
            for(var i = 0;i<daysForCheck;i++){
                date = new Date(year,month,day);
                dayOfWeek=date.getDay();
                /* только рабочие дни магазина*/
                while(!storeTimeTable[dayOfWeek].is){
                    day++;
                    if(day>daysOfMonth){
                        day=1;
                        month++
                        daysOfMonth = Booking.getDaysOfMonth(month,year)
                        if(month>11){
                            month=0;
                            year++;
                        }
                    }
                    date = new Date(year,month,day);
                    dayOfWeek=date.getDay();
                }
                monthStr=month;
                if(month<10){monthStr='0'+month}
                if(day<10){day='0'+day}
                queryArr.$or.push({date:'date'+year+monthStr+day});
                helpQuery.push({y:year,m:month,d:day,dayOfWeek:dayOfWeek,dayOfYear:Booking.getDayOfYear(month,day-1),query:'date'+year+monthStr+day})
                helpQueryO['date'+year+monthStr+day]=i;
                day++;
                if(day>daysOfMonth){
                    day=1;
                    month++
                    daysOfMonth = Booking.getDaysOfMonth(month,year)
                    if(month>11){
                        month=0;
                        year++;
                    }
                }
            }
            /******************************************************************/

            return Booking.getList({page:0,rows:3000},queryArr)
                .then(function(entries) {
                    var entriesForMaster=entries.reduce(function (o,item) {
                        /*console.log(o,item)
                        if(!o){o={}}*/
                        if(!o[item.master]){o[item.master]=[]}
                        o[item.master].push(item)
                        return o
                    },{})
                    //console.log(entriesForMaster)
                    /*длительность услуги*/
                    var durationStuffs=self.selectedStuff.reduce(function (s,item) {
                        //console.log(item)
                        return s+=item.timePart
                    },0)
                    //console.log(durationStuffs)
                    self.masters.forEach(function (m) {
                        m.nearestBlocks=[];
                        if(!m.show){return;}
                        /*время доступное для записи расчитывается только если есть выбранная услуга*/
                        if(!self.selectedStuff.length){return}
                        //console.log(m)
                        var entrs = [];
                        for(var i =0;i<daysForCheck;i++){
                            entrs.push([])
                        }
                        if(entriesForMaster[m._id]){
                            entriesForMaster[m._id].forEach(function (e) {
                                helpQueryO[e.date] // номер проверяемого дня
                                entrs[helpQueryO[e.date]].push(e)
                            })
                        }
                        //console.log(entr)


                        var blocks=[];
                        var startBlock;
                        var endBlock;
                        //startBlockForCurrentDay=60;
                        for(var i=0;i<daysForCheck;i++){
                            if(blocks.length){break}/*если на предыдущую дату уже есть свободный блок то следужщие дни не обрабатываем*/
                            if(m.timeTable && m.timeTable[helpQuery[i].dayOfYear] && !m.timeTable[helpQuery[i].dayOfYear].is){continue/*не рабочий день у мастера*/}
                            if(i==0 && helpQuery[i].dayOfYear==currentDayOfYear){
                                startBlock=startBlockForCurrentDay;
                            }else{
                                startBlock=0;
                            }
                            endBlock=95;
                            //console.log(startBlock,helpQuery[i].dayOfWeek,storeTimeTable)
                            /*console.log(startBlock)
                            console.log(endBlock)*/
                            /*установка времени работы магаза*/
                            if(storeTimeTable && storeTimeTable[helpQuery[i].dayOfWeek]){
                                if(storeTimeTable[helpQuery[i].dayOfWeek].start){
                                    var tempStart = storeTimeTable[helpQuery[i].dayOfWeek].start*4;
                                    if(tempStart>startBlock){
                                        startBlock=tempStart;
                                    }
                                }
                                if(storeTimeTable[helpQuery[i].dayOfWeek].end){
                                    var tempEnd = storeTimeTable[helpQuery[i].dayOfWeek].end*4;
                                    if(tempEnd<endBlock){
                                        endBlock=tempEnd;
                                    }
                                }

                            }
                            /*console.log(startBlock)
                            console.log(endBlock)*/
                            //console.log(m.timeTable,helpQuery[i].dayOfYear,currentDayOfYear)
                            /*установка времени работы для мастера*/
                            if(m.timeTable && m.timeTable[helpQuery[i].dayOfYear]){
                                if(m.timeTable[helpQuery[i].dayOfYear].s){
                                    var tempStart = m.timeTable[helpQuery[i].dayOfYear].s*4;
                                    if(tempStart>startBlock){
                                        startBlock=tempStart;
                                    }
                                }
                                if(m.timeTable[helpQuery[i].dayOfYear].e){
                                    var tempEnd = m.timeTable[helpQuery[i].dayOfYear].e*4;
                                    if(tempEnd<endBlock){
                                        endBlock=tempEnd;
                                    }
                                }
                            }

                            /*console.log(startBlock)
                            console.log(endBlock)*/

                            var entryTimeTable=angular.copy(Booking.timeParts)
                            entrs[i].forEach(function(e){
                                for(var ii=e.start;ii<e.start+e.qty;ii++){
                                    entryTimeTable[ii].busy=true;
                                }
                            })
                            var durationCheck;
                            for(var ii=startBlock;ii<=endBlock;ii++){
                                if(!entryTimeTable[ii].busy){
                                    durationCheck=true;
                                    /*проверка длятельности услуги*/
                                    if(durationStuffs){
                                        for(var iii=ii+1;iii<ii+durationStuffs;iii++){
                                            //console.log(ii,iii)
                                            if(iii>=endBlock || entryTimeTable[iii].busy){
                                                durationCheck=false;
                                                break;
                                            }
                                        }
                                    }
                                    if(!durationCheck){continue}

                                    var o={i:ii,date:helpQuery[i].query}
                                    if(!blocks.length){
                                        var dd= new Date(helpQuery[i].y,helpQuery[i].m,helpQuery[i].d);
                                        o.dateString = moment(dd).format('LL')
                                    }
                                    blocks.push(o)
                                    if(blocks.length>=5){break}
                                }

                            }
                            if(blocks.length>=5){break}
                        }
                        m.nearestBlocks=blocks;
                        //console.log(m.nearestBlocks)
                    })

                })
        }
        function displaySelectMasterBlock() {
            if(self.masters && self.masters.length){
                var criteria=self.masters.some(function (m) {
                    return m.show && !m.workplace
                })
                return criteria
            }

        }
        function otherFreeTime(master){
            selectMaster(master)
            handleTimePart()
        }
        //********************* date

        //************** day
        function setDay(td){
            if(self.selectedMaster && self.selectedStuff && self.selectedStuff.length){
                self.currentBlock=4;
            }else{
                back();
            }
            if(td){
                self.td=td;
            }

            setDataForDay(self.td);
            self.timePart=null
        }
        function setDataForDay(td) {
            var date = new Date(td);
            var currentdate = new Date()
            self.currentDay=currentdate.getDate()
            self.hours=currentdate.getHours();
            self.minutes=Math.ceil(currentdate.getMinutes()/15)-1;
            month = date.getMonth() //+ 1; //months from 1-12
            day = date.getDate();
            year = date.getFullYear();
            self.currentTimeBlock=(self.currentDay==day)?self.hours*4+self.minutes:0;
            //console.log('self.currentTimeBlock - ',self.currentTimeBlock)
            if(month<10){month='0'+month}
            if(day<10){day='0'+day}
            var query={date:'date'+year+month+day};
            //console.log(query)
            getBookingData(query)
        }

        //********************* timepart

        function getBookingData(query){
            var d  = new Date(self.td);
            var dayOfWeek = d.getDay();
            var month = d.getMonth()
            var day = d.getDate();
            var currentDayOfYear=Booking.getDayOfYear(month,day-1)
            //console.log(currentDayOfYear)

            var storeSchedule=angular.copy(global.get('store').val.timeTable[dayOfWeek])
            if(!storeSchedule){
                storeSchedule={start:0,end:95}
            }
            storeSchedule.start *=4
            storeSchedule.end *=4
            //console.log(storeSchedule)
            var masterSchedule;
            if(self.selectedMaster && self.selectedMaster.timeTable && self.selectedMaster.timeTable[currentDayOfYear]){
                masterSchedule=angular.copy(self.selectedMaster.timeTable[currentDayOfYear])
                masterSchedule.s*=4;
                masterSchedule.e*=4;
            }
            var lastBlock=95;

            //console.log(masterSchedule)

            return Booking.getList({page:0,rows:10},query)
                    .then(function(entries) {
                    //console.log(entries)
                    // продолжительность услуги
                    var stuffsDuration=self.selectedStuff.reduce(function(d,item){
                        //console.log(item)
                        return d+((item.timePart)?item.timePart:4)
                    },0)
                    /*инициализация временных блоков для записи. сначала не доступны все*/
                    self.entryTimeTable=angular.copy(Booking.timeParts);
                    self.entryTimeTable.forEach(function (b,i) {
                        /*время работы магазина*/
                        if(storeSchedule.is){
                            if(i>=storeSchedule.start && i<storeSchedule.end){
                                /* проверяем мастера*/
                                if(!masterSchedule || (masterSchedule.is && i>=masterSchedule.s && i<masterSchedule.e)){
                                    // если мастер любой (any) то показывается время работы магазина
                                    b.show=true
                                }else{
                                   b.show= false
                                }
                            }else{
                                b.show=false
                            }
                        }else{
                            b.show=false
                        }
                        if(self.entryTimeTable[i-1] && self.entryTimeTable[i-1].show && !self.entryTimeTable[i].show){
                            lastBlock=i;
                        }
                        /**************************/
                        b.busy=true;b.date=query.date
                    })
                    //console.log(lastBlock)
                    self.masters.forEach(function (master) {
                        //console.log(self.timePartsI)
                        if((master.selected && master.show) || (self.selectedMaster && self.selectedMaster._id=='any' && self.selectedStuff[0] && master.stuffs.indexOf(self.selectedStuff[0]._id)>-1)){
                            master.entryTimeTable=angular.copy(Booking.timeParts)
                            entries.forEach(function(e){
                                if(e.master==master._id){
                                    for(var i=e.start;i<e.start+e.qty;i++){
                                        master.entryTimeTable[i].busy=true;
                                    }
                                }
                            })
                            var tempSchedule;
                            if(self.selectedMaster._id==='any'){
                                if(master.timeTable && master.timeTable[currentDayOfYear]){
                                    tempSchedule = angular.copy(master.timeTable[currentDayOfYear])
                                    tempSchedule.s*=4;
                                    tempSchedule.e*=4;
                                }
                            }
                            master.entryTimeTable.forEach(function(block,i){
                                // если запись доступна от текущего времени. если она доступна по времени работы магазина. если она доступна у мастера если она пока недоступна в общем списке записей
                                if(i>self.currentTimeBlock && self.entryTimeTable[i].show && !block.busy && self.entryTimeTable[i].busy){
                                    if(self.selectedMaster._id==='any' && tempSchedule && (!tempSchedule.is || i<tempSchedule.s || i>=tempSchedule.e)){
                                        // запись не обрабатываем так как для этого мастера она не попадает в его расписание
                                        return;
                                    }
                                    // можно проверить теперь показывать ли для мастера
                                    //это сдвижка от текущего блока вперед нет ли занятого блока в течении выполнения услуги
                                    var l = i+stuffsDuration;
                                    for(var j=i;j<l;j++){
                                        if(master.entryTimeTable[j] && master.entryTimeTable[j].busy){
                                            return;
                                        }
                                    }
                                    self.entryTimeTable[i].busy=false;
                                    self.entryTimeTable[i].master=master;
                                }
                            })
                        }else {
                            /*заглушка*/
                            master.entryTimeTable=[];
                        }
                    })
                    // унеможливеть запись на блоки перед окончанием работы магазина которые не дают времени на услугу
                    for(var i = lastBlock-stuffsDuration+1;i<=lastBlock;i++){
                        self.entryTimeTable[i].busy=true;
                    }
                });
        }
        function setTimePart(part,master) {
            //console.log(part)
            try{
                var month = Number(part.date.substring(8,10))
                var day = Number(part.date.substring(10));

                var monthD = self.td.getMonth()
                var dayD = self.td.getDate();

                if(month!=monthD || day !=dayD){
                    self.td.setMonth(month,day)
                }

                /*console.log(month,day,monthD,dayD)
                console.log(self.td.toString())*/
            }catch(err){console.log(err)}

            self.timePart=part;
            if(master){
                self.selectedMaster=master;
                master.selected=true;
                master.show=true;
                self.timePart.master=master
                //console.log(master)
                Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            }
            forward()
        }
        /*todo перенести в фильтр в getBookingData*/
        function filterTimePart(item){
            return item.show && !item.busy &&self.timePartsI.indexOf(item.i)>-1
        }
        function filterNearesBlock(item){
            return self.timePartsI.indexOf(item.i)>-1
        }
        function filterTimePartForAll() {
            // для показа сообщения что нет доступного времени
            //console.log(self.entryTimeTable)
            if(!self.entryTimeTable){return}
            //console.log(typeof self.entryTimeTable)
            var result = !self.entryTimeTable.some(function(item,i){
                //console.log(item)
                /*if(item.i==40){
                    console.log(item)
                    console.log(item.show && !item.buzy)
                }*/
                return item.show && !item.busy
            })
            //console.log(result)
            return result
        }

        function orderService(form){
            //console.log(form)
            if(!form.name.$valid){
                var err = global.get('langError').val.entername;
                exception.catcher(global.get('lang').val.error)(err);
                return;
            }else if(!form.phoneForm.$valid){
                var err = global.get('langError').val.phonenotformat;
                exception.catcher(global.get('lang').val.error)(err);
                return;
            }

            if(!form.$valid){return}
            //console.log(self.selectedMaster,self.selectedStuff,self.timePart)
            if(!self.selectedMaster){
                var err = global.get('langError').val['notMaster']
                exception.catcher(global.get('lang').val.error)(err)
                return;
            }else if(!self.selectedStuff || !self.selectedStuff.length){
                var err = global.get('langError').val['notService']
                exception.catcher(global.get('lang').val.error)(err)
                return;
            }else if(!self.timePart){
                var err = global.get('langError').val['notTime']
                exception.catcher(global.get('lang').val.error)(err)
                return;
            }
            var user = global.get('user').val;
            var store = global.get('store').val
            var phone=self.phone
            var name = self.name;
            if(!phone){
                console.log('нет телефона')
                return
            }
            if(self.date && self.date.getTimezoneOffset()){
                var tz =  self.date.getTimezoneOffset()/60
            }else{
                var dTemp = new Date()
                var tz =  dTemp.getTimezoneOffset()/60
            }

            function checkOut(userEntry) {
                //console.log(userEntry);return
                //console.log(self.selectedStuff)
                /*console.log(userEntry);
                return;*/
                /*console.log(self.remind,self.timeRemind)
                return;*/
                prepareMessage(self.selectedStuff,userEntry,self.timePart.date,self.timePart.i)
                /*console.log(self.dataForSend);
                return;*/
                var entry={
                    services:self.selectedStuff,
                    user:userEntry,
                    remind:self.remind,
                    timeRemind:self.timeRemind
                };
                //console.log(self.timePart);
                var entries=[],val=self.timePart.i;
                $q.when()
                    .then(function(){
                        entry.services.forEach(function(s,i){
                            var o = {start:val,qty:s.timePart,
                                stuffName:s.name,
                                stuffNameL:s.nameL,
                                stuffLink:s.link,
                                backgroundcolor:s.backgroundcolor,
                                masterName:self.timePart.master.name,
                                masterNameL:self.timePart.master.nameL,
                                masterUrl:self.timePart.master.url,
                                service:{_id:s._id,name:s.name},user:entry.user};
                            if(i==0&& entry.remind && entry.timeRemind){
                                o.remind=entry.remind;
                                o.timeRemind=entry.timeRemind;
                            }
                            o.master=self.timePart.master._id
                            o.date=self.timePart.date;
                            o.tz=tz;
                            if(s.price){
                                o.paySum=s.price;
                            }
                            if(s.priceSale){
                                o.paySum=s.priceSale;
                            }
                            if(s.currency){
                                o.currency=s.currency;
                            }
                            entries.push(o)
                            val+=s.timePart;
                        })
                        //console.log(entries)

                        var actions=entries.map(function (e) {
                            return Booking.save(e).$promise
                        })
                        return $q.all(actions)
                    })
                    .then(function(res){
                        //socket.emit('newRecordOnSite',{store:global.get('store').val._id,seller:global.get('store').val.seller._id})
                        $http.get('/api/newRecordOnSite/'+global.get('store').val._id+'/'+global.get('store').val.seller._id)
                        console.log("global.get('store').val.submitDateTime",global.get('store').val.submitDateTime)
                        // клиент
                        if(!global.get('store').val.submitDateTime){
                            console.log('client')
                            return sendMessage();

                        }
                    })
                    .then(function () {
                        if(self.selectedMaster && self.selectedMaster.notification){
                            if(self.selectedMaster.notification==1){
                                console.log('admin notification==1')
                                if(self.selectedMaster.phone){
                                    return sendMessage(self.selectedMaster.phone);
                                }
                            }else if(self.selectedMaster.notification==2){
                                console.log('admin notification==2')
                                return $q.when()
                                    .then(function () {
                                        if(self.selectedMaster.phone){
                                            return sendMessage(self.selectedMaster.phone);
                                        }
                                    })
                                    .then(function () {
                                        if(global.get('store').val.seller.phone){
                                            return sendMessage(global.get('store').val.seller.phone);
                                        }
                                    })


                            }else if(self.selectedMaster.notification==0){
                                console.log('admin notification==0')
                                if(global.get('store').val.seller.phone){
                                    return  sendMessage(global.get('store').val.seller.phone);
                                }
                            }
                        }else{
                            // admin
                            console.log('admin default')
                            if(global.get('store').val.seller.phone){
                                return  sendMessage(global.get('store').val.seller.phone);
                            }
                        }
                    })
                    .then(function(res){
                        clearStuff()
                        clearMaster();
                        self.td= new Date();
                        self.timePart=null
                        $rootScope.checkedMenuChange('entryTime',false);
                        //notification
                        try{
                            // отправка уведомления
                            var entry = angular.copy(entries[0]);
                            var mm = self.masters.getOFA('_id',entry.master);
                            entry.masterName=(mm)?mm.name:'?????'
                            entry.dateForNote = self.dataForSend.date;
                            var content=CreateContent.dateTimeNote(entry,userEntry)
                            //console.log(userEntry,content)
                            var o={addressee:'seller',
                                type:'dateTime',
                                content:content,
                                seller:global.get('store').val.seller._id};
                        }catch(err){
                            console.log(err)
                        }

                        //console.log(o)
                        //return;
                        return $q(function(resolve,reject){
                            $notification.save(o,function(res){
                                exception.showToaster('note', global.get('langNote').val.sent,'');
                                resolve()
                            },function(err){
                                exception.catcher('error')(err);
                                resolve()
                            } )
                        })
                    })
                    .then(function(res){
                        var pap = global.get('paps').val.getOFA('action','booking');
                        if(pap && pap.url){
                            $state.go('thanksPage',{id:pap.url})
                        }
                    })
                    .catch(function(err){
                        if(err){
                            console.log(err)
                            if(err.data && err.data.message ==='time_is_buzy'){
                                $rootScope.$broadcast('time_is_buzy')
                                $rootScope.checkedMenuChange('entryTime',false);
                            }
                            exception.catcher('запись на время')(err)
                        }
                    })

            }
            function checkUserEntry(phone) {
                var query = {phone:phone};
                return $q.when()
                    .then(function () {
                        //return $user.checkPhoneForExist(phone)
                        return $user.getItem(phone,'profile.phone')
                    })
                    .then(function(res){
                        //console.log(res)
                        if(res){return res}else{return null}
                    })
            }
            function createUserEntry(name,phone) {
                var email= phone+'@gmall.io'
                var user = {email:email,name:name,profile:{phone:phone,fio:name}};
                return $auth.signup(user)
                    .then(function(response) {
                        console.log(response)
                        if(response && response.data &&  response.data.token){
                            if(response.data.token=='update'){
                                throw null;
                            }else{
                                $auth.setToken(response);
                                return Account.getProfile()
                            }
                        } else{
                            throw response;
                        }

                    })
                    .then(function(response){
                        console.log(response)
                        if(response){
                            global.set('user',response.data);
                            global.get('functions').val.logged();
                        }

                    })
                    .catch(function(err){
                        if(err){
                            exception.catcher('new client')(err)
                        }
                    })

            }

            if(user){
                $q.when()
                    .then(function () {
                        return checkUserEntry(phone)
                    })
                    .then(function (res) {
                        //console.log(res,user)
                        if(res && res._id && res._id!=user._id){
                            throw 'такой телефон уже зарегистрирован. разлогинтесь и при записи на него вы получите sms с кодом авторизации'
                        }

                    })
                    .then(function () {
                        //console.log(global.get('user').val)
                        var userEntry={
                            _id:global.get('user').val._id,
                            name:name,
                            phone:phone,
                            email:global.get('user').val.email,
                        }
                        checkOut(userEntry)
                    })
                    .then(function () {
                        if(name!=user.name|| phone!=user.pfone){
                            global.get('user').val.profile.fio=name;
                            global.get('user').val.profile.phone=phone;
                            var o ={_id:global.get('user').val._id,profile:global.get('user').val.profile}
                            $user.save({update:'profile'},o,function () {
                                //exception.showToaster('succes','статус','обновлено!')
                            })
                        }
                    })
                    .catch(function (err) {
                        exception.catcher(global.get('lang').val.error)(err)
                        //console.log(err)
                    })

            }else{
                $q.when()
                    .then(function(){
                        //return $user.checkPhoneForExist(phone)
                        return checkUserEntry(phone)
                    })
                    .then(function (res) {
                        //console.log(res);
                        if(res && res._id){
                            sendCodeToPhone()
                            dateTimeAuth(res)
                            //self.currentBlock=5;
                            return null
                        }else{
                            return createUserEntry(self.name,phone)
                        }
                    })
                    .then(function () {
                        if(global.get('user').val){
                            var user={
                                _id:global.get('user').val._id,
                                name:global.get('user').val.profile.fio||global.set('user').val.name,
                                phone:global.get('user').val.profile.phone,
                                email:global.get('user').val.email,
                            }
                            checkOut(user)
                        }
                    })
            }
            return;
        }
        function handleTimePart() {
            self.currentBlock=4;
            setDataForDay(self.td)
        }
        function clearTimePart() {
            self.timePart=null
        }
        function dateTimeAuth(user) {
            //console.log(user)
            /*if(user.email!=user.profile.phone+'@gmall.io'){
                self.authWithEmail=true;
            }else{
                self.authWithEmail=false;
            }*/
            self.authWithEmail=false;
            self.currentBlock=5;
        }
        function sendCodeToPhone() {
            var o = {phone:self.phone}
            self.sendCodeDisable=true;
            $q.when()
                .then(function () {
                    return $http.post('/api/users/sendSMS',o)
                })
                .then(function () {
                    exception.showToaster('info','send code','success')
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send code')(err)
                    }
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })

        }
        function verifyCode(code) {
            var o = {code:code,phone:self.phone}
            self.sendVerifyCodeDisable=true;
            $q.when()
                .then(function () {
                    return $http.post('/api/users/verifySMScode',o)
                })
                .then(function (response) {
                    console.log(response)
                    exception.showToaster('info','verify code','success')
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },10000);
                    if(response && response.data &&  response.data.token){
                        $auth.setToken(response);
                        return Account.getProfile()
                    }else{throw 'wrong response'}
                })
                .then(function(response){
                    if(response){
                        authComplite();
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                    }

                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('verify code')(err)
                    }
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },10000)
                })

        }
        function sendMessage(phone) {
            if(phone){
                self.dataForSend.phone=phone;
            }
            if(!self.dataForSend.phone){console.log(self.dataForSend);return}
            return $q.when()
                .then(function () {
                    console.log('self.dataForSend.phone',self.dataForSend.phone)
                    return $http.post('/api/users/sendMessageAboutDeal',self.dataForSend)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send message')(err)
                    }
                })
        }
        function sendMessageOld(seller) {
            /*console.log(self.selectedMaster)
             return;
             */
            //console.log(self.dataForSend)
            var secondMessage;
            if(seller){
                if(!global.get('store').val.seller.phone){
                    return
                }else{
                    if(self.selectedMaster && self.selectedMaster.phone && self.selectedMaster.notification){
                        self.dataForSend.phone= self.selectedMaster.phone
                        if(self.selectedMaster.notification==2 && global.get('store').val.seller.phone){
                            secondMessage=global.get('store').val.seller.phone;
                        }
                    }else{
                        self.dataForSend.phone= global.get('store').val.seller.phone
                    }

                }
            }
            if(self.dataForSend && self.dataForSend.phone && self.dataForSend.date){
                $q.when()
                    .then(function () {
                        console.log(self.dataForSend)
                        if(self.dataForSend.phone){
                            return $http.post('/api/users/sendMessageAboutDeal',self.dataForSend)
                        }
                    })
                    .then(function () {
                        if(secondMessage){
                            self.dataForSend.phone= secondMessage;
                            //console.log(self.dataForSend)
                            return $http.post('/api/users/sendMessageAboutDeal',self.dataForSend)
                        }


                    })
                    .catch(function (err) {
                        if(err){
                            exception.catcher('send message')(err)
                        }
                    })
            }
        }
        function prepareMessage(stuffs,user,date,start) {
            self.dataForSend={}
            if(!stuffs || !stuffs.length || !user & user._id || !user.phone){
                return
            }
            var hour = Math.floor(start/4)
            var minutes = (start%4)*15
            var year = date.substring(4,8)
            var month = date.substring(8,10)
            var day = date.substring(10)
            try{
                date = new Date(year,month,day,hour,minutes)
                date= moment(date).format('lll')
                //console.log(date)
                self.dataForSend.name=user.name
                self.dataForSend.userId=user._id
                self.dataForSend.phone=user.phone
                self.dataForSend.text=global.get('langOrder').val.recordedOn+' '+stuffs[0].name.toUpperCase()+' '+global.get('langOrder').val.onn+' '+date+' '+self.dataForSend.phone+
                    ((self.dataForSend.name)?' '+self.dataForSend.name:'');
                self.dataForSend.date=date//.toString()
                //self.dataForSend.date2=date.toISOString()
                //self.dataForSend.date3=date.toUTCString()
                //self.dataForSend.date=date.toTimeString()
            }catch(err){console.log(err)}

        }

    }

})()
'use strict';
(function(){
    angular.module('gmall.services')
        .service('Category', categoryService);
    categoryService.$inject=['$resource','$uibModal','$q'];
    function categoryService($resource,$uibModal,$q){



        var Items= $resource('/api/collections/Category/:_id',{_id:'@_id'});
        return {
            //query:getList,
            get:Items.get,
            query:Items.query,
            save:save,
            delete:Items.delete,
            select:select,
            selectWithSection:selectWithSection

        }
        function save(){
            return Items.save.apply(this,arguments).$promise.then(function(){
                
            })
        }
        function getList(query,cb){
            console.log(query)
            Items.query(query,function(res){
                cb(res)
            })

        }
        function select(categoryId,selectSection,sections,forGroupStuffs){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/sections/selectCategoryModal.html',
                    controller: selectCategoryCtrl,
                    size: 'lg',
                    resolve:{
                        categoryId:function(){return categoryId},
                        selectSection:function(){return selectSection},
                        sections:function(){if(sections){return sections}else{return null}},
                        forGroupStuffs:function(){if(forGroupStuffs){return forGroupStuffs}else{return null}}
                    },
                    controllerAs:'$ctrl'
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedItem) {
                    resolve(selectedItem)
                }, function () {
                    //console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }

        function selectWithSection(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/sections/selectCategoryWithSectionModal.html',
                    controller: selectCategoryWithSectionCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl'
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedItem) {
                    resolve(selectedItem)
                }, function () {
                    //console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }

    }
    selectCategoryCtrl.$inject=['$q','$uibModalInstance','Sections','categoryId','selectSection','sections','forGroupStuffs'];
    function selectCategoryCtrl($q,$uibModalInstance,Sections,categoryId,selectSection,sections,forGroupStuffs){
        var self=this;
        self.categoryId=categoryId;
        self.selectSection=selectSection;
        $q.when()
            .then(function(){
                if(sections){
                    return sections
                }else{
                    return Sections.getSections();
                }
            })
            .then(function(sections){
                //console.log(sections)
                self.sections = sections.filter(function (s) {
                    if(forGroupStuffs){
                        return s.groupStuffs
                    }else{
                        return !s.groupStuffs
                    }
                });
            })
        self.ok = function (selectedCategory) {
            $uibModalInstance.close(selectedCategory);
        };
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
    selectCategoryWithSectionCtrl.$inject=['$q','$uibModalInstance','Sections'];
    function selectCategoryWithSectionCtrl($q,$uibModalInstance,Sections){
        var self=this;
        $q.when()
            .then(function(){
                return Sections.getSections();
            })
            .then(function(sections){
                //console.log(sections)
                self.sections = sections;
            })
        self.ok = function (selectedCategory) {
            $uibModalInstance.close(selectedCategory);
        };
        self.okSection = function (section) {
            var categories=section.categories;
            $uibModalInstance.close(categories);
        };
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
})()


/*
var store = {store:req.store._id};
if (!options.criteria){
    options.criteria= store;
}else{
    if (options.criteria['$and']){
        /!*if(!options.criteria['$and'].some(function(el){
         return Object.keys(el)[0]=='store'
         })){
         options.criteria['$and'].push(store);
         }*!/
        options.criteria['$and'].push(store);
    }else{
        /!*if(Object.keys(options.criteria)[0]!='store'){
         options.criteria={$and:[options.criteria,store]}
         }*!/
        options.criteria={$and:[options.criteria,store]}
    }
}*/

'use strict';
(function(){
    'use strict';
    angular.module('gmall.services')
        .service('Seopage', itemService);
    itemService.$inject=['$resource','$uibModal','$q'];
    function itemService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Seopage/:_id',{_id:'@_id'});
        return {
            get:Items.get,
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
            if(!paginate){paginate={page:0}}
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
            function getListFailed(error) {
                console.log('XHR Failed for seopage.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                //.catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/SEO/seopages/createSeopage.html',
                    controller: createCtrl,
                    size:'lg',
                    controllerAs:'$ctrl',
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject()
                });
            })

        }
        createCtrl.$inject=['$uibModalInstance','Category']
        function createCtrl($uibModalInstance,Category){
            var self=this;
            self.name=''
            self.data={category:null};
            self.selectCategory=selectCategory;
            self.getUrl=getUrl;
            self.clearUrl=clearUrl;

            function getUrl(){
                var url='/';
                if(self.data.category){
                    if(self.data.category._id){
                        //var params=
                    }
                }
                return url;
            }
            function clearUrl(){
                self.data={};
            }
            function selectCategory(){
                Category.select(null,true).then(function(category,section){
                    console.log(category);
                    self.data.category=category;
                })
            }

            function getSectionUrlParams(section){
                //console.log(section)
                var params={
                    groupUrl:'group',
                    categoryUrl:'category',
                    categoryList:null,
                    parentGroup:null,
                    brand:null,
                    artikul:null,
                    brandTag:null,
                    queryTag:null,
                    searchStr:null
                }
                if (section.level===0){
                    params.groupUrl=section.url
                }else{
                    params.groupUrl=section.section.url;
                    params.parentGroup=section.url;
                }
                return params;
            }
            function getCategoryUrlParams(section,category){
                var params =self.getSectionUrlParams(section);
                if(category){
                    params.categoryUrl=category.url;
                } else{
                    params.categoryUrl='category';
                    params.categoryList='allCategories'
                }
                return params;
            }

            self.ok=function(){
                $uibModalInstance.close(self.name);
            }
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        }
    }
})()

'use strict';
(function(){
    'use strict';
    angular.module('gmall.services')
        .service('Keywords', itemService);
    itemService.$inject=['$resource','$uibModal','$q'];
    function itemService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Keywords/:_id',{_id:'@_id'});
        return {
            //get:Items.get,
            getList:getList,
            //getItem:getItem,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(){
            return Items.query().$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(response && response.length){
                    response.shift()
                }
                return response;
            }
            function getListFailed(error) {
                console.log('XHR Failed for seopage.' + error);
                return $q.reject(error);
            }
        }
    }
})()

/**
 * @desc news directive that is specific to the main module
 * @example <news-item></news-item>
 */
'use strict';
(function(){
    angular.module('gmall.services')
        .directive('campaignItem',itemDirective)
        .directive('campaignItemTemplate',campaignItemTemplateDirective)
        .directive('expirationDate',expirationDateDirective)

    function itemDirective(){
        return {
            scope: {},
            rescrict:"E",
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/PROMO/campaign/campaignItem.html',
        }
    }
    function expirationDateDirective(){
        return {
            scope: {
                date:'@'
            },
            rescrict:"E",
            bindToController: true,
            controller: expirationDateCtrl,
            controllerAs: '$ctrl',
            templateUrl: function(){
                return 'components/PROMO/campaign/expirationDate.html'
            },
        }
    }
    expirationDateCtrl.$inject=['$interval','global'];
    function expirationDateCtrl($interval,global) {

        var self=this;
        self.gethumanizeDay=gethumanizeDay;
        self.gethumanizeHour=gethumanizeHour;
        self.gethumanizeMin=gethumanizeMin;
        self.gethumanizeSec=gethumanizeSec;

        this.$onInit = function() {
            activate()
        }


        function activate(){
            var d = new Date(self.date);
            d.setHours(23)
            d.setMinutes(59)
            d.setSeconds(59)
            //console.log(moment(d).format('LLL'))
            //console.log(Date.parse(self.date))
            self.dateEnd=Math.round((Date.parse(d)-Date.now())/1000)
            //console.log(self.dateEnd)
            var interval = $interval(function() {
                self.dateEnd--;
                if(self.dateEnd<=0){return}
                self.seconds = Math.floor((self.dateEnd) % 60);
                self.minutes = Math.floor(((self.dateEnd / (60)) % 60));
                self.hours = Math.floor(((self.dateEnd / (3600)) % 24));
                self.days = Math.floor(((self.dateEnd / (3600)) / 24));
                // console.log(self.seconds,self.minutes,self.hours,self.days)

                //add leading zero if number is smaller than 10
                self.sseconds = self.seconds < 10 ? '0' + self.seconds : self.seconds;
                self.mminutes = self.minutes < 10 ? '0' + self.minutes : self.minutes;
                self.hhours = self.hours < 10 ? '0' + self.hours : self.hours;
                self.ddays = self.days < 10 ? '0' + self.days : self.days;
            }, 1000)
        }
        //console.log(global.get('lang').val)
        function gethumanizeDay(d){
            if(d==1 || d==21 || d==31 || d==41 || d==51 || d==61 || d==71 || d==71 || d==91 || d==101 || d==121 || d==131 || d==141 || d==151 || d==161 || d==171 || d==181 || d==191 || d==201 || d==221 || d==231 || d==241 || d==251 || d==261 || d==271 || d==281 || d==291 || d==301 || d==321 || d==331 || d==341 || d==351 || d==361){
                return global.get('lang').val.day
            }else if((d>1 && d<5)||(d>21 && d<25)||(d>31 && d<35)||(d>41 && d<45)||(d>51 && d<55)||(d>61 && d<65) || (d>71 && d<75) || (d>81 && d<85) || (d>91 && d<95) || (d>101 && d<105)||(d>121 && d<125)||(d>131 && d<135)||(d>141 && d<145)||(d>151 && d<155)||(d>161 && d<165) || (d>171 && d<175) || (d>181 && d<185) || (d>191 && d<195)||(d>201 && d<205)||(d>221 && d<225)||(d>231 && d<235)||(d>241 && d<245)||(d>251 && d<255)||(d>261 && d<265) || (d>271 && d<275) || (d>281 && d<285) || (d>291 && d<295)||(d>301 && d<305)||(d>321 && d<325)||(d>331 && d<335)||(d>341 && d<345)||(d>351 && d<355)||(d>361 && d<365)){
                return global.get('lang').val.days
            }else if(d==0||(d>=5 && d<21)||(d>=25 && d<31)||(d>=35 && d<41)||(d>=45 && d<51)||(d>=65 && d<71)||(d>=75 && d<81)||(d>=85 && d<91)||(d>=95 && d<101)||(d>=105 && d<121)||(d>=125 && d<131)||(d>=135 && d<141)||(d>=145 && d<151)||(d>=165 && d<171)||(d>=175 && d<181)||(d>=185 && d<191)||(d>=195 && d<201)||(d>=205 && d<221)||(d>=225 && d<231)||(d>=235 && d<241)||(d>=245 && d<251)||(d>=265 && d<271)||(d>=275 && d<281)||(d>=285 && d<291)||(d>=295 && d<301)||(d>=305 && d<321)||(d>=325 && d<331)||(d>=335 && d<341)||(d>=345 && d<351)||(d>=365 && d<371)){
                return global.get('lang').val.dayss
            }
        }
        function gethumanizeHour(h){
            if(h==1 || h==21){
                return global.get('lang').val.hour}
            else if((h>1&&h<5)||(h>21 && h<25)){
                return global.get('lang').val.hours
            }else if(h==0 ||h<21){
                return global.get('lang').val.hourss
            }
        }
        function gethumanizeMin(h){
            if(h==1 || h==21|| h==31|| h==41|| h==51){
                return global.get('lang').val.minute_a}
            else if((h>1&&h<5)||(h>21 && h<25)||(h>31 && h<35)||(h>41 && h<45)||(h>51 && h<55)){
                return global.get('lang').val.minutes
            }else if(h==0||h<21 || (h>24 && h<31)|| (h>34 && h<41)|| (h>44 && h<51)|| (h>54 && h<61)){
                return global.get('lang').val.minutess }
        }
        function gethumanizeSec(h){
            if(h==1 || h==21|| h==31|| h==41|| h==51){
                return global.get('lang').val.second}
            else if((h>1&&h<5)||(h>21 && h<25)||(h>31 && h<35)||(h>41 && h<45)||(h>51 && h<55)){
                return global.get('lang').val.seconds
            }else if(h==0||h<21 || (h>24 && h<31)|| (h>34 && h<41)|| (h>44 && h<51)|| (h>54 && h<61)){
                return global.get('lang').val.secondss }
        }
    }
    itemCtrl.$inject=['Campaign','$stateParams','$state','$q','$uibModal','global','exception','Stuff','News','$window','FilterTags','BrandTags','Category','$timeout','$interval','$scope','Brands'];
    function itemCtrl(Campaign,$stateParams,$state,$q,$uibModal,global,exception,Stuff,News,$window,FilterTags,BrandTags,Category,$timeout,$interval,$scope,Brand){
        console.log('Campaign')
        var self = this;
        self.Items=Campaign;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.cartType='good'



        self.cartTypes=[{type:'good',name:'товар'},{type:'service',name:'услуга'},{type:'info',name:'инфо'},{type:'media',name:'медиа'}]
        self.saveField=saveField;
        self.createNews = createNews;
        self.selectFilterTag=selectFilterTag;
        self.selectBrandTag=selectBrandTag;
        self.selectBrand=selectBrand;
        self.selectCategory=selectCategory;
        self.selectStuff=selectStuff;
        self.selectConditionFilterTag=selectConditionFilterTag;
        self.selectConditionBrandTag=selectConditionBrandTag;
        self.selectConditionBrand=selectConditionBrand;
        self.selectConditionCategory=selectConditionCategory;
        self.selectConditionStuff=selectConditionStuff;
        self.deleteBrandTag=deleteBrandTag;
        self.deleteCategory=deleteCategory;
        self.deleteFilterTag=deleteFilterTag;
        self.deleteStuff=deleteStuff;
        self.deleteConditionBrandTag=deleteConditionBrandTag;
        self.deleteConditionBrand=deleteConditionBrand;
        self.deleteBrand=deleteBrand;
        self.deleteConditionCategory=deleteConditionCategory;
        self.deleteConditionFilterTag=deleteConditionFilterTag;
        self.deleteConditionStuff=deleteConditionStuff;
        self.onSelected=onSelected;
        self.showConditionInput=showConditionInput;
        self.dispalyCondition=dispalyCondition;

        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate()
        })

        //*******************************************************
        function activate() {
            return getItem($stateParams.id).then(function() {
                //console.log('Activated item View');
                self.campaignStuff='stuffs'

            } ).catch(function(err){
                exception.catcher('получение компании')(err)
            });
            if(global.get('tempContent') && global.get('tempContent').val){
                $('#tempContent').empty()
                global.set('tempContent',null)
            }
        }
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    /*if(data.condition!="percent" || data.condition!="sum"){
                        data.condition="percent"
                    }*/
                    //console.log(data)
                    self.showCondition={percent:false,sum:false};
                    self.showCondition[data.condition]=true;
                    self.item = data;
                    //return self.item;
                    //console.log(Math.round((Date.parse(self.item.dateEnd)-Date.now())/1000));
                    if(self.item.cartType){
                        self.cartType=self.item.cartType;
                    }
                    console.log(self.cartType)
                } ).catch(function(err){
                    return $q.reject(err)
                });
        }
        function saveField(field,defer){
            if(field=='dateStart'){

                 var d = new Date(self.item[field]);
                 d.setHours(0)
                 d.setMinutes(0)
                 d.setSeconds(1)
                self.item[field]=d;
                console.log(self.item[field])

            }else if(field=='dateEnd'){

                var d = new Date(self.item[field]);
                d.setHours(23)
                d.setMinutes(59)
                d.setSeconds(59)
                self.item[field]=d;
                console.log(self.item[field])
            }
            defer =defer||0
            setTimeout(function(){
                var o={_id:self.item._id};
                //console.log(field)
                if(field=='brandTags' || field=='categories' || field=='tags' || field=='brands' || field=='conditionBrandTags'
                    || field=='conditionCategories' || field=='conditionTags' || field=='conditionBrands'){
                    o[field]=self.item[field].map(function (b) {return b._id})
                }else{
                    o[field]=self.item[field]
                }
                self.Items.save({update:field},o,function () {
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                },function(err){
                    console.log(err)
                });
            },defer)
        };
        function createNews(){
            //var domain=global.get('store' ).val.domain||global.get('store' ).val.subDomain;
            var news={
                name:self.item.name,
                link:'/campaign/'+self.item.url,
                img:self.item.img,
                desc:self.item.desc,
                actived:false
            }
            $q.when()
                .then(function(){
                    return News.save(news).$promise;
                })
                .then(function(res){
                    $state.go('frame.news',{url:res.id});
                })
                .catch(function(err){
                    exception.catcher('создание новости')(err)
                })

        }
        function selectFilterTag(){
            $q.when()
                .then(function(){
                    return FilterTags.selectFilterTag();
                })
                .then(function(tag){
                    if(!self.item.tags){self.item.tags=[]}
                    //console.log(tag)
                    self.item.tags.push(tag)
                    saveField('tags');
                })
                .catch(function(err){
                    exception.catcher('выбор характеристики')(err)
                })
        }
        function selectBrandTag(){
            $q.when()
                .then(function(){
                    return BrandTags.selectBrandTag();
                })
                .then(function(tag){
                    //console.log(tag)
                    if(!self.item.brandTags){self.item.brandTags=[]}
                    self.item.brandTags.push(tag)
                    //console.log(tag)
                    saveField('brandTags');
                })
                .catch(function(err){
                    exception.catcher('выбор коллекции')(err)
                })
        }
        function selectBrand(){
            $q.when()
                .then(function(){
                    return Brand.select();
                })
                .then(function(tag){
                    if(!self.item.brands){self.item.brands=[]}
                    self.item.brands.push(tag)
                    //console.log(tag)
                    saveField('brands');

                })
                .catch(function(err){
                    exception.catcher('выбор коллекции')(err)
                })
        }
        function selectCategory(){
            $q.when()
                .then(function(){
                    return Category.selectWithSection();
                })
                .then(function(c){
                    //console.log(c)
                    if(!c){return}
                    if(!self.item.categories){self.item.categories=[]}
                    if(typeof c == 'object' && c.length){
                       c.forEach(function (cat) {
                           if(!self.item.categories.getOFA('_id',cat._id)){
                               self.item.categories.push(cat)
                           }
                       })
                    }else{
                        if(!self.item.categories.getOFA('_id',c._id)){
                            self.item.categories.push(c)
                        }
                    }
                    saveField('categories');
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('выбор категории')(err)
                    }
                })
        }

        function selectStuff(){
            $q.when()
                .then(function(){
                    return Stuff.selectItem({actived:true});
                })
                .then(function(stuff){
                    if(!self.item.stuffs){self.item.stuffs=[]}
                    self.item.stuffs.push(stuff)
                    saveField('stuffs');

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('выбор товара')(err)
                    }

                })
        }
        function selectConditionFilterTag(){
            $q.when()
                .then(function(){
                    return FilterTags.selectFilterTag();
                })
                .then(function(tag){
                    if(!self.item.conditionTags){self.item.conditionTags=[]}
                    self.item.conditionTags.push(tag)
                    saveField('conditionTags');
                })
                .catch(function(err){
                    exception.catcher('выбор характеристики')(err)
                })
        }
        function selectConditionBrandTag(){
            $q.when()
                .then(function(){
                    return BrandTags.selectBrandTag();
                })
                .then(function(tag){
                    if(!self.item.conditionBrandTags){self.item.conditionBrandTags=[]}
                    self.item.conditionBrandTags.push(tag)
                    saveField('conditionBrandTags');
                })
                .catch(function(err){
                    exception.catcher('выбор коллекции')(err)
                })
        }
        function selectConditionBrand(){
            $q.when()
                .then(function(){
                    return Brand.select();
                })
                .then(function(tag){
                    if(!self.item.conditionBrands){self.item.conditionBrands=[]}
                    self.item.conditionBrands.push(tag)
                    saveField('conditionBrands');
                })
                .catch(function(err){
                    exception.catcher('выбор коллекции')(err)
                })
        }
        function selectConditionCategory(){
            $q.when()
                .then(function(){
                    return Category.selectWithSection();
                })
                .then(function(c){
                    if(!c){return}
                    if(!self.item.conditionCategories){self.item.conditionCategories=[]}

                    if(typeof c == 'object' && c.length){
                        c.forEach(function (cat) {
                            if(!self.item.conditionCategories.getOFA('_id',cat._id)){
                                self.item.conditionCategories.push(cat)
                            }
                        })
                    }else{
                        if(!self.item.conditionCategories.getOFA('_id',c._id)){
                            self.item.conditionCategories.push(c)
                        }
                    }
                    saveField('conditionCategories');
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('выбор категории')(err)
                    }
                })
        }
        function selectConditionStuff(){
            $q.when()
                .then(function(){
                    return Stuff.selectItem();
                })
                .then(function(stuff){
                    if(!self.item.conditionStuffs){self.item.conditionStuffs=[]}
                    self.item.conditionStuffs.push(stuff)
                    saveField('conditionStuffs');

                })
                .catch(function(err){
                    exception.catcher('выбор товара')(err)
                })
        }
        function deleteBrandTag(i){
            self.item.brandTags.splice(i,1);
            saveField('brandTags');
        }
        function deleteBrand(i){
            self.item.brands.splice(i,1);
            saveField('brands');
        }
        function deleteCategory(i){
            self.item.categories.splice(i,1);
            saveField('categories');
        }
        function deleteFilterTag(i){
            self.item.tags.splice(i,1);
            saveField('tags');
        }
        function deleteStuff(i){
            self.item.stuffs.splice(i,1);
            saveField('stuffs');
        }
        function deleteConditionBrandTag(i){
            self.item.conditionBrandTags.splice(i,1);
            saveField('conditionBrandTags');
        }
        function deleteConditionBrand(i){
            self.item.conditionBrands.splice(i,1);
            saveField('conditionBrands');
        }
        function deleteConditionCategory(i){
            self.item.conditionCategories.splice(i,1);
            saveField('conditionCategories');
        }
        function deleteConditionFilterTag(i){
            self.item.conditionTags.splice(i,1);
            saveField('conditionTags');
        }
        function deleteConditionStuff(i){
            self.item.conditionStuffs.splice(i,1);
            saveField('conditionStuffs');
        }
        function onSelected(){
            setTimeout(function(){
                $(':focus').blur();
            },50)
        }
        function showConditionInput(val){
            for(var key in self.showCondition){
                if(key==val){
                    $timeout(function(){
                        self.showCondition[val]=true;
                    },530)
                }else{
                    self.showCondition[key]=false;
                }
            }
        }
        function dispalyCondition(){
            if(!self.item){return;}
            if((self.item.conditionTags&& self.item.conditionTags.length)
                || (self.item.conditionBrandTags && self.item.conditionBrandTags.length)
                ||  (self.item.conditionStuffs && self.item.conditionStuffs.length)
                ||  (self.item.conditionCategories && self.item.conditionCategories.length)){
                return true;
            }
        }

    }
    //=====================campaignItemTemplateDirective
    function campaignItemTemplateDirective(global){
        var s=(global.get('store').val.template.campaignTempl)?global.get('store').val.template.campaignTempl:'';
        return {
            scope: {},
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/campaign/campaignDetail'+s+'.html',
            restrict:'E'
        }
    }
})()

'use strict';
(function(){
angular.module('gmall.directives')
.directive('staticPage',staticPageDirective)
.directive('staticPageTemplate',staticPageTemplateDirective)

    function staticPageDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: staticPageCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/staticPage/staticPage.html',
        }
    }
    /*function staticPageTemplateDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: staticPageCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/stat/staticPage.html',
        }
    }*/
    function staticPageTemplateDirective($stateParams){
        return {
            //template:"<div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$scope','$element','$compile','$http','$stateParams','global',function ($scope,$element,$compile,$http,$stateParams,global) {
                var self=this;
                $http.get('views/template/partials/Stat/itemPage/'+$stateParams.id).then(function(response){
                    //console.log(response)
                    self.content=response.data.html;
                    //$element.html(response.data.html)

                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                    $element.append(content);
                    //console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
        }
    }
    staticPageCtrl.$inject=['Stat','$stateParams','global','Photo','$q','$uibModal','Stuff','FilterTags','BrandTags','Brands','Campaign','Category','$timeout','$scope','Confirm','SetCSS']
    function staticPageCtrl(Stat,$stateParams,global,Photo,$q,$uibModal,Stuff,FilterTags,BrandTags,Brands,Campaign,Category,$timeout,$scope,Confirm,SetCSS){
        var self = this;
        self.Items=Stat;
        self.type='Stat'
        self.global=global;
        self.listOfBlocksForStaticPage=listOfBlocksForAll;
        self.listOfBlocks=listOfBlocksForAll;
        self.animationTypes=animationTypes;
        self.setStyles=setStyles;
        self.saveField=saveField;
        self.newBlock=null;
        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        //self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        self.filterBlocks=filterBlocks;

        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;

        activate()

        function activate(){
            Stat.get({_id:$stateParams.id}).$promise.then(function(res){
                //console.log(res)
                if(res && !res.blocks){
                    res.blocks=[];
                    saveField('blocks',[])
                }
                var bl=res.blocks.filter(function (b) {
                    return b
                })
                if(bl.length!=res.blocks.length){
                    saveField('blocks',bl)
                    res.blocks=bl;
                }
                console.log(res.blocks)
                res.blocks.forEach(function (b,i) {
                    if(b){
                        b.i=i;
                    }

                })
                res.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item=res
            })
        }

        $scope.$on('changeLang',function(){
            activate();
        })






        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField('blocks.'+block.i,block)
                })
        }

        function saveField(field,value,defer,indexImgs){
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }
            var defer =100
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };

        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function addBlock(type){
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;

            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            if(type=='slider'){
                o.imgs=[];
                update.update+=' imgs'
            }
            if(type=='stuffs' || type=="campaign" || type=="filterTags"|| type=="brandTags"|| type=="brands"|| type=="categories"){
                o.imgs=[];
                update.update+=' imgs'
            }

            //console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    activate()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            //console.log(block,index)
            var o={_id:self.item._id};
            o['id']=block.id;
            var update={update:'id',embeddedName:'blocks'};
            update.embeddedPull=true;

            console.log(update,o)
            //return;
            Confirm('подтверждаете?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    self.item.blocks.splice(index,1)
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })
                .then(function () {
                    activate()
                })



        }
        function deleteSlide(block,index){
            Photo.deleteFiles('Stat',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/staticPage/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        var keyParts=global.get('store').val.template.stat.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        // collections
        function addItemInBlock(block,$index) {
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link,url=item.url;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link,url:url};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link,url:url})
                    }
                    
                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    //saveField('blocks.'+block.i,block)
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }


    }
})()
'use strict';
(function(){
    angular.module('gmall.services')
        .service('Coupon', serviceFunction);
    serviceFunction.$inject=['$resource','$uibModal','$q'];
    function serviceFunction($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Coupon/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            console.log(id)
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/PROMO/coupon/createCoupon.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('papsItem',itemDirective)
        .directive('papsItemTemplate',itemDirectiveTemplate);


    function itemDirectiveTemplate(global){
        //var s=(global.get('store').val.template.paps)?global.get('store').val.template.paps:'';
        return {
            scope: {},
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/paps/paps.html',
            restrict:'E'
        }
    }
    function itemDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/paps/papsItem.html',
        }
    }
    itemCtrl.$inject=['Paps','$stateParams','$q','$uibModal','exception','global','$timeout','$scope','$anchorScroll'];
    function itemCtrl(Paps,$stateParams,$q,$uibModal,exception,global,$timeout,$scope,$anchorScroll){
        var self = this;
        self.Items=Paps;
        self.mobile=global.get('mobile' ).val;
        self.saveField=saveField;

        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate()
        })
        //*******************************************************
        function activate() {
            $anchorScroll()
            return getItem($stateParams.id).then(function() {
               /* console.log(id)
                console.log(ga)*/
            }).catch(function(err){
                err = err.data||err
                exception.catcher('получение post action page')(err)
            });
        }
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    self.item = data;
                    return self.item;
                } ).catch(function(err){
                    return $q.reject(err)
                });
        }
        function saveField(field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=self.item[field]
                self.Items.save({update:field},o,function(){
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                });
            },defer)
        };


    }
})()
'use strict';
(function(){
    
    angular.module('gmall.services')
        .service('Online', serviceFoo)
        .service('Booking', serviceBooking)
        .directive('reminderOnline',function () {
            return {
                templateUrl: 'components/ORDERS/online/reminderOnline.html',
            }
        })


    serviceBooking.$inject=['$resource','$uibModal','$q','global','$http','exception'];
    function serviceBooking($resource,$uibModal,$q,global,$http,exception){
        var Items= $resource('/api/collections/Booking/:_id',{_id:'@_id'});
        var timeRemindArr=timeRemindArrLang.map(function (el) {
            return {time:el[global.get('store').val.lang],part:el.part}
        })

        var timeDurationdArr=timeDurationArrLang.map(function (el) {
            return {time:el[global.get('store').val.lang],part:el.part}
        })
        //console.log(timeDurationdArr)

            /*[{time:'полчаса',part:2},
            {time:'час',part:4},
            {time:'два часа',part:8},
            {time:'три часа',part:12}]*/
        var startTimeParts=36;
        var endTimeParts=72;
        var timeParts=[];
        for(var i=0;i<96;i++){timeParts.push({busy:false,i:i})};
        var timeTable=['00:00','01:00','02:00','03:00','04:00','05:00','06:00','07:00','08:00','09:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00','22:00','23:00']
        var timeTable15min=[
            '00:00','00:15','00:30','00:45',
            '01:00','01:15','01:30','01:45',
            '02:00','02:15','02:30','02:45',
            '03:00','03:15','03:30','03:45',
            '04:00','04:15','04:30','04:45',
            '05:00','05:15','05:30','05:45',
            '06:00','06:15','06:30','06:45',
            '07:00','07:15','07:30','07:45',
            '08:00','08:15','08:30','08:45',
            '09:00','09:15','09:30','09:45',
            '10:00','10:15','10:30','10:45',
            '11:00','11:15','11:30','11:45',
            '12:00','12:15','12:30','12:45',
            '13:00','13:15','13:30','13:45',
            '14:00','14:15','14:30','14:45',
            '15:00','15:15','15:30','15:45',
            '16:00','16:15','16:30','16:45',
            '17:00','17:15','17:30','17:45',
            '18:00','18:15','18:30','18:45',
            '19:00','19:15','19:30','19:45',
            '20:00','20:15','20:30','20:45',
            '21:00','21:15','21:30','21:45',
            '22:00','22:15','22:30','22:45',
            '23:00','23:15','23:30','23:45',
        ]
        var paginate={page:0,rows:500,totalItems:0};

        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            timeTable:timeTable,
            timeTable15min:timeTable15min,
            timeParts:timeParts,
            startTimeParts:startTimeParts,
            endTimeParts:endTimeParts,
            newBooking:newBooking,
            editBooking:editBooking,
            filterListServices:filterListServices,
            timeRemindArr:timeRemindArr,
            getDayOfYear:getDayOfYear,// порядковый номер дня в году
            getDaysOfMonth:getDaysOfMonth,// количество дней в месяце\
            sendMessage:sendMessage,// отправка данных о записи клиенту
            getDateStringFromEntry:getDateStringFromEntry,//
            getDateFromEntry:getDateFromEntry,//
            getDateFromStrDateEntry:getDateFromStrDateEntry,
            getDatesForWeek:getDatesForWeek,//
            selectService:selectService,
            getCheckOutLiqpayHtml:getCheckOutLiqpayHtml,
            getUsedTime:getUsedTime,
            getBookingWeek:getBookingWeek,
            getBookingWeekScheldule:getBookingWeekScheldule,
            getWeeksRange:getWeeksRange,
            scheduleTransfer:scheduleTransfer

        }
        function getCheckOutLiqpayHtml(entryM,user) {
            //console.log(order)
            var entry=angular.copy(entryM);
            if(user){entry.user=user}
            return $q.when()
                .then(function () {
                    return $http.post('/api/orders/checkoutLiqpayEntry',entry)
                })
                .then(function (res) {
                    //console.log(res)
                    if(!res || !res.data.html){
                        return;
                    }
                    entryM.checkOutLiqpayHtml=res.data.html
                    entryM.checkOutLiqpayHtmlIs=true;
                    //console.log(entry)
                })
                .then(function(res){
                })
                .catch(function(err){
                    exception.catcher('error')(err);
                })
        }
        function getDatesForWeek(date,num) {
            if(!num){num=7}
            var ds=[];
            var d= new Date(date)
            var dw = date.getDay()
            if(dw==0){dw=7}
            for(var i=1;i<=num;i++){
                d= new Date(date)
                d.setTime(d.getTime() + (i-dw)*86400000);
                d.setHours(0)
                var month = d.getMonth()// + 1; //months from 1-12
                var day = d.getDate();
                var year = d.getFullYear();
                var dayOfYear=getDayOfYear(month,day-1)
                if(month<10){month='0'+month}
                if(day<10){day='0'+day}
                var o={
                    date:'date'+year+month+day,
                    d:d,
                    dayOfYear:dayOfYear,
                    month:moment(d).format('MMMM')
                }
                ds.push(o)
            }
            return ds;
        }
        function getDateFromEntry(entry) {
            var hour = Math.floor(entry.start/4)
            var minutes = (entry.start%4)*15
            var year = entry.date.substring(4,8)
            var month = entry.date.substring(8,10)
            var day = entry.date.substring(10)
            //console.log(entry.date,year,month,day,hour,minutes)
            try{
                var date = new Date(year,month,day,hour,minutes)
                return date;
            }catch(err){console.log(err);return 'error handle date'}
        }

        function getDateFromStrDateEntry(str) {
            var year =str.substring(4,8)
            var month = str.substring(8,10)
            var day = str.substring(10)
            //console.log(entry.date,year,month,day,hour,minutes)
            try{
                var date = new Date(year,month,day)
                return date;
            }catch(err){console.log(err);return 'error handle date'}
        }
        function getDateStringFromEntry(entry,format) {
            var hour = Math.floor(entry.start/4)
            var minutes = (entry.start%4)*15
            var year = entry.date.substring(4,8)
            var month = entry.date.substring(8,10)
            var day = entry.date.substring(10)
            //console.log(entry.date,year,month,day,hour,minutes)
            try{
                if(format){
                    var date = new Date(year,month,day)
                }else{
                    var date = new Date(year,month,day,hour,minutes)
                    date= moment(date).format('LLL')
                }
                return date;
            }catch(err){console.log(err);return 'error handle date'}
        }
        function sendMessage(entry,user) {
            entry=JSON.parse(JSON.stringify(entry))
            if(user){entry.user=user;}
            var dataForSend={}

            var hour = Math.floor(entry.start/4)
            var minutes = (entry.start%4)*15
            var year = entry.date.substring(4,8)
            var month = entry.date.substring(8,10)
            var day = entry.date.substring(10)
            try{
                var date = new Date(year,month,day,hour,minutes)
                date= moment(date).format('lll')
                dataForSend.name=entry.user.name
                dataForSend.userId=entry.user._id
                dataForSend.phone=entry.user.phone
                dataForSend.text=global.get('langOrder').val.recordedOn+' '+entry.service.name.toUpperCase()+' '+global.get('langOrder').val.onn+' '+date;
                dataForSend.date=date;
            }catch(err){console.log(err)}
            console.log(dataForSend)
            if(dataForSend && dataForSend.date){
                $q.when()
                    .then(function () {
                        return $http.post('/api/users/sendMessageAboutDeal',dataForSend)
                    })
                    .catch(function (err) {
                        if(err){
                            exception.catcher('send message')(err)
                        }
                    })
            }

        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
            //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
            //.catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function newBooking(master,timePart,services,date,entryDate,start,workplaces){

            //console.log(services)
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    size:'lg',
                    templateUrl: 'components/ORDERS/online/newBooking.html',
                    controller: function ($uibModalInstance,global,$timeout,$user,exception,master,timePart,services,Booking,entryDate,start,workplaces){
                        //console.log(services)
                        var self=this;
                        self.global=global;
                        self.workplaces=workplaces;
                        //console.log(global.get('store').val.nameLists)
                        self.date=moment(date).format('L');
                        self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
                        self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';

                        self.hour=parseInt(timePart/4);
                        self.minutes=((timePart-self.hour*4)*15)?(timePart-self.hour*4)*15:'00';
                        self.timeRemindArr=timeRemindArr;
                        self.schedule=true;
                        self.mastersInEntry=[];
                        //console.log(timePart,self.hour,self.minutes)
                        master.services.forEach(function(s){
                            s.used=false;
                            s.duration = s.timePart*15
                            //console.log(s)
                        })
                        //console.log(master.services)
                        self.userName='';
                        self.master=master;
                        self.oldPhone='';
                        self.services=(services.length)?services:[];
                        //console.log(self.services);
                        self.entriesToMove=null;
                        self.entryToMove=null;

                        var pattern = /[^0-9]*/g;


                        if(global.get('store').val.seller && global.get('store').val.seller.minDurationForService && Number(global.get('store').val.seller.minDurationForService/15)){
                            var delta = Number(global.get('store').val.seller.minDurationForService/15);
                            if(delta==1){
                                delta=0;
                                console.log(delta)
                            }
                            self.timeDurationdArr=timeDurationdArr.filter(function (p) {
                                return !(p.part%delta)
                            })

                        }else{
                            self.timeDurationdArr=timeDurationdArr;
                        }

                        //self.selectUser=selectUser;
                        self.searchUser = searchUser;
                        self.clearUser=clearUser;
                        self.allFieldCheck=allFieldCheck;
                        self.addUser=addUser;
                        self.checkNameNewUser=checkNameNewUser;
                        self.refreshUsers=refreshUsers;
                        self.moveEtry=moveEtry;
                        self.addingNewUser=addingNewUser;

                        function addingNewUser() {
                            self.addingUser=!self.addingUser;
                            if(self.addingUser){
                                if(self.cachePhone){
                                    var newVal = self.cachePhone.replace(pattern, '')
                                    console.log(newVal)
                                    console.log(newVal.length==self.cachePhone.length)
                                    if(newVal.length==self.cachePhone.length){
                                        var tempPhone=self.cachePhone.substring(0,10);
                                        for(var i=tempPhone.length;i<10;i++){
                                            tempPhone+='0'
                                        }
                                        self.oldPhone=tempPhone;
                                    }else{
                                        self.userName=self.cachePhone;
                                    }
                                }
                            }
                        }

                        function refreshUsers(phone){
                            if (phone.length<3){return}
                            //var newVal = phone.replace(pattern, '').substring(0,10);
                            self.cachePhone=phone
                            //if(self.oldPhone==phone){return}else{self.oldPhone=phone}
                            searchUser(phone)
                        }
                        function searchUser(phone){
                            var q= {$or:[{'profile.phone':phone},{name:phone},{email:phone}]}
                            $user.getList({page:0,rows:20},q).then(function(res){
                                self.users=res.map(function (user) {
                                    if(user.profile && user.profile.phone && user.profile.phone[0]=="+"){
                                        user.profile.phone=user.profile.phone.substring(1)
                                    }
                                    if(user.profile && user.profile.phone && user.profile.phone.length<10){
                                        while(user.profile.phone.length<10){
                                            user.profile.phone+='0'
                                        }
                                    }
                                    if(user.profile && user.profile.phone && user.profile.phone.length==10){
                                        user.profile.phone='38'+user.profile.phone
                                    }
                                    user.phone=(user.profile)?user.profile.phone:null;
                                    return user
                                });
                            })
                        }

                        function clearUser(){
                            self.user=null;
                        }
                        function addUser(){
                            console.log('add user')
                            var user={
                                name:self.userName,
                                //email:self.userEmail,
                                profile:{
                                    phone:self.phoneCode.substring(1)+self.oldPhone.substring(0,10),
                                    fio:self.userName
                                },
                                store:global.get('store').val._id
                            }
                            return $q.when()
                                .then(function () {
                                    return $user.checkPhoneForExist(user.profile.phone)
                                })
                                .then(function (res) {
                                    if(res && res.exist){
                                        throw 'phone exist in base'
                                    }
                                    if(user.email){
                                        return $user.checkEmailForExist(user.email)
                                    }else{
                                        user.email=user.profile.phone+'@gmall.io'
                                    }
                                })
                                .then(function (res) {
                                    if(res && res.exist){
                                        throw 'email exist in base'
                                    }
                                })
                                .then(function(){
                                    return $user.save(user).$promise
                                })
                                .then(function(res){
                                    user._id=(res._id)?res._id:res.id;
                                    self.addingUser=false;
                                    self.userName='';
                                    self.user=user;
                                    console.log(user)
                                    self.oldPhone=''
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('новый клиент')(err)
                                    }
                                })
                        }
                        function allFieldCheck() {
                            var data =(!self.services.length && !self.reserved)|| (!self.user && !self.schedule && !self.reserved)
                            return data
                        }
                        function checkNameNewUser(){
                            //console.log(!self.userName || self.userName.length<3)
                            return (!self.userName || self.userName.length<3)
                        }
                        function moveEtry() {
                            //console.log(self.entryToMove);
                            // продолжителькость записи проверить qty
                            //console.log(master)
                            //console.log(start)
                            var busy=false;
                            for(var i=start;i<start+self.entryToMove.qty;i++){
                                if(master.entryTimeTable[i].busy || master.entryTimeTable[i].out){
                                    busy=true;
                                    break
                                }
                            }
                            //console.log(busy)
                            if(busy){
                                $uibModalInstance.dismiss('не достаточно времени');
                                return;
/*

                                exception.catcher('перенос записи')('не достаточно времени')
                                self.entryToMove=null;
                                return;*/
                            }
                            var o ={_id:self.entryToMove._id}
                            o.date=entryDate;
                            o.start=start;
                            o.move=false;
                            var update='start move date'
                            //console.log(o)
                            Booking.save({update:update},o,function(err){
                                global.set('saving',true);
                                $timeout(function(){
                                    global.set('saving',false);
                                },1500)
                            })
                            $uibModalInstance.close();

                        }

                        actived()
                        self.ok=function(){
                            //console.log(self.user)
                            //console.log(self.schedule)
                            var item={
                                remind:self.remind,
                                timeRemind:self.timeRemind,
                                schedule:self.schedule,
                                setColor:self.setColor
                            }
                            if(self.services.length){
                                item.services=self.services
                            }else if(self.reserved){
                                item.services=[{
                                    _id:'reserved',
                                    name:'reserved',
                                    timePart:self.reserved
                                }]
                            }else{
                                return;
                            }
                            if(self.user && self.user._id){
                                item.user={
                                    _id:self.user._id,
                                        name:self.user.name,
                                        email:self.user.email
                                }
                                if(self.user.profile && self.user.profile.phone){
                                    item.user.phone=self.user.profile.phone;
                                }
                                /*console.log(item.user)
                                return;*/

                            }else if(self.schedule){
                                item.user={
                                    _id:'schedule',
                                    name:'schedule',
                                }
                            }else if(self.reserved){
                                item.user={
                                    _id:'reserved',
                                    name:'reserved',
                                }
                            }
                            if(self.mastersInEntry.length){
                                item.masters=self.mastersInEntry;
                            }


                            if(self.workplace){
                                item.workplace=self.workplace;
                            }

                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        function actived() {
                            var query={query:{master:master._id,move:true}}
                            Booking.query(query,function (res) {
                                //console.log(res)
                                if(res && res.length){
                                    res.shift();
                                    self.entriesToMove=res.map(function (e) {
                                        e.name=e.service.name+' '+Booking.getDateStringFromEntry(e);
                                        return e;
                                    })
                                }
                            })
                            self.masters=global.get('masters').val.filter(function (m) {
                                return m._id!=master._id
                            })

                            //console.log(self.masters)
                        }
                    },
                    controllerAs:'$ctrl',
                    resolve:{
                        master:function(){return master},
                        timePart:function(){return timePart},
                        services:function(){return services},
                        entryDate:function(){return entryDate},
                        start:function(){return start},
                        workplaces:function () {
                            return workplaces;
                        }

                    }
                });
                modalInstance.result.then(
                    function (item) {resolve(item)},
                    function (err) {reject(err)}
                );
            })

        }
        function editBooking(entry,masters,workplaces){
            //console.log(workplaces)
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    size:'lg',
                    templateUrl: 'components/ORDERS/online/editBooking.html',
                    controller: function (global,$uibModalInstance,$user,Booking,$timeout,UserEntry,exception,entry,masters,Confirm,workplaces){
                        //console.log(entry)
                        var self=this;
                        self.master=masters[entry.master];
                        self.global=global;
                        self.moment=moment;
                        self.entry=entry;
                        self.workplaces=workplaces;
                        console.log(self.workplaces)
                        var currentDate=Booking.getDateStringFromEntry(entry,true)
                        self.dateEntry=moment(currentDate).format('LL')+','+moment(currentDate).format('dddd');
                        var oldEntry=angular.copy(entry)
                        self.qty=oldEntry.qty
                        self.remind=entry.remind;
                        self.timeRemind=entry.timeRemind;
                        self.hour=parseInt(entry.start/4);
                        self.minutes=(entry.start-self.hour*4)*15;
                        self.timeRemindArr=timeRemindArr;


                        var delta=0;
                        if(global.get('store').val.seller && global.get('store').val.seller.minDurationForService && Number(global.get('store').val.seller.minDurationForService/15)){
                            var delta = Number(global.get('store').val.seller.minDurationForService/15);
                            if(delta==1){
                                delta=0;
                                console.log(delta)
                            }
                            self.timeDurationdArr=timeDurationdArr.filter(function (p) {
                                return !(p.part%delta)
                            })

                        }else{
                            self.timeDurationdArr=timeDurationdArr;
                        }

                        self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
                        self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';
                        var update='';

                        self.updateUser=updateUser;
                        self.recordAgreed=recordAgreed;
                        self.saveField=saveField;
                        self.changeDuration=changeDuration;
                        self.changeStartPart=changeStartPart;
                        self.moveEntry=moveEntry;
                        self.timeParts=_setTimeParts()
                        self.changeTimeFilter=changeTimeFilter;
                        self.addNewUser=addNewUser;
                        self.refreshUsers=refreshUsers;
                        self.deleteUser=deleteUser;
                        self.addUser=addUser;
                        self.changeService=changeService;
                        self.changeWorkplace=changeWorkplace;




                        //console.log(self.timeParts)
                        self.startPart=oldEntry.start;




                        actived()

                        function _setTimeParts(){
                            return timeTable15min.map(function (t,i) {
                                var busy = false;
                                if(self.master.entryTimeTable[i].out){
                                    busy =true;
                                }else if(self.master.entryTimeTable[i].busy && self.master.entryTimeTable[i].entry._id!=self.entry._id){
                                    busy =true;
                                }else{
                                    for(var j=i+1;j<i+self.qty;j++){
                                        if(!self.master.entryTimeTable[j] || self.master.entryTimeTable[j].out || (self.master.entryTimeTable[j].busy && self.master.entryTimeTable[j].entry._id!=self.entry._id)){
                                            busy =true;
                                        }
                                    }

                                }
                                return {part:i,time:t,busy:busy}
                            })
                        }
                        function addNewUser(user) {
                            if(user){
                                self.newUser=user;
                            }
                            //console.log(self.newUser)
                            if(self.entry.users && self.entry.users.length && self.entry.users.some(function (u) {
                                   return u._id==self.newUser._id
                                })){return}
                            var o={_id:self.newUser._id,
                                phone:self.newUser.phone,
                                name:self.newUser.name,
                                email:self.newUser.email
                            }
                            self.entry.users.push(o);
                            saveField('users')
                        }
                        function deleteUser(i) {
                            Confirm("удалить?" )
                                .then(function(){
                                    self.entry.users.splice(i,1);
                                    saveField('users')
                                } )

                        }
                        function refreshUsers(phone){
                            if (phone.length<3){return}
                            //var newVal = phone.replace(pattern, '').substring(0,10);
                            self.cachePhone=phone
                            //if(self.oldPhone==phone){return}else{self.oldPhone=phone}
                            searchUser(phone)
                        }
                        function searchUser(phone){
                            var q= {$or:[{'profile.phone':phone},{name:phone},{email:phone}]}
                            $user.getList({page:0,rows:20},q).then(function(res){
                                self.users=res.map(function (user) {
                                    if(user.profile && user.profile.phone && user.profile.phone[0]=="+"){
                                        user.profile.phone=user.profile.phone.substring(1)
                                    }
                                    if(user.profile && user.profile.phone && user.profile.phone.length<10){
                                        while(user.profile.phone.length<10){
                                            user.profile.phone+='0'
                                        }
                                    }
                                    if(user.profile && user.profile.phone && user.profile.phone.length==10){
                                        user.profile.phone='38'+user.profile.phone
                                    }
                                    user.phone=(user.profile)?user.profile.phone:null;
                                    return user
                                });
                            })
                        }

                        function addUser(){
                            //console.log('add user')
                            var user={
                                name:self.userName,
                                //email:self.userEmail,
                                profile:{
                                    phone:self.phoneCode.substring(1)+self.oldPhone.substring(0,10),
                                    fio:self.userName
                                },
                                store:global.get('store').val._id
                            }
                            return $q.when()
                                .then(function () {
                                    return $user.checkPhoneForExist(user.profile.phone)
                                })
                                .then(function (res) {
                                    if(res && res.exist){
                                        throw 'phone exist in base'
                                    }
                                    if(user.email){
                                        return $user.checkEmailForExist(user.email)
                                    }else{
                                        user.email=user.profile.phone+'@gmall.io'
                                    }
                                })
                                .then(function (res) {
                                    if(res && res.exist){
                                        throw 'email exist in base'
                                    }
                                })
                                .then(function(){
                                    return $user.save(user).$promise
                                })
                                .then(function(res){
                                    user._id=(res._id)?res._id:res.id;
                                    self.user={
                                        _id:user._id,
                                        name: user.name,
                                        email:user.email,
                                        phone:user.profile.phone
                                    }
                                    addNewUser(self.user)
                                    //console.log(user)

                                    self.addingUser=false;
                                    self.userName='';
                                    self.oldPhone=''
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('новый клиент')(err)
                                    }
                                })
                        }

                        function actived(){
                           // console.log(self.entry)
                            self.user=Object.assign({},entry.user);
                            if(self.user.phone){
                                self.splitPoint = self.user.phone.length-10;
                                self.phoneCode='+'+self.user.phone.substring(0,self.splitPoint)
                                self.user.phone=self.user.phone.substring(self.splitPoint)
                            }
                            self.mastersAdditional=global.get('masters').val.filter(function (m) {
                                return m._id!=self.entry.master._id
                            })

                            //console.log(self.mastersAdditional)
                        }
                        function updateUser() {
                            self.editingUser=false;
                            /*var  {phone,name,email}=self.user;
                             console.log(phone,name,email)*/
                            var o={_id:entry.user._id};
                            o['profile.phone']=self.phoneCode.substring(1)+self.user.phone;
                            o['profile.fio']=self.user.name;
                            o.email=self.user.email;
                            update='profile.phone profile.fio email';

                            return $q.when()
                                .then(function () {
                                    if(o['profile.phone']){
                                        return $user.checkPhoneForExist(o['profile.phone'],entry.user._id)
                                    }else{
                                        throw 'phone is empty'
                                    }

                                })
                                .then(function (res) {
                                    if(res && res.exist){
                                        throw 'phone exist in base'
                                    }
                                    if(o.email){
                                        return $user.checkEmailForExist(o.email,entry.user._id)
                                    }else{
                                        o.email=o['profile.phone']+'@gmall.io'
                                    }
                                })
                                .then(function (res) {
                                    if(res && res.exist){
                                        throw 'email exist in base'
                                    }
                                })
                                .then(function(){
                                    return $user.save({update:update},o).$promise
                                })
                                .then(function () {
                                    entry.user=self.user;
                                    entry.user.phone=o['profile.phone'];
                                    saveField('user')
                                    /*console.log(entry.user)
                                    console.log(self.user)
                                    console.log(o)*/
                                    //actived()
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('обновление данных')(err)
                                    }
                                })
                            return;


                            if(!entry.user.phone || '+'+entry.user.phone.substring(0,self.splitPoint)!=self.phoneCode){
                                update='phone';
                            }else if(!entry.user.phone || entry.user.phone.substring(self.splitPoint)!=self.user.phone){
                                update='phone'
                            }
                            if(entry.user.name!=self.user.name){
                                update+=(update)?' name':'name';
                            }
                            if(entry.user.email!=self.user.email){
                                update+=(update)?' email':'email';
                            }
                            UserEntry.save({update:update},o,function(){
                                entry.user=o;
                                actived()
                            })
                            update='user';
                        }
                        var delay;
                        function recordAgreed(user) {
                            if(delay){return}
                            delay=true;
                            $timeout(function () {
                               delay=false
                            },2000)
                            entry.confirm=Date.now()
                            saveField('confirm')
                            Booking.sendMessage(entry,user)
                        }
                        function saveField(field) {
                            var o ={_id:entry._id}
                            o[field]=entry[field]
                            //console.log(o)
                            Booking.save({update:field},o,function(err){
                                global.set('saving',true);
                                $timeout(function(){
                                    global.set('saving',false);
                                },1500)
                            })
                        }
                        function changeDuration() {
                            //console.log(self.entry,self.master)
                            var delta = self.qty-self.entry.qty;
                            if(delta<0){
                                for(var i = self.entry.start+self.qty;i<self.entry.start+self.entry.qty;i++){
                                    self.master.entryTimeTable[i].busy=false
                                    delete self.master.entryTimeTable[i].entry
                                    delete self.master.entryTimeTable[i].noBorder
                                    console.log(i)
                                }
                                self.entry.qty=self.qty
                                oldEntry.qty=self.qty
                                saveField('qty')
                                self.timeParts=_setTimeParts()
                            }else{
                                var start = self.entry.start+self.entry.qty
                                var busy=false;
                                for(var i =start;i<start+delta;i++){
                                    if(!self.master.entryTimeTable[i] || self.master.entryTimeTable[i].busy || self.master.entryTimeTable[i].out){
                                        busy=true;
                                        break;
                                    }
                                }
                                if(!busy){
                                    console.log(start,start+delta)
                                    if(self.master.entryTimeTable[start-1]){
                                        self.master.entryTimeTable[start-1].noBorder=true;
                                    }
                                    for(var i =start;i<start+delta;i++){
                                        console.log(i)
                                        self.master.entryTimeTable[i].busy=true;
                                        self.master.entryTimeTable[i].entry=self.entry
                                        if(i<start+delta-1){
                                            self.master.entryTimeTable[i].noBorder=true;
                                        }else{
                                            self.master.entryTimeTable[i].noBorder=false;
                                        }
                                    }
                                    self.entry.qty=self.qty
                                    oldEntry.qty=self.qty
                                    saveField('qty')
                                    self.timeParts=_setTimeParts()
                                }else{
                                    //console.log(self.qty)
                                    exception.catcher('изменение продолжительности')('недостаточно свободного времени')
                                    self.qty=self.entry.qty
                                }

                            }
                        }
                        function changeStartPart() {
                            var delta=self.entry.start-self.startPart;
                            //console.log(delta)
                            var part={busy:false,i:0,master:self.master._id}
                            if(delta>0){
                                for(var i=0;i<self.entry.qty;i++){
                                    var j = self.startPart+i;
                                    //console.log(j,j+delta)

                                    self.master.entryTimeTable[j]=self.master.entryTimeTable[j+delta]
                                    self.master.entryTimeTable[j].i=j

                                }
                                for(var i=self.startPart+self.entry.qty;i<self.startPart+self.entry.qty+delta;i++){
                                    //console.log(i)
                                    if(self.master.entryTimeTable[i].busy && self.master.entryTimeTable[i].entry && self.master.entryTimeTable[i].entry._id==self.entry._id){
                                        self.master.entryTimeTable[i]=angular.copy(part)
                                        self.master.entryTimeTable[i].i=i;
                                    }

                                }
                            }else{
                                for(var i=self.entry.qty;i>0;i--){
                                    var j = self.startPart+i-1;
                                    //console.log(j,j+delta)

                                    self.master.entryTimeTable[j]=self.master.entryTimeTable[j+delta]
                                    self.master.entryTimeTable[j].i=j

                                }
                                //console.log(self.entry.start,self.entry.start-delta)
                                for(var i=self.entry.start;i<self.entry.start-delta;i++){
                                    //console.log(i)
                                    if(self.master.entryTimeTable[i].busy && self.master.entryTimeTable[i].entry && self.master.entryTimeTable[i].entry._id==self.entry._id){
                                        self.master.entryTimeTable[i]=angular.copy(part)
                                        self.master.entryTimeTable[i].i=i;
                                    }

                                }
                            }
                            self.entry.start=self.startPart;
                            self.hour=parseInt(self.entry.start/4);
                            self.minutes=(self.entry.start-self.hour*4)*15;
                            saveField('start')
                        }
                        function moveEntry() {
                            self.entry.move=!self.entry.move
                            self.saveField('move')
                            if(self.entry.move){
                                $uibModalInstance.close();
                            }
                        }
                        function changeTimeFilter(p) {
                            return !p.busy && !(p.part%delta)
                        }
                        function changeService() {
                            //console.log(self.service)
                            if(!self.service){return}
                            entry.service= {_id:self.service._id,name:self.service.name};
                            if(self.service.backgroundcolor){entry.service.backgroundcolor=self.service.backgroundcolor}
                            saveField('service')
                            entry.stuffName=self.service.name;
                            saveField('name')
                            entry.stuffNameL=self.service.nameL;
                            saveField('stuffNameL')
                            entry.stuffLink=self.service.link;
                            saveField('stuffLink')
                        }
                        function changeWorkplace() {
                            //console.log(self.service)

                            saveField('workplace')
                        }

                        self.ok=function(){
                            update=''
                            /*entry.remind=self.remind;
                            entry.timeRemind=self.timeRemind;

                            if(entry.remind!=oldEntry.remind){
                                if(update){update+=' '}
                                update+='remind';
                            }
                            if(entry.timeRemind!=oldEntry.timeRemind){
                                if(update){update+=' '}
                                update+='timeRemind';
                            }
                            if(entry.used!=oldEntry.used){
                                if(update){update+=' '}
                                update+='used';
                            }
                            if(entry.confirm!=oldEntry.confirm){
                                if(update){update+=' '}
                                update+='confirm';
                            }*/
                            $uibModalInstance.close({action:'save',update:update});
                        }
                        self.delete=function(){
                            Confirm("удалить?" )
                                .then(function(){
                                    $uibModalInstance.close({action:'delete'});
                                })

                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        
                    },
                    controllerAs:'$ctrl',
                    resolve:{
                        entry:function(){return entry},
                        masters:function(){return masters},
                        workplaces:function () {
                            return workplaces;
                        }

                    }
                });
                modalInstance.result.then(
                    function (action) {resolve(action)},
                    function () {reject()}
                );
            })

        }
        function filterListServicesOld(masters,items,selectedStuff) {
            var stuffs=null;
            /*console.log(selectedStuff)
            console.log(masters)*/
            // проверяем есть ли выбранный мастер
            var selectedMaster=masters.filter(function (m) {
                return m.selected;
            })
            //console.log("selectedMaster && selectedMaster.length",selectedMaster && selectedMaster.length)
            if(selectedMaster && selectedMaster.length){
                stuffs=selectedMaster[0].stuffs;
            }else{
                stuffs=masters.filter(function(m){
                    if(!selectedStuff.length){
                        m.show=true;
                        return true;
                    }
                    m.show = selectedStuff.every(function(s){
                        // все выбранные услуги оказываются мастером
                        return m.stuffs.indexOf(s._id)>-1
                    })
                    return m.show;
                }).reduce(function(a,item){
                    Array.prototype.push.apply(a,item.stuffs)
                    return a
                },[])
            }


            //console.log(stuffs)
            items.forEach(function(item){
                item.stuffs.forEach(function (s) {
                    if(stuffs && selectedMaster.length){
                        if(stuffs.indexOf(s._id)>-1){s.hide=false}else{s.hide=true}
                        //console.log(stuffs.indexOf(s._id),s._id,s.name)
                    }else{
                        s.hide=false
                    }

                })
                item.hide=item.stuffs.every(function(s){return s.hide})
            })
            if(selectedStuff && selectedStuff.length){
                masters.forEach(function (m) {
                    m.show = selectedStuff.every(function(s){
                        // все выбранные услуги оказываются мастером
                        return m.stuffs.indexOf(s._id)>-1
                    })
                })
            }

        }
        function filterListServices(masters,items,selectedStuff) {
            //console.log(selectedStuff)
            if(!selectedStuff){
                selectedStuff=[];
            }
            selectedStuff=selectedStuff.filter(function (s) {
                return s
            })
            var stuffs=null;
            // проверяем есть ли выбранный мастер
            var selectedMaster=masters.filter(function (m) {
                return m.selected;
            })
            //console.log("selectedMaster && selectedMaster.length",selectedMaster && selectedMaster.length)
            if(selectedMaster && selectedMaster.length){
                stuffs=selectedMaster[0].stuffs;
            }else{
                stuffs=masters.filter(function(m){
                    if(!selectedStuff.length){
                        m.show=true;
                        return true;
                    }
                    m.show = selectedStuff.every(function(s){
                        // все выбранные услуги оказываются мастером
                        return m.stuffs.indexOf(s._id)>-1
                    })
                    return m.show;
                }).reduce(function(a,item){
                    Array.prototype.push.apply(a,item.stuffs)
                    return a
                },[])
            }

            if(selectedStuff && selectedStuff.length){
                masters.forEach(function (m) {
                    m.show = selectedStuff.every(function(s){
                        // все выбранные услуги оказываются мастером
                        return m.stuffs.indexOf(s._id)>-1
                    })
                })
            }
            //console.log(stuffs,selectedMaster.length)
            items.forEach(function (s) {
                if(stuffs && selectedMaster.length){
                    if(stuffs.indexOf(s._id)>-1){s.show=true}else{s.show=false}
                    //console.log(stuffs.indexOf(s._id),s._id,s.name)
                }else{
                    s.show=true
                }

            })
            //console.log(items)

        }
        function getDayOfYear(selectedMonth,day) {
            if(selectedMonth==1){
                return 31+day
            }else if(selectedMonth==2){
                return 31+29+day
            }else if(selectedMonth==3){
                return 31+29+31+day
            }else if(selectedMonth==4){
                return 31+29+31+30+day
            }else if(selectedMonth==5){
                return 31+29+31+30+31+day
            }else if(selectedMonth==6){
                return 31+29+31+30+31+30+day
            }else if(selectedMonth==7){
                return 31+29+31+30+31+30+31+day
            }else if(selectedMonth==8){
                return 31+29+31+30+31+30+31+31+day
            }else if(selectedMonth==9){
                return 31+29+31+30+31+30+31+31+30+day
            }else if(selectedMonth==10){
                return 31+29+31+30+31+30+31+31+30+31+day
            }else if(selectedMonth==11){
                return 31+29+31+30+31+30+31+31+30+31+30+day
            }else{
                return day;
            }
        }
        //https://habrahabr.ru/post/261773/
        function getDaysOfMonth(x, y) {
            return 28 + ((x + Math.floor(x / 8)) % 2) + 2 % x + Math.floor((1 + (1 - (y % 4 + 2) % (y % 4 + 1)) * ((y % 100 + 2) % (y % 100 + 1)) + (1 - (y % 400 + 2) % (y % 400 + 1))) / x) + Math.floor(1/x) - Math.floor(((1 - (y % 4 + 2) % (y % 4 + 1)) * ((y % 100 + 2) % (y % 100 + 1)) + (1 - (y % 400 + 2) % (y % 400 + 1)))/x); }
        function selectService(items) {
            var modalInstance = $uibModal.open({
                animation: true,
                size: 'lg',
                windowClass:'modalProject',
                templateUrl: 'components/ORDERS/online/selectServiceInSite.html',
                controller: function ($uibModalInstance, global, $timeout, items) {
                    var self=this;
                    self.global=global;
                    self.items=items;
                    //console.log(items)

                    self.ok = function (item) {
                        $uibModalInstance.close(item);
                    }

                    self.cancel = function () {
                        $uibModalInstance.dismiss();
                    }

                },
                controllerAs:'$ctrl',
                resolve:{
                    items:function () {
                        return items
                    }
                }
            })
            return modalInstance.result;
        }
        function getUsedTime(start,qty) {
            /*start=43
            qty=5*/
            var end = start+qty;
            var h = Math.floor(start/4);
            var m = (start-h*4)*15||'00';
            var h1 = Math.floor(end/4);
            var m1 = (end-h1*4)*15||'00';
            return h+'.'+m+' - '+h1+'.'+m1;
        }
        function getBookingWeek(queryWeek,selectedMaster,datesOfWeeks,ngClickOnEntry,admin) {
            //console.log(selectedMaster)
            var storeScheduleWeek=angular.copy(global.get('store').val.timeTable)
            return getList(paginate,queryWeek)
                .then(function(data) {
                    selectedMaster['week']={}
                    datesOfWeeks.forEach(function (d,dayOfWeek) {
                        //console.log(d.dayOfYear,selectedMaster.timeTable[d.dayOfYear])
                        selectedMaster['week'][d.date]={}
                        selectedMaster['week'][d.date].entryTimeTable=angular.copy(timeParts);
                        selectedMaster['week'][d.date].entryTimeTable.forEach(function (p,i) {
                            p.date=d.date;
                            p.ngClickOnEntry=ngClickOnEntry;
                            if(storeScheduleWeek){
                                // в self.storeSchedule 0 - это воскр у нас 0 - это понедельник
                                var j = dayOfWeek+1;
                                if(dayOfWeek==6){
                                    j=0;
                                }
                                if(!storeScheduleWeek[j].is || p.i<storeScheduleWeek[j].start*4 || p.i>=storeScheduleWeek[j].end*4){
                                    p.out=true;
                                }
                            }


                            if(selectedMaster.timeTable && selectedMaster.timeTable[d.dayOfYear]){
                                if(!selectedMaster.timeTable[d.dayOfYear].is ||
                                    p.i<selectedMaster.timeTable[d.dayOfYear].s*4 ||
                                    p.i>=selectedMaster.timeTable[d.dayOfYear].e*4)
                                {
                                    p.out=true;
                                }

                            }


                        })
                    })
                    data.forEach(function(e){
                        //console.log(e)
                        var master= selectedMaster;
                        for(var i=e.start;i<e.start+e.qty;i++){
                            master.week[e.date].entryTimeTable[i].busy=true;
                            if(i==e.start){
                                master.week[e.date].entryTimeTable[i].usedTime=getUsedTime(e.start,e.qty);
                                master.week[e.date].entryTimeTable[i].userId= e.user._id;
                                master.week[e.date].entryTimeTable[i].service= e.service.name;
                                master.week[e.date].entryTimeTable[i].new=true;
                                master.week[e.date].entryTimeTable[i].qty=e.qty;
                                master.week[e.date].entryTimeTable[i].used=e.used;
                                master.week[e.date].entryTimeTable[i].confirm=e.confirm;
                                if(admin){
                                    master.week[e.date].entryTimeTable[i].user=e.user;
                                    //console.log(master.week[e.date].entryTimeTable[i].user)
                                }
                            }
                            master.week[e.date].entryTimeTable[i].setColor=e.setColor;
                            if(i!=e.start){
                                master.week[e.date].entryTimeTable[i].noBorder=true
                            }
                            master.week[e.date].entryTimeTable[i].entry=e;
                            if(global.get('store').val.onlineReservation && (!e.status || e.status!=1)){
                                master.week[e.date].entryTimeTable[i].reservation=true;
                            }
                            if(i==e.start){
                                //console.log(master.week[e.date].entryTimeTable[i])
                            }
                        }
                    })
                });
        }
        function getBookingWeekScheldule(queryWeek,selectedWorkplace,datesOfWeeks,services,masters,ngClickOnEntry) {
            var storeScheduleWeek=angular.copy(global.get('store').val.timeTable)
            return getList(paginate,queryWeek)
                .then(function(data) {
                    selectedWorkplace['week']={}
                    datesOfWeeks.forEach(function (d,dayOfWeek) {
                        selectedWorkplace['week'][d.date]={}
                        selectedWorkplace['week'][d.date].entryTimeTable=angular.copy(timeParts);
                        selectedWorkplace['week'][d.date].entryTimeTable.forEach(function (p,i) {
                            p.date=d.date;
                            p.ngClickOnEntry=ngClickOnEntry;
                            if(storeScheduleWeek){
                                // в self.storeSchedule 0 - это воскр у нас 0 - это понедельник
                                var j = dayOfWeek+1;
                                if(dayOfWeek==6){
                                    j=0;
                                }
                                if(!storeScheduleWeek[j].is || p.i<storeScheduleWeek[j].start*4 || p.i>=storeScheduleWeek[j].end*4){
                                    p.out=true;
                                }
                            }
                        })
                    })
                    data.forEach(function(e){
                        //e.ngClickOnEntry=ngClickOnEntry;
                        var serviseLink=null;
                        if(e.service && e.service._id && services){
                            var sTemp=services.getOFA('_id',e.service._id)
                            if(sTemp){
                                serviseLink=sTemp.link
                            }
                            //console.log(serviseLink)
                        }
                        var masterLink=null;
                        var masterName='';
                        if(e.master  && masters){
                            var mTemp=masters.getOFA('_id',e.master)
                            if(mTemp){
                                masterLink='/master/'+mTemp.url
                                masterName=mTemp.name;
                            }
                        }
                        var workplace= selectedWorkplace;
                        for(var i=e.start;i<e.start+e.qty;i++){
                            workplace.week[e.date].entryTimeTable[i].busy=true;
                            if(i==e.start){
                                workplace.week[e.date].entryTimeTable[i]._id=e._id;
                                workplace.week[e.date].entryTimeTable[i].usedTime=getUsedTime(e.start,e.qty);
                                workplace.week[e.date].entryTimeTable[i].userId= e.user._id;
                                workplace.week[e.date].entryTimeTable[i].service= e.service.name;
                                workplace.week[e.date].entryTimeTable[i].serviceLink= serviseLink;
                                workplace.week[e.date].entryTimeTable[i].masterLink= masterLink;
                                workplace.week[e.date].entryTimeTable[i].masterName= masterName;
                                if(e.masters && e.masters.length){
                                    workplace.week[e.date].entryTimeTable[i].masters=e.masters.map(function (m) {
                                        var mm = masters.getOFA('_id',m);
                                        return mm
                                    })
                                    //console.log(workplace.week[e.date].entryTimeTable[i].masters);

                                }

                                workplace.week[e.date].entryTimeTable[i].new=true;
                                workplace.week[e.date].entryTimeTable[i].qty=e.qty;
                                workplace.week[e.date].entryTimeTable[i].used=e.used;
                                workplace.week[e.date].entryTimeTable[i].confirm=e.confirm;
                                workplace.week[e.date].entryTimeTable[i].comment=e.comment;
                                workplace.week[e.date].entryTimeTable[i].zIndex=1;


                            }
                            workplace.week[e.date].entryTimeTable[i].setColor=e.setColor;
                            if(e.service.backgroundcolor){
                                workplace.week[e.date].entryTimeTable[i].backgroundcolor=e.service.backgroundcolor;
                            }else{
                                workplace.week[e.date].entryTimeTable[i].backgroundcolor=null;
                            }

                            if(i!=e.start){
                                workplace.week[e.date].entryTimeTable[i].noBorder=true
                            }
                            workplace.week[e.date].entryTimeTable[i].entry=e;
                            if(global.get('store').val.onlineReservation && (!e.status || e.status!=1)){
                                workplace.week[e.date].entryTimeTable[i].reservation=true;
                            }
                            /*if(i==e.start){
                                console.log(master.week[e.date].entryTimeTable[i])
                            }*/
                        }
                    })
                });
        }
        function getWeeksRange(today) {
            if(!today){
                today=  new Date()
            }
            var weeksRange= [{},{},{},{},{},{},{}]
            weeksRange.forEach(function (el,i) {
                if(!i){
                    var date = today;

                }else{
                    var date= new Date(today)
                    date.setTime(date.getTime() + (i*7)*86400000);
                    date.setHours(0)
                }
                var datesOfWeeks=getDatesForWeek(date);
                //console.log(datesOfWeeks)
                el.startDate=datesOfWeeks[0].d
                el.startDateString=moment(datesOfWeeks[0].d).format('DD MMM')
                el.endDate=datesOfWeeks[6].d
                el.endDateString=moment(datesOfWeeks[6].d).format('DD MMM')
                //console.log(el.startDateString,'-',el.endDateString)
            })
            return weeksRange
        }
        function scheduleTransfer(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    size:'lg',
                    templateUrl: 'components/ORDERS/online/scheduleTransfer.html',
                    controller: function (global,$uibModalInstance,Booking,$timeout,exception){
                        var self=this;
                        self.global=global;
                        self.moment=moment;
                        self.paginate={}
                        var startdate = moment().subtract(42,"days")
                        var td = new Date(startdate)
                        //console.log(startdate,td)

                        self.weeksFrom=getWeeksRange(td)
                        self.weeksFrom.forEach(function (el) {
                            el.date=el.startDateString+'/'+el.endDateString
                        })

                        var addDate = moment().add(7,"days")
                        var addDate = moment().add(0,"days")
                        var tdAdd = new Date(addDate)

                        self.weeksTo=getWeeksRange(tdAdd)
                        self.weeksTo.forEach(function (el) {
                            el.date=el.startDateString+'/'+el.endDateString
                        })

                        //console.log(self.weeksFrom)
                        self.ok=function(){
                            if(!self.weekFrom || !self.weekTo){
                                exception.catcher('ошибка')('не выбрана неделя')
                                return
                            }
                            self.disabled=true;
                            //console.log(self.weekFrom,self.weekTo)
                            var date= new Date(self.weekFrom.startDate)
                            self.datesOfWeeks=Booking.getDatesForWeek(date);
                            //console.log(self.datesOfWeeks)
                            self.queryWeek={date:{$in:self.datesOfWeeks.map(function (item) {
                                return item.date
                            })},'user.name':'schedule'};
                            //console.log(self.queryWeek)
                            var dataFrom,dataTo;
                            return Booking.getList(self.paginate,self.queryWeek)
                                .then(function(data) {

                                    if(data && data.length){
                                        data.shift()
                                    }
                                    //console.log(data)
                                    dataFrom=data;
                                    date= new Date(self.weekTo.startDate)
                                    self.datesOfWeeks=Booking.getDatesForWeek(date);
                                    //console.log(self.datesOfWeeks)
                                    self.queryWeek={date:{$in:self.datesOfWeeks.map(function (item) {
                                        return item.date
                                    })},'user.name':'schedule'};
                                    return Booking.getList(self.paginate,self.queryWeek)
                                })
                                .then(function(data) {
                                    if(data && data.length){
                                        data.shift()
                                    }
                                    //console.log(data)
                                    dataTo=data;
                                    var acts=[];
                                    data.forEach(function (d) {
                                        var delEntryPromise = Booking.delete({_id:d._id});
                                        acts.push(delEntryPromise.$promise)

                                    })
                                    return $q.all(acts)

                                })

                                .then(function () {
                                    var start = moment(self.weekFrom.startDate);
                                    var end = moment(self.weekTo.startDate);
                                    var daysDelta=end.diff(start, "days")
                                    //console.log(daysDelta)

                                    /*var stD=new Date(self.weekFrom.startDate)
                                    var enD=new Date(self.weekTo.startDate)
                                    end.diff(start, "days")*/

                                    var acts=[];
                                    dataFrom.forEach(function (d) {
                                        //console.log(d)
                                        delete d._id
                                        delete d.__v
                                        d.users=[];
                                        var newDate = getDateFromEntry(d)
                                        newDate.setDate(newDate.getDate() + daysDelta);
                                        var month = newDate.getMonth() //+ 1; //months from 1-12
                                        var day = newDate.getDate();
                                        var year = newDate.getFullYear();
                                        if(month<10){month='0'+month}
                                        if(day<10){day='0'+day}
                                        d.date='date'+year+month+day;
                                        var newEntryPromise = Booking.save(d);
                                        acts.push(newEntryPromise.$promise)

                                    })
                                    return $q.all(acts)
                                })
                                .then(function (res) {
                                    //console.log(res)
                                    $uibModalInstance.close()
                                })
                                .catch(function (err) {
                                    $uibModalInstance.close(err)
                                    //console.log(err)
                                })


                            return

                            // установка идет он выбраной даты
                            self.week=week;
                            if(!week){
                                var date = self.date;
                            }else{

                                var date= new Date(self.date)
                                date.setTime(date.getTime() + (week*7)*86400000);
                                date.setHours(0)
                            }
                            if(!self.datesOfWeeks){
                                self.datesOfWeeks=Booking.getDatesForWeek(date);
                            }else{
                                var t = Booking.getDatesForWeek(date);
                                for(var i=0;i<t.length;i++){
                                    self.datesOfWeeks[i]=t[i]
                                }
                            }

                            try{
                                self.currentMonth=moment(date).format('MMMM')
                                //console.log(self.currentMonth)
                            }catch(err){}

                            self.currentDayOfWeek=self.td.getDay()
                            if(self.currentDayOfWeek==0){self.currentDayOfWeek=7;}
                            self.currentDayOfWeek--;
                            if(week){self.currentDayOfWeek==0;}
                            self.queryWeek={date:{$in:self.datesOfWeeks.map(function (item) {
                                return item.date
                            })},master:self.selectedMaster._id};
                                //$uibModalInstance.close();
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };

                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(
                    function () {resolve()},
                    function () {reject()}
                );
            })

        }


    }

    serviceFoo.$inject=['$resource','$uibModal','$q','global'];
    function serviceFoo($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/Online/:_id',{_id:'@_id'});
        var timeRemindArr=[{time:'полчаса',part:2},
            {time:'час',part:4},
        {time:'два часа',part:8},
        {time:'три часа',part:12}]
        var timeDuration=[
            {time:'15 мин',part:1},
            {time:'полчаса',part:2},
            {time:'45 мин',part:3},
            {time:'час',part:4},
            {time:'1 час 30 мин',part:6},
            {time:'два часа',part:8},
            {time:'два часа 30 мин',part:10},
            {time:'три часа',part:12},
            {time:'четыре часа',part:16}
        ]
        var startTimeParts=36;
        var endTimeParts=72;
        var timeParts=[];
        for(var i=0;i<96;i++){timeParts.push({busy:false,i:i})};
        var timeTable=['00:00','01:00','02:00','03:00','04:00','05:00','06:00','07:00','08:00','09:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00','21:00','22:00','23:00']
        var timeTable15min=[
            '00:00','00:15','00:30','00:45',
            '01:00','01:15','01:30','01:45',
            '02:00','02:15','02:30','02:45',
            '03:00','03:15','03:30','03:45',
            '04:00','04:15','04:30','04:45',
            '05:00','05:15','05:30','05:45',
            '06:00','06:15','06:30','06:45',
            '07:00','07:15','07:30','07:45',
            '08:00','08:15','08:30','08:45',
            '09:00','09:15','09:30','09:45',
            '10:00','10:15','10:30','10:45',
            '11:00','11:15','11:30','11:45',
            '12:00','12:15','12:30','12:45',
            '13:00','13:15','13:30','13:45',
            '14:00','14:15','14:30','14:45',
            '15:00','15:15','15:30','15:45',
            '16:00','16:15','16:30','16:45',
            '17:00','17:15','17:30','17:45',
            '18:00','18:15','18:30','18:45',
            '19:00','19:15','19:30','19:45',
            '20:00','20:15','20:30','20:45',
            '21:00','21:15','21:30','21:45',
            '22:00','22:15','22:30','22:45',
            '23:00','23:15','23:30','23:45',
        ]
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
            editEntry:editEntry,
            selectService:selectService,
            timeTable:timeTable,
            timeTable15min:timeTable15min,
            timeParts:timeParts,
            startTimeParts:startTimeParts,
            endTimeParts:endTimeParts,
            filterListServices:filterListServices
        }

        function getList(paginate,query){
           if(!paginate){
               paginate={page:0}
           }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                //.catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/CONTENT/master/createMaster.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,50))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function selectService(master,timePart){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    size:'lg',
                    templateUrl: 'components/ORDERS/online/selectService.html',
                    controller: function ($uibModalInstance,global,$user,UserEntry,exception,master,timePart){
                        var self=this;
                        self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
                        self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';

                        self.hour=parseInt(timePart/4);
                        self.minutes=(timePart-self.hour*4)*15;
                        self.timeRemindArr=timeRemindArr;
                        //console.log(timePart,self.hour,self.minutes)
                        master.services.forEach(function(s){
                            s.used=false
                        })
                        self.userName='';
                        self.master=master;
                        self.oldPhone='';
                        self.services=[];
                        var pattern = /[^0-9]*/g;

                        self.selectUser=selectUser;
                        self.searchUser = searchUser;
                        self.clearUser=clearUser;
                        self.allFieldCheck=allFieldCheck;
                        self.addUser=addUser;
                        self.checkNameNewUser=checkNameNewUser;
                        self.refreshUsers=refreshUsers;


                        function selectUser(user){
                            self.user=user;
                            self.users=null;
                        }
                        function refreshUsers(phone){
                            if (phone.length<3){return}
                            //var newVal = phone.replace(pattern, '').substring(0,10);
                            self.oldPhone=phone
                            //if(self.oldPhone==phone){return}else{self.oldPhone=phone}
                            searchUser(phone)
                        }
                        function searchUser(phone){
                            var q= {$or:[{'phone':phone},{name:phone},{email:phone}]}
                            UserEntry.getList({page:0,rows:20},q).then(function(res){
                                self.users=res;
                            })
                        }

                        function clearUser(){
                            self.user=null;
                        }
                        function addUser(){
                            console.log('add user')
                            var user={name:self.userName,
                                email:self.userEmail,
                                phone:self.phoneCode.substring(1)+self.oldPhone.substring(0,10)}
                            /*return $q.when()
                                .then(function(){
                                    return UserEntry.save(user).$promise
                                })
                                .then(function(res){
                                    user._id=(res._id)?res._id:res.id;
                                    self.addingUser=false;
                                    self.userName='';
                                    self.user=user;
                                    console.log(user)
                                    self.oldPhone=''
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('новый клиент')(err)
                                    }
                                })*/
                        }
                        function allFieldCheck() {
                            var data =!self.services.length|| !self.user
                            return data
                        }
                        function checkNameNewUser(){
                            //console.log(!self.userName || self.userName.length<3)
                            return (!self.userName || self.userName.length<3)
                        }
                        self.ok=function(){
                            //console.log(self.remind)
                            var item={
                                services:self.services,
                                user:{
                                    _id:self.user._id,
                                    name:self.user.name,
                                    phone:self.user.phone,
                                    email:self.user.email
                                },
                                remind:self.remind,
                                timeRemind:self.timeRemind
                            }
                            //console.log(item)

                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    resolve:{
                        master:function(){return master},
                        timePart:function(){return timePart},
                    }
                });
                modalInstance.result.then(
                    function (item) {resolve(item)},
                    function () {reject()}
                );
            })

        }
        function editEntry(master,entry,saveFoo){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    size:'lg',
                    templateUrl: 'components/ORDERS/online/editOnline.html',
                    controller: function ($uibModalInstance,$user,UserEntry,master,entry){
                        console.log(entry)
                        var self=this;
                        self.master=master;
                        self.entry=entry;
                        self.remind=entry.remind;
                        self.timeRemind=entry.timeRemind;
                        self.hour=parseInt(entry.start/4);
                        self.minutes=(entry.start-self.hour*4)*15;
                        self.timeRemindArr=timeRemindArr;
                        self.timeDuration=timeDuration;
                        console.log(self.timeDuration)
                        self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
                        self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';
                        
                        self.updateUser=updateUser;
                        self.changeDuration=changeDuration;
                        
                        actived()


                        function actived(){
                            self.user=Object.assign({},entry.user);
                            self.splitPoint = self.user.phone.length-10;
                            self.phoneCode='+'+self.user.phone.substring(0,self.splitPoint)
                            self.user.phone=self.user.phone.substring(self.splitPoint)
                        }
                        function updateUser() {
                            self.editingUser=false;
                            /*var  {phone,name,email}=self.user;
                            console.log(phone,name,email)*/
                            var o={_id:entry.user._id};
                            o.phone=self.phoneCode.substring(1)+self.user.phone;
                            o.name=self.user.name;
                            o.email=self.user.email;
                            var update='';
                            if('+'+entry.user.phone.substring(0,self.splitPoint)!=self.phoneCode){
                                update='phone';
                            }else if(entry.user.phone.substring(self.splitPoint)!=self.user.phone){
                                update='phone'
                            }
                            if(entry.user.name!=self.user.name){
                                update+=(update)?' name':'name';
                            }
                            if(entry.user.email!=self.user.email){
                                update+=(update)?' email':'email';
                            }
                            //console.log(update,o)
                            UserEntry.save({update:update},o,function(){
                                entry.user=o;
                                actived()
                            })
                        }

                        function changeDuration() {
                            console.log(self.entry,master)
                        }

                        self.ok=function(){
                            entry.remind=self.remind;
                            entry.timeRemind=self.timeRemind;
                            $uibModalInstance.close('save');
                        }
                        self.delete=function(){
                            $uibModalInstance.close('delete');
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    resolve:{
                        master:function(){return master},
                        entry:function(){return entry}
                    }
                });
                modalInstance.result.then(
                    function (action) {resolve(action)},
                    function () {reject()}
                );
            })

        }

        function saveMasterInOnlineEntry(onlineEntry,id,entries){
            var update={update:'master entries',embeddedName:'masters',embeddedPush:true};
            var o={_id:onlineEntry,master:id,entries:entries};
            return Items.save(update,o).$promise;
        }
        function saveEntriesInOnlineEntry(onlineEntry,id,entries){
            var update={update:'entries',embeddedName:'masters',embeddedVal:id};
            var o={_id:onlineEntry,entries:entries};
            return Items.save(update,o).$promise;
        }
        function filterListServices(masters,items,selectedStuff) {
            console.log(masters)
            var stuffs=null;
            stuffs=masters.filter(function(m){

                if(!selectedStuff.length){
                    m.show=true;
                    return true;
                }
                m.show = selectedStuff.every(function(s){
                    // все выбранные услуги оказываются мастером
                    return m.stuffs.indexOf(s._id)>-1
                })
                return m.show;
            }).reduce(function(a,item){
                a.extend(item.stuffs)
                return a
            },[])
            console.log(stuffs)
            items.forEach(function(item){
                item.stuffs.forEach(function (s) {
                    if(stuffs){
                        if(stuffs.indexOf(s._id)>-1){s.hide=false}else{s.hide=true}
                    }else{
                        s.hide=false
                    }

                })
                //item.hide=item.stuffs.every(function(s){return s.hide})
                console.log(item)
            })

        }
    }
})()

'use strict';
(function() {
    angular.module('gmall.directives')
        .directive('searchList', searchList)
        .directive('searchStuffList', searchStuffList)


    function searchList() {
        return {
            template: "<div></div>",
            bindToController: true,
            scope: {
                searchStr:'='
            },
            controllerAs: '$ctrl',
            controller: listCtrl
        }
    }
    var controllersearchStuffList = ['$scope','$rootScope','global', function ($scope,$rootScope,global) {
        var self=this;
        self.global=global;

        self.allResults= function (){
            //console.log($scope.searchStr)
            $rootScope.$emit('closeSearchModal');
            $rootScope.$state.go('search',{searchStr:$scope.searchStr},{reload: true,inherit: false,notify: true });
            //href="/search?searchStr={{searchStr}}"
        }
        /*function init() {
            $scope.items = angular.copy($scope.datasource);
        }*/



        /*$scope.addItem = function () {
            $scope.add();

            //Add new customer to directive scope
            $scope.items.push({
                name: 'New Directive Controller Item'
            });
        };*/
    }]
    function searchStuffList() {
        return {
            templateUrl:'views/template/header/search/list.html',
            //bindToController: true,
            scope: {
                searchStuffList:"=",
                searchStr:'='
            },

            controllerAs: '$ctrl',
            controller: controllersearchStuffList
        }
    }


    function listCtrl($scope,$http,$element,global,$stateParams,$q,$anchorScroll,$timeout,$compile) {
        var self=this;
        self.global=global;
        //console.log(global.get('lang').val.allresults)
        var url = 'api/search?searchStr='+$stateParams.searchStr;
        $q.when()
            .then(function(){
                if(global.get('tempContent').val){
                    var html = global.get('tempContent').val;
                    $('#tempContent').empty()
                    global.set('tempContent',null)
                    var o ={data:{html:html}}
                    if(tempTitles){
                        o.data.titles=tempTitles
                    }
                    return o;
                    //return {data:{html:html}};
                }else{
                    return $http.get(url)
                }

            })
            .then(function (response) {
                //console.log(response)
                var linkFn = $compile(response.data.html);
                var content = linkFn($scope);
                $element.append(content);
                $anchorScroll()
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        if(response.data.titles[k]){
                            if(k=='title'){
                                global.get('titles').val[k]+=response.data.titles[k]
                            }else{
                                global.get('titles').val[k]=response.data.titles[k]
                            }
                        }
                    }
                    //global.set('titles',response.data.titles)
                }
            })

    }
})()



'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('cabinetItem',cabinetItem)
    function cabinetItem(global){
        var s=(global.get('store').val.template.addcomponents.cabinet && global.get('store').val.template.addcomponents.cabinet.templ)?global.get('store').val.template.addcomponents.cabinet.templ:''
        //console.log('views/template/partials/cabinet/cabinet'+s+'.html')
        return {
            scope: {},
            restrict:"EA",
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/cabinet/cabinet'+s+'.html',
        }
    }
    itemCtrl.$inject=['global','$q','$timeout','$state','exception','Orders','CartInOrder','$order','$user','Coupon','Confirm','Booking','CreateContent','$notification','$http','$uibModal','$stateParams'];
    function itemCtrl(global,$q,$timeout,$state,exception,Orders,CartInOrder,$order,$user,Coupon,Confirm,Booking,CreateContent,$notification,$http,$uibModal,$stateParams) {
        var self=this;
        //console.log(global.get('store').val)
        self.moment=moment;
        self.global=global;
        self.paginate={page:0,rows:20,items:0}
        self.paginateEntry={page:0,rows:5,items:0}
        self.query={}

        self.notOrders = (global.get('store').val.texts && global.get('store').val.texts.notOrdersText && global.get('store').val.texts.notOrdersText[global.get('store').val.lang])?
            global.get('store').val.texts.notOrdersText[global.get('store').val.lang] :'';
        self.notDateTime = (global.get('store').val.texts && global.get('store').val.texts.notDateTimeText && global.get('store').val.texts.notDateTimeText[global.get('store').val.lang])?
            global.get('store').val.texts.notDateTimeText[global.get('store').val.lang] :'';
        /*console.log(self.notOrders)
        console.log(self.notDateTime)*/
        self.orderDetail=orderDetail;
        self.deleteOrder=deleteOrder;
        self.getOrders=getOrders;

        self.changePswd=changePswd;
        self.saveFieldUser=saveFieldUser;
        self.saveProfile=saveProfile;
        self.changeEmail=changeEmail;
        self.changeSubscription=changeSubscription;

        self.getEntries=getEntries;
        self.cancelEntry=cancelEntry;
        self.changePhone=changePhone;



        activate();
        function activate() {
            $q.when()
                .then(function () {
                    if(!global.get('user').val){
                        return $timeout(function () {},700)
                    }
                })
                .then(function () {
                    //console.log(global.get('user').val)
                    if(!global.get('user').val){
                        $state.go('home');
                        throw 'there is not a user in the system'
                    }
                })
                .then(function () {
                    self.query['user']=global.get('user' ).val._id;
                    self.user=global.get('user');
                    return getOrders()
                    //return Orders.getList(self.paginate,self.query)
                })
                /*.then(function (res) {
                    self.orders= res.filter(function (o) {return o.status!=6}).map(function(o){return $order.init('orderInList',o)});
                    //console.log(self.orders)
                })*/
                .then(function () {
                    self.queryEntry={$or:[{},{}]}
                    self.queryEntry.$or[0]['user._id']=global.get('user' ).val._id;
                    self.queryEntry.$or[1]['users._id']=  global.get('user' ).val._id;
                    return getEntries()
                    //return Booking.getList(self.paginateEntry,self.queryEntry)
                })
                .then(function () {
                    if($stateParams && $stateParams.sec){
                        if($stateParams.sec=='order'){
                            self.activeTabIndex=0
                        }else if($stateParams.sec=='online'){
                            self.activeTabIndex=1
                        }else if($stateParams.sec=='personal'){
                            self.activeTabIndex=2
                        }else if($stateParams.sec=='subscription'){
                            self.activeTabIndex=3
                        }else{
                            self.activeTabIndex=0
                        }
                    }else{
                        self.activeTabIndex=0
                        if(global.get('store').val.orderis){
                            if(global.get('store').val.onlineis){
                                self.activeTabIndex=2;
                            }else{
                                self.activeTabIndex=1;
                            }

                        }

                    }
                })
               /* .then(function (res) {
                    self.entries= res;
                    console.log(res)
                })*/
                .catch(function (err) {
                    console.log(err)
                    if(err){
                        exception.catcher('cabinet')(err)
                    }
                })
        }
        function getOrders() {
            var payData = global.get('store').val.payData
            return Orders.getList(self.paginate,self.query)
                .then(function (res) {
                    self.orders= res.filter(function (o) {
                        return o
                    }).map(function(o){return $order.initOrderInList(o)});
                    self.orders.forEach(function (o) {
                        o.date= moment(o.date).format('lll')
                        if(o.status==2 && global.get('store').val.onlinePay){
                            if(payData && payData.liqPay && payData.liqPay.is){
                                $order.getCheckOutLiqpayHtml(o)
                            }
                        }else if(o.pay && o.pay[0]){
                            o.pay[0].date=moment(o.pay[0].date).format('lll')
                        }
                    })
                })
        }
        function getEntries() {
            var payData = global.get('store').val.payData
            return Booking.getList(self.paginateEntry,self.queryEntry)
                .then(function (res) {
                    self.entries= res.map(function (entry) {
                        entry.master = global.get('mastersO').val[entry.master]
                        //console.log(entry.master)
                        entry.dateOblect=Booking.getDateFromEntry(entry);
                        entry.dateString= moment(entry.dateOblect).format('LLL')
                        //var date = new Date(entry.date)
                        //console.log(entry.date)
                        //console.log(moment(entry.dateOblect).unix()-moment().unix())
                        try{
                            if(moment(entry.dateOblect).unix()-moment().unix()>3600){
                                entry.cancel=true;
                            }
                        }catch(err){console.log(err)}

                        //entry.date= moment(entry.date).format('lll')
                        //console.log((!entry.status || entry.status!=1) && global.get('store').val.onlinePayEntry)
                        if(entry.user && entry.user._id!='schedule'){
                            if((!entry.status || entry.status!=1) && global.get('store').val.onlinePayEntry){
                                if(payData && payData.liqPay && payData.liqPay.is){
                                    //console.log(entry)
                                    Booking.getCheckOutLiqpayHtml(entry)
                                }
                            }else if(entry.pay && entry.pay.date){
                                entry.pay.date=moment(entry.pay.date).format('lll')
                            }
                        }else if(entry.user && entry.user._id=='schedule' && entry.users){
                            var userData =  entry.users.getOFA('_id',global.get('user').val._id)
                            //console.log(userData)
                            if(global.get('store').val.onlinePayEntry){
                                if(!userData.pay || !userData.pay.date){
                                    Booking.getCheckOutLiqpayHtml(entry,userData)
                                }else if(userData.pay && userData.pay.date){
                                    entry.pay.date=moment( userData.pay.date).format('lll')
                                }
                            }
                        }
                        //console.log(entry)
                        return entry;
                    });
                })
        }
        function cancelEntry(entry) {
            console.log(entry)
            //notification
            try{
                // отправка уведомления
                entry.masterName=(entry.master && entry.master.name)?entry.master.name:'?????'
                entry.dateForNote = entry.dateString;
                var content=CreateContent.dateTimeCancelNote(entry)
                var o={addressee:'seller',
                    type:'dateTime',
                    content:content,
                    seller:global.get('store').val.seller._id};
            }catch(err){
                console.log(err)
            }
            Confirm(global.get('lang').val.delete+"?" )
                .then(function () {
                    return Booking.delete({_id:entry._id}).$promise;
                })
                .then(function () {
                    getEntries()
                    //socket.emit('newRecordOnSite',{store:global.get('store').val._id,seller:global.get('store').val.seller._id})
                    $http.get('/api/newRecordOnSite/'+global.get('store').val._id+'/'+global.get('store').val.seller._id)
                    return $notification.save(o).$promise;
                })
                .then(function(res){
                    exception.showToaster('note', global.get('langNote').val.sent,'');
                    if(global.get('store').val.seller.phone){
                        var o={}
                        o.userId=global.get('user').val._id
                        o.text="удалена запись на "+entry.dateString+" "+entry.master.name;
                        o.phone=global.get('store').val.seller.phone;
                        //console.log(o)
                        return $http.post('/api/users/sendMessageAboutDeal',o)
                    }
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('error')(err);
                    }

                })

        }
        function orderDetail(order) {
            order.collapse=!order.collapse;
            if(!order.firsOpen){
                order.firsOpen=true;
                CartInOrder.get({_id:order.cart._id},function (res) {
                    order.setCart(res.stuffs)
                    if(order.coupon){
                        Coupon.get({_id:order.coupon},function (res) {
                            if(res){
                                order.coupon=res
                            }
                        })
                    }
                })
            }
        }
        function deleteOrder(order) {
            Confirm(global.get('lang').val.delete+"?" )
                .then(function(){
                    order.status=6;
                    return Orders.save({update:'status'},{_id:order._id,status:order.status}).$promise;
                })
                .then(function () {
                    self.paginate.page=0;
                    return Orders.getList(self.paginate,self.query)
                })
                .then(function (res) {
                    self.orders= res.filter(function (o) {
                        return o
                        //return o.status!=6
                    }).map(function(o){return $order.initOrderInList(o)});
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('cabinet')(err)
                    }
                })
        }



        function getCheckOutLiqpayHtml(order) {
            $q.when()
                .then(function () {
                    return $http.post('/api/orders/checkoutLiqpay',order)
                })
                .then(function (res) {
                    console.log(res)
                    if(!res || !res.data.html){
                        return;
                    }
                    order.checkOutLiqpayHtml=res.data.html
                    order.checkOutLiqpayHtmlIs=true;
                })
                .then(function(res){
                })
                .catch(function(err){
                    exception.catcher('error')(err);
                })


            /*LiqPayCheckout.init({
                data: "eyAidmVyc2lvbiIgOiAzLCAicHVibGljX2tleSIgOiAieW91cl9wdWJsaWNfa2V5IiwgImFjdGlv" +
                "biIgOiAicGF5IiwgImFtb3VudCIgOiAxLCAiY3VycmVuY3kiIDogIlVTRCIsICJkZXNjcmlwdGlv" +
                "biIgOiAiZGVzY3JpcHRpb24gdGV4dCIsICJvcmRlcl9pZCIgOiAib3JkZXJfaWRfMSIgfQ==",
                signature: "QvJD5u9Fg55PCx/Hdz6lzWtYwcI=",
                embedTo: "#liqpay_checkout",
                mode: "popup" // embed || popup
            }).on("liqpay.callback", function(data){
                console.log(data.status);
                console.log(data);
            }).on("liqpay.ready", function(data){
                // ready
            }).on("liqpay.close", function(data){
                // close
            });*/
        }


        /*********** users ***************************************/
        function changePswd(_){
            $q.when()
                .then(function(){
                    return $user.changePswd(self.user.val._id)
                })
                .then(function () {
                    exception.showToaster('succes','статус','обновлено!')
                })
                .catch(function(err){
                    if(err){
                        err=err.data||err;
                        exception.catcher('смена пароля')(err)
                    }
                })
        }
        function saveProfile(form){
            //console.log(form)
            var o ={_id:self.user.val._id,profile:self.user.val.profile}
            $user.save({update:'profile'},o,function () {
                exception.showToaster('succes','статус','обновлено!')
            })

        }
        function changePhone(phone) {
            /*console.log(self.user.val.profile);
            console.log(phone)*/
            if(phone){
                $q.when()
                    .then(function () {
                        return $user.checkPhoneForExist(phone)
                    })
                    .then(function (res) {
                        console.log('done')
                        if(res && res.exist){
                            throw 'phone exist in base'
                        }
                        saveProfile()

                    })
                    .catch(function (err) {
                        if(err){
                            exception.catcher('change phone')(err)
                        }

                    })

            }else{
                self.user.val.profile.phone=''
                //phone=''
                saveProfile()
            }


        }

        function saveFieldUser(field) {
            var o ={_id:self.user.val._id}
            var fieldFoDB='profile.'+field;
            o[fieldFoDB]=self.user.val.profile[field]
            if(field=='cityId'){
                fieldFoDB+=' profile.city';
                o['profile.city']=self.user.val.profile['city']
            }
            $user.save({update:fieldFoDB},o,function () {
                exception.showToaster('succes','статус','обновлено!')
            })
        }
        function changeEmail(){
            $q.when()
                .then(function () {
                    return $user.changeEmail(global.get('user').val._id)
                })
                .then(function (res) {
                    console.log(res)
                    global.get('user').val.email=res
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('change email')(err)
                    }
                })
        }
        function changeSubscription() {
            item.subscription=!subscription
            var item=global.get('user').val
            var o={_id:item._id};
            o['subscription']=item['subscription']
            return $user.save({update:'subscription'},o ).$promise.then(function(){
                exception.showToaster('succes','статус','обновлено!')
            },function(err){console.log(err)});
        }

    }
})()

'use strict';

(function () {
    angular.module('gmall.directives').component('dayOfMonth', {
        require: {
            parent: '^dateTimeEntry'
        },
        controller: itemCtrl,
        templateUrl: 'views/template/partials/dateTime/dayOfMonth.html'
    });
    itemCtrl.$inject = ['$scope', 'Booking', '$timeout', '$element', '$compile', 'global'];
    function itemCtrl($scope, Booking, $timeout, $element, $compile, global) {
        var self = this;
        self.setDay = setDay;
        self.filterNumOfDays = filterNumOfDays;
        self.prev = prev;
        self.next = next;
        self.moment = moment;
        self.global = global;
        self.daysOfMonth = [];

        this.$onInit = function () {
            self.$owl = $('body').find('#dayPicker');
            self.$owl.on('initialized.owl.carousel', function (event) {
                //console.log('initialized.owl.carousel')
            });
            activate();
        };
        var carousel_Settings = {
            items: 10,
            nav: false,
            dots: false
        };
        var activate = function activate(reload) {
            if (reload) {}
            //self.$owl.trigger('destroy.owl.carousel')
            //return;

            /*if(self.$owl.data('owlCarousel') && self.$owl.data('owlCarousel').destroy){
                //console.log('destroy')
                self.$owl.data('owlCarousel').destroy();
                return;
            }*/

            /*if(self.$owl.data('owlCarousel') && self.$owl.data('owlCarousel').destroy){
                //console.log('destroy')
                self.$owl.data('owlCarousel').destroy();
            }*/

            var today = new Date();
            var month = self.parent.td.getMonth();
            self.selectedDay = self.parent.td.getDate();
            var year = self.parent.td.getFullYear();
            var currentMonth = today.getMonth();
            var currentday = today.getDate();
            if (month <= currentMonth) {
                self.minDay = currentday;
            } else {
                self.minDay = 1;
            }
            //console.log(month,year)
            var qtyDaysOfMonth = Booking.getDaysOfMonth(month + 1, year);

            if (!reload) {
                var html = '';
                for (var i = self.minDay; i <= qtyDaysOfMonth; i++) {
                    html += '<div class="item" ng-class="{\'active\':' + i + '==$ctrl.selectedDay}"><a  ng-click="$ctrl.setDay(' + i + ')">' + i + '</a></div>';
                }
                /*console.log('self.minDay',self.minDay,qtyDaysOfMonth)
                console.log('html',html)*/
                var linkFn = $compile(html);
                var content = linkFn($scope);
                self.$owl.append(content);
                $timeout(function () {
                    carousel_Settings.startPosition = Number(self.selectedDay) - Number(self.minDay);
                    self.$owl.owlCarousel(carousel_Settings);
                    /*$timeout(()=>{
                     self.$owl.trigger('to.owl.carousel',[Number(self.selectedDay),1,true])
                     },500)*/
                }, 100);
            } else {
                var daysOfMonth = [];
                for (var _i = self.minDay; _i <= qtyDaysOfMonth; _i++) {
                    daysOfMonth.push(_i);
                }
                self.daysOfMonth = daysOfMonth;
                var _html = '';
                for (var _i2 = self.minDay; _i2 <= qtyDaysOfMonth; _i2++) {
                    _html += '<div class="item" ng-class="{\'active\':' + _i2 + '==$ctrl.selectedDay}"><a  ng-click="$ctrl.setDay(' + _i2 + ')">' + _i2 + '</a></div>';
                }
                //let linkFn = $compile(html);
                //let content = linkFn($scope);
                //console.log(content)
                $timeout(function () {
                    self.$owl.trigger('replace.owl.carousel', _html).trigger('refresh.owl.carousel');
                    //self.$owl.owlCarousel( carousel_Settings );
                    $timeout(function () {
                        var html = $('#dayPicker .owl-stage-outer');
                        //console.log(html)
                        $compile(html)($scope);
                        self.$owl.trigger('to.owl.carousel', [Number(self.selectedDay) - Number(self.minDay), 1, true]);
                    });
                });

                /*let delta =qtyDaysOfMonth-self.qtyDaysOfMonth;
                if(delta>0){
                    for(let i=1;i<=delta;i++){
                        let html = '<div class="item"><a  ng-click="$ctrl.setDay(day)">'+Number(self.qtyDaysOfMonth)+i+'</a></div>'
                        console.log(html)
                        self.$owl.trigger('add.owl.carousel', [$(html), Number(self.qtyDaysOfMonth)+i])
                           .trigger('refresh.owl.carousel')
                    }
                    //self.$owl.trigger('add.owl.carousel',[])
                }else if(delta<0){
                  }*/
            }
            self.qtyDaysOfMonth = qtyDaysOfMonth;
        };
        $scope.$watch(function () {
            return self.parent.td;
        }, function (n, o) {
            if (n && o) {
                self.date = n;
                //console.log(self.date)
                var nd = new Date(n);
                var od = new Date(o);
                var nM = nd.getMonth();
                var oM = od.getMonth();
                if (nM != oM) {
                    activate('reload');
                } else {
                    self.selectedDay = self.parent.td.getDate();
                    //console.log(self.selectedDay)
                }
            }
        });
        function setDay(day) {
            self.selectedDay = day;
            self.parent.td.setDate(day);
            self.parent.setDay();
        }
        function filterNumOfDays(item) {
            //return true;
            var i = Number(item);
            if (i >= self.minDay || i <= self.daysOfMonth) {
                return true;
            }
        }
        function prev() {
            console.log('prev');
            self.$owl.trigger('prev.owl.carousel', [self.selectedDay - 3, 300]);
        }
        function next() {
            console.log('next');
            self.$owl.trigger('next.owl.carousel', [self.selectedDay + 3, 300]);
        }
    }
})();
//# sourceMappingURL=dayOfMonth.components.js.map
'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('priceGoods',function () {
            return {
                template:"<div></div>",
                controller: goodsCtrl
            }
        })
        .directive('priceServices',function () {
            return {
                template:"<div></div>",
                controller: servicesCtrl
            }
        })
    function goodsCtrl($scope,$element,$compile,$http,$stateParams,$state,$anchorScroll,global,$q,$rootScope,$location,$timeout,$sce){
        var self=this;
        self.global=global;
        $q.when()
            .then(function(){
                if(global.get('tempContent').val){
                    var html = global.get('tempContent').val;
                    $('#tempContent').empty()
                    global.set('tempContent',null)
                    var o ={data:{html:html}}
                    if(tempTitles){
                        o.data.titles=tempTitles
                    }
                    return o;
                }else{

                    return $http.get('views/template/partials/pricegoods.html')
                }
            })
            .then(function (response) {
                //console.log(response)
                var linkFn = $compile(response.data.html);
                var content = linkFn($scope);
                $element.append(content);
                //$element.append(response.data.html);
                $anchorScroll()
                //console.log(response.data.titles)
                //var titles = {}
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        //console.log(k)
                        if(response.data.titles[k]){
                            if(k=='title'){
                                if(response.data.titles[k].indexOf(global.get('titles').val[k])<0){
                                    global.get('titles').val[k]=response.data.titles[k]+'. '+global.get('titles').val[k];
                                }else{
                                    global.get('titles').val[k]=response.data.titles[k];
                                }
                            }else if(k=='canonical'){
                                try{
                                    global.get('titles').val[k]=$sce.trustAsResourceUrl(response.data.titles[k]);
                                }catch(err){console.log(err)}

                                //console.log(global.get('titles').val[k])
                            }else{
                                global.get('titles').val[k]=response.data.titles[k]
                            }
                        }
                    }

                    //global.set('titles',titles)
                }
            })
    }

    function servicesCtrl($scope,$element,$compile,$http,$stateParams,$state,$anchorScroll,global,$q,$rootScope,$location,$timeout,$sce){
        var self=this;
        self.global=global;
        $scope.$watch(function () {
            return  global.get('currency').val
        },function (n,o) {
            if(n!=o){
                getNewPrice()
            }
        })
        $q.when()
            .then(function(){
                if(global.get('tempContent').val){
                    var html = global.get('tempContent').val;
                    $('#tempContent').empty()
                    global.set('tempContent',null)
                    var o ={data:{html:html}}
                    if(tempTitles){
                        o.data.titles=tempTitles
                    }
                    return o;
                }else{
                    return $http.get('views/template/partials/priceservices.html?currency='+global.get('currency').val)
                }
            })
            .then(function (response) {
                //console.log(response)
                var linkFn = $compile(response.data.html);
                var content = linkFn($scope);
                $element.append(content);
                $anchorScroll()
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        if(response.data.titles[k]){
                            if(k=='title'){
                                if(response.data.titles[k].indexOf(global.get('titles').val[k])<0){
                                    global.get('titles').val[k]=response.data.titles[k]+'. '+global.get('titles').val[k];
                                }else{
                                    global.get('titles').val[k]=response.data.titles[k];
                                }
                            }else if(k=='canonical'){
                                try{
                                    global.get('titles').val[k]=$sce.trustAsResourceUrl(response.data.titles[k]);
                                }catch(err){console.log(err)}
                            }else{
                                global.get('titles').val[k]=response.data.titles[k]
                            }
                        }
                    }

                    //global.set('titles',titles)
                }
            })
        function getNewPrice() {
            $q.when()
                .then(function(){
                    return $http.get('views/template/partials/priceservices.html?currency='+global.get('currency').val)
                })
                .then(function (response) {
                    //console.log(response)
                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                    $element.empty()
                    $element.append(content);
                    $anchorScroll()
                })
        }
    }
})()




'use strict';
(function(){
    angular.module('gmall.services')
        .directive('schedulePlaceFromServer',schedulePlaceFromServerDirective)
        .directive('ngRepeatEndWatch', function () {
            return {
                restrict: 'A',
                scope: {},
                link: function (scope, element, attrs) {
                    if (attrs.ngRepeat) {
                        if (scope.$parent.$last) {
                            if (attrs.ngRepeatEndWatch !== '') {
                                if (typeof scope.$parent.$parent[attrs.ngRepeatEndWatch] === 'function') {
                                    // Executes defined function
                                    scope.$parent.$parent[attrs.ngRepeatEndWatch]();
                                } else {
                                    // For watcher, if you prefer
                                    scope.$parent.$parent[attrs.ngRepeatEndWatch] = true;
                                }
                            } else {
                                // If no value was provided than we will provide one on you controller scope, that you can watch
                                // WARNING: Multiple instances of this directive could yeild unwanted results.
                                scope.$parent.$parent.ngRepeatEnd = true;
                            }
                        }
                    } else {
                        throw 'ngRepeatEndWatch: `ngRepeat` Directive required to use this Directive';
                    }
                }
            };
        })
        .directive('setClassWhenAtTop', function ($window,$timeout) {
            var $win = angular.element($window); // wrap window object as jQuery object
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var topClass = attrs.setClassWhenAtTop, // get CSS class from directive's attribute value
                        offsetTop = element.offset().top-60; // get element's top relative to the document

                    scope.mastersRepeatDone=mastersRepeatDone;
                    var first,delay=1000;
                    function mastersRepeatDone() {
                        if(first){delay=500}else{first=true;}
                        $timeout(function(){
                            init()
                        },delay)

                    }

                    var scrollHandler =function (e) {
                        if ($win.scrollTop() >= offsetTop) {
                            element.addClass(topClass);
                        } else {
                            element.removeClass(topClass);
                        }
                    }

                    function init() {
                        var w=0,outerW=1;
                        try{
                            w =element.width();
                            outerW = element.parent().parent().width()
                        }catch(err){}
                        if(outerW>=w){
                            $(window).scroll(scrollHandler);
                        }else{
                            $(window).off("scroll", scrollHandler);
                        }

                    }

                }
            };
        })


    function schedulePlaceFromServerDirective(global){
        return {
            /*scope: {
                stuff:'@'
            },*/
            scope:true,
            bindToController: true,
            controller: schedulePlaceFromServerCtrl,
            controllerAs: '$ctrl',
            replace: false,
            /*transclude: true,
            template: '<div ng-transclude></div>'*/
        }
    };
    schedulePlaceFromServerCtrl.$inject=['$rootScope','Booking','$scope','$http','global','$q','$compile','$attrs','$uibModal','$state','$timeout']
    function schedulePlaceFromServerCtrl($rootScope,Booking,$scope,$http,global,$q,$compile,$attrs,$uibModal,$state,$timeout) {
        var self = this;
        self.moment=moment;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.changeWeek=changeWeek;
        self.chancheActiveSlide=chancheActiveSlide;
        self.changeService=changeService;
        self.setDataForEntry=setDataForEntry;



        self.week=0;
        var delay;
        self.services=null;
        if($attrs.services){
            try{
                var services = JSON.parse($attrs.services);
                //console.log(global.get('services').val)
            }catch(err){
                console.log(err)
            }
        }
        if($attrs.stuff){
            self.stuff=$attrs.stuff;
        }
        self.$onInit=function () {
            //console.log($attrs)
            //console.log(self.stuff)
        }
        $scope.$watch(function () {
            return self.week
        },function (n,o) {
            if(n!=o){
                self.changeWeek(n)
            }
        })
        function changeWeek(week,service) {
            //console.log(week)
            self.week=week
            if(!service){service=$attrs.stuff}
            //console.log(week)
            return $q.when()
                .then(function(){
                    var url='views/template/partials/scheduleplace/'+week
                    return $http.get(url.trim()+'.html',{params:{stuff:service,templ:$attrs.templ}})
                })
                .then(function(response){
                   // console.log(response)
                    if(!response){return;}
                    var addHtml=angular.element(response.data.html)
                    var atd1;
                    if(addHtml.find('#innerDivInschedule').html()){
                        atd1=$compile(addHtml.find('#innerDivInschedule').html())($scope)
                    }else{
                        atd1=$compile(addHtml)($scope)
                    }

                    var innerDivInschedule=$('#innerDivInschedule');
                    if(innerDivInschedule[0]){
                        innerDivInschedule.empty().append(atd1)
                    }

                })
                .catch(function (err) {
                    console.log(err)
                })
        }
        function chancheActiveSlide(direction) {
            if(delay){return}
            var week=self.week;
            if(direction=='right'){
                if(week>0){
                    week--;
                }else{
                    return;
                }
            }else{
                if(week<6){
                    week++;
                }else{
                    return
                }
            }
            delay=true;
            changeWeek(week).then(function () {
                delay=false;
            })


        }
        function changeService(s) {
            //console.log(delay,s)
            self.stuff=s
            if(delay){return}
            delay=true;
            changeWeek(self.week,s).then(function () {
                delay=false;
            })
        }
        function setDataForEntry(entry) {
            //console.log(global.get('seller').val)
            if(!global.get('seller').val){return}
            console.log(entry)
            //console.log('setDataForEntry')




            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/ORDERS/online/classInfo.html',
                    controller: classInfoCtrl,
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                    resolve: {
                        entry :function () {
                            return entry;
                        }
                    }
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(entry){
                    $rootScope.$emit('modalClosed');
                    //console.log(item)
                    var o ={_id:entry._id}
                    var field ='masterReplace pays members'
                    o['masterReplace']=entry['masterReplace']
                    o['pays']=entry['pays']
                    o['members']=entry['members']
                    //console.logmembers
                    Booking.save({update:field},o,function(err){
                        global.set('saving',true);
                        $timeout(function(){
                            global.set('saving',false);
                            $state.reload();
                        },1500)


                    })
                    resolve(entry)
                },function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        classInfoCtrl.$inject=['$scope','$uibModalInstance','$rootScope','global','exception','Booking','entry']
        function classInfoCtrl($scope,$uibModalInstance,$rootScope,global,exception,Booking,entry) {

            var self = this;
            self.entry=entry;
            self.ok = function ok() {
                $uibModalInstance.close($scope.entry);
            }
            self.cancel = function cancel() {
                $uibModalInstance.dismiss();
            };
            $scope.entry=entry;
            var currentDate=Booking.getDateStringFromEntry(entry,true)
            self.dateEntry=moment(currentDate).format('LL')+','+moment(currentDate).format('dddd');
            $scope.dateEntry=self.dateEntry;
            $q.when()
                .then(function(){
                    return global.get('masters').val;
                })
                .then(function(data){
                    //console.log(data)
                    $scope.masters=data.map(function(m){
                        //m.stuffs=m.stuffs.map(function(s){return s._id})
                        return m
                    })
                    //.filter(function(m){return (m.stuffs && m.stuffs.length)});


                })
                .catch(function(err){
                    exception.catcher('получение списка мастеров')(err)
                });




        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('scheduleMaster',scheduleDirective)
        .directive('schedulePlace',schedulePlaceDirective)
        .directive('schedulePlaceFromServer22',schedulePlaceFromServerDirective)
        .directive('ngRepeatEndWatch', function () {
            return {
                restrict: 'A',
                scope: {},
                link: function (scope, element, attrs) {
                    if (attrs.ngRepeat) {
                        if (scope.$parent.$last) {
                            if (attrs.ngRepeatEndWatch !== '') {
                                if (typeof scope.$parent.$parent[attrs.ngRepeatEndWatch] === 'function') {
                                    // Executes defined function
                                    scope.$parent.$parent[attrs.ngRepeatEndWatch]();
                                } else {
                                    // For watcher, if you prefer
                                    scope.$parent.$parent[attrs.ngRepeatEndWatch] = true;
                                }
                            } else {
                                // If no value was provided than we will provide one on you controller scope, that you can watch
                                // WARNING: Multiple instances of this directive could yeild unwanted results.
                                scope.$parent.$parent.ngRepeatEnd = true;
                            }
                        }
                    } else {
                        throw 'ngRepeatEndWatch: `ngRepeat` Directive required to use this Directive';
                    }
                }
            };
        })
        .directive('setClassWhenAtTop', function ($window,$timeout) {
            var $win = angular.element($window); // wrap window object as jQuery object
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var topClass = attrs.setClassWhenAtTop, // get CSS class from directive's attribute value
                        offsetTop = element.offset().top-60; // get element's top relative to the document

                    scope.mastersRepeatDone=mastersRepeatDone;
                    var first,delay=1000;
                    function mastersRepeatDone() {
                        if(first){delay=500}else{first=true;}
                        $timeout(function(){
                            init()
                        },delay)

                    }

                    var scrollHandler =function (e) {
                        if ($win.scrollTop() >= offsetTop) {
                            element.addClass(topClass);
                        } else {
                            element.removeClass(topClass);
                        }
                    }

                    function init() {
                        var w=0,outerW=1;
                        try{
                            w =element.width();
                            outerW = element.parent().parent().width()
                        }catch(err){}
                        if(outerW>=w){
                            $(window).scroll(scrollHandler);
                        }else{
                            $(window).off("scroll", scrollHandler);
                        }

                    }

                }
            };
        })

    function scheduleDirective(global){
        return {
            scope: {
                masterId:'@'
            },
            bindToController: true,
            controller: listCtrl,
            controllerAs: '$ctrl',
            templateUrl: function (element,attrs) {
                var s=(attrs && attrs.templ && attrs.templ!='0')?attrs.templ:'';
                var sM=(attrs && attrs.mobile)?'Mobile':'';
               return 'views/template/partials/home/schedule/directive/schedule'+s+sM+'.html'
            }
        }
    };
    function schedulePlaceDirective(global){
        return {
            scope: {
                placeId:'@',
                scheduleStuff:'@',
            },
            bindToController: true,
            controller: placeCtrl,
            controllerAs: '$ctrl',
            templateUrl: function(element,attrs){
                var s=(attrs && attrs.templ && attrs.templ!='0')?attrs.templ:'';
                var sM=(attrs && attrs.mobile)?'Mobile':'';
                var url = 'views/template/partials/home/scheduleplace/directive/scheduleplace'+s+sM+'.html'
                //console.log(url)
                return url
            }
        }
    };
    function schedulePlaceFromServerDirective(global){
        return {
            /*scope: {
                stuff:'@'
            },*/
            scope:true,
            bindToController: true,
            controller: schedulePlaceFromServerCtrl,
            controllerAs: '$ctrl',
            replace: false,
            /*transclude: true,
            template: '<div ng-transclude></div>'*/
        }
    };
    listCtrl.$inject=['$scope','Booking','Master','Stuff','$rootScope','global','Confirm','$q','exception','$state','Workplace'];
    function listCtrl($scope,Booking,Master,Stuff,$rootScope,global,Confirm,$q,exception,$state,Workplace){
        var self = this;
        //console.log('listCtrl!!')
        self.moment=moment;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$rootScope.$state;
        self.Items=Booking;
        self.onlineEntr={};
        self.date = new Date();
        self.td=new Date();
        var d;
        self.datesFoeWeeks=[]
        for(var i=0;i<=7;i++){
            d= new Date(self.date)
            d.setTime(d.getTime() + (i*7)*86400000);
            d.setHours(0)
            self.datesFoeWeeks.push(d)
        }

        //console.log(self.datesFoeWeeks)
        var tz =  self.date.getTimezoneOffset()/60
        var month = self.date.getMonth()// + 1; //months from 1-12
        var day = self.date.getDate();
        var year = self.date.getFullYear();
        if(month<10){month='0'+month}
        if(day<10){day='0'+day}


        self.minDurationForService=global.get('store').val.seller.minDurationForService||15;
        var delta=0;
        //console.log(self.minDurationForService)
        switch (self.minDurationForService){
            case 30: delta=1;break;
            case 60: delta=3;break;
            case 90: delta=5;break;
            case 120:delta=7;break;
            default :delta=0;
        }



        self.timeParts=Booking.timeParts
        self.timePartsForTable=[];
        self.timePartsI=[];
        for(var i=0;i<96;i=i+1+delta){
            self.timePartsForTable.push(Booking.timeParts[i])
            self.timePartsI.push(i)
        }

        //console.log(self.timeParts)
        self.startTimeParts=Booking.startTimeParts
        self.endTimeParts=Booking.endTimeParts
        self.timeTable=Booking.timeTable;
        self.timeTable15min=Booking.timeTable15min;


        self.paginate={page:0,rows:100,totalItems:0}

        //console.log(global.get('langForm'))

        self.items=[];// list of stuffs
        self.selectedStuff=[];//
        self.selectedMaster;
        self.newItem={}
        var masters;

        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD.MM.YY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            autoUpdateInput: true,
            autoapply: true,
            eventHandlers: {
                'apply.daterangepicker': function(ev, picker) {
                    changeDate()
                }
            }
        }
        var dtt= new Date();
        self.datePickerOptions ={
            //dateDisabled: disabled,
            formatYear: 'yy',
            maxDate: dtt.setDate(dtt.getDate() + 30),
            //minDate: dtt,
            startingDay: 1
        }


        //self.getList=getList;
        self.newBooking=newBooking;
        self.changeDate=changeDate;


        self.selectStuff=selectStuff;

        self.filterTimePart=filterTimePart;
        self.filterTimePartForMaster=filterTimePartForMaster;
        self.booking=booking;
        self.getDateObj=getDateObj;
        self.getDateObj2=getDateObj2;
        self.changeWeek=changeWeek;
        self.disabledTimePart=disabledTimePart;



        self.$onInit=function () {
            activate();
            $scope.$on('time_is_buzy',function () {
                console.log('time_is_buzy')
                getBooking()
            })
        }



        function selectStuff(item) {
           // console.log('selectStuff')
            //console.log(item.selectedStuff)
            if(item){
                self.selectedStuff=[item]
            }else{
                self.selectedStuff=[]
            }
            self.selectedMaster=null;
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            $scope.mastersRepeatDone()
        }

        //*******************************************************

        

        function activate() {
           /* socket.on('newRecordOnSite',function(){
                console.log('newRecordOnSite');
                getBooking()
            })*/
            if(!global.get('user').val){
                $scope.$on('logged',function(){
                    setUserAtEntry()
                })
            }
            changeStartEndTimeParts()
            setWeekDates(0)
            self.weeksRange=Booking.getWeeksRange(self.td)


            $q.when()
                .then(function () {
                    return getMasters()
                })
                .then(function () {
                    if(!global.get('workplaces').val){
                        return Workplace.getList()
                    }

                })
                .then(function(wp){

                    if(wp){
                        global.set('workplaces',wp);
                        self.workplaces=global.get('workplaces').val
                    }

                    /*console.log(self.masters)
                    console.log(self.masterId)*/
                    self.selectedMaster=angular.copy(self.masters.getOFA('_id',self.masterId))
                    //console.log(self.selectedMaster)
                    if(self.selectedMaster){
                        self.query.master = self.selectedMaster._id;
                        //console.log(self.query)
                    }else{
                        self.selectedMaster=angular.copy(self.masters.getOFA('url',self.masterId))
                        if(self.selectedMaster){
                            self.query.master = self.selectedMaster._id;
                        }else{
                            self.masters=null;
                            throw "master doesn't match222"
                        }
                    }
                    //console.log(self.selectedMaster)
                    return getBooking()
                })
                .then(function () {
                    return getServices();
                })
                .catch(function (err) {
                    console.log(err)
                    exception.catcher('инициализация')(err)
                })
        }
        function setWeekDates(week) {
            self.week=week;
            if(!week){
                var date = self.td;

            }else{
                var date= new Date(self.td)
                date.setTime(date.getTime() + (week*7)*86400000);
                date.setHours(0)
            }
            self.datesOfWeeks=Booking.getDatesForWeek(date);
            //console.log(self.datesOfWeeks)
            try{
                self.currentMonth=moment(date).format('MMMM')
                //console.log(self.currentMonth)
            }catch(err){}

            self.currentDayOfWeek=self.date.getDay()
            if(self.currentDayOfWeek==0){self.currentDayOfWeek=7;}
            self.currentDayOfWeek--;
            if(week){self.currentDayOfWeek==0;}
            self.query={date:{$in:self.datesOfWeeks.map(function (item) {
                return item.date
            })},master:self.masterId};
        }
        function changeWeek(week) {
            setWeekDates(week)
            self.tempEntry=null;
            $q.when()
                .then(function () {
                    return getBooking()
                })
        }
        function getMasters(){
            return $q.when()
                .then(function(){
                    //return Master.getList()
                    return global.get('masters').val
                })
                .then(function(data){
                    //console.log(data)
                    self.masters=data.map(function(m){
                        if(m.stuffs){
                            //m.stuffs=m.stuffs.map(function(s){return s._id})
                        }else{
                            m.stuffs=[];
                        }

                        return m
                    }).filter(function (m) {
                        //console.log(m.stuffs)
                        return m.stuffs.length
                    });
                    //console.log(self.masters)
                })
                .catch(function(err){
                    exception.catcher('получение списка мастеров')(err)
                });
        }



        function getBooking() {
            console.log(global.get('workplaces').val)
            //console.log(self.query,self.datesOfWeeks)
            Booking.getBookingWeek(self.query,self.selectedMaster,self.datesOfWeeks,ngClickOnEntry)
                .then(function(data) {
                    //console.log(self.selectedMaster.week)
                    for(var date in self.selectedMaster.week){
                        self.selectedMaster.week[date].dateStr=getDateObj2(date,self.selectedMaster.week[date].entryTimeTable);
                    }
                    if(global.get('user').val){
                        setUserAtEntry()
                    }
                });
        }
        function getBookingOld() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.selectedMaster['week']={}
                    self.datesOfWeeks.forEach(function (d,dayOfWeek) {
                        self.selectedMaster['week'][d.date]={}
                        self.selectedMaster['week'][d.date].entryTimeTable=angular.copy(self.timeParts);
                        self.selectedMaster['week'][d.date].entryTimeTable.forEach(function (p,i) {
                            p.date=d.date;
                            p.ngClickOnEntry=ngClickOnEntry;
                            if(self.storeSchedule){
                                // в self.storeSchedule 0 - это воскр у нас 0 - это понедельник
                                var j = dayOfWeek+1;
                                if(dayOfWeek==6){
                                    j=0;
                                }
                                if(!self.storeSchedule[j].is || p.i<self.storeSchedule[j].start*4 || p.i>=self.storeSchedule[j].end*4){
                                    p.out=true;
                                }
                            }
                            if(self.selectedMaster.timeTable && self.selectedMaster.timeTable[d.dayOfYear]){
                                if(!self.selectedMaster.timeTable[d.dayOfYear].is ||
                                    p.i<self.selectedMaster.timeTable[d.dayOfYear].s*4 ||
                                    p.i>=self.selectedMaster.timeTable[d.dayOfYear].e*4)
                                {
                                    p.out=true;
                                }

                            }
                        })
                    })
                    setBookingDataInMasters(data)
                    if(global.get('user').val){
                        setUserAtEntry()
                    }
                });
        }

        function clearTempBooking() {
            var e = self.tempEntry;
            if(!e){return}
            var master= self.selectedMaster;
            for(var i=e.start;i<e.start+e.qty;i++){
                master.week[e.date].entryTimeTable[i].busy=false;
                delete master.week[e.date].entryTimeTable[i].temp
                delete master.week[e.date].entryTimeTable[i].entry
                delete master.week[e.date].entryTimeTable[i].user
                delete master.week[e.date].entryTimeTable[i].phone
                delete master.week[e.date].entryTimeTable[i].email
                delete master.week[e.date].entryTimeTable[i].usedTime
                delete master.week[e.date].entryTimeTable[i].service
                delete master.week[e.date].entryTimeTable[i].qty
                delete master.week[e.date].entryTimeTable[i].noBorder
                delete master.week[e.date].entryTimeTable[i].new
                delete master.week[e.date].entryTimeTable[i].ngClick
            }
        }
        function setTempBooking(e) {
            self.tempEntry=e;
            var master= self.selectedMaster;
            for(var i=e.start;i<e.start+e.qty;i++){
                master.week[e.date].entryTimeTable[i].busy=true;
                master.week[e.date].entryTimeTable[i].temp=true;
                if(i==e.start){
                    if(e.user){
                        master.week[e.date].entryTimeTable[i].user= e.user.name;
                        master.week[e.date].entryTimeTable[i].phone= e.user.phone;
                        master.week[e.date].entryTimeTable[i].email= e.user.email||'';
                    }
                    master.week[e.date].entryTimeTable[i].usedTime=Booking.getUsedTime(e.start,e.qty);
                    master.week[e.date].entryTimeTable[i].service= e.service.name;
                    master.week[e.date].entryTimeTable[i].new=true;
                    master.week[e.date].entryTimeTable[i].qty=e.qty;
                }
                if(i!=e.start){
                    master.week[e.date].entryTimeTable[i].noBorder=true
                }
                master.week[e.date].entryTimeTable[i].entry=e;
            }
        }
        function ngClickOnEntry(date,index) {

            var item=this;
            //console.log(item)
            if(!item.user && !item.temp){
                newBooking(date,item,index)
            }else if(item.user  && !item.temp && item.uiSref){
                $state.go('cabinet',{sec:'online'})
            }else if(item.temp){
                clearTempBooking()
            }
        }
        /* не используется*/
        function setBookingDataInMasters(booking){
            booking.forEach(function(e){
                //console.log(e)
                var master= self.selectedMaster;
                for(var i=e.start;i<e.start+e.qty;i++){
                    master.week[e.date].entryTimeTable[i].busy=true;
                    if(i==e.start){
                        master.week[e.date].entryTimeTable[i].usedTime=Booking.getUsedTime(e.start,e.qty);
                        master.week[e.date].entryTimeTable[i].userId= e.user._id;
                        master.week[e.date].entryTimeTable[i].service= e.service.name;
                        master.week[e.date].entryTimeTable[i].new=true;
                        master.week[e.date].entryTimeTable[i].qty=e.qty;
                        master.week[e.date].entryTimeTable[i].used=e.used;
                        master.week[e.date].entryTimeTable[i].confirm=e.confirm;
                    }
                    if(i!=e.start){
                        master.week[e.date].entryTimeTable[i].noBorder=true
                    }
                    master.week[e.date].entryTimeTable[i].entry=e;
                    if(global.get('store').val.onlineReservation && (!e.status || e.status!=1)){
                        master.week[e.date].entryTimeTable[i].reservation=true;
                    }
                    if(i==e.start){
                        console.log(master.week[e.date].entryTimeTable[i])
                    }
                }
            })
        }
        function setUserAtEntry() {
            var user= global.get('user').val
            if(!self.selectedMaster || !self.selectedMaster.week){return}
            for(var key in self.selectedMaster.week){
                self.selectedMaster.week[key].entryTimeTable.forEach(function (part) {
                    if(part.userId && part.userId==user._id){
                        part.user=global.get('langOrder').val.yourEntry||'Ваша запись'
                        part.uiSref="cabinet({sec:'online'})"
                    }
                })
            }

        }
        function getServices() {
            return $q.when()
                .then(function () {
                    //console.log(global.get('services').val)
                    if(!global.get('services').val){
                        return Stuff.getServicesForOnlineEntry()
                    }else{
                        return global.get('services').val
                    }

                })
                .then(function (res) {
                    if(!global.get('services').val){
                        global.set('services',res)
                    }
                    //console.log('res',res)
                    return self.items=res.map(function (s) {
                        s.duration=s.timePart*15
                        if(!s.currency){s.currency=global.get('store').val.mainCurrency}
                        s.currencyName=(global.get('store').val.currency && global.get('store').val.currency[s.currency] && global.get('store').val.currency[s.currency][2])?
                            global.get('store').val.currency[s.currency][2]:s.currency;
                        return s;

                    }).filter(function (s) {
                        return self.selectedMaster.stuffs.some(function (stuff) {
                            return stuff==s._id
                        })
                    })
                })
                /*.then(function () {
                    console.log('self.items',self.items)
                })*/
                .catch(function(err){
                    console.log(err)
                    exception.catcher('получение списка услуг')(err)
                });

        }
        function newBooking(date,part,index){
            //console.log(index<self.currentDayOfWeek)
            if(part.busy || part.out || (index<self.currentDayOfWeek && !self.week)){
                return;
            }
            if(!self.week && index==self.currentDayOfWeek){
                //console.log('провека времени записи')
                var d = new Date()
                var h = d.getHours();
                var p = Math.ceil(d.getMinutes()/15)-1;
                if(part.i-h*4+p<4){
                    console.log('провека времени записи. просрочена')
                    return;
                }
            }
            $q.when()
                .then(function () {
                    //console.log(self.items)
                    return Booking.selectService(self.items)
                })
                .then(function (item) {
                    clearTempBooking()
                    var val = part.i;
                    for(var i=0+val;i<item.timePart+val;i++){
                        if(!self.selectedMaster['week'][date].entryTimeTable[i] || self.selectedMaster['week'][date].entryTimeTable[i].out || self.selectedMaster['week'][date].entryTimeTable[i].busy){
                            throw 'Не хватает времени'
                        }
                    }
                    var e = {
                        date:date,
                        service:{
                            name:item.name
                        },
                        stuffName:item.name,
                        stuffNameL:item.nameL,
                        stuffLink:item.link,
                        backgroundcolor:item.backgroundcolor,
                        masterName:self.selectedMaster.name,
                        masterNameL:self.selectedMaster.nameL,
                        masterUrl:self.selectedMaster.url,
                        start:part.i,
                        qty:item.timePart
                    }
                    //console.log(item);
                    setTempBooking(e)
                    self.newEntry={}
                    var tempDate = self.datesOfWeeks.getOFA('date',date);
                    self.newEntry.stuff=item;
                    self.newEntry.date=tempDate.d;
                    self.newEntry.timePart={i:part.i,date:tempDate.date,master:self.selectedMaster._id};
                })
                .catch(function(err){
                    console.log(err)
                    if(err && err!="backdrop click"){
                        exception.catcher('запись на время')(err)
                    }
                })
        }

        function changeDate() {
            if(!self.date){
                self.date=new Date;
            }
            var date = new Date(self.date);
            changeStartEndTimeParts(date);

            var month = date.getMonth() //+ 1; //months from 1-12
            var day = date.getDate();
            var year = date.getFullYear();

            //console.log(d.getMonth())
            if(month<10){month='0'+month}
            if(day<10){day='0'+day}
            self.query={date:'date'+year+month+day};
            //console.log(self.query)
            getBooking()
        }
        function changeStartEndTimeParts(date) {
            if(!date){date=self.date}
            var dayOfWeek = date.getDay();
            var month = date.getMonth()
            var day = date.getDate();
            self.currentDayOfYear=Booking.getDayOfYear(month,day-1)
            if(global.get('store').val.timeTable){
                self.storeSchedule=angular.copy(global.get('store').val.timeTable)
                self.dayoff=(self.storeSchedule[dayOfWeek] && self.storeSchedule[dayOfWeek].is)?false:true;
                //console.log(self.storeSchedule)
                var start = (self.storeSchedule[dayOfWeek] && self.storeSchedule[dayOfWeek].start)?self.storeSchedule[dayOfWeek].start:6
                var end = (self.storeSchedule[dayOfWeek] && self.storeSchedule[dayOfWeek].end)?self.storeSchedule[dayOfWeek].end:20
                self.startTimeParts=start *4
                self.endTimeParts=end *4
                for(dayOfWeek in global.get('store').val.timeTable){
                    if(global.get('store').val.timeTable[dayOfWeek].start<start){
                        start=global.get('store').val.timeTable[dayOfWeek].start;
                    }
                    if(global.get('store').val.timeTable[dayOfWeek].end>end){
                        end=global.get('store').val.timeTable[dayOfWeek].end;
                    }
                }
                self.startTimeParts=start *4
                self.endTimeParts=end *4
            }
        }

        function filterTimePart(part) {
            return part.i>=self.startTimeParts&&part.i<self.endTimeParts
        }
        function filterTimePartForMaster(part) {
            if(self.timePartsI.indexOf(part.i)<0){
                return;
            }
            return part.i>=self.startTimeParts&&part.i<self.endTimeParts

            if(part.i>=self.startTimeParts&&part.i<self.endTimeParts){
                // здесь проверка конкретного для для мастера
                if(self.selectedMaster['week'][part.date].masterSchedule){
                    if(part.i<self.selectedMaster['week'][part.date].masterSchedule.s
                        ||part.i>=self.selectedMaster['week'][part.date].masterSchedule.e
                        || !self.selectedMaster['week'][part.date].masterSchedule.is){
                        part.out=true;
                    }
                }
                //console.log(self.mastersO[part.master],part.master)
                return true;
            }else{
                part.out=true;
            }
        }
        function booking() {
            if(!self.newEntry){return;}

            /*if(!self.week && index==self.currentDayOfWeek){
                //console.log('провека времени записи')
                var d = new Date()
                var h = d.getHours();
                var p = Math.ceil(d.getMinutes()/15)-1;
                console.log(part.i,h*4+p)
                if(part.i-h*4+p<4){
                    console.log('провека времени записи. просрочена')
                    return;
                }
            }*/

            self.newEntry.master=self.selectedMaster._id;
            //console.log(self.newEntry)
            global.get('functions').val.witget('dateTime',self.newEntry)
        }
        function getDateObj(dateStr) {
            var year = dateStr.substring(4,8)
            var month = dateStr.substring(8,10)
            var day = dateStr.substring(10)

            try{
                var date = new Date(year,month,day)
                var s =moment(date).format('ddd');
                return s+'/'+day;
            }catch(err){console.log(err);return 'error handle date'}
        }
        function getDateObj2(dateStr,data) {


            //console.log(data)
            if(!data || !data.length){return}
            var arr = data.filter(function (el) {
                if(el.busy && el.i && el.entry && el.entry.start==el.i){
                    if(el.entry.workplace && self.workplaces && self.workplaces.length){
                        //console.log(el.workplace)
                        var wp = self.workplaces.getOFA('_id',el.entry.workplace);
                        if(wp){
                           el.workplaceName=wp.name;
                        }
                        el.comment=el.entry.comment;
                        //console.log(wp)
                    }
                }
                return !el.out && el.busy
            })
            //console.log(arr)
            if(!arr.length){
                return
            }
            var year = dateStr.substring(4,8)
            var month = dateStr.substring(8,10)
            var day = dateStr.substring(10)


            try{
                var date = new Date(year,month,day)
                //console.log(date)
                var s =moment(date).format('dddd');
                var d =moment(date).format('DD.MM.YY');
                //console.log(capitalizeFirstLetter(s)+' </br>'+d)
                return capitalizeFirstLetter(s)+' '+d;


               // var s =moment(date).format('ddd');
                //return s+'/'+day;
            }catch(err){console.log(err);return 'error handle date'}

        }
        function capitalizeFirstLetter(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
        function getDateObjFromStr(dateStr) {
            var year = dateStr.substring(4,8)
            var month = dateStr.substring(8,10)
            var day = dateStr.substring(10)

            try{
                var date = new Date(year,month,day)
                return date;
            }catch(err){console.log(err);return 'error handle date'}
        }
        function disabledTimePart(part,index) {
            if(index<self.currentDayOfWeek && !self.week){return true}
            if(!self.week && index==self.currentDayOfWeek && !part.busy){
                //console.log('провека времени записи')
                var d = new Date()
                var h = d.getHours();
                var p = Math.ceil(d.getMinutes()/15)-1;
                if(part.i-h*4+p<4){
                    return true;
                }
            }
        }

    }
    placeCtrl.$inject=['$scope','Booking','Master','Stuff','$rootScope','global','Confirm','$q','exception','$state','Workplace','$element'];
    function placeCtrl($scope,Booking,Master,Stuff,$rootScope,global,Confirm,$q,exception,$state,Workplace,$element){
        var self = this;
        if(angular.element($element).data('stuff')){
            self.stuff=angular.element($element).data('stuff');
        }
        self.moment=moment;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$rootScope.$state;
        self.Items=Booking;
        self.onlineEntr={};
        self.date = new Date();
        self.td=new Date();
        var d;
        self.datesFoeWeeks=[]
        for(var i=0;i<=7;i++){
            d= new Date(self.date)
            d.setTime(d.getTime() + (i*7)*86400000);
            d.setHours(0)
            self.datesFoeWeeks.push(d)
        }
        //console.log(self.datesFoeWeeks)
        var tz =  self.date.getTimezoneOffset()/60
        var month = self.date.getMonth()// + 1; //months from 1-12
        var day = self.date.getDate();
        var year = self.date.getFullYear();
        if(month<10){month='0'+month}
        if(day<10){day='0'+day}


        self.week=0;
        self.noWrapSlides = true;
        $scope.$watch(function () {
            return self.week
        },function (n,o) {
            if(n!=o){
                self.changeWeek(n)
            }
        })

        self.minDurationForService=global.get('store').val.seller.minDurationForService||15;
        var delta=0;
        //console.log(self.minDurationForService)
        switch (self.minDurationForService){
            case 30: delta=1;break;
            case 60: delta=3;break;
            case 90: delta=5;break;
            case 120:delta=7;break;
            default :delta=0;
        }



        self.timeParts=Booking.timeParts
        self.timePartsForTable=[];
        self.timePartsI=[];
        for(var i=0;i<96;i=i+1+delta){
            self.timePartsForTable.push(Booking.timeParts[i])
            self.timePartsI.push(i)
        }
        self.slideMasterWeekArry=[{id:0,active:false},{id:1,active:false},{id:2,active:false},{id:3,active:false},{id:4,active:false},{id:5,active:false},{id:6,active:false}]
        self.currentDayOfWeek=5;
        //console.log(self.timeParts)
        self.startTimeParts=Booking.startTimeParts
        self.endTimeParts=Booking.endTimeParts
        self.timeTable=Booking.timeTable;
        self.timeTable15min=Booking.timeTable15min;


        self.paginate={page:0,rows:100,totalItems:0}

        //console.log(global.get('langForm'))

        self.items=[];// list of stuffs
        self.selectedStuff=[];//
        self.selectedMaster;
        self.newItem={}
        var masters;


        var dtt= new Date();
        self.datePickerOptions ={
            //dateDisabled: disabled,
            formatYear: 'yy',
            maxDate: dtt.setDate(dtt.getDate() + 30),
            //minDate: dtt,
            startingDay: 1
        }


        self.changeDate=changeDate;



        self.filterTimePart=filterTimePart;
        self.filterTimePartForMaster=filterTimePartForMaster;
        self.getDateObj=getDateObj;
        self.changeWeek=changeWeek;
        self.disabledTimePart=disabledTimePart;

        self.swipeLeft=swipeLeft
        self.swipeRight=swipeRight
        function swipeLeft(idx) {
            if(idx.id<6){self.currentDayOfWeek++}else{self.currentDayOfWeek=0}
        }
        function swipeRight(idx) {
            if(idx.id==0){self.currentDayOfWeek=6}else{self.currentDayOfWeek--}
        }



        self.$onInit=function () {
            activate();
        }



        function selectStuff(item) {
            // console.log('selectStuff')
            //console.log(item.selectedStuff)
            if(item){
                self.selectedStuff=[item]
            }else{
                self.selectedStuff=[]
            }
            self.selectedMaster=null;
            Booking.filterListServices(self.masters,self.items,self.selectedStuff);
            $scope.mastersRepeatDone()
        }

        //*******************************************************



        function activate() {
            /*socket.on('newRecordOnSite',function(){
                console.log('newRecordOnSite');
                $timeout(function () {
                    getBooking()
                },1000)
            })*/
            changeStartEndTimeParts()
            setWeekDates(0)
            self.weeksRange= Booking.getWeeksRange(self.td)

            $q.when()
                .then(function () {
                    return getWorkplaces()
                })
                .then(function () {
                    return getMasters()
                })
                .then(function () {
                    return getServices();
                })
                .then(function(){
                    if(self.placeId){
                        self.selectedWorkplace=angular.copy(self.workplaces.getOFA('_id',self.placeId))
                    }

                    if(self.selectedWorkplace){
                        self.query.workplace = self.selectedWorkplace._id;
                        //console.log(self.query)
                    }else{
                        self.selectedWorkplace={}
                    }
                    if(self.stuff){
                        self.query['service._id']=self.stuff;
                    }
                    //console.log(self.query)
                    return getBooking()
                })
                .then(function () {
                    return getServices();
                })
                .catch(function (err) {
                    console.log(err)
                    exception.catcher('инициализация')(err)
                })
        }
        function setWeekDates(week) {
            self.week=week;
            if(!week){
                var date = self.td;

            }else{
                var date= new Date(self.td)
                date.setTime(date.getTime() + (week*7)*86400000);
                date.setHours(0)
            }
            self.datesOfWeeks=Booking.getDatesForWeek(date);
            try{
                self.currentMonth=moment(date).format('MMMM')
                //console.log(self.currentMonth)
            }catch(err){}

            self.currentDayOfWeek=self.date.getDay()
            if(self.currentDayOfWeek==0){self.currentDayOfWeek=7;}
            self.currentDayOfWeek--;
            if(week){self.currentDayOfWeek==0;}
            self.query={date:{$in:self.datesOfWeeks.map(function (item) {
                return item.date
            })},master:self.masterId};
        }
        function changeWeek(week) {
            setWeekDates(week)
            self.tempEntry=null;
            $q.when()
                .then(function () {
                    return getBooking()
                })
        }
        function getWorkplaces(){
            return $q.when()
                .then(function(){
                    //return Master.getList()
                    return Workplace.getList(null,{})
                })
                .then(function(data){
                    self.workplaces=data
                })
                .catch(function(err){
                    exception.catcher('получение списка рабочих мест')(err)
                });
        }
        function getMasters(){
            return $q.when()
                .then(function(){
                    //return Master.getList()
                    return global.get('masters').val
                })
                .then(function(data){
                    //console.log(data)
                    self.masters=data
                })
                .catch(function(err){
                    exception.catcher('получение списка мастеров')(err)
                });
        }



        function getBooking() {
            //console.log(self.query)
            //console.log(self.datesOfWeeks)
            Booking.getBookingWeekScheldule(self.query,self.selectedWorkplace,self.datesOfWeeks,self.items,self.masters)
                .then(function(data) {});
        }
        function getServices() {
            return $q.when()
                .then(function () {
                    //console.log(global.get('services').val)
                    if(!global.get('services').val){
                        return Stuff.getServicesForOnlineEntry()
                    }else{
                        return global.get('services').val
                    }

                })
                .then(function (res) {
                    if(!global.get('services').val){
                        global.set('services',res)
                    }
                    return self.items=res.map(function (s) {
                        s.duration=s.timePart*15
                        if(!s.currency){s.currency=global.get('store').val.mainCurrency}
                        s.currencyName=(global.get('store').val.currency && global.get('store').val.currency[s.currency] && global.get('store').val.currency[s.currency][2])?
                            global.get('store').val.currency[s.currency][2]:s.currency;
                        return s;

                    })
                })
                /*.then(function () {
                 console.log('self.items',self.items)
                 })*/
                .catch(function(err){
                    console.log(err)
                    exception.catcher('получение списка услуг')(err)
                });

        }
        function changeDate() {
            if(!self.date){
                self.date=new Date;
            }
            var date = new Date(self.date);
            changeStartEndTimeParts(date);

            var month = date.getMonth() //+ 1; //months from 1-12
            var day = date.getDate();
            var year = date.getFullYear();

            //console.log(d.getMonth())
            if(month<10){month='0'+month}
            if(day<10){day='0'+day}
            self.query={date:'date'+year+month+day};
            //console.log(self.query)
            getBooking()
        }
        function changeStartEndTimeParts(date) {
            if(!date){date=self.date}
            var dayOfWeek = date.getDay();
            var month = date.getMonth()
            var day = date.getDate();
            self.currentDayOfYear=Booking.getDayOfYear(month,day-1)
            if(global.get('store').val.timeTable){
                self.storeSchedule=angular.copy(global.get('store').val.timeTable)
                self.dayoff=(self.storeSchedule[dayOfWeek] && self.storeSchedule[dayOfWeek].is)?false:true;
                //console.log(self.storeSchedule)
                var start = (self.storeSchedule[dayOfWeek] && self.storeSchedule[dayOfWeek].start)?self.storeSchedule[dayOfWeek].start:6
                var end = (self.storeSchedule[dayOfWeek] && self.storeSchedule[dayOfWeek].end)?self.storeSchedule[dayOfWeek].end:20
                self.startTimeParts=start *4
                self.endTimeParts=end *4
                for(dayOfWeek in global.get('store').val.timeTable){
                    if(global.get('store').val.timeTable[dayOfWeek].start<start){
                        start=global.get('store').val.timeTable[dayOfWeek].start;
                    }
                    if(global.get('store').val.timeTable[dayOfWeek].end>end){
                        end=global.get('store').val.timeTable[dayOfWeek].end;
                    }
                }
                //console.log(self.startTimeParts,self.endTimeParts)
                self.startTimeParts=start *4
                self.endTimeParts=end *4
            }
        }
        function filterTimePart(part) {
            return part.i>=self.startTimeParts&&part.i<self.endTimeParts
        }
        function filterTimePartForMaster(part) {
            if(self.timePartsI.indexOf(part.i)<0){
                return;
            }
            return part.i>=self.startTimeParts&&part.i<self.endTimeParts
        }
        function getDateObj(dateStr) {
            var year = dateStr.substring(4,8)
            var month = dateStr.substring(8,10)
            var day = dateStr.substring(10)

            try{
                var date = new Date(year,month,day)
                var s =moment(date).format('ddd');
                return s+'/'+day;
            }catch(err){console.log(err);return 'error handle date'}
        }
        function getDateObjFromStr(dateStr) {
            var year = dateStr.substring(4,8)
            var month = dateStr.substring(8,10)
            var day = dateStr.substring(10)

            try{
                var date = new Date(year,month,day)
                return date;
            }catch(err){console.log(err);return 'error handle date'}
        }
        function disabledTimePart(part,index) {
            if(!self.week && index==self.currentDayOfWeek){
                //console.log('провека времени записи')
                var d = new Date()
                var h = d.getHours();
                var p = Math.ceil(d.getMinutes()/15)-1;
                if(part.i-h*4+p<4){
                    return true;
                }
            }
        }

    }
    schedulePlaceFromServerCtrl.$inject=['$scope','$http','global','$q','$compile','$attrs']
    function schedulePlaceFromServerCtrl($scope,$http,global,$q,$compile,$attrs) {
        var self = this;
        self.moment=moment;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.changeWeek=changeWeek;
        self.chancheActiveSlide=chancheActiveSlide;
        self.changeService=changeService;

        self.week=0;
        var delay;
        self.services=null;
        if($attrs.services){
            try{
                var services = JSON.parse($attrs.services);
                //console.log(global.get('services').val)
            }catch(err){
                console.log(err)
            }
        }
        if($attrs.stuff){
            self.stuff=$attrs.stuff;
        }
        self.$onInit=function () {
            //console.log($attrs)
            //console.log(self.stuff)
        }
        $scope.$watch(function () {
            return self.week
        },function (n,o) {
            if(n!=o){
                self.changeWeek(n)
            }
        })
        function changeWeek(week,service) {
            self.week=week
            if(!service){service=$attrs.stuff}
            //console.log(week)
            return $q.when()
                .then(function(){
                    var url='views/template/partials/scheduleplace/'+week
                    return $http.get(url.trim()+'.html',{params:{stuff:service,templ:$attrs.templ}})
                })
                .then(function(response){
                   // console.log(response)
                    if(!response){return;}
                    var addHtml=angular.element(response.data.html)
                    var atd1;
                    if(addHtml.find('#innerDivInschedule').html()){
                        atd1=$compile(addHtml.find('#innerDivInschedule').html())($scope)
                    }else{
                        atd1=$compile(addHtml)($scope)
                    }

                    var innerDivInschedule=$('#innerDivInschedule');
                    if(innerDivInschedule[0]){
                        innerDivInschedule.empty().append(atd1)
                    }

                })
                .catch(function (err) {
                    console.log(err)
                })
        }
        function chancheActiveSlide(direction) {
            if(delay){return}
            var week=self.week;
            if(direction=='right'){
                if(week>0){
                    week--;
                }else{
                    return;
                }
            }else{
                if(week<6){
                    week++;
                }else{
                    return
                }
            }
            delay=true;
            changeWeek(week).then(function () {
                delay=false;
            })


        }
        function changeService(s) {
            //console.log(delay,s)
            self.stuff=s
            if(delay){return}
            delay=true;
            changeWeek(self.week,s).then(function () {
                delay=false;
            })
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Workplace', serviceFoo);
    angular.module('gmall.directives')
        .directive('workplaceList',itemListDirective)
        .directive('workplaceItem',workplaceItemDirective);
    function itemListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: itemListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/workplace/workplaceList.html',
        }
    };
    function workplaceItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: ItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/workplace/workplaceItem.html',
        }
    }
    itemListCtrl.$inject=['Workplace','$state','global','Confirm','$q','exception','Photo','$timeout'];
    function itemListCtrl(Items,$state,global,Confirm,$q,exception,Photo,$timeout){

        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$state;
        self.Items=Items;
        self.query={};
        self.paginate={page:0,rows:20,totalItems:0}
        self.newItem={name:'наименование'}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.deleteItem=deleteItem;
        self.createItem=createItem;
        self.dropCallback=dropCallback;
        self.cloneItem=cloneItem;
        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                //console.log('Activated news list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItem(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated list View');
            });
        }
        function saveField(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            self.Items.save({update:field},o ,function () {
                global.set('saving',true)
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            })
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.workplace.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }
        function cloneItem(item){
            var name;
            self.Items.create()
                .then(function (res) {
                    name=res;
                    return self.Items.getItem(item._id)
                })
                .then(function(master){
                    self.newItem=angular.copy(master)
                    self.newItem.name=name;
                    self.newItem.nameL={};

                    delete self.newItem._id
                    delete self.newItem.__v
                    delete self.newItem.url;
                    console.log( self.newItem)
                    self.newItem.blocks.forEach(function (block) {
                        delete block.img;
                        delete block._id;
                        if(block.type=='stuffs'){
                            if(block.stuffs && block.stuffs.length){
                                block.stuffs=block.stuffs.map(function (s) {
                                    return s._id
                                })
                            }
                        }
                        block.imgs=[]
                    })
                    //throw 'test'
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.workplace.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание объекта')(err)
                    }
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Workplace/'+item.url
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return self.getList();
                })
                .then(function(){
                    Photo.deleteFolder('Workplace',folder)
                })
                .catch(function(err){
                    if(!err){return}
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление объекта')(err)
                    }

                })
        }
        function dropCallback(item){
            var i=0;
            //http://stackoverflow.com/questions/28983424/make-angular-foreach-wait-for-promise-after-going-to-next-object
            setTimeout(function(){
                self.items.reduce(function(p, item) {
                    return p.then(function() {
                        i++;
                        item.index=i;
                        return saveField(item,'index')
                    });
                }, $q.when(true)).then(function(){
                    console.log(self.items.map(function(el){return el.index}))
                });
            },50)
            return item;
        }
    }

    ItemCtrl.$inject=['Workplace','$stateParams','$q','$uibModal','global','exception','Stuff','Photo','$scope','$timeout','Confirm','SetCSS'];
    function ItemCtrl(Items,$stateParams,$q,$uibModal,global,exception,Stuff,Photo,$scope,$timeout,Confirm,SetCSS){
        var self = this;
        self.Items=Items;
        self.type='Workplace'
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.listOfBlocksForWorkplacePage=listOfBlocksForWorkplacePage;
        self.listOfBlocks=listOfBlocksForWorkplacePage;
        console.log(self.listOfBlocksForWorkplacePage)
        console.log(self.listOfBlocks)
        self.moment=moment;
        self.saveField=saveField;

        self.setStyles=setStyles;

        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;


        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;

        //********************activate***************************
        activate();
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {})
            .catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        $scope.$on('changeLang',function(){
            activate();
        })
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    if(data && !data.blocks){
                        data.blocks=[];
                        saveField('blocks',[])
                    }
                    var bl=data.blocks.filter(function (b) {
                        return b
                    })
                    if(bl.length!=data.blocks.length){
                        saveField('blocks',bl)
                        data.blocks=bl;
                    }
                    data.blocks.forEach(function (b,i) {
                        if(b.type=='stuffs' && b.stuffs.length){
                            //b.imgs=b.stuffs
                            b.stuffs=b.stuffs.map(function (s) {
                                return (s._is || s)
                            })
                        }
                        b.i=i;
                    })
                    data.blocks.sort(function (a,b) {
                        return a.index-b.index
                    })
                    self.item=data;
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    if(block.elements){
                        saveField('blocks.'+block.i+'.elements',block.elements)
                    }
                    if(block.blockStyle){
                        saveField('blocks.'+block.i+'.blockStyle',block.blockStyle)
                    }

                })
        }
        function saveField(field,value,defer,indexImgs){
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }
            defer =(defer)?defer:100;
            setTimeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function addBlock(type){
            if(!type){return}
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;

            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            if(type=='slider' || type=='stuffs'){
                o.imgs=[];
                update.update+=' imgs'
            }
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    activate()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            var o={_id:self.item._id};
            var update={update:'_id_id',embeddedName:'blocks'};
            o['id']=block.id;
            update.embeddedPull=true;

            Confirm('потверждаете?')
                .then(function () {
                    self.item.blocks.splice(index,1)
                    if(!block._id){
                        update={update:'blocks'};
                        o['blocks']=self.item['blocks']
                    } else{
                        o['_id_id']=block._id;
                        update={update:'_id_id',embeddedName:'blocks'};
                        update.embeddedPull=true;
                    }
                    //console.log(update,o)
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })
                .then(function () {
                    activate()
                })



        }

        function deleteSlide(block,index){
            Photo.deleteFiles('Workplace',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/CONTENT/workplace/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        //console.log(global.get('store').val.template.master)
        if(!global.get('store').val.template.workplace){
            global.get('store').val.template.workplace={parts:[]}
        }
        var keyParts=global.get('store').val.template.workplace.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        function addItemInBlock(block,$index) {
            //console.log(block)
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(block.type=='stuffs'){
                        if(block.stuffs && block.stuffs.length && block.stuffs.some(function(s){ if(s && s._id){return s._id==item._id}else{return s==item._id}})){
                            throw 'такой объект уже есть'
                        }
                    }
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link;
                    name=item.name;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    //console.log(link)
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link,_id:item._id};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link,_id:item._id})
                    }

                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    if(block.type=='stuffs'){
                        block.stuffs=block.imgs.map(function (img) {
                            return img._id
                        })
                        saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                    }


                    //saveField('blocks.'+block.i,block)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('добавление')(err)
                    }
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
                if(block.type=='stuffs'){
                    block.stuffs=block.imgs.map(function (img) {
                        return img._id
                    })
                    saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                }
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
            if(block.type=='stuffs'){
                block.stuffs=block.imgs.map(function (img) {
                    return img._id
                })
                saveField('blocks.'+block.i+'.stuffs',block.stuffs)
            }
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }

    }

    serviceFoo.$inject=['$resource','$uibModal','$q','global'];
    function serviceFoo($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/Workplace/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
            //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
            //.catch(getItemFailed);
            function getItemComplete(response) {
                if(response && response.blocks && response.blocks.length){
                    response.blocks.forEach(function (b) {
                        if(b.type=='stuffs'){
                            if(b.stuffs && b.stuffs.length){
                                b.imgs=b.stuffs.map(function(s){
                                    if(s.gallery && s.gallery.length && s.gallery[0].img){
                                        s.img=s.gallery[0].img;
                                    }
                                    return s;
                                });
                            }else{b.imgs=[]}
                        }
                    })
                }
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/CONTENT/workplace/createItem.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,50))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()
