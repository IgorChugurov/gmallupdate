'use strict';
angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "\u0414\u041f",
      "\u041f\u041f"
    ],
    "DAY": [
      "\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435",
      "\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a",
      "\u0432\u0442\u043e\u0440\u043d\u0438\u043a",
      "\u0441\u0440\u0435\u0434\u0430",
      "\u0447\u0435\u0442\u0432\u0435\u0440\u0433",
      "\u043f\u044f\u0442\u043d\u0438\u0446\u0430",
      "\u0441\u0443\u0431\u0431\u043e\u0442\u0430"
    ],
    "ERANAMES": [
      "\u0434\u043e \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430",
      "\u043e\u0442 \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430"
    ],
    "ERAS": [
      "\u0434\u043e \u043d. \u044d.",
      "\u043d. \u044d."
    ],
    "FIRSTDAYOFWEEK": 0,
    "MONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044f",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044f",
      "\u043c\u0430\u0440\u0442\u0430",
      "\u0430\u043f\u0440\u0435\u043b\u044f",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d\u044f",
      "\u0438\u044e\u043b\u044f",
      "\u0430\u0432\u0433\u0443\u0441\u0442\u0430",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044f",
      "\u043d\u043e\u044f\u0431\u0440\u044f",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044f"
    ],
    "SHORTDAY": [
      "\u0432\u0441",
      "\u043f\u043d",
      "\u0432\u0442",
      "\u0441\u0440",
      "\u0447\u0442",
      "\u043f\u0442",
      "\u0441\u0431"
    ],
    "SHORTMONTH": [
      "\u044f\u043d\u0432.",
      "\u0444\u0435\u0432\u0440.",
      "\u043c\u0430\u0440.",
      "\u0430\u043f\u0440.",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d.",
      "\u0438\u044e\u043b.",
      "\u0430\u0432\u0433.",
      "\u0441\u0435\u043d\u0442.",
      "\u043e\u043a\u0442.",
      "\u043d\u043e\u044f\u0431.",
      "\u0434\u0435\u043a."
    ],
    "STANDALONEMONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044c",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
      "\u043c\u0430\u0440\u0442",
      "\u0430\u043f\u0440\u0435\u043b\u044c",
      "\u043c\u0430\u0439",
      "\u0438\u044e\u043d\u044c",
      "\u0438\u044e\u043b\u044c",
      "\u0430\u0432\u0433\u0443\u0441\u0442",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
      "\u043d\u043e\u044f\u0431\u0440\u044c",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044c"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, d MMMM y '\u0433'.",
    "longDate": "d MMMM y '\u0433'.",
    "medium": "d MMM y '\u0433'. H:mm:ss",
    "mediumDate": "d MMM y '\u0433'.",
    "mediumTime": "H:mm:ss",
    "short": "dd.MM.yy H:mm",
    "shortDate": "dd.MM.yy",
    "shortTime": "H:mm"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "\u20bd",
    "DECIMAL_SEP": ",",
    "GROUP_SEP": "\u00a0",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "\u00a0\u00a4",
        "posPre": "",
        "posSuf": "\u00a0\u00a4"
      }
    ]
  },
  "id": "ru",
  "localeID": "ru",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (vf.v == 0 && i % 10 == 1 && i % 100 != 11) {    return PLURAL_CATEGORY.ONE;  }  if (vf.v == 0 && i % 10 >= 2 && i % 10 <= 4 && (i % 100 < 12 || i % 100 > 14)) {    return PLURAL_CATEGORY.FEW;  }  if (vf.v == 0 && i % 10 == 0 || vf.v == 0 && i % 10 >= 5 && i % 10 <= 9 || vf.v == 0 && i % 100 >= 11 && i % 100 <= 14) {    return PLURAL_CATEGORY.MANY;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

'use strict';
angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "\u0414\u041f",
      "\u041f\u041f"
    ],
    "DAY": [
      "\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435",
      "\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a",
      "\u0432\u0442\u043e\u0440\u043d\u0438\u043a",
      "\u0441\u0440\u0435\u0434\u0430",
      "\u0447\u0435\u0442\u0432\u0435\u0440\u0433",
      "\u043f\u044f\u0442\u043d\u0438\u0446\u0430",
      "\u0441\u0443\u0431\u0431\u043e\u0442\u0430"
    ],
    "ERANAMES": [
      "\u0434\u043e \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430",
      "\u043e\u0442 \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430"
    ],
    "ERAS": [
      "\u0434\u043e \u043d. \u044d.",
      "\u043d. \u044d."
    ],
    "FIRSTDAYOFWEEK": 0,
    "MONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044f",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044f",
      "\u043c\u0430\u0440\u0442\u0430",
      "\u0430\u043f\u0440\u0435\u043b\u044f",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d\u044f",
      "\u0438\u044e\u043b\u044f",
      "\u0430\u0432\u0433\u0443\u0441\u0442\u0430",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044f",
      "\u043d\u043e\u044f\u0431\u0440\u044f",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044f"
    ],
    "SHORTDAY": [
      "\u0432\u0441",
      "\u043f\u043d",
      "\u0432\u0442",
      "\u0441\u0440",
      "\u0447\u0442",
      "\u043f\u0442",
      "\u0441\u0431"
    ],
    "SHORTMONTH": [
      "\u044f\u043d\u0432.",
      "\u0444\u0435\u0432\u0440.",
      "\u043c\u0430\u0440.",
      "\u0430\u043f\u0440.",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d.",
      "\u0438\u044e\u043b.",
      "\u0430\u0432\u0433.",
      "\u0441\u0435\u043d\u0442.",
      "\u043e\u043a\u0442.",
      "\u043d\u043e\u044f\u0431.",
      "\u0434\u0435\u043a."
    ],
    "STANDALONEMONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044c",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
      "\u043c\u0430\u0440\u0442",
      "\u0430\u043f\u0440\u0435\u043b\u044c",
      "\u043c\u0430\u0439",
      "\u0438\u044e\u043d\u044c",
      "\u0438\u044e\u043b\u044c",
      "\u0430\u0432\u0433\u0443\u0441\u0442",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
      "\u043d\u043e\u044f\u0431\u0440\u044c",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044c"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, d MMMM y '\u0433'.",
    "longDate": "d MMMM y '\u0433'.",
    "medium": "d MMM y '\u0433'. H:mm:ss",
    "mediumDate": "d MMM y '\u0433'.",
    "mediumTime": "H:mm:ss",
    "short": "dd.MM.yy H:mm",
    "shortDate": "dd.MM.yy",
    "shortTime": "H:mm"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "\u20bd",
    "DECIMAL_SEP": ",",
    "GROUP_SEP": "\u00a0",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "\u00a0\u00a4",
        "posPre": "",
        "posSuf": "\u00a0\u00a4"
      }
    ]
  },
  "id": "ru-ru",
  "localeID": "ru_RU",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (vf.v == 0 && i % 10 == 1 && i % 100 != 11) {    return PLURAL_CATEGORY.ONE;  }  if (vf.v == 0 && i % 10 >= 2 && i % 10 <= 4 && (i % 100 < 12 || i % 100 > 14)) {    return PLURAL_CATEGORY.FEW;  }  if (vf.v == 0 && i % 10 == 0 || vf.v == 0 && i % 10 >= 5 && i % 10 <= 9 || vf.v == 0 && i % 100 >= 11 && i % 100 <= 14) {    return PLURAL_CATEGORY.MANY;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

'use strict';
angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "\u0414\u041f",
      "\u041f\u041f"
    ],
    "DAY": [
      "\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435",
      "\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a",
      "\u0432\u0442\u043e\u0440\u043d\u0438\u043a",
      "\u0441\u0440\u0435\u0434\u0430",
      "\u0447\u0435\u0442\u0432\u0435\u0440\u0433",
      "\u043f\u044f\u0442\u043d\u0438\u0446\u0430",
      "\u0441\u0443\u0431\u0431\u043e\u0442\u0430"
    ],
    "ERANAMES": [
      "\u0434\u043e \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430",
      "\u043e\u0442 \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0425\u0440\u0438\u0441\u0442\u043e\u0432\u0430"
    ],
    "ERAS": [
      "\u0434\u043e \u043d. \u044d.",
      "\u043d. \u044d."
    ],
    "FIRSTDAYOFWEEK": 0,
    "MONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044f",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044f",
      "\u043c\u0430\u0440\u0442\u0430",
      "\u0430\u043f\u0440\u0435\u043b\u044f",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d\u044f",
      "\u0438\u044e\u043b\u044f",
      "\u0430\u0432\u0433\u0443\u0441\u0442\u0430",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044f",
      "\u043d\u043e\u044f\u0431\u0440\u044f",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044f"
    ],
    "SHORTDAY": [
      "\u0432\u0441",
      "\u043f\u043d",
      "\u0432\u0442",
      "\u0441\u0440",
      "\u0447\u0442",
      "\u043f\u0442",
      "\u0441\u0431"
    ],
    "SHORTMONTH": [
      "\u044f\u043d\u0432.",
      "\u0444\u0435\u0432\u0440.",
      "\u043c\u0430\u0440.",
      "\u0430\u043f\u0440.",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d.",
      "\u0438\u044e\u043b.",
      "\u0430\u0432\u0433.",
      "\u0441\u0435\u043d\u0442.",
      "\u043e\u043a\u0442.",
      "\u043d\u043e\u044f\u0431.",
      "\u0434\u0435\u043a."
    ],
    "STANDALONEMONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044c",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
      "\u043c\u0430\u0440\u0442",
      "\u0430\u043f\u0440\u0435\u043b\u044c",
      "\u043c\u0430\u0439",
      "\u0438\u044e\u043d\u044c",
      "\u0438\u044e\u043b\u044c",
      "\u0430\u0432\u0433\u0443\u0441\u0442",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
      "\u043d\u043e\u044f\u0431\u0440\u044c",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044c"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, d MMMM y '\u0433'.",
    "longDate": "d MMMM y '\u0433'.",
    "medium": "d MMM y '\u0433'. HH:mm:ss",
    "mediumDate": "d MMM y '\u0433'.",
    "mediumTime": "HH:mm:ss",
    "short": "dd.MM.yy HH:mm",
    "shortDate": "dd.MM.yy",
    "shortTime": "HH:mm"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "\u0433\u0440\u043d.",
    "DECIMAL_SEP": ",",
    "GROUP_SEP": "\u00a0",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "\u00a0\u00a4",
        "posPre": "",
        "posSuf": "\u00a0\u00a4"
      }
    ]
  },
  "id": "ru-ua",
  "localeID": "ru_UA",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (vf.v == 0 && i % 10 == 1 && i % 100 != 11) {    return PLURAL_CATEGORY.ONE;  }  if (vf.v == 0 && i % 10 >= 2 && i % 10 <= 4 && (i % 100 < 12 || i % 100 > 14)) {    return PLURAL_CATEGORY.FEW;  }  if (vf.v == 0 && i % 10 == 0 || vf.v == 0 && i % 10 >= 5 && i % 10 <= 9 || vf.v == 0 && i % 100 >= 11 && i % 100 <= 14) {    return PLURAL_CATEGORY.MANY;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

'use strict';
function validateEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
    //return true;
}
function md5www ( str ) {	// Calculate the md5 hash of a string
    //
    // +   original by: Webtoolkit.info (http://www.webtoolkit.info/)
    // + namespaced by: Michael White (http://crestidg.com)

    var RotateLeft = function(lValue, iShiftBits) {
        return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));
    };

    var AddUnsigned = function(lX,lY) {
        var lX4,lY4,lX8,lY8,lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    };

    var F = function(x,y,z) { return (x & y) | ((~x) & z); };
    var G = function(x,y,z) { return (x & z) | (y & (~z)); };
    var H = function(x,y,z) { return (x ^ y ^ z); };
    var I = function(x,y,z) { return (y ^ (x | (~z))); };

    var FF = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var GG = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var HH = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var II = function(a,b,c,d,x,s,ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    };

    var ConvertToWordArray = function(str) {
        var lWordCount;
        var lMessageLength = str.length;
        var lNumberOfWords_temp1=lMessageLength + 8;
        var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
        var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
        var lWordArray=Array(lNumberOfWords-1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while ( lByteCount < lMessageLength ) {
            lWordCount = (lByteCount-(lByteCount % 4))/4;
            lBytePosition = (lByteCount % 4)*8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (str.charCodeAt(lByteCount)<<lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount-(lByteCount % 4))/4;
        lBytePosition = (lByteCount % 4)*8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
        lWordArray[lNumberOfWords-2] = lMessageLength<<3;
        lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
        return lWordArray;
    };

    var WordToHex = function(lValue) {
        var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
        for (lCount = 0;lCount<=3;lCount++) {
            lByte = (lValue>>>(lCount*8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
        }
        return WordToHexValue;
    };

    var x=Array();
    var k,AA,BB,CC,DD,a,b,c,d;
    var S11=7, S12=12, S13=17, S14=22;
    var S21=5, S22=9 , S23=14, S24=20;
    var S31=4, S32=11, S33=16, S34=23;
    var S41=6, S42=10, S43=15, S44=21;

    //str = this.utf8_encode(str);

    str = unescape( encodeURIComponent( str ) );
    //console.log(str)
    x = ConvertToWordArray(str);
    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

    for (k=0;k<x.length;k+=16) {
        AA=a; BB=b; CC=c; DD=d;
        a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
        d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
        c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
        b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
        a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
        d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
        c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
        b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
        a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
        d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
        c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
        b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
        a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
        d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
        c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
        b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
        a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
        d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
        c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
        b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
        a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
        d=GG(d,a,b,c,x[k+10],S22,0x2441453);
        c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
        b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
        a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
        d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
        c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
        b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
        a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
        d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
        c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
        b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
        a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
        d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
        c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
        b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
        a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
        d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
        c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
        b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
        a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
        d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
        c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
        b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
        a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
        d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
        c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
        b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
        a=II(a,b,c,d,x[k+0], S41,0xF4292244);
        d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
        c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
        b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
        a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
        d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
        c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
        b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
        a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
        d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
        c=II(c,d,a,b,x[k+6], S43,0xA3014314);
        b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
        a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
        d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
        c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
        b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
        a=AddUnsigned(a,AA);
        b=AddUnsigned(b,BB);
        c=AddUnsigned(c,CC);
        d=AddUnsigned(d,DD);
    }

    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);

    return temp.toLowerCase();
}

(function(){
    //https://gist.github.com/sgmurphy/3095196
    function url_slug(s, opt) {
        s = String(s);
        opt = Object(opt);

        var defaults = {
            'delimiter': '-',
            'limit': undefined,
            'lowercase': true,
            'replacements': {},
            'transliterate': (typeof(XRegExp) === 'undefined') ? true : false
        };

        // Merge options
        for (var k in defaults) {
            if (!opt.hasOwnProperty(k)) {
                opt[k] = defaults[k];
            }
        }

        var char_map = {
            // Latin
            'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE', 'Ç': 'C',
            'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I', 'Î': 'I', 'Ï': 'I',
            'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O', 'Õ': 'O', 'Ö': 'O', 'Ő': 'O',
            'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U', 'Ü': 'U', 'Ű': 'U', 'Ý': 'Y', 'Þ': 'TH',
            'ß': 'ss',
            'à': 'a', 'á': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c',
            'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i',
            'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o', 'ő': 'o',
            'ø': 'o', 'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u', 'ű': 'u', 'ý': 'y', 'þ': 'th',
            'ÿ': 'y',

            // Latin symbols
            '©': '(c)',

            // Greek
            'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z', 'Η': 'H', 'Θ': '8',
            'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M', 'Ν': 'N', 'Ξ': '3', 'Ο': 'O', 'Π': 'P',
            'Ρ': 'R', 'Σ': 'S', 'Τ': 'T', 'Υ': 'Y', 'Φ': 'F', 'Χ': 'X', 'Ψ': 'PS', 'Ω': 'W',
            'Ά': 'A', 'Έ': 'E', 'Ί': 'I', 'Ό': 'O', 'Ύ': 'Y', 'Ή': 'H', 'Ώ': 'W', 'Ϊ': 'I',
            'Ϋ': 'Y',
            'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z', 'η': 'h', 'θ': '8',
            'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm', 'ν': 'n', 'ξ': '3', 'ο': 'o', 'π': 'p',
            'ρ': 'r', 'σ': 's', 'τ': 't', 'υ': 'y', 'φ': 'f', 'χ': 'x', 'ψ': 'ps', 'ω': 'w',
            'ά': 'a', 'έ': 'e', 'ί': 'i', 'ό': 'o', 'ύ': 'y', 'ή': 'h', 'ώ': 'w', 'ς': 's',
            'ϊ': 'i', 'ΰ': 'y', 'ϋ': 'y', 'ΐ': 'i',

            // Turkish
            /*'Ş': 'S', 'İ': 'I', 'Ç': 'C', 'Ü': 'U', 'Ö': 'O', 'Ğ': 'G',
            'ş': 's', 'ı': 'i', 'ç': 'c', 'ü': 'u', 'ö': 'o', 'ğ': 'g',*/

            // Russian
            'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo', 'Ж': 'Zh',
            'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M', 'Н': 'N', 'О': 'O',
            'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U', 'Ф': 'F', 'Х': 'H', 'Ц': 'C',
            'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sh', 'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu',
            'Я': 'Ya',
            'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo', 'ж': 'zh',
            'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o',
            'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c',
            'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu',
            'я': 'ya',

            // Ukrainian
            'Є': 'Ye', 'І': 'I', 'Ї': 'Yi', 'Ґ': 'G',
            'є': 'ye', 'і': 'i', 'ї': 'yi', 'ґ': 'g',

            // Czech
            'Č': 'C', 'Ď': 'D', 'Ě': 'E', 'Ň': 'N', 'Ř': 'R', 'Š': 'S', 'Ť': 'T', 'Ů': 'U',
            'Ž': 'Z',
            'č': 'c', 'ď': 'd', 'ě': 'e', 'ň': 'n', 'ř': 'r', 'š': 's', 'ť': 't', 'ů': 'u',
            'ž': 'z',

            // Polish
            /*'Ą': 'A', 'Ć': 'C', 'Ę': 'e', 'Ł': 'L', 'Ń': 'N', 'Ó': 'o', 'Ś': 'S', 'Ź': 'Z',
            'Ż': 'Z',
            'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's', 'ź': 'z',
            'ż': 'z',*/

            // Latvian
            /*'Ā': 'A', 'Č': 'C', 'Ē': 'E', 'Ģ': 'G', 'Ī': 'i', 'Ķ': 'k', 'Ļ': 'L', 'Ņ': 'N',
            'Š': 'S', 'Ū': 'u', 'Ž': 'Z',
            'ā': 'a', 'č': 'c', 'ē': 'e', 'ģ': 'g', 'ī': 'i', 'ķ': 'k', 'ļ': 'l', 'ņ': 'n',
            'š': 's', 'ū': 'u', 'ž': 'z'*/
        };

        // Make custom replacements
        for (var k in opt.replacements) {
            s = s.replace(RegExp(k, 'g'), opt.replacements[k]);
        }

        // Transliterate characters to ASCII
        if (opt.transliterate) {
            for (var k in char_map) {
                s = s.replace(RegExp(k, 'g'), char_map[k]);
            }
        }

        // Replace non-alphanumeric characters with our delimiter
        var alnum = (typeof(XRegExp) === 'undefined') ? RegExp('[^a-z0-9]+', 'ig') : XRegExp('[^\\p{L}\\p{N}]+', 'ig');
        s = s.replace(alnum, opt.delimiter);

        // Remove duplicate delimiters
        s = s.replace(RegExp('[' + opt.delimiter + ']{2,}', 'g'), opt.delimiter);

        // Truncate slug to max. characters
        s = s.substring(0, opt.limit);

        // Remove delimiter from ends
        s = s.replace(RegExp('(^' + opt.delimiter + '|' + opt.delimiter + '$)', 'g'), '');

        return opt.lowercase ? s.toLowerCase() : s;
    }
    //Object.prototype.addProp=function(o){}
/**
 * Корректировка округления десятичных дробей.
 *
 * @param {String}  type  Тип корректировки.
 * @param {Number}  value Число.
 * @param {Integer} exp   Показатель степени (десятичный логарифм основания корректировки).
 * @returns {Number} Скорректированное значение.
 */
function decimalAdjust(type, value, exp) {
    // Если степень не определена, либо равна нулю...
    if (typeof exp === 'undefined' || +exp === 0) {
        return Math[type](value);
    }
    value = +value;
    exp = +exp;
    // Если значение не является числом, либо степень не является целым числом...
    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
        return NaN;
    }
    // Сдвиг разрядов
    value = value.toString().split('e');
    value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
    // Обратный сдвиг
    value = value.toString().split('e');
    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
}

// Десятичное округление к ближайшему
if (!Math.round10) {
    Math.round10 = function(value, exp) {
        return decimalAdjust('round', value, exp);
    };
}
// Десятичное округление вниз
if (!Math.floor10) {
    Math.floor10 = function(value, exp) {
        return decimalAdjust('floor', value, exp);
    };
}
// Десятичное округление вверх
if (!Math.ceil10) {
    Math.ceil10 = function(value, exp) {
        return decimalAdjust('ceil', value, exp);
    };
}
    /*Array.prototype.forEachAsync = async function(cb){
        for(let x of this){
            await cb(x);
        }
    }*/
Array.prototype.getObjectFromArray=function(prop,value,a,filter){
    //возвращается елемент. если  есть 4 -ый параметр то возвращается массив
    // если есть пятый параметр то в массив пишется тот елемент исходного массива у котороко совйство filter true.
    var ar=[];
    //console.log(this.length);
    for (var i=0,l=this.length;i<l;i++){
        if(this[i][prop] && this[i][prop].toString && typeof this[i][prop].toString=='function'){
            this[i][prop]=this[i][prop].toString();
        }
        if (this[i][prop] && this[i][prop]==value){
            if (a){
                if (filter){
                    if (this[i][filter]){
                        ar.push(this[i])
                    }
                }else {
                    ar.push(this[i])
                }

            } else {
                return this[i];
                break;
            }

        }
    }

    if (a) {return ar;} else  {return undefined};
}
Array.prototype.getOFA=function(prop,value,a,filter){
        //возвращается елемент. если  есть 4 -ый параметр то возвращается массив
        // если есть пятый параметр то в массив пишется тот елемент исходного массива у котороко совйство filter true.
    prop=prop.split('.');
    if(prop.length==1){prop=prop[0]}
    var ar=[];
        //console.log(this.length);
        for (var i=0,l=this.length;i<l;i++){
            if(!this[i]){continue}
            if(this[i][prop] && this[i][prop].toString && typeof this[i][prop].toString=='function'){
                this[i][prop]=this[i][prop].toString();
            }
            if ((this[i][prop] && this[i][prop]==value)||(prop.length &&
                this[i][prop[0]] && this[i][prop[0]][prop[1]] && this[i][prop[0]][prop[1]]==value)){
                if (a){
                    if (filter){
                        if (this[i][filter]){
                            ar.push(this[i])
                        }
                    }else {
                        ar.push(this[i])
                    }

                } else {
                    return this[i];
                    break;
                }

            }
        }

        if (a) {return ar;} else  {return undefined};
    }

Array.prototype.removeOFA = function(prop, value){
        var i = this.length;
        while(i--){
            if( this[i]
                && this[i].hasOwnProperty(prop)
                && (arguments.length > 1 && this[i][prop] === value ) ){

                this.splice(i,1);

            }
        }
        return this;
    }


    Array.prototype.getArrayObjects = function(prop,value){
    //console.log(prop,value)
    var arr=[];
    for (var i=0,l=this.length;i<l;i++){
        if (this[i][prop] && this[i][prop].length){
            var _arr = this[i][prop].map(function(item){return (typeof item=='object')?item._id:item})
            if (_arr.indexOf(value)>-1){
                arr.push(this[i]);
            }
        }
    }
    return arr;
}
Array.prototype.diff = function(a) {
   return this.filter(function(i) {return a.indexOf(i) < 0;});
};
    Array.prototype.divideArrayWithChunk=function(chunk,fillArrayToEquil){
        if(!chunk){return [[],[],[],[],[]]};
        chunk=Number(chunk);
        if(chunk<2){return this;}
        var data=this;
        var arr=[];
        for(var j=0;j<chunk;j++){
            arr[j]=[];
            for (var i=j,l=data.length; i<l; i+=chunk) {
                arr[j].push(data[i]);
            }
        }
        if(fillArrayToEquil){
            for(var i=1,l=arr.length;i<l;i++){
                if(arr[i].length<arr[0].length){
                    arr[i].push({})
                }
            }
        }
        return arr;
    }
    Array.prototype.extend = function (other_array) {
        /* you should include a test to check whether other_array really is an array */
        other_array.forEach(function(v) {this.push(v)}, this);
    }


String.prototype.clearTag = function(num){
    var regex=/<\/?[^>]+(>|$)/g;
    if (num){
        return (this.replace(regex, '').substring(0,num))
    } else {
        //console.log('?????')
        return this.replace(regex, '')
    }
}

    String.prototype.myTrim = function(){
        return this.trim().split("\n").filter(function (str) {
            return str;
        }).map(function (str) {
            var s =str.replace(/&nbsp;/g, " ");
            return s.trim();
        }).filter(function (str) {
            return str;
        }).join('')
    }

    String.prototype.clearFirstTag = function(tag){
        var i = tag.length;
        return this.substring(2+i,this.length-(3+i))
    }
String.prototype.replaceBlanks = function(){
    if (!this) return;
    return this.replace(/(["',.\/\s])/g, "-");
}
String.prototype.getFormatedDate=function(){
    var d=new Date(this);
    var curr_date = d.getDate();
    var curr_month = d.getMonth() + 1;
    var curr_year = d.getFullYear();
    return   curr_date+ "-" + curr_month+ "-" +curr_year
}

    if (!String.prototype.splice) {
        /**
         * {JSDoc}
         *
         * The splice() method changes the content of a string by removing a range of
         * characters and/or adding new characters.
         *
         * @this {String}
         * @param {number} start Index at which to start changing the string.
         * @param {number} delCount An integer indicating the number of old chars to remove.
         * @param {string} newSubStr The String that is spliced in.
         * @return {string} A new string with the spliced substring.
         */
        String.prototype.splice = function(start, delCount, newSubStr) {
            return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));
        };
    }


    var arrru = new Array ('Я','я',  'Ю', 'ю', 'Ч', 'ч', 'Ш', 'ш', 'Щ', 'щ', 'Ж', 'ж', 'А','а','Б','б','В','в','Г','г','Д','д','Е','е','Ё','ё','З','з','И','и','Й','й','К','к','Л','л','М','м','Н','н', 'О','о','П','п','Р','р','С','с','Т','т','У','у','Ф','ф','Х','х','Ц','ц','Ы','ы','Ь','ь','Ъ','ъ', 'Э' ,'э','/','&');

    var arren = new Array ('Ya','ya','Yu','yu','Ch','ch','Sh','sh','Sh','sh','Zh','zh','A','a','B','b','V','v','G','g','D','d','E','e','E','e','Z','z','I','i','J','j','K','k','L','l','M','m','N','n', 'O','o','P','p','R','r','S','s','T','t','U','u','F','f','H','h','C','c','Y','y', '', '','\'','\'','E', 'e','-','-');
    var string=
        'abcdefghijklmnopqrstuvwxyzQAZWSXEDCRFVTGBYHNUJMIKOLP1234567890';
    var cyrill_to_latin = function(text){
        for(var i=0; i<arrru.length; i++){
            var reg = new RegExp(arrru[i], "g");
            text = text.replace(reg, arren[i]);
        }

        return text.replace(/(["'\/\s])/g, "-");
    }
    var latin_to_cyrill =function(text){
        for(var i=0; i<arren.length; i++){
            var reg = new RegExp(arren[i], "g");
            text = text.replace(reg, arrru[i]);
        }
        return text;
    }
    var shuffle = function(len) {
        var parts = string.split('');
        for (var i = parts.length; i > 0;) {
            var random = parseInt(Math.random() * i);
            var temp = parts[--i];
            parts[i] = parts[random];
            parts[random] = temp;
        }
        return parts.join('').substring(0,len);
    }

    String.prototype.getUrl=function(){
        return url_slug(this)
        //return cyrill_to_latin(this.substring(0,50).split(" ").join("-").toLowerCase());
    }
    String.prototype.shuffle=function(len){
        if(!len){len=this.length}
        var parts = this.split('');
        for (var i = parts.length; i > 0;) {
            var random = parseInt(Math.random() * i);
            var temp = parts[--i];
            parts[i] = parts[random];
            parts[random] = temp;
        }
        return parts.join('').substring(0,len);
    }

    //object
    //Object.prototype.addProp=function(o){}
    //Object.prototype.addProp=function(o){
        /*if(!o || typeof o !='object'){return}
        var keysArray = Object.keys(o);
        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(o, nextKey);
            if (desc !== undefined && desc.enumerable) {
                this[nextKey] = o[nextKey];
            }
        }*/
    //}
    //Object.prototype.newMethod=function(){}
    /*Object.defineProperty(
        Object.prototype,
        'addProperties',
        {
            //enumerable:false,
            value:function(o){
                if(!o || typeof o !='object'){return}
                var keysArray = Object.keys(o);
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(o, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        this[nextKey] = o[nextKey];
                    }
                }
            }
        }
    );*/
})()




//http://stackoverflow.com/questions/25069777/sharing-code-between-angularjs-and-nodejs
'use strict';
(function(){
    var order = function(){
        var self=this;
        this.cart={stuffs:[]};
        this.seller=null;
        this.cascade=[];
        this.opt={};
        this.campaign=[];
        this.coupon={};
        this.totalCount=0;
        this.sum=0;
        this.price;  // для работы с ценой
        this.priceSale;//
        this.retail; //
        this.discount=null;// для управления ценой из админки ордера
        this.currency;
        this.mainCurrency;
        this.currencyStore;
        this.messageForCampaign={};
        this.type;
        this.user;
        this.paySum;
        // псевдо приватные методы
        //http://stackoverflow.com/questions/436120/javascript-accessing-private-member-variables-from-prototype-defined-functions
        function _checkInCondition(__campaign,stuff){
            var stuffBrand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand
            var stuffCategory = (typeof stuff.category=='object' && stuff.category.length)?stuff.category[0]:stuff.category;
            if (__campaign.conditionStuffs && __campaign.conditionStuffs.length && __campaign.conditionStuffs.indexOf(stuff._id)>-1){
                return true
            }
            if (__campaign.conditionTags && __campaign.conditionTags.length && __campaign.conditionTags.some(function(tag){return stuff.tags.indexOf(tag)>-1})){
                return true;
            }
            if (__campaign.conditionBrandTags && __campaign.conditionBrandTags.length && __campaign.conditionBrandTags.indexOf(stuff.brandTag)>-1){
                return true
            }
            if (__campaign.conditionBrands && __campaign.conditionBrands.length && __campaign.conditionBrands.indexOf(stuffBrand)>-1){
                return true
            }
            if (__campaign.conditionCategories && __campaign.conditionCategories.length && __campaign.conditionCategories.indexOf(stuffCategory)>-1){
                return true
            }
        }
        this._cartCount=function(campaign,cam){
            var i=0;
            var self=this;
            //console.log(this.cart)
            this.cart.stuffs.forEach(function(item){
                //console.log(item.quantity);
                if (campaign){
                    //console.log('_isStuffInCampaign(item)-',_isStuffInCampaign(item))
                    if (campaign=='withoutcampaign'){
                        //console.log(item.campaignId)
                        if (!item.campaignId){
                            if(!cam){
                                i +=Number(item.quantity);
                            }else{
                                if(_checkInCondition(cam,item)){
                                    i +=Number(item.quantity);
                                }

                            }

                            //console.log('i-',i)
                        }
                    }else{
                        if (item.campaignId==campaign){
                            i +=Number(item.quantity);
                            //console.log('i-',i)
                        }
                    }
                }else{
                    if(item.quantity)
                        i +=Number(item.quantity);
                }
            })
            //console.log('cartcount ',i)
            return i;
        }
        this._checkDiscount=function(){
            var dis = this.discount;
            if (dis){
                if (!dis.value)dis.value=0;
                if(dis.type==1 || dis.type==3){
                    //Принудительная оптовая цена для всех позиций включая розницу и sale.
                    return self.price;
                } else if(dis.type==2 || dis.type==4 || dis.type==5){
                    //Принудительное изменение цены на оптовую всех позиций без изменения цены sale
                    if(self.priceSale){
                        return self.priceSale;
                    }else{
                        return self.price;
                    }
                }
            } else return;
        }
        this._getDiscountPrice=function(dis,s){
            if (dis){
                if (!dis.value)dis.value=0;
                if(dis.type==1){
                    //Принудительная оптовая цена для всех позиций включая розницу и sale.
                    return s.price;
                } else if(dis.type==2){
                    //Принудительное изменение цены на оптовую всех позиций без изменения цены sale
                    if(s.priceSale){
                        return s.priceSale;
                    }else{
                        return s.price;
                    }
                }if(dis.type==3){
                    //Принудительное изменение цены на оптовую, включая SALE, и применение ко всем позициям скидки, value значение скидки в %
                    return  Math.ceil10((s.price-(s.price/100)*dis.value),-5);
                } else if(dis.type==4){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение скидки на позиции кроме SAL
                    if(s.priceSale){
                        return s.priceSale
                    }else{
                        return Math.ceil10((s.price-(s.price/100)*dis.value),-5);
                    }
                }else if(dis.type==5){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение ко всем позициям скидки скидки
                    var cena;
                    if(s.priceSale){
                        cena=s.priceSale;
                    }else{
                        cena=s.price;
                    }
                    return Math.ceil10((cena-(cena/100)*dis.value),-5);
                }
            } else return;
        }
        this._checkDiscount2302=function(){
            var dis = this.discount;
            if (dis){
                if (!dis.value)dis.value=0;
                if(dis.type==1){
                    //Принудительная оптовая цена для всех позиций включая розницу и sale.
                    return self.price;
                } else if(dis.type==2){
                    //Принудительное изменение цены на оптовую всех позиций без изменения цены sale
                    if(self.priceSale){
                        return self.priceSale;
                    }else{
                        return self.price;
                    }
                }if(dis.type==3){
                    //Принудительное изменение цены на оптовую, включая SALE, и применение ко всем позициям скидки, value значение скидки в %
                    return  Math.ceil10((self.price-(self.price/100)*dis.value),-5);
                } else if(dis.type==4){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение скидки на позиции кроме SAL
                    if(self.priceSale){
                        return self.priceSale
                    }else{
                        return Math.ceil10((self.price-(self.price/100)*dis.value),-5);
                    }
                }else if(dis.type==5){
                    //Принудительное изменение цены на оптовую, кроме цен SALE, и применение ко всем позициям скидки скидки
                    var cena;
                    if(self.priceSale){
                        cena=self.priceSale;
                    }else{
                        cena=self.price;
                    }
                    return Math.ceil10((cena-(cena/100)*dis.value),-5);
                }
            } else return;
        }

        this._isStuffInCampaign=function(stuff,campaign){
            //console.log(stuff)
            var stuffCategory = (typeof stuff.category=='object' && stuff.category.length)?stuff.category[0]:stuff.category;
            var stuffBrand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand
            function check(__campaign){
                //console.log(stuffCategory,__campaign.categories)
                //console.log(__campaign,stuff.name)
                if (__campaign.stuffs && __campaign.stuffs.length && __campaign.stuffs.indexOf(stuff._id)>-1){
                    return true
                }
                if (__campaign.tags && __campaign.tags.length && stuff.tags && __campaign.tags.some(function(tag){return stuff.tags.indexOf(tag)>-1})){
                    return true;
                }
                if (__campaign.brandTags && __campaign.brandTags.length && __campaign.brandTags.indexOf(stuff.brandTag)>-1){
                    return true
                }
                if (__campaign.brands && __campaign.brands.length && __campaign.brands.indexOf(stuffBrand)>-1){
                    return true
                }
                if (__campaign.categories && __campaign.categories.length && __campaign.categories.indexOf(stuffCategory)>-1){
                    return true
                }
            }
            function setCampaignPrice(__campaign){
                //console.log(stuff.name,__campaign)
                stuff.sticker=__campaign.sticker;
                stuff.campaignUrl=__campaign.url;
                stuff.campaignId=__campaign._id;
                var i=0;
                for(var key in stuff.stock){
                    var price=Number(stuff.stock[key].price);
                    stuff.stock[key].priceCampaign=(__campaign.condition=='percent')?
                        Math.ceil10((price-(Number(__campaign.percent)/100)*price),-2):
                        Math.ceil10((price-Number(__campaign.sum)),-2);
                    if(!i){
                        i++;
                        stuff.priceCampaign=stuff.stock[key].priceCampaign

                    }
                    //console.log(price,stuff.stock[key].priceCampaign)
                }
                //console.log( stuff.campaignUrl)
            }
            if (!self.campaign ||  !self.campaign.length) return false;
            // если нет параметра campaign то для всех компаний

            if (!campaign) {
                for (var j=0,ll=self.campaign.length;j<ll;j++){
                    var is=check(self.campaign[j]);
                    //console.log(is,(is && !self.campaign[j].revers),(!is && self.campaign[j].revers))
                    if ((is && !self.campaign[j].revers)||(!is && self.campaign[j].revers)){
                        setCampaignPrice(self.campaign[j])
                        return self.campaign[j];
                        break;
                    }
                }
            } else {
                // в конкретную компанию входит или нет
                var __campaign=self.campaign.getObjectFromArray('_id',campaign);
                if(__campaign){
                    var is=check(__campaign);

                    if ((is && !__campaign.revers)||(!is && __campaign.revers)){
                        setCampaignPrice(__campaign)
                        return __campaign;
                    }
                }
            }
            return false;
        }
        this._getCountForBaseStuffs=function(campaign){
            var q=0;
            this.cart.stuffs.forEach(function(item){
                if (campaign.forGroupBase){
                    if (campaign.groupBaseTag && item.tags && item.tags.indexOf(campaign.groupBaseTag)>-1){
                        q+=Number(item.quantity);
                    }else if(campaign.groupBaseCollection && campaign.groupBaseCollection==stuff.brandTag){
                        q+=Number(item.quantity);
                    }
                }else{
                    if (campaign.baseStuffs.indexOf(item._id)>-1){
                        q+=Number(item.quantity);
                    }
                }

            })
            //console.log(q);
            return q;

        }
        this._checkCompaignCondition=function(id){
            if(!self.campaign) {return}
            var __campaign = self.campaign.getOFA('_id',id);
            //console.log(__campaign)
            if(__campaign && !__campaign.forAll && !__campaign.revers){
                // колмчество не акционных товаров
                var countConditionStuffs=self._cartCount('withoutcampaign',__campaign);
                //console.log(countConditionStuffs)
                if (__campaign.ratio){
                    var countStuff=self._cartCount(__campaign._id); // количество для конкретной компании
                    //console.log('countStuff',countStuff)
                    if(parseInt(countConditionStuffs/__campaign.ratio)>=countStuff){
                        /*console.log('countConditionStuffs ',countConditionStuffs);
                        console.log('__campaign.ratio ',__campaign.ratio)
                        console.log('parseInt(countConditionStuffs/__campaign.ratio) ',parseInt(countConditionStuffs/__campaign.ratio))
                        console.log('countStuff ',countStuff)*/
                        return true;
                    }
                }else{
                    // нет кратности применения
                    // просто если хватает товаров из условия
                    return true;
                }

                /*
                if (!__campaign.useBase){
                    countBaseStuff = self._cartCount('withoutcampaign');
                } else {
                    // baseStuffs количество в корзине
                    countBaseStuff=self._getCountForBaseStuffs(__campaign);
                }
                //console.log('countBaseStuff-',countBaseStuff)
                if (__campaign.ratio){
                    var countStuff=self._cartCount(id); // количество для конкретной компании
                    if(parseInt(countBaseStuff/__campaign.ratio)>=countStuff){
                        return true;
                    }
                }else{
                    // нет кратности применения
                    // просто если хватает товаров из условия
                    if (countBaseStuff>=__campaign.condition){
                        return true;
                    }
                }*/
            }else{
                // нет услоаий просто применям акционную цену
                return true;
            }
        }
        this._checkCompaignConditionForBase=function(id){
            var campaign = self.campaign.getObjectFromArray('_id',id);
            //console.log(campaign);
            //console.log("self._cartCount('withoutcampaign')-",self._cartCount('withoutcampaign'))
            //console.log("self._cartCount(campaign._id)-",self._cartCount(campaign._id))
            //console.log(campaign.condition && campaign.useBase && self._cartCount('withoutcampaign') && !self._cartCount(campaign._id))
            if(campaign.useBase && self._getCountForBaseStuffs(campaign)>=campaign.condition && !self._cartCount(campaign._id)){
                return true;
            }
        }
        this._getUnitOfMeasure=function(){
            var a = this.cart.stuffs.reduce(function(arr,i){
                if(i.unitOfMeasure && arr.indexOf(i.unitOfMeasure)<0){
                    arr.push(i.unitOfMeasure)
                }
                return arr;
            },[])
            //console.log(a)
            if(a.length==1){
                return a[0]
            }else{
                return null
            }
        }
    }
    var _getCascadePrice=function(self){
        var newPrice=self.price;
        var cascade=self.cascade;
        if (cascade && cascade.length) {
            for(var i=0,l=cascade.length;i<l;i++){
                if (self.totalCount>=cascade[i][0]){
                    newPrice=Math.ceil10((self.price-(self.price/100)*cascade[i][1]),-2);
                }
            }
            return newPrice;
        } else {
            return self.price;
        }
    }


    order.prototype.init=function(campaign,mainCurrency,currencyStore) {
        //console.log(campaign)
        this.campaign=campaign;
        this.mainCurrency=mainCurrency;
        this.currencyStore=currencyStore;
    }
    order.prototype.setCamapign=function(campaign) {
        this.campaign=campaign;
        for(var i=0,l=campaign.length;i<l;i++){
            this.messageForCampaign[campaign[i].url]={base:null,stuff:null};
        }
    }
    order.prototype.setCart=function(stuffs) {
        //console.log(stuffs)
        this.cart.stuffs = stuffs;
        this.sortCart();
    }

    order.prototype.setSellerData=function(seller,cascade,opt) {
        this.seller =seller;
        this.cascade=cascade;
        this.opt=opt;
    }
    order.prototype.setCoupon=function(coupon) {
        // console.log(coupon)
        this.coupon =coupon;
    }
    order.prototype.setDiscount=function(discount) {
        this.discount=discount;
    }
    order.prototype.setCurrency=function(currency) {
        this.currency=currency;
    }
    order.prototype.changeCurrency=function(currency){
        this.currency=currency;
        this.kurs=this.currencyStore[this.currency][0];
    }
    order.prototype.getPrice=function(i) {
        var stuff=this.cart.stuffs[i];
        this.totalCount=this._cartCount();
        this.price=stuff.price;
        this.priceSale=stuff.priceSale;
        this.retail=stuff.retail;
        this.priceCampaign=stuff.priceCampaign;
        stuff.maxDiscountOver=false;

        // вычисляем условие опта
        var optIs=false;

        if (!this.opt || !this.opt.quantity || this.totalCount>=this.opt.quantity){
            optIs=true;
        }

        // 1.проверка на ручное управление ценой
        var cena;
        if (cena=this._checkDiscount()){
            if(this.discount && this.discount.value && stuff.maxDiscount && this.discount.value >stuff.maxDiscount){
                stuff.maxDiscountOver=true;
            }else{
                checkMaxDiscount(stuff,cena)
            }

            return cena;
        }
        //console.log(stuff.priceCampaign)
        //2. товар в акции проверить на опт и на выполнение условий акции
        //console.log(this._checkCompaignCondition(stuff.campaignId))
        //console.log(stuff.priceCampaign,stuff.campaignId,optIs,this._checkCompaignCondition(stuff.campaignId))
        //console.log('this._checkCompaignCondition(stuff.campaignId) -',this._checkCompaignCondition(stuff.campaignId))
        if (stuff.priceCampaign && optIs && this._checkCompaignCondition(stuff.campaignId) ){
            return stuff.priceCampaign
        }
        // 3.проверка на опт
        if (!optIs){
            return this.retail || this.price;
        }
        //4.eсли опт и есть   цена или каскад скидок
        if (this.priceSale){
            checkMaxDiscount(stuff,this.priceSale)
            return this.priceSale;
        } else {
            return _getCascadePrice(this);
        }
        return stuff.price;
    };
    order.prototype.getTotalSum=function(discount){
        var sum=0;
        var self=this;
        this.cart.stuffs.forEach(function(c){
            //console.log(c)
            var s=(c.sum)?(c.sum):c.price;
            if(discount){
                var p = self._getDiscountPrice(self.discount,c)
                    if(p){
                        s= p*c.quantity;
                    }
            }
            sum+=s
        });
        if(discount){
            var dis = this.discount;
            if (dis){
                if(dis.type==6){
                    sum = Math.ceil10((sum-(sum/100)*dis.value),-5);
                }else if(dis.type==7){
                    sum=sum-dis.value;
                }
            }
        }
        //console.log(sum)
        //this.sum=sum;
        return sum;
    };
    order.prototype.getTotalQuantity=function(){
        var q=0;
        this.cart.stuffs.forEach(function(c){
            q+=Number(c.quantity);
        });
        return q;
    };
    order.prototype.getCampaignQuantity=function(){
        return this._cartCount('campaign');
    };
    order.prototype.getConditionForDisplayMsg=function(){
        return this.messageForCampaign

    };
    order.prototype.getCouponSum=function(){
        //console.log(this.coupon)
        if (this.coupon && Object.keys(this.coupon).length){
            if(!this.coupon.condition){
                return Math.ceil10((this.sum-(this.sum/100)*Number(this.coupon.val)),-5);
            }else if(this.coupon.condition){
                var val=this.coupon.val;
                //console.log(this.sum,val)
                if(this.coupon.currency && this.currencyStore[this.coupon.currency] && this.currencyStore[this.coupon.currency][0]){
                    val = Math.round(val/this.currencyStore[this.coupon.currency][0])
                }
                /*if(this.coupon.currency && this.coupon.currency!=this.currency && this.currencyStore && this.currencyStore[this.coupon.currency] && this.currencyStore[this.coupon.currency][0]){
                    console.log(this.currencyStore[this.coupon.currency][0])
                    val = Math.round(val/this.currencyStore[this.coupon.currency][0])
                }*/
                //console.log(this.sum-Number(val))
                return (this.sum-Number(val));
            }
        }else{
            //console.log(this.sum)
            return this.sum
        }
    };
    order.prototype.clearOrder=function(){
        this.cart.stuffs.length=0;
        //this.seller=null;
        //this.cascade=[];
        //this.opt={};
        //this.campaign=[];
        this.coupon={};
        this.totalCount=0;
        this.sum=0;
    }
    order.prototype.checkInCart=function(itemTo){
        //console.log(itemTo.name,this.cart.stuffs.some(function(c){return ((itemTo._id == c._id) && (itemTo.sort == c.sort))}))
        return this.cart.stuffs.some(function(c){return ((itemTo._id == c._id) && (itemTo.sort == c.sort))})
    }
    order.prototype.addStuffToOrder=function(itemTo){
        if (this.cart.stuffs.length>=150){return false}
        if (!this.cart.stuffs.some(function(c){return ((itemTo._id == c._id) && (itemTo.sort == c.sort))})){
            var itemToCart = angular.copy(itemTo);
            for(var key in itemToCart){
                if(typeof itemToCart[key]=='function'){
                    delete itemToCart[key]
                }
            }
            delete itemToCart.comments
            delete itemToCart.desc
            delete itemToCart.gallery
            delete itemToCart.imgs
            delete itemToCart.nameL
            delete itemToCart.checkInCart
            delete itemToCart.addItemToOrder
            delete itemToCart.addInfo
            delete itemToCart.getDataForBooking
            delete itemToCart.FullTags
            delete itemToCart.changeSortOfStuff
            delete itemToCart.checkInCart
            delete itemToCart.driveRetailPrice
            delete itemToCart.getBonus
            delete itemToCart.zoomImg
            delete itemToCart.stockKeysArray
            delete itemToCart.sortsOfStuff
            delete itemToCart.setPrice



            this.cart.stuffs.push(itemToCart);
            this.sortCart();
            /*this.cart.stuffs.sort(function(a,b){
                if(a.brand < b.brand) return -1;
                if(a.brand > b.brand) return 1;
                return 0;
            })*/
            return true;
        }else {
            return false;
        }

    }
    order.prototype.getShipCost=function(){
        var s=this.shipDetail.reduce(function(s,c){
            if (isNaN( c.sum)){
                return s;
            }else{
                return s+Number(c.sum)
            }
        },0)
        return s;
    }
    order.prototype.getTotalPay=function(){
        if(!this.pay){this.pay=[]}
        var s=this.pay.reduce(function(s,c){
            if (isNaN( c.sum)){
                return s;
            }else{
                return s+Number(c.sum)
            }
        },0)
        return s;
    }
    order.prototype.getTotalDiscount=function(){
        if(this.sum && this.sum0){
            if (this.sum>this.sum0){return 0}else{
                return (100-Math.round(this.sum*100/this.sum0))
            }
        }


        /*this.priceSum = this.cart.stuffs.reduce(function(s,c){
            s+=c.quantity* c.price;
            return s;
        },0)
        var sumT =this.getCouponSum()
        //console.log(sum,sumT,100-Math.round(sumT*100/sum))
        if (sumT>this.priceSum){return 0}else{
            return (100-Math.round(sumT*100/this.priceSum))
        }*/
    }
    order.prototype.checkCampaign=function(stuff){
        return this._isStuffInCampaign(stuff);
    }
    order.prototype.sortCart=function(){
        this.cart.stuffs.sort(function(a,b){
            if(!a.extCatalog && !b.extCatalog){
                if(a.category < b.category) return -1;
                if(a.category > b.category) return 1;
                return 0
            }else if(a.extCatalog && !b.extCatalog){
                return 1
            }else if(!a.extCatalog && b.extCatalog){
                return -1
            }else if(a.extCatalog && b.extCatalog && a.extCatalog != b.extCatalog){
                if(a.category < b.category) return -1;
                if(a.category > b.category) return 1;
            }else if (a.extCatalog && b.extCatalog && a.extCatalog == b.extCatalog){
                if(a.category < b.category) return -1;
                if(a.category > b.category) return 1;
                return 0
            }
        })
    }
    function checkMaxDiscount(stuff,price){
        if(stuff.maxDiscount){
            if((1-price/stuff.price)*100>stuff.maxDiscount){
                stuff.maxDiscountOver=true;
            }
        }
        //console.log('stuff.maxDiscountOver - ',stuff.maxDiscountOver)
    }


    function getOrder(){
        return new order();
    }


    var myShareData = {getOrder:getOrder};


    if(typeof window !== 'undefined'){
        window.myShareData = myShareData;
        window.OrderModel=order;
    } else {
        module.exports = myShareData;
    }

})()



'use strict';
var _filterTags=[];
var _filterTagsO={}
function url_slug(s, opt) {
    s = String(s);
    opt = Object(opt);

    var defaults = {
        'delimiter': '-',
        'limit': undefined,
        'lowercase': true,
        'replacements': {},
        'transliterate': (typeof(XRegExp) === 'undefined') ? true : false
    };

    // Merge options
    for (var k in defaults) {
        if (!opt.hasOwnProperty(k)) {
            opt[k] = defaults[k];
        }
    }

    var char_map = {
        // Latin
        'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE', 'Ç': 'C',
        'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I', 'Î': 'I', 'Ï': 'I',
        'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O', 'Õ': 'O', 'Ö': 'O', 'Ő': 'O',
        'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U', 'Ü': 'U', 'Ű': 'U', 'Ý': 'Y', 'Þ': 'TH',
        'ß': 'ss',
        'à': 'a', 'á': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c',
        'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i', 'ï': 'i',
        'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o', 'ö': 'o', 'ő': 'o',
        'ø': 'o', 'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u', 'ű': 'u', 'ý': 'y', 'þ': 'th',
        'ÿ': 'y',

        // Latin symbols
        '©': '(c)',

        // Greek
        'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z', 'Η': 'H', 'Θ': '8',
        'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M', 'Ν': 'N', 'Ξ': '3', 'Ο': 'O', 'Π': 'P',
        'Ρ': 'R', 'Σ': 'S', 'Τ': 'T', 'Υ': 'Y', 'Φ': 'F', 'Χ': 'X', 'Ψ': 'PS', 'Ω': 'W',
        'Ά': 'A', 'Έ': 'E', 'Ί': 'I', 'Ό': 'O', 'Ύ': 'Y', 'Ή': 'H', 'Ώ': 'W', 'Ϊ': 'I',
        'Ϋ': 'Y',
        'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z', 'η': 'h', 'θ': '8',
        'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm', 'ν': 'n', 'ξ': '3', 'ο': 'o', 'π': 'p',
        'ρ': 'r', 'σ': 's', 'τ': 't', 'υ': 'y', 'φ': 'f', 'χ': 'x', 'ψ': 'ps', 'ω': 'w',
        'ά': 'a', 'έ': 'e', 'ί': 'i', 'ό': 'o', 'ύ': 'y', 'ή': 'h', 'ώ': 'w', 'ς': 's',
        'ϊ': 'i', 'ΰ': 'y', 'ϋ': 'y', 'ΐ': 'i',

        // Turkish
        'Ş': 'S', 'İ': 'I', 'Ç': 'C', 'Ü': 'U', 'Ö': 'O', 'Ğ': 'G',
        'ş': 's', 'ı': 'i', 'ç': 'c', 'ü': 'u', 'ö': 'o', 'ğ': 'g',

        // Russian
        'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo', 'Ж': 'Zh',
        'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M', 'Н': 'N', 'О': 'O',
        'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U', 'Ф': 'F', 'Х': 'H', 'Ц': 'C',
        'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sh', 'Ъ': '', 'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu',
        'Я': 'Ya',
        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo', 'ж': 'zh',
        'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o',
        'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c',
        'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu',
        'я': 'ya',

        // Ukrainian
        'Є': 'Ye', 'І': 'I', 'Ї': 'Yi', 'Ґ': 'G',
        'є': 'ye', 'і': 'i', 'ї': 'yi', 'ґ': 'g',

        // Czech
        'Č': 'C', 'Ď': 'D', 'Ě': 'E', 'Ň': 'N', 'Ř': 'R', 'Š': 'S', 'Ť': 'T', 'Ů': 'U',
        'Ž': 'Z',
        'č': 'c', 'ď': 'd', 'ě': 'e', 'ň': 'n', 'ř': 'r', 'š': 's', 'ť': 't', 'ů': 'u',
        'ž': 'z',

        // Polish
        'Ą': 'A', 'Ć': 'C', 'Ę': 'e', 'Ł': 'L', 'Ń': 'N', 'Ó': 'o', 'Ś': 'S', 'Ź': 'Z',
        'Ż': 'Z',
        'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's', 'ź': 'z',
        'ż': 'z',

        // Latvian
        'Ā': 'A', 'Č': 'C', 'Ē': 'E', 'Ģ': 'G', 'Ī': 'i', 'Ķ': 'k', 'Ļ': 'L', 'Ņ': 'N',
        'Š': 'S', 'Ū': 'u', 'Ž': 'Z',
        'ā': 'a', 'č': 'c', 'ē': 'e', 'ģ': 'g', 'ī': 'i', 'ķ': 'k', 'ļ': 'l', 'ņ': 'n',
        'š': 's', 'ū': 'u', 'ž': 'z',
        // addition symbols
        /*'.':'-',
         ',':'-'*/
    };

    // Make custom replacements
    for (var k in opt.replacements) {
        s = s.replace(RegExp(k, 'g'), opt.replacements[k]);
    }

    // Transliterate characters to ASCII
    if (opt.transliterate) {
        for (var k in char_map) {
            s = s.replace(RegExp(k, 'g'), char_map[k]);
        }
    }

    // Replace non-alphanumeric characters with our delimiter
    var alnum = (typeof(XRegExp) === 'undefined') ? RegExp('[^a-z0-9]+', 'ig') : XRegExp('[^\\p{L}\\p{N}]+', 'ig');
    s = s.replace(alnum, opt.delimiter);

    // Remove duplicate delimiters
    s = s.replace(RegExp('[' + opt.delimiter + ']{2,}', 'g'), opt.delimiter);

    // Truncate slug to max. characters
    s = s.substring(0, opt.limit);

    // Remove delimiter from ends
    s = s.replace(RegExp('(^' + opt.delimiter + '|' + opt.delimiter + '$)', 'g'), '');

    return opt.lowercase ? s.toLowerCase() : s;
}

//console.log(url_slug('jjтт лл м,ю   вв.cc'))

var myApp= angular.module('gmall', [
        'ngRoute','ui.router','ngResource','ngCookies',
        'ui.bootstrap',
        'ngAnimate',
        'gmall.controllers',
        'gmall.services',
        'gmall.directives',
        'gmall.filters',
        'ui.select',
        'dndLists',
        'daterangepicker',
        // 3rd party dependencies
        //'btford.socket-io',
        'toaster',
        'textAngular',
        'angularCircularNavigation',
        'gmall.exception',
    'angular-intro',
        'satellizer',
        'ngMessages',
        'pageslide-directive',
        'angular-click-outside',
        'rzModule',
    'ui.mask',
    'colorpicker.module',
    'ui.tinymce'
])



.run(['$rootScope', '$state', '$stateParams','globalSrv','global','$timeout','$window','$location','$templateCache','Helper','$q','$order','$filter','$route','Stuff','Filters','FilterTags','Sections','Brands','BrandTags',
    function ($rootScope,$state,$stateParams,globalSrv,global,$timeout,$window,$location,$templateCache,Helper,$q,$order,$filter,$route,Stuff,Filters,FilterTags,Sections,Brands,BrandTags){
        global.set('store',storeTemp);
        //console.log(global.get('store').val)
        //global.set('lang',store.lang);
        if(mobileFromServer){global.set('mobile',mobileFromServer);}
    moment.locale('ru')
    $rootScope.displaySlideMenu=false;
    /*$rootScope.displaySlideMenuFoo=function(){
        if($state.current.name=='frame.stuffs' || $state.current.name=='frame.stuffs.stuff'){
            $rootScope.displaySlideMenu=!$rootScope.displaySlideMenu;
        }else{
            $state.go('frame.stuffs',{groupUrl:'group',categoryUrl:'category'})
        }
    }*/

    $timeout(function(){
        /*$.material.checkbox = function(selector) {
            // Add fake-checkbox to material checkboxes
            $((selector) ? selector : this.options.checkboxElements)
                .filter(":notmdproc")
                .filter(function(){ //added this filter to skip checkboxes that were already initialized
                    return $(this).parent().find(".check").length === 0;
                })
                .data("mdproc", true)
                .after("<span class=check></span>");
        };*/
        $.material.togglebutton = function(selector) {
            // Add fake-checkbox to material checkboxes
            $((selector) ? selector : this.options.togglebuttonElements)
                .filter(":notmdproc")
                .filter(function(){ //added this filter to skip checkboxes that were already initialized
                    return $(this).parent().find(".toggle").length === 0;
                })
                .data("mdproc", true)
                .after("<span class=toggle></span>");
        };
        $.material.init()
    });
    $rootScope.moment=moment;
    $rootScope.$state = $state;
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.global=global;

    var scrollPos;

    $rootScope.$watch(function () {return $location.path()}, function (newLocation, oldLocation) {
        //true only for onPopState
        if($rootScope.actualLocation === newLocation) {
            $rootScope.$emit('$stateChangeEndToStuff');
            var back,
                historyState = $window.history.state;
            back = !!(historyState && historyState.position <= $rootScope.stackPosition);
            if (back) {
                //back button
                $rootScope.stackPosition--;
            } else {
                //forward button
                $rootScope.stackPosition++;
            }
        } else {
            //normal-way change of page (via link click)
            if ($route.current) {
                $window.history.replaceState({
                    position: $rootScope.stackPosition
                });
                $rootScope.stackPosition++;
            }
        }

    });

    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState) {
        if(fromState.name=='frame.sections'){
            Sections.reloadItems();
        }
        if(fromState.name=='frame.filters'){
            Filters.reloadItems();
            FilterTags.reloadItems();
            Sections.reloadItems();
        }
        if(fromState.name=='frame.brands'){
            Brands.reloadItems();
            Sections.reloadItems();
        }
        if(fromState.name=='frame.stuffs' && toState.name=='frame.stuffs.stuff'){
            $rootScope.srollPosition=$(window).scrollTop();
        }
        if(fromState.name=='frame.stuffs.stuff' && toState.name=='frame.stuffs'){
            console.log("fromState.name=='frame.stuffs.stuff' && toState.name=='frame.stuffs'")
            $rootScope.$broadcast('fromStuffToStuffs')
        }

        if(toState.name=='frame.stuffs'||toState.name=='frame.stuffs.stuff'){
            $rootScope.$emit('$stateChangeStartToStuff');
        } else{
            $rootScope.endLoadStuffs=true;
        }
        $rootScope.slideMenu=false
    })

    $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState) {
        $timeout(function(){
            if(!global.get('user').val){$state.go('frame');return;}
        },4000)
        $rootScope.actualLocation = $location.path();
        if(fromState.name=='frame.stuffs.stuff' && toState.name=='frame.stuffs' && ($rootScope.srollPosition||$rootScope.srollPosition==0)){
            $timeout(function(){
                window.scrollTo(0, $rootScope.srollPosition);
            },500)
        }
        if(toState.name=='frame'){
            $q.when()
                .then(function(){
                    return Sections.getSections();
                })
                .then(function(sections){
                    //console.log(sections)
                    $rootScope.sectopnsForMenu=sections;
                })

        }
    })

    $rootScope.getIntro=function(){
        var intro = introJs();
        console.log($rootScope.IntroOptions.steps)
        intro.setOptions({
            steps: $rootScope.IntroOptions.steps

                /*[{
                    intro: "Hello world!"
                },
                {
                    element: document.querySelector('#topMenu'),
                    intro: "This is a tooltip."
                },
                {
                    element: document.querySelectorAll('#step6')[0],
                    intro: "Ok, wasn't that fun?",
                    position: 'right'
                },
                {
                    element: '#step3',
                    intro: 'More features, more fun.',
                    position: 'left'
                },
                {
                    element: '#step4',
                    intro: "Another step.",
                    position: 'bottom'
                },
                {
                    element: '#step5',
                    intro: 'Get it, use it.'
                }
            ]*/
        });
        $timeout(function(){
            intro.start();
        },300)

    }
    $rootScope.setInitData=function(store,mobile){
        console.log('start2')
        global.set('store',store);
        //global.set('lang',store.lang);
        if(mobile){global.set('mobile',mobile);}
    }
    $rootScope.changeLang=function(lang){
        global.get('store').val.lang=lang;
        $rootScope.$broadcast('changeLang',lang)
        //console.log(global.get('store').val.lang)
    }

    $rootScope.changeLocation=function(url){
        $window.location.href=url;
    }


    var functions={
        changeLocation:_changeLocation,
        logout:_logout,
        logged:_logged,
        taPaste: _taPaste,
        getSection:_getSection
    }
    global.set('functions',functions)
    function _changeLocation(url){
        $window.location.href=url;
    }
    function _logout(){
        $rootScope.$broadcast('logout');
        $auth.logout()
        global.set('user',null)
        location.reload()
    }
    function _logged(){
        $rootScope.$broadcast('logged');
    }

    function _taPaste($html){
        /*console.log($html)
        console.log($filter('htmlToPlaintextWithBr')($html))*/
        return $filter('htmlToPlaintextWithBr')($html);
    }
    function _getSection(sectionUrl,id) {
        var sections=global.get('groups').val;
        if(!sections) return  null;
        var field=(id)?'_id':'url'
        for(var i=0,l=sections.length;i<l;i++){
            if(sections[i][field] && sections[i][field]==sectionUrl){
                return sections[i];
                break
            }
            if (sections[i].child && sections[i].child.length){
                for(var j=0,ll=sections[i].child.length;j<ll;j++){
                    if(sections[i].child[j][field] && sections[i].child[j][field]==sectionUrl){
                        return sections[i].child[j];
                        break
                    }
                }
            }
        }
        return null;
    }

    var lang,langError,langOrder,langForm,langNote;
    globalSrv.getData('lang').then(function(response){
        var d = {}
        //console.log(response.data[1].tags)
        if(response.data && response.data.length && response.data[1].tags){
            lang=response.data[1].tags;
            for(var k in response.data[1].tags){
                d[k]=response.data[1].tags[k][global.get('store').val.lang]
            }
        }
        global.set('lang',d);
        //console.log(global.get('lang').val);
        //console.log(global.get('langError'))
        //console.log(global.get('store').val,global.get('langError'))
        //return response.data
    })
    globalSrv.getData('langError').then(function(response){
        var d = {}
        //console.log(response.data[1].tags)
        if(response.data && response.data.length && response.data[1].tags){
            langError=response.data[1].tags;
            for(var k in response.data[1].tags){
                d[k]=response.data[1].tags[k][global.get('store').val.lang]
            }
        }
        global.set('langError',d);
        //console.log(global.get('langError'))
        //console.log(global.get('store').val,global.get('langError'))
        //return response.data
    })
    globalSrv.getData('langNote').then(function(response){
        var d = {}
        //console.log(response.data[1].tags)
        if(response.data && response.data.length && response.data[1].tags){
            langNote=response.data[1].tags;
            for(var k in response.data[1].tags){
                d[k]=response.data[1].tags[k][global.get('store').val.lang]
            }
        }
        global.set('langNote',d);
        //console.log(global.get('langNote'))
        //console.log(global.get('store').val,global.get('langNote'))
        //return response.data
    })
    globalSrv.getData('langOrder').then(function(response){
        var d = {}
        //console.log(response.data[1].tags)
        if(response.data && response.data.length && response.data[1].tags){
            langOrder=response.data[1].tags;
            for(var k in response.data[1].tags){
                d[k]=response.data[1].tags[k][global.get('store').val.lang]
            }
        }
        global.set('langOrder',d);
        //console.log(global.get('langOrder'))
    })
    globalSrv.getData('langForm').then(function(response){
        var d = {}
        //console.log(response.data[1].tags)
        if(response.data && response.data.length && response.data[1].tags){
            langForm=response.data[1].tags;
            for(var k in response.data[1].tags){
                d[k]=response.data[1].tags[k][global.get('store').val.lang]
            }
        }
        global.set('langForm',d);
        //console.log(global.get('langForm'))
    })

}])

.config(function ($provide) {
    $provide.decorator("$q",['$delegate', function ($delegate) {
        //console.log($q)
        function whenFn() {
            $q.when(typeof obj === "function" ? obj() : obj);
        }
        $delegate.whenFn = whenFn;
        return $delegate;
    }]);
    $provide.decorator("$resource",['$delegate', function ($delegate) {
        $delegate.updateFiled = function(){
            console.log(this)
        };
        return $delegate;
    }]);
})
.config(['$stateProvider', '$urlRouterProvider','$locationProvider','globalProvider','$authProvider','$httpProvider',function ($stateProvider,$urlRouterProvider,$locationProvider,globalProvider,$authProvider,$httpProvider){
    $httpProvider.interceptors.push('myInterceptorService');
    $authProvider.baseUrl=userHost;

    $locationProvider.html5Mode(true);
    $locationProvider.hashPrefix('!');
    globalProvider.setUrl( {
        groups:'/api/collections/Group/',
        categories:'/api/collections/Category/',
        //filters:'/api/collections/Filter/',
        //filterTags:'/api/collections/FilterTags/',
        brands : '/api/collections/Brand/',
        campaign:'/api/collections/Campaign?query={"dateEnd":"dateEnd"}',
        notifications:'/api/notificationList',
        chatMessages:'/api/chatMessagesList',
        lang:'/api/collections/Lang?query={"name":"gmall.home"}',
        langError:'/api/collections/Lang?query={"name":"index.error"}',
        langNote:'/api/collections/Lang?query={"name":"index.note"}',
        langOrder:'/api/collections/Lang?query={"name":"index.order"}',
        langForm:'/api/collections/Lang?query={"name":"index.form"}',

    });
    // инициализация глобальных переменных
    globalProvider.set('groups');
    globalProvider.set('sections'); //дубдь
    globalProvider.set('categories');
    globalProvider.set('categoriesO');
    //globalProvider.set('filters');
    globalProvider.set('campaign');
    globalProvider.set('brands');
    globalProvider.set('filters');
    globalProvider.set('store');
    globalProvider.set('user');
    globalProvider.set('admin');
    globalProvider.set('mobile');
    globalProvider.set('nostore');
    globalProvider.set('filterTagsSticker');
    globalProvider.set('coupon');
    globalProvider.set('sellers');
    globalProvider.set('seller');
    globalProvider.set('functions');
    globalProvider.set('buff_stuffs'); // для обновления данных в списке после редактирования товара
    globalProvider.set('lang')
    globalProvider.set('langError')
    globalProvider.set('langNote')
    globalProvider.set('langOrder')
    globalProvider.set('langForm')


    /*globalProvider.set('config');
    globalProvider.set('currency');
    globalProvider.set('rate');*/




    $stateProvider
        .state("frame", {
            url: "/content?token",
            controller: 'mainFrameCtrl',
            templateUrl:"modules/content/views/index.html"

        })
        .state("frame.schedule", {
            url: "/schedule",
            template: '<schedule-list></schedule-list>',
        })
        .state("frame.labels", {
            url: "/labels",
            template: '<labels></labels>',
        })
        .state("frame.sections", {
            url: "/sections",
            template :'<sections-list></sections-list>'
        })
        .state("frame.sections.category", {
            url: "/:id",
            template:'<category-edit></category-edit>',
        })
        .state("frame.filterEdit", {
            url: "/filterEdit",
            template:'<div ui-view=""></div>',
        })
        .state("frame.filterEdit.item", {
            url: "/:id",
            template:'<filter-item-edit></filter-item-edit>',
        })
        .state("frame.filters", {
            url: "/filters",
            templateUrl: function(){ return 'modules/content/views/filters.html' },
        })

        .state("frame.filters.tag", {
            url: "/:id",
            template:'<filter-tag-edit></filter-tag-edit>',
        })

        .state("frame.stuffs", {
            url: "/stuffs/:groupUrl/:categoryUrl?searchStr&queryTag&brand&brandTag&msg&filters",
            templateUrl: function(){ return 'modules/content/views/stuffs.html'},
            controller:function($scope){
                $scope.rate={val:1};
            }
        })
        .state("frame.stuffs.stuff", {
            url: "/:stuffUrl",
            //template: '<stuff-edit back-state="frame.stuffs"></stuff-edit>',
            template: '<stuff-edit back-state="frame.stuffs"></stuff-edit>',
        })
        .state("frame.brands", {
            url: "/brands",
            templateUrl: function(){ return 'modules/content/views/brands.html' },
        })
        .state("frame.brands.brand", {
            url: "/brand/:id",
            template:'<brand-edit></brand-edit>',
            //templateUrl: function(){ return 'modules/content/views/filters.html' },
        })

        .state("frame.brands.category", {
            url: "/category/:id",
            resolve: {
                field: function() {
                    return 'brands'
                }
            },
            template:'<bind-model-to-category id="{{id}}" field="brands" backstate="frame.brands"></bind-model-to-category>',
            controller:function($scope,$stateParams,field){
                $scope.field=field;
                $scope.id=$stateParams.id;
            }
            //templateUrl: function(){ return 'modules/content/views/filters.html' },
        })
        .state("frame.brands.categoryTag", {
            url: "/categoryTag/:id",
            resolve: {
                field: function() {
                    return 'brandTags'
                }
            },
            template:'<bind-model-to-category id="{{id}}" revers="true" model="BrandTags" field="categories" backstate="frame.brands"></bind-model-to-category>',
            controller:function($scope,$stateParams,field){
                $scope.field=field;
                $scope.id=$stateParams.id;
            }
        })
        .state("frame.brands.tag", {
            url: "/tag/:id",
            resolve: { /* @ngInject */
                item: function(BrandTags,$stateParams) {
                    return;
                    /*return BrandTags.get({id:$stateParams.id}).$promise.then(function(res){
                        return res;
                    })*/
                }
            },
            template:'<brand-tag-edit ></brand-tag-edit>',
        })

        .state("frame.stats", {
            url: "/stats",
            template: '<static-pages></static-pages>',
        })
        .state("frame.stats.stat", {
            url: "/:id",
            template:'<static-page></static-page>',
        })
        .state("frame.additionals", {
            url: "/additionals",
            template: '<additional-pages></additional-pages>',
        })
        .state("frame.additionals.additional", {
            url: "/:id",
            template:'<additional-page></additional-page>',
        })
        .state("frame.homePage", {
            url: "/homePage",
            template: '<home-page></home-page>',
        })

        .state("frame.news", {
            url: "/news",
            template: '<news-list></news-list>',
        })
        .state("frame.news.item", {
            url: "/:id",
            template:'<news-item></news-item>',
        })
        .state("frame.lookbook", {
            url: "/lookbook",
            template: '<lookbook-list></lookbook-list>',
        })
        .state("frame.lookbook.item", {
            url: "/:id",
            template:'<lookbook-item></lookbook-item>',
        })
        .state("frame.master", {
            url: "/master",
            template: '<master-list></master-list>',
        })
        .state("frame.master.item", {
            url: "/:id",
            template:'<master-item></master-item>',
        })
        .state("frame.workplace", {
            url: "/workplace",
            template: '<workplace-list></workplace-list>',
        })
        .state("frame.workplace.item", {
            url: "/:id",
            template:'<workplace-item></workplace-item>',
        })
        .state("frame.groupStuffs", {
            url: "/groupStuffs",
            template: '<group-stuffs-list></group-stuffs-list>',
        })
        .state("frame.groupStuffs.item", {
            url: "/:id",
            template:'<group-stuffs-item></group-stuffs-item>',
        })

        .state("frame.paps", {
            url: "/paps",
            template: '<paps-list></paps-list>',
        })
        .state("frame.paps.item", {
            url: "/:id",
            template:'<paps-item></paps-item>',
        })
        .state("frame.info", {
            url: "/info",
            template: '<info-list></info-list>',
        })
        .state("frame.info.item", {
            url: "/:id",
            template:'<info-item></info-item>',
        })
        .state("frame.cart", {
            url: "/cart",
            template:'<cart-item></cart-item>',
        })
        .state("frame.externalCatalog", {
            url: "/externalCatalog",
            template: '<external-catalog-download></external-catalog-download>',
        })
        .state("frame.help", {
            url: "/help",
            template: '<help-component></help-component>',
        })
        .state("frame.help.category", {
            url: "/:category?store",
            template:'<help-category></help-category>',
        })
        .state("frame.help.category.stuff", {
            url: "/:stuff",
            template:'<help-stuff></help-stuff>',
        })
}])

    .config(function ($provide) {
        //return;
// given `{{x}} y {{z}}` return `['x', 'z']`
        function getExpressions (str) {
            var offset = 0,
                parts = [],
                left,
                right;
            while ((left = str.indexOf('{{', offset)) > -1 &&
            (right = str.indexOf('}}', offset)) > -1) {
                parts.push(str.substr(left+2, right-left-2));
                offset = right + 1;
            }

            return parts;
        }

        $provide.decorator('ngSrcDirective', function ($delegate, $parse) {
            // `$delegate` is an array of directives registered as `ngSrc`
            // btw, did you know you can register multiple directives to the same name?

            // the one we want is the first one.
            var ngSrc = $delegate[0];

            ngSrc.compile = function (element, attrs) {
                var expressions = getExpressions(attrs.ngSrc);
                var getters = expressions.map($parse);

                return function(scope, element, attr) {
                    //console.log(element)
                    attr.$observe('ngSrc', function(value) {
                        //console.log('photoHost',photoHost,value)
                        if (getters.every(function (getter) { return getter(scope); })) {
                            if(value && value.indexOf('images/') > -1&& value.indexOf('http') < 0){
                                if(photoHost){attr.$set('src', photoHost+'/'+value);}else{attr.$set('src',value)}
                            }else{
                                attr.$set('src',value);
                            }
                        }else{
                            if(value && value.indexOf('images/') > -1&& value.indexOf('http') < 0){
                                if(photoHost){attr.$set('src', photoHost+'/'+value);}else{attr.$set('src',value)}
                            }else{
                                attr.$set('src',value);
                            }
                        }
                    });
                };
            };

            // our compile function above returns a linking function
            // so we can delete this
            delete ngSrc.link;

            return $delegate;
        });
    });


//console.log('photoHost',photoHost)

/*setTimeout(function(){
    var options = {

        /!*componentRestrictions: {country: ["ua",'ru']}*!/
    };
    var inputFrom = document.getElementById('from');
    var autocompleteFrom = new google.maps.places.Autocomplete(inputFrom, options);
    console.log(autocompleteFrom)
    console.log(google.maps.event.addListener(autocompleteFrom, 'place_changed', place_changed))
    function place_changed() {
        console.log('dddd')
        var place = autocompleteFrom.getPlace();
        /!*self.user1.fromLat = place.geometry.location.lat();
        self.user1.fromLng = place.geometry.location.lng();
        self.user1.from = place.formatted_address;*!/
    }
},1000)*/







'use strict';

/* Directives */
// for material design
angular.module('gmall.directives', [])

.directive('emptyList',['$timeout',function($timeout){
    return {
        restrict:'E',
        scope:{
            items:"=items",
            message:'@'
        },
        template:'<div ng-if="show" class="alert alert-dismissible alert-warning">' +
        '<h3 ng-bind="message"></h3></div>',
        link:function(scope, element){
            scope.$watch('items',function(n,o){
                if(n===0){
                    scope.show=true;
                }else{
                    scope.show=false;
                }
            })
        }
    }
}])
    .directive('contentLoaded', ['$timeout','$rootScope','anchorSmoothScroll',function ($timeout,$rootScope,anchorSmoothScroll){
        return {
            restrict: 'AC',
            link: function (scope, element, attr) {
                /*$rootScope.$on('$allImagesLoadedInHomePage',function(){
                 $(element).fadeOut();
                 });*/
                $rootScope.$on('$stateChangeStartToStuff',function(){
                    console.log('$stateChangeStartToStuff')
                    $(element).fadeIn();
                });
                $rootScope.$on('$stateChangeEndToStuff',function(){
                    console.log('$stateChangeEndToStuff')
                    $(element).fadeOut();
                });
            }

        }
    }])

'use strict';
angular.module('gmall.controllers', [] )
.controller('mainFrameCtrl',['$rootScope','$auth','$location','Account','toaster','global','$user','$q',function($rootScope,$auth,$location,Account,toaster,global,$user,$q){
    if($rootScope.$stateParams.token){
        $auth.setToken({data:{token:$rootScope.$stateParams.token}})
        $location.search('token',null);
    }
    activate()
    function activate(){
        $q.when($auth.isAuthenticated())
            .then(function(auth){
                if(!auth){
                    return $user.login()
                }
            })
            .then(function(){
                return Account.getPermission();
            })
            .then(function(res){
                if(!res){
                    toaster.error('у данного аккаунта нет прав');
                    logout()
                }else{
                    global.set('user',res.data)
                    global.set('seller',res.data.seller);
                }
            } )
            .catch(function(error){
                if(error && error.data){
                    toaster.error(error.data.message, error.status);
                }
                return  logout();
            })
    }
    function logout(){
        $q.when($auth.isAuthenticated())
            .then(function(auth){
                if(auth){
                    return $auth.logout()
                }
            })
            .then(function() {
                global.set('user',null)
                global.set('seller',null);
                activate()
            });
    }
    $rootScope.logout=logout;
}])

 

'use strict';
angular.module('gmall.services', [])
.factory('socket', function (socketFactory) {
    return socketFactory();
})


'use strict';

angular.module('gmall.filters', [] )
.filter('unsafe', function($sce) {
    return function(val) {
        return $sce.trustAsHtml(val);
    };
})
    .filter("trustUrl", ['$sce', function ($sce) {
        return function (recordingUrl) {
            return $sce.trustAsResourceUrl(recordingUrl);
        };
    }])
    .filter('htmlToPlaintext', function() {
        return function(text) {
            if(text){
                var s = text.replace(/(<[^>]+) style=".*?"/i, '');
                return  s ? String(s).replace(/<[^>]+>/gm, '') : '';
            }

        };
    })
    .filter('htmlToPlaintextWithBr', function() {
        var walk_the_DOM = function walk(node, func) {
            func(node);
            node = node.firstChild;
            while (node) {
                walk(node, func);
                node = node.nextSibling;
            }
        };
        return function(markup) {
            var wrapper = document.createElement('div');
            wrapper.innerHTML= markup;
            walk_the_DOM(wrapper, function(el) {
                if(el.removeAttribute) {
                    el.removeAttribute('id');
                    el.removeAttribute('style');
                    el.removeAttribute('class');
                }
            });
            var result = wrapper.innerHTML;
            var arr = result.split('<br>')
            arr.forEach(function(s,i){
                //console.log(s)
                arr[i]=s.replace(/<[^>]+>/gm, '')
            })
            //console.log(arr.join('<br>'))
            //console.log($(wrapper).find(':not(br)').contents().unwrap())
            return result
        };
    })



 

'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('userSign',userSign)
        .directive('subscriptionAdd',subscriptionAdd)
        .directive('userSignShort',userSignShort)
        .directive('userLogin',userLogin)
        .directive('userLoginPhone',userLoginPhone)
        .directive('enterButton',enterButton);

    function userSign(){
        return {
            scope: {
                closeModal:'&',
                toaster:'@',
                social:'=',

            },
            bindToController: true,
            controller: signupCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/sign.html',
            restrict:'AE'
        }
    }
    function subscriptionAdd(){
        return {
            scope: {
                closeModal:'&',
                toaster:'@',
            },
            bindToController: true,
            controller: signupCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/subscriptionAdd.html',
            restrict:'AE'
        }
    }
    function userSignShort(){
        return {
            scope: {
                toaster:'@',
                buttonName:'@'
            },
            bindToController: true,
            controller: signupCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/sign-short.html',
            restrict:'AE'
        }
    }
    function userLogin(){
        return {
            scope: {
                closeModal:'&',
                modalClose:"&",
                toaster:'@',
                social:'=',
                successFoo:'&',

            },
            bindings: {
                toaster:'<',
                social:'=',
                successFoo:'&',
            },


            bindToController: true,
            controller: loginCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/login.html',
            restrict:'AE'
        }
    }
    function userLoginPhone(){
        return {
            scope: {
                closeModal:'&',
                modalClose:"&",
                toaster:'@',
                social:'=',
                successFoo:'&',

            },
            bindings: {
                toaster:'<',
                social:'=',
                successFoo:'&',
            },


            bindToController: true,
            controller: loginPhoneCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/loginPhone.html',
            restrict:'AE'
        }
    }
    function enterButton(){
        return {
            scope: {
                toaster:'@',
            },
            bindToController: true,
            controller: enterButtonCtrl,
            controllerAs: '$ctrl',
            templateUrl: '/components/sign-login/enter-button.html',
            restrict:'AE'
        }
    }
    signupCtrl.$inject=['$scope','$auth', 'toaster','$q','global','Account','$state','Stuff','CreateContent','$email','exception'];
    function signupCtrl($scope,$auth, toaster,$q,global,Account,$state,Stuff,CreateContent,$email,exception){
        var self=this;
        self.global=global;
        self.formData=(global.get('store').val.bonusForm)?global.get('store').val.bonusForm:{phone:true,fields:[]}
        self.user={email:'',profile:{},addInfo:{},subscription:true};
        if(!self.buttonName){self.buttonName=='подписаться!!'}
        //console.log(self.buttonName)

        self.signup=signup;
        self.authenticate=authenticate;


        function signup(form) {
            if(!form.$valid){return}
            self.user.store=global.get('store').val._id;
            $auth.signup(self.user)
                .then(function(response) {
                    //console.log(response)
                    if(response && response.data &&  response.data.token){
                        if(response.data.token=='update'){
                            $scope.$emit('closeWitget')
                            toaster.info(response.data.message);
                            throw null;
                        }else{
                            $auth.setToken(response);
                            var msg = global.get('langNote').val.subscriptionSuccess;
                            toaster.info(msg);
                            return Account.getProfile()
                        }
                    } else{
                        throw response;
                    }

                })
                .then(function(response){
                    $scope.$emit('closeWitget')
                    //console.log(response)
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                        if($state.current.name=='cart' || $state.current.name=='stuffs.stuff'){return}
                        //if(!response){return;}
                        var states= $state.get();
                        //console.log(global.get('paps'))
                        if(global.get('paps') && global.get('paps').val && states.some(function(state){return state.name=='thanksPage'})){
                            var pap = global.get('paps').val.getOFA('action','subscription');
                            if(pap && pap.url){
                                $state.go('thanksPage',{id:pap.url})
                            }
                        }
                    }

                })
                .then(function () {
                    if(self.user.type=="subscription"){
                        //console.log(global.get('coupons').val);
                        if(global.get('coupons') && global.get('coupons').val && global.get('coupons').val.length){
                            return [{imgs:global.get('coupons').val}]
                        }
                    }else if (self.user.type=='subscriptionAdd'){
                        var p={page:0,rows:100};
                        var query={$and:[{orderType:4},{actived:true}]}
                        return Stuff.getList(p,query);
                    }

                })
                .then(function (stuffs) {
                    //console.log(stuffs)
                    if(!stuffs || !stuffs.length){return}
                    if(!self.user || !self.user.email){throw 'нет email'}
                    var content=CreateContent.emailBonus(stuffs);
                    var bonus=global.get('langNote').val.getBonus;
                    var domain=global.get('store').val.domain;
                    var o={email:self.user.email,content:content,
                        subject:bonus+' ✔',from:  '<promo@'+domain+'>'};
                    return $q(function(resolve,reject){
                        $email.save(o,function(res){
                            exception.showToaster('note','',global.get('langNote').val.emailSent);
                            resolve()
                        },function(err){
                            exception.showToaster('warning',global.get('langNote').val.error,err.data)
                            resolve()
                        } )
                    })
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('signup')(err);
                    }
                })
        };
        function authenticate(provider) {
            $auth.authenticate(provider)
                .then(function(response) {
                    $scope.$emit('closeWitget')
                    $auth.setToken(response);
                    var msg = global.get('langNote').val.subscriptionSuccess;
                    toaster.info(msg);

                    /*if(self.toaster){
                        toaster.success('Вы успешно подписались с помощью ' + provider + '!');
                    }*/
                })
                .then(function(){
                    return Account.getProfile()
                })
                .then(function(response){
                    console.log(response)
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }
                })
                .catch(function(error) {
                    if(self.toaster){
                        if (error.error) {
                            // Popup error - invalid redirect_uri, pressed cancel button, etc.
                            toaster.error(error.error);
                        } else if (error.data) {
                            // HTTP response error from server
                            toaster.error(error.data.message, error.status);
                        } else {
                            toaster.error(error);
                        }
                    }

                });
        };



    }
    loginCtrl.$inject=['$scope','$auth', 'toaster','$q','global','Account','exception','sendPhoneFactory','$timeout'];
    function loginCtrl($scope,$auth, toaster,$q,global,Account,exception,sendPhoneFactory,$timeout){


        var self=this;
        self.$onInit=function () {
            //console.log($scope.toaster,$scope.successFoo,self.toaster)
        }

        self.login=login;
        self.authenticate=authenticate;
        self.sendCodeToPhone=sendCodeToPhone;
        self.verifyCode=verifyCode;
        self.global=global;
        self.phone=null;
        self.codeSent;
        self.sendCodeDisable;
        self.sendVerifyCodeDisable;
        function login(form){
            //console.log(form)
            if(!form.$valid){retrun}
            self.user.store=global.get('store').val._id;
            $auth.login(self.user)
                .then(function(data) {
                    console.log(data)
                    //console.log($scope.successFoo,self.toaster)
                    if(self.successFoo){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }

                    if(self.toaster){
                        toaster.info(global.get('langNote').val.authComplite);
                    }
                })
                .then(function(){
                    //console.log(Account.getProfile())
                    return Account.getProfile()
                })
                .then(function(response){
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }
                    $timeout(function () {
                        $scope.$emit('closeWitget')
                    },50)

                })
                .catch(function(err) {
                    global.set('user',null);
                    if(self.toaster){
                        exception.catcher('login')(err);
                    }
                });
        }
        function authenticate(provider) {
            $auth.authenticate(provider)
                .then(function(response) {
                    //console.log(response)
                    $scope.$emit('closeWitget')
                    if(self.successFoo && typeof self.successFoo=='function'){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }

                    var msg = global.get('langNote').val.authComplite;
                    toaster.info(msg);
                })
                .then(function(){
                    return Account.getProfile()
                })
                .then(function(response){
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }
                })
                .catch(function(error) {
                    if(self.toaster){
                        if (error.error) {
                            // Popup error - invalid redirect_uri, pressed cancel button, etc.
                            toaster.error(error.error);
                        } else if (error.data) {
                            // HTTP response error from server
                            toaster.error(error.data.message, error.status);
                        } else {
                            toaster.error(error);
                        }
                    }

                });
        };
        function sendCodeToPhone() {
            if(self.sendCodeDisable){return}
            self.sendCodeDisable=true;
            console.log(self.phone)
            if(!self.phone){
                return;
            }
            $q.when()
                .then(function () {
                    return sendPhoneFactory.sendCodeToPhone(self.phone)
                })
                .then(function () {
                    self.codeSent=true;
                    exception.showToaster('info','send code','success')
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send code')(err)
                    }
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
        }
        function verifyCode(form) {
            if(self.sendVerifyCodeDisable){return}
            if(form.$invalid){return}
            /*if(!self.phone){
                exception.catcher('verify code')('phone is empty')
            }
            if(!code){
                exception.catcher('verify code')('code is empty')
            }*/
            if(!self.code || !self.phone){
                return;
            }
            self.sendVerifyCodeDisable=true;
            $q.when()
                .then(function () {
                    return sendPhoneFactory.verifyCode(self.code,self.phone)
                })
                .then(function (response) {
                    //console.log(response)
                    exception.showToaster('info','verify code','success')
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000);
                    if(response && response.data &&  response.data.token){
                        $auth.setToken(response);
                        return Account.getProfile()
                    }else{throw 'wrong response'}
                })
                .then(function(response){
                    if(self.successFoo){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }
                    $scope.$emit('closeWitget')
                    if(self.toaster){
                        toaster.info(global.get('langNote').val.authComplite);
                    }
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }

                })
                .catch(function (err) {
                    self.wrongCode=true;
                    global.set('user',null);
                    if(err){
                        exception.catcher('verify code')(err)
                    }
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000)
                })
        }


    };
    function enterButtonCtrl(toaster,$q,Account,global,exception){
        var self=this;
        self.global=global;
        self.getEnterButton=getEnterButton;
        function getEnterButton(form){
            if(form.$invalid){return}
            $q.when()
                .then(function(){
                    self.blockButton=true;
                    setTimeout(function(){
                        self.blockButton=false
                    },1000)
                    return Account.getEnterButton(self.user)
                })
                .then(function(response) {

                    if(self.toaster){
                        toaster.info(response.data.message);
                    }
                })
                .catch(function(err) {
                    //console.log(err)
                    if(err){
                        exception.catcher(global.get('langNote').val.error)(err);
                    }

                });
        }
    };

    loginPhoneCtrl.$inject=['$scope','$auth', 'toaster','$q','global','Account','exception','sendPhoneFactory','$timeout','$user'];
    function loginPhoneCtrl($scope,$auth, toaster,$q,global,Account,exception,sendPhoneFactory,$timeout,$user){


        var self=this;
        self.$onInit=function () {
            //console.log($scope.toaster,$scope.successFoo,self.toaster)
        }

        self.sendCodeToPhone=sendCodeToPhone;
        self.verifyCode=verifyCode;
        self.global=global;
        self.phone=null;
        self.name='';
        self.codeSent;
        self.sendCodeDisable;
        self.sendVerifyCodeDisable;




        function sendCodeToPhone() {
            if(self.sendCodeDisable){return}
            self.sendCodeDisable=true;
            //console.log(self.phone)
            if(!self.phone){
                return;
            }
            $q.when()
                .then(function(){
                    return sendPhoneFactory.checkPhone(self.phone)
                })
                .then(function (res) {
                    //console.log(res)
                    if(!res || !res._id){
                        return $user.newUserByPhone(self.name,self.phone)
                    }
                })
                .then(function () {
                    console.log('sendPhoneFactory.sendCodeToPhone(self.phone)')
                    return sendPhoneFactory.sendCodeToPhone(self.phone)
                })
                .then(function () {
                    self.codeSent=true;
                    exception.showToaster('info','send code','success')
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('send code')(err)
                    }
                    $timeout(function () {
                        self.sendCodeDisable=false
                    },10000)
                })
        }
        function verifyCode(form) {
            if(self.sendVerifyCodeDisable){return}
            if(form.$invalid){return}
            /*if(!self.phone){
             exception.catcher('verify code')('phone is empty')
             }
             if(!code){
             exception.catcher('verify code')('code is empty')
             }*/
            if(!self.code || !self.phone){
                return;
            }
            self.sendVerifyCodeDisable=true;
            $q.when()
                .then(function () {
                    return sendPhoneFactory.verifyCode(self.code,self.phone)
                })
                .then(function (response) {
                    //console.log(response)
                    exception.showToaster('info','verify code','success')
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000);
                    if(response && response.data &&  response.data.token){
                        $auth.setToken(response);
                        return Account.getProfile()
                    }else{throw 'wrong response'}
                })
                .then(function(response){
                    if(self.successFoo){
                        self.successFoo();
                    }else{
                        $scope.$emit('closeWitget')
                    }
                    $scope.$emit('closeWitget')
                    if(self.toaster){
                        toaster.info(global.get('langNote').val.authComplite);
                    }
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                        $scope.$emit('cartslide',{event:'signLogin'})
                    }

                })
                .catch(function (err) {
                    self.wrongCode=true;
                    global.set('user',null);
                    if(err){
                        exception.catcher('verify code')(err)
                    }
                    $timeout(function () {
                        self.sendVerifyCodeDisable=false
                    },5000)
                })
        }


    };

})()

'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('pswdCheck', ['$timeout',function ($timeout) {
            return {
                require: 'ngModel',
                link: function (scope, elem, attrs, ctrl) {
                    var firstPassword = '#' + attrs.pswdCheck;
                    $timeout(function(){
                        elem.on('keyup', function () {
                            scope.$apply(function () {
                                var v = elem.val()===$(firstPassword).val();
                                console.log(v)
                                ctrl.$setValidity('pswdmatch', v);
                            });
                        });
                    },100)

                }
            }
        }])
        .directive('passwordMatch', function() {
            return {
                require: 'ngModel',
                scope: {
                    otherModelValue: '=passwordMatch'
                },
                link: function(scope, element, attributes, ngModel) {
                    ngModel.$validators.compareTo = function(modelValue) {
                        //console.log(modelValue,scope.otherModelValue)
                        if((modelValue==='undefined'||modelValue===''||!modelValue)
                            &&(scope.otherModelValue==='undefined'||scope.otherModelValue===''||!scope.otherModelValue)){
                            return true;
                        }
                        return modelValue === scope.otherModelValue;
                    };
                    scope.$watch('otherModelValue', function() {
                        ngModel.$validate();
                    });
                }
            };
        })
        .directive('passwordStrength', function() {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function(scope, element, attrs, ngModel) {
                    var indicator = element.children();
                    var dots = Array.prototype.slice.call(indicator.children());
                    var weakest = dots.slice(-1)[0];
                    var weak = dots.slice(-2);
                    var strong = dots.slice(-3);
                    var strongest = dots.slice(-4);

                    element.after(indicator);

                    element.bind('keyup', function() {
                        var matches = {
                                positive: {},
                                negative: {}
                            },
                            counts = {
                                positive: {},
                                negative: {}
                            },
                            tmp,
                            strength = 0,
                            letters = 'abcdefghijklmnopqrstuvwxyz',
                            numbers = '01234567890',
                            symbols = '\\!@#$%&/()=?¿',
                            strValue;

                        angular.forEach(dots, function(el) {
                            el.style.backgroundColor = '#ebeef1';
                        });

                        if (ngModel.$viewValue) {
                            // Increase strength level
                            matches.positive.lower = ngModel.$viewValue.match(/[a-z]/g);
                            matches.positive.upper = ngModel.$viewValue.match(/[A-Z]/g);
                            matches.positive.numbers = ngModel.$viewValue.match(/\d/g);
                            matches.positive.symbols = ngModel.$viewValue.match(/[$-/:-?{-~!^_`\[\]]/g);
                            matches.positive.middleNumber = ngModel.$viewValue.slice(1, -1).match(/\d/g);
                            matches.positive.middleSymbol = ngModel.$viewValue.slice(1, -1).match(/[$-/:-?{-~!^_`\[\]]/g);

                            counts.positive.lower = matches.positive.lower ? matches.positive.lower.length : 0;
                            counts.positive.upper = matches.positive.upper ? matches.positive.upper.length : 0;
                            counts.positive.numbers = matches.positive.numbers ? matches.positive.numbers.length : 0;
                            counts.positive.symbols = matches.positive.symbols ? matches.positive.symbols.length : 0;

                            counts.positive.numChars = ngModel.$viewValue.length;
                            tmp += (counts.positive.numChars >= 8) ? 1 : 0;

                            counts.positive.requirements = (tmp >= 3) ? tmp : 0;
                            counts.positive.middleNumber = matches.positive.middleNumber ? matches.positive.middleNumber.length : 0;
                            counts.positive.middleSymbol = matches.positive.middleSymbol ? matches.positive.middleSymbol.length : 0;

                            // Decrease strength level
                            matches.negative.consecLower = ngModel.$viewValue.match(/(?=([a-z]{2}))/g);
                            matches.negative.consecUpper = ngModel.$viewValue.match(/(?=([A-Z]{2}))/g);
                            matches.negative.consecNumbers = ngModel.$viewValue.match(/(?=(\d{2}))/g);
                            matches.negative.onlyNumbers = ngModel.$viewValue.match(/^[0-9]*$/g);
                            matches.negative.onlyLetters = ngModel.$viewValue.match(/^([a-z]|[A-Z])*$/g);

                            counts.negative.consecLower = matches.negative.consecLower ? matches.negative.consecLower.length : 0;
                            counts.negative.consecUpper = matches.negative.consecUpper ? matches.negative.consecUpper.length : 0;
                            counts.negative.consecNumbers = matches.negative.consecNumbers ? matches.negative.consecNumbers.length : 0;

                            // Calculations
                            strength += counts.positive.numChars * 4;
                            if (counts.positive.upper) {
                                strength += (counts.positive.numChars - counts.positive.upper) * 2;
                            }
                            if (counts.positive.lower) {
                                strength += (counts.positive.numChars - counts.positive.lower) * 2;
                            }
                            if (counts.positive.upper || counts.positive.lower) {
                                strength += counts.positive.numbers * 4;
                            }
                            strength += counts.positive.symbols * 6;
                            strength += (counts.positive.middleSymbol + counts.positive.middleNumber) * 2;
                            strength += counts.positive.requirements * 2;

                            strength -= counts.negative.consecLower * 2;
                            strength -= counts.negative.consecUpper * 2;
                            strength -= counts.negative.consecNumbers * 2;

                            if (matches.negative.onlyNumbers) {
                                strength -= counts.positive.numChars;
                            }
                            if (matches.negative.onlyLetters) {
                                strength -= counts.positive.numChars;
                            }

                            strength = Math.max(0, Math.min(100, Math.round(strength)));

                            if (strength > 85) {
                                angular.forEach(strongest, function(el) {
                                    el.style.backgroundColor = '#008cdd';
                                });
                            } else if (strength > 65) {
                                angular.forEach(strong, function(el) {
                                    el.style.backgroundColor = '#6ead09';
                                });
                            } else if (strength > 30) {
                                angular.forEach(weak, function(el) {
                                    el.style.backgroundColor = '#e09115';
                                });
                            } else {
                                weakest.style.backgroundColor = '#e01414';
                            }
                        }
                    });
                },
                template: '<span class="password-strength-indicator"><span></span><span></span><span></span><span></span></span>'
            };
        })
})()



angular
    .module('gmall.exception',[])
    .factory('exception', exception);

exception.$inject = ['toaster'];

function exception(toaster) {
    var service = {
        catcher: catcher,
        showToaster:showToaster
    };
    return service;

    function catcher(header) {
        //console.log(message)
        return function(err) {
            if(err){
                if(typeof err=='object'){
                    if(err.data){
                        err=err.data
                    }
                    if(err.message){
                        err=err.message
                    }else if(err.error){
                        err=err.error
                    }
                }
            }else{
                err='ошибка'
            }
            //console.log(message,reason)
            toaster.pop('error',header,err);
            //logger.error(message, reason);
        };
    }
    function showToaster(type,title,content){
        if(typeof content=='object'){
            if(content.message){
                content=content.message
            }else if(content['error']){
                content=content['error']
            }
        }
        toaster.pop({
            type: type,
            title: title,
            body: content,
            bodyOutputType: 'trustedHtml',
            showCloseButton: true,
            delay:15000,
            closeHtml: '<button>Close</button>'
        });
    }
}

angular
    .module('gmall.services')
    .factory('Confirm', confirmFactory);

confirmFactory.$inject = ['$q','$uibModal'];

function confirmFactory($q,$uibModal) {
    return service;
    function service(question){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                template : [
                    '<div class="modal-header">',
                        '<h3 class="modal-title text-center" ng-bind="$ctrl.question"></h3>',
                        "<span class='icon-cancel-img' ng-click='$ctrl.cancel()'></span>",
                    '</div>',
                    '<div class="modal-body confirm">',
                    '<form ng-submit="$ctrl.ok()">'+
                    '<button autofocus class="btn btn-project btn-border  btn-modal pull-right" type="reset" ng-click="$ctrl.cancel()">{{global.get("langOrder").val.noo}}</button>',
                    '<button class="btn btn-project btn-modal pull-left" type="submit">{{global.get("langOrder").val.yes}}</button>',
                    '</form>'+
                    '<div class="clearfix"></div>',
                    '</div>'
                ].join(''),
                controller: function($uibModalInstance,question){
                    var self=this;
                    self.question=question
                    self.ok=function(){
                        $uibModalInstance.close();
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size: 'sm',
                resolve:{
                    question: function(){return question}
                }
            }
            $uibModal.open(options).result.then(function () {resolve();},function () {reject()});
        })


    }
}

angular.module('gmall.services')
    .factory('myInterceptorService', function($q,$rootScope,$templateCache) {
        var keys=$templateCache.getKeys();
        //console.log(keys)
        var store=globalStoreId;
        //var zip = new JSZip();
        //var global= $rootScope.global;
        //console.log(globalCrawler)
        try{
            var crawler=(globalCrawler)?globalCrawler:null;
        }catch(err){
            var crawler=null;
        }

        return {
            // optional method
            'request': function(config) {
                if(keys.indexOf(config.url)>-1){
                    return config;
                }

                /*if(config.url.indexOf('uib/template/') > -1
                    || config.url.indexOf('.tpl.html') > -1 || config.url.indexOf('rzSliderTpl.html') > -1|| config.url.indexOf('tooltip/tooltip-popup.html') > -1
                    || config.url.indexOf('template/modal/backdrop.html') > -1 || config.url.indexOf('template/modal/window.html') > -1
                    || config.url.indexOf('mainSection.html') > -1 || config.url.indexOf('subSection.html') > -1
                    || config.url.indexOf('template/tabs/tabset.html') > -1 || config.url.indexOf('template/tabs/tab.html') > -1
                    || config.url.indexOf('template/datepicker/day.html') > -1 || config.url.indexOf('template/datepicker/month.html') > -1|| config.url.indexOf('template/datepicker/year.html') > -1
                    || config.url.indexOf('template/popover/popover.html') > -1 || config.url.indexOf('template/datepicker/datepicker.html') > -1|| config.url.indexOf('template/datepicker/popup.html') > -1){
                    return config;
                }*/
                config.params = config.params || {};
                if(!config.params.store){
                    config.params.store=store
                }
                if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                    config.params.lang=$rootScope.global.get('store').val.lang
                }
                return config;
                /***************************************************************************************************************************************/

               //console.log('config.url' ,config.url)
               //console.log('config.url' ,config.url,config.url.indexOf('api/users/checkemail') > -1)
                if(!config.url){
                    console.log('config.url' ,config.url)
                    return config;
                }
                if(config.url.indexOf('socket.io') > -1){
                    console.log('config.url',config.url)
                    config.url=socketHost+config.url;
                }

                if(config.url.indexOf('api/collections/') > -1 && (config.url.indexOf('http://')<0 && config.url.indexOf('https://')<0)){
                    /*if(config.url.indexOf('api/collections/Dialog') > -1 ||
                        config.url.indexOf('api/collections/Chat') > -1 ||
                        config.url.indexOf('api/collections/Notification') > -1){
                        config.url=socketHost+config.url;
                    }else if(config.url.indexOf('api/collections/User') > -1 || config.url.indexOf('api/collections/SubscribtionList') > -1){
                        config.url=userHost+config.url;
                    }else if(config.url.indexOf('api/collections/Store') > -1 ||
                        config.url.indexOf('api/collections/Template') > -1 ||
                        config.url.indexOf('api/collections/Config') > -1 ||
                        config.url.indexOf('api/collections/Lang') > -1 ||
                        config.url.indexOf('api/collections/Redirect') > -1 ||
                        config.url.indexOf('api/collections/BlocksConfig') > -1 ||
                        config.url.indexOf('api/collections/CustomLists') > -1||
                        config.url.indexOf('api/collections/Seller') > -1){
                        config.url=storeHost+config.url;
                    }else if(config.url.indexOf('api/collections/Order') > -1 ||
                        config.url.indexOf('api/collections/Booking') > -1 ||
                        config.url.indexOf('api/collections/CartInOrder') > -1 ){
                        config.url=orderHost+config.url;
                    } else if(config.url.indexOf('deleteFilesFromStuff')>-1 || config.url.indexOf('fileGalleryDelete') > -1){
                        config.url=photoUpload+config.url;
                    }else{
                        config.url=stuffHost+config.url;
                    }*/
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }

                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                } else if (config.url.indexOf('/api/orders') > -1){

                    //config.url=orderHost+config.url;
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if (config.url.indexOf('/api/stuffs') > -1){

                    //config.url=stuffHost+config.url;
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if (config.url.indexOf('/api/sendEmail') > -1 || config.url.indexOf('api/users/') > -1 ){

                    //config.url=userHost+config.url;
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if(config.url.indexOf('auth/signupOrder') > -1){
                    //config.url=userHost+config.url;

                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    /*if($rootScope.global && $rootScope.global.get('store') &&$rootScope.global.get('store').val &&$rootScope.global.get('lang') &&
                        $rootScope.global.get('store').val.lang!=$rootScope.global.get('lang').val){
                        config.params.lang=$rootScope.global.get('lang').val
                    }*/
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if(config.url.indexOf('http://')>-1 || config.url.indexOf('https://')>-1){
                    // for photos
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }else if(config.url.indexOf('/api/chatMessagesList/')>-1 || config.url.indexOf('/api/notificationList/')>-1){
                    // for photos
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }
                else if (config.url.indexOf('views/template/partials') > -1){
                    config.params = config.params || {};
                    if(!config.params.store){
                        config.params.store=store
                    }
                    if($rootScope.global && $rootScope.global.get('store') && $rootScope.global.get('store').val && $rootScope.global.get('store').val.lang){
                        config.params.lang=$rootScope.global.get('store').val.lang
                    }
                }
                //console.log(config.url)
                if(crawler){
                    config.params = config.params || {};
                    config.params.subDomain=crawler;
                }
                return config;
            },
            response: function(response){
                // do something for particular error codes
                if(response.status === 500){
                    // do what you want here
                }
               //console.log(response)

                return response;
                //console.log("response && response.config && response.config.url && response.config.url.split",response && response.config && response.config.url && response.config.url.split)
                if(response && response.config && response.config.url && response.config.url.split){

                    //var u = response.config.url.split('api/collections')
                    var u = response.config.url.split(stuffHost)
                    //console.log(u)
                    if(u.length >1 ){
                        var u1 =  u[1].split('api/collections')
                        //console.log(u1)
                        if(u1[1]){
                            var u2 = u1[1].split('/')
                            //console.log(u2)
                            if(u2.length==2){
                                console.log('unzip',response.config.url,response)
                                /*var gunzip = new Zlib.Gunzip(response.data);
                                response.data = gunzip.decompress();*/
                                return response;
                            }else{
                                return response;
                            }

                        }else{
                            return response;
                        }

                    }else{
                        return response;
                    }


                }else{
                    return response;
                }



            }
        };
    });

angular.module('gmall')
    .config(['$provide', function($provide) {

    // monkey-patches $templateCache to have a keys() method
    $provide.decorator('$templateCache', [
        '$delegate', function($delegate) {

            var keys = [], origPut = $delegate.put;

            $delegate.put = function(key, value) {
                origPut(key, value);
                keys.push(key);
            };

            // we would need cache.peek() to get all keys from $templateCache, but this features was never
            // integrated into Angular: https://github.com/angular/angular.js/pull/3760
            // please note: this is not feature complete, removing templates is NOT considered
            $delegate.getKeys = function() {
                return keys;
            };

            return $delegate;
        }
    ]);
}]);

'use strict';
angular.module('gmall.services')
.service('Store', function($resource,$q,$uibModal,$http){
    var Items= $resource('/api/collections/Store/:_id',{_id:'@_id'});
    return {
        getList:getList,
        getItem:getItem,
        query:Items.query,
        get:Items.get,
        save:Items.save,
        delete:Items.delete,
        upload:upload,
        create:create,
        selectPartOfTemplate:selectPartOfTemplate,
        selectItemFromList:selectItemFromList,
    }
    function getList(paginate,query){
        var data ={perPage:paginate.rows ,page:paginate.page,query:query};
        return Items.query(data).$promise
            .then(getListComplete)
        function getListComplete(response) {
            if(paginate.page==0){
                if(response && response.length){
                    paginate.items=response.shift().index;
                    //console.log(paginate)
                }else{
                    paginate.items=0;
                }
            }
            return response;
        }
    }
    function getItem(id){
        return Items.get({_id:id} ).$promise
            .then(getItemComplete)
        function getItemComplete(response) {
            return response;
        }
    }

    function upload(item) {
        var url =(storeHost)? 'http://'+storeHost+'/api/upload/'+item._id:'/api/upload/'+item._id
        //console.log(url)
        return $http.get(url)
    }
    function create(){
        return $q(function(resolve,reject){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/storeSetting/createStore.html',
                controller: createStoreCtrl,
                controllerAs:'$ctrl',
            });
            modalInstance.result.then(function (store) {
                if(store.name){
                    store.name=store.name.substring(0,25)
                    //store.user={_id:store.user._id,name:store.user.name}
                    resolve(store)
                }else{
                    reject('empty')
                }

            }, function (err) {
                reject(err)
            });
        })


    }

    function selectPartOfTemplate(stores){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/storeSetting/modal/selectStore.html',
            controllerAs:'$ctrl',
            controller: function ($uibModalInstance ,global,stores) {
                var self=this;
                self.stores=stores;
                self.selectStore=selectStore;
                self.cancel = cancel;

                function selectStore(store){
                    $uibModalInstance.close(store);
                }
                function cancel() {
                    $uibModalInstance.dismiss();
                };
            },
            resolve: {
                stores:function () {
                    return stores
                }
            }
        });
        return modalInstance.result
    }
    function selectItemFromList(items,header){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/storeSetting/modal/selectItem.html',
            controllerAs:'$ctrl',
            controller: function ($uibModalInstance ,global,items,header) {
                var self=this;
                self.items=items;
                self.header=header||'выберите из предложенного списка'
                self.selectItem=selectItem;
                self.cancel = cancel;

                function selectItem(item){
                    $uibModalInstance.close(item);
                }
                function cancel() {
                    $uibModalInstance.dismiss();
                };
            },
            resolve: {
                items:function () {
                    return items
                },
                header:function () {
                    return header
                }
            }
        });
        return modalInstance.result
    }

    createStoreCtrl=['$uibModalInstance','exception','$user'];
    function createStoreCtrl($uibModalInstance,exception,$user){
        var self=this;
        self.name='';
        self.addOwner=addOwner;
        self.ok=function(){
            /*if(!self.name || !self.user){
                exception.catcher('создание магазина')('нужен владелец')
                return
            }*/
            if(!self.name){
                exception.catcher('создание магазина')('нужено название')
                return
            }
            $uibModalInstance.close({name:self.name});
            //$uibModalInstance.close({name:self.name,user:self.user});
        }
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        function addOwner(){
            $user.selectItem().then(function(user){
                self.user=user
            })
        }
    }
})
    .service('Template', function($resource,$q,$uibModal){
        var Items= $resource('/api/collections/Template/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create
        }
        function getList(paginate,query){
            if(!paginate){
                paginate ={page:0}
            }
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/storeSetting/createTemplate.html',
                    controller: createTemplateCtrl,
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (o) {
                    if(o.name){
                        o.name=o.name.substring(0,25)
                        resolve(o)
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })


        }
        createTemplateCtrl=['$uibModalInstance','exception'];
        function createTemplateCtrl($uibModalInstance,exception){
            var self=this;
            self.name='';
            self.folder=''
            self.ok=function(){
                if(!self.name || !self.folder){
                    exception.catcher('создание шаблона')('нужено имя и папка')
                    return
                }
                $uibModalInstance.close({name:self.name,folder:self.folder});
            }
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        }
    })
    .service('BlocksConfig', function($resource,$q,$uibModal){
        var Items= $resource('/api/collections/BlocksConfig/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            selectItemFromList:selectItemFromList,
        }
        function getList(paginate,query){
            if(!paginate){
                paginate ={page:0,rows:500}
            }
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function selectItemFromList(items,header){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/storeSetting/modal/selectItemForBlocks.html',
                controllerAs:'$ctrl',
                controller: function ($uibModalInstance ,global,items,header) {
                    var self=this;
                    self.items=items;
                    self.header=header||'выберите из предложенного списка'
                    self.selectItem=selectItem;
                    self.cancel = cancel;

                    function selectItem(item){
                        $uibModalInstance.close(item);
                    }
                    function cancel() {
                        $uibModalInstance.dismiss();
                    };
                },
                resolve: {
                    items:function () {
                        return items
                    },
                    header:function () {
                        return header
                    }
                }
            });
            return modalInstance.result
        }
        /*function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/storeSetting/createTemplate.html',
                    controller: createTemplateCtrl,
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (o) {
                    if(o.name){
                        o.name=o.name.substring(0,25)
                        resolve(o)
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })


        }
        createTemplateCtrl=['$uibModalInstance','exception'];
        function createTemplateCtrl($uibModalInstance,exception){
            var self=this;
            self.name='';
            self.folder=''
            self.ok=function(){
                if(!self.name || !self.folder){
                    exception.catcher('создание шаблона')('нужено имя и папка')
                    return
                }
                $uibModalInstance.close({name:self.name,folder:self.folder});
            }
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
        }*/
    })
    .service('Config', function($resource){
        var Items= $resource('/api/collections/Config/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
    })
    .service('ConfigData', function($resource,$q){
        var Items= $resource('/api/collections/ConfigData/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
    })

    .service('Seller', function($resource){
        var Items= $resource('/api/collections/Seller/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(paginate,query){
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            return Items.query(data).$promise
                .then(getListComplete)
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
        }
        function getItem(id,param){
            return Items.get({_id:id,param:param} ).$promise
                .then(getItemComplete)
            function getItemComplete(response) {
                return response;
            }
        }
    })

    .service('siteName', function($uibModal){
        return {
            choiceName:choiceName,
        }
        function choiceName(data){
            return $uibModal.open({
                animation: true,
                templateUrl: 'components/storeSetting/modal/websiteName.html',
                controller: function($uibModalInstance,global,Store,data){
                    var self=this;
                    self.global=global;
                    self.item=''
                    self.focus=true;
                    self.windowName='Выберите поддомен';
                    self.field = 'subDomain'
                    if(data){
                        if(data.windowName){
                            self.windowName=data.windowName;
                        }
                        if(data.field){
                            self.field=data.field;
                        }
                    }
                    self.checkSubDomain=checkSubDomain;
                    self.exist=false
                    //self.re=/^[a-z][a-z0-9-_]/
                    self.re=/^[a-zA-Z0-9][a-zA-Z0-9-_\.]{1,20}$/
                    self.ok=function(websiteNameForm){
                        if(websiteNameForm.$invalid || self.exist){
                            return;
                        }
                        $uibModalInstance.close(self.item.toLowerCase());
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss();
                    };
                    function checkSubDomain(name){
                        if(!name || name.length>20){return}
                        var o={};
                        o[self.field]=name.toLowerCase();
                        Store.query({query:o},function(res){
                            if(res &&  res.length){
                                console.log(true)
                                self.exist =true;
                            }else{
                                self.exist= false
                            }
                        },function(err){
                            self.exist= true;
                        })
                    }
                },
                controllerAs:'$ctrl',
                resolve: {
                    data : function () {
                        return data
                    }
                }
            }).result
        }
    })

/*
$resource('/api/collections/Template/:id',{id:'@_id'}).query({perPage:500,page:0},function(res){
    res.shift();
    $scope.listEditCtrl.templates=res;
});
$resource('/api/collections/Config/:id',{id:'@_id'}).query({perPage:500,page:0},function(res){
    res.shift();
    $scope.listEditCtrl.currency=res[0].currency;
    $scope.listEditCtrl.unitOfMeasure=res[0].unitOfMeasure;
    $scope.listEditCtrl.config=res[0];
});*/

'use strict';
angular.module('gmall.services')
.service('Sections', sectionServiceFunction)

.service('selectCategoryFromModal',function($q,$uibModal){
    this.bind=function(categoryId){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/selectCategoryModal/selectCategoryModal.html',
                controller: 'selectCategoryModalCtrl',
                size: 'lg',
                resolve:{
                    categoryId:function(){return categoryId}
                }
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selectedItem) {
                resolve(selectedItem)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })
    }
})

sectionServiceFunction.$inject=['$resource', '$q' ,'global','$uibModal','$timeout'];
function sectionServiceFunction($resource,$q,global,$uibModal,$timeout) {
    var Items= $resource('/api/collections/Group/:id',{id:'@_id'});

    var sections=null;
    var pending=true;
    activate()
    return{
        query:Items.query,
        get:Items.get,
        delete:Items.delete,
        save:save,
        savePure:Items.save,
        getSections:getSections,
        getSection:getSection,
        getParentSection:getParentSection,
        getEmbededCategories:getEmbededCategories,
        setCategoriesFromSections:setCategoriesFromSections,
        select:select,
        setSections:setSections,
        reloadItems:reloadItems

    }
    function activate(){
        $timeout(function(){
            //console.log(global.get('sections'))
            if(!global.get('sections') || !global.get('sections' ).val){
                init()
            }
        })
    }
    function init() {
        Items.query(function(res){
            res.shift();
            sections=res;
            setCategoriesFromSections(sections)
            pending=false;
        })
    }
    function reloadItems(){
        pending=true;
        init();
    }

    function save(){
        return Items.save.apply(this,arguments).$promise.then(function(){
            //activate()
        })
    }

    function _getParentSection(sections,sectionUrl,id){
        //console.log(sectionUrl)
        if(!sections) return  null;
        for(var i=0,l=sections.length;i<l;i++){
            if(id){
                if(sections[i]._id==sectionUrl){
                    return sections[i];
                    break
                }
            }else{
                if(sections[i].url && sections[i].url==sectionUrl){
                    return sections[i];
                    break
                }
            }

            if (sections[i].child && sections[i].child.length){
                var categories;
                if(categories=_getParentSection(sections[i].child,sectionUrl,id)){
                    return categories;
                    break;
                }
            }
        }
        return null;
    }
    function _getEmbededCategories(section,arr){
        if(section.categories && section.categories.length){
            arr.push.apply(arr,section.categories);
        }
        if (section.child && section.child.length){
            section.child.forEach(function(section){
                getEmbededCategories(section,arr);
            })
        }
        return arr;
    }
    function returnSections(resolve){
        if(pending){setTimeout(function(){returnSections(resolve)}, 100);}else{
            resolve(sections)
        }

    }
    function getSections(){
        return $q(function(resolve,reject){
            if(global.get('sections') && global.get('sections' ).val){
                if(!sections){sections=global.get('sections' ).val}
                resolve(global.get('sections' ).val);
            }else{
                if(pending){
                    setTimeout(function(){returnSections(resolve)}, 100);
                }else{
                    if(sections){
                        resolve(sections)
                    } else{
                        pending=true;
                        Items.query(function(res){
                            res.shift();
                            sections=res;
                            pending=false;
                            setCategoriesFromSections(sections)
                            resolve(sections)
                        },function(err){pending=false;;reject(err)})
                    }
                }

            }

        })


    }
    function setSections(newSections){
        sections=newSections
        if(sections){
            setCategoriesFromSections(sections)
        }else{
            setCategoriesFromSections([])
        }

    }
    function getSection(sections,sectionUrl) {
        if(!sections) {sections=getSections();}
        for(var i=0,l=sections.length;i<l;i++){
            if(sections[i].url && sections[i].url==sectionUrl){
                return sections[i];
                break
            }
            if (sections[i].child && sections[i].child.length){
                for(var j=0,ll=sections[i].child.length;j<ll;j++){
                    if(sections[i].child[j].url && sections[i].child[j].url==sectionUrl){
                        return sections[i].child[j];
                        break
                    }
                }
            }
        }
        return null;
    }
    function getParentSection(sectionUrl,id){
        return _getParentSection(sections,sectionUrl,id)
    }
    function getEmbededCategories(section,arr){
        return _getEmbededCategories(section,arr)
    }
    function setCategoriesFromSections(sections){
        //console.log(sections)
        var categories=[];
        var categoriesO={};
        sections.forEach(function(section){
            if(section.categories && section.categories.length){
                section.categories.forEach(function(c){
                    //console.log(c)
                    c.section={url:section.url}
                    c.linkData={groupUrl:section.url,categoryUrl:c.url}
                    categoriesO[c._id]=c
                })
                categories.push.apply(categories,section.categories)
            }
            if(section.child && section.child.length){
                section.child.forEach(function(subSection){
                    if(subSection.categories && subSection.categories.length){
                        subSection.categories.forEach(function(c){
                            //console.log(c)
                            c.section={url:section.url}
                            c.linkData={groupUrl:section.url,categoryUrl:c.url,parentGroup:subSection.url}
                            categoriesO[c._id]=c
                        })
                        categories.push.apply(categories,subSection.categories)
                    }
                })
            }
        })
        global.set('categories',categories);
        global.set('categoriesO',categoriesO);
    }




    function select(){
        var that=this;
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/sections/selectSubsectionModal.html',
                controller: selectSubsectionCtrl,
                size: 'lg',
                resolve:{
                    sections:function(){return that.getSections();}
                },
                controllerAs:'$ctrl'
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selectedItem) {
                resolve(selectedItem)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })

    }
    selectSubsectionCtrl.$inject=['$q','$uibModalInstance','sections'];
    function selectSubsectionCtrl($q,$uibModalInstance,sections){
        var self=this;
        self.sections = sections;
        console.log(sections)
        self.ok = function (section) {
            $uibModalInstance.close(section);
        };
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
}
'use strict';
(function(){
    angular.module('gmall.services')
        .service('Category', categoryService);
    categoryService.$inject=['$resource','$uibModal','$q'];
    function categoryService($resource,$uibModal,$q){



        var Items= $resource('/api/collections/Category/:_id',{_id:'@_id'});
        return {
            //query:getList,
            get:Items.get,
            query:Items.query,
            save:save,
            delete:Items.delete,
            select:select,
            selectWithSection:selectWithSection

        }
        function save(){
            return Items.save.apply(this,arguments).$promise.then(function(){
                
            })
        }
        function getList(query,cb){
            console.log(query)
            Items.query(query,function(res){
                cb(res)
            })

        }
        function select(categoryId,selectSection,sections,forGroupStuffs){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/sections/selectCategoryModal.html',
                    controller: selectCategoryCtrl,
                    size: 'lg',
                    resolve:{
                        categoryId:function(){return categoryId},
                        selectSection:function(){return selectSection},
                        sections:function(){if(sections){return sections}else{return null}},
                        forGroupStuffs:function(){if(forGroupStuffs){return forGroupStuffs}else{return null}}
                    },
                    controllerAs:'$ctrl'
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedItem) {
                    resolve(selectedItem)
                }, function () {
                    //console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }

        function selectWithSection(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/sections/selectCategoryWithSectionModal.html',
                    controller: selectCategoryWithSectionCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl'
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedItem) {
                    resolve(selectedItem)
                }, function () {
                    //console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }

    }
    selectCategoryCtrl.$inject=['$q','$uibModalInstance','Sections','categoryId','selectSection','sections','forGroupStuffs'];
    function selectCategoryCtrl($q,$uibModalInstance,Sections,categoryId,selectSection,sections,forGroupStuffs){
        var self=this;
        self.categoryId=categoryId;
        self.selectSection=selectSection;
        $q.when()
            .then(function(){
                if(sections){
                    return sections
                }else{
                    return Sections.getSections();
                }
            })
            .then(function(sections){
                //console.log(sections)
                self.sections = sections.filter(function (s) {
                    if(forGroupStuffs){
                        return s.groupStuffs
                    }else{
                        return !s.groupStuffs
                    }
                });
            })
        self.ok = function (selectedCategory) {
            $uibModalInstance.close(selectedCategory);
        };
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
    selectCategoryWithSectionCtrl.$inject=['$q','$uibModalInstance','Sections'];
    function selectCategoryWithSectionCtrl($q,$uibModalInstance,Sections){
        var self=this;
        $q.when()
            .then(function(){
                return Sections.getSections();
            })
            .then(function(sections){
                //console.log(sections)
                self.sections = sections;
            })
        self.ok = function (selectedCategory) {
            $uibModalInstance.close(selectedCategory);
        };
        self.okSection = function (section) {
            var categories=section.categories;
            $uibModalInstance.close(categories);
        };
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
})()


/*
var store = {store:req.store._id};
if (!options.criteria){
    options.criteria= store;
}else{
    if (options.criteria['$and']){
        /!*if(!options.criteria['$and'].some(function(el){
         return Object.keys(el)[0]=='store'
         })){
         options.criteria['$and'].push(store);
         }*!/
        options.criteria['$and'].push(store);
    }else{
        /!*if(Object.keys(options.criteria)[0]!='store'){
         options.criteria={$and:[options.criteria,store]}
         }*!/
        options.criteria={$and:[options.criteria,store]}
    }
}*/

'use strict';
angular.module('gmall.directives')
.directive('categoryTree',[function(){
    return {
        restrict:"E",
        templateUrl:"components/sections/categoryTree.html",
    }

}])
    .directive('categoryHtml',[function(){
        return {
            restrict:"E",
            templateUrl:"components/sections/categoryHtml.html",
        }

    }])
.directive('sectionsList',[function(){
    function sectionCtrl($state,global,$anchorScroll,Sections,Category,$q,$timeout,$scope){
        var self=this;
        self.$state=$state;
        self.global=global;
        self.sectionsList={};
        self.sectionTypes={'good':'товар','service':'услуга','infp':'инфо','media':'медиа'}

        $scope.$on('changeLang',function(){
            //console.log('!!!')
            Sections.setSections(null)
            activate()
        })

        activate()
        function activate() {
            $q.when()
                .then(function(){
                    return Sections.getSections()
                })
                .then(function(sections){
                    self.sections=sections.filter(function(el){return !el.parent && el.level===0});
                    self.sectionsList.sections=self.sections;
                    //console.log(self.sectionsList.sections)
                    //console.log(sections)
                })
        }


        function setNewList(){

        }
        self.setTimeout=timoutForShow;
        self.showRadio;
        function timoutForShow() {
            if(!self.showRadio){
                $timeout(function(){self.showRadio=true;},300)
            }
            return self.showRadio;
        }
        // управление разделами
        //*************************************************
        var scrollTopAllow=true;
        self.newSection=function(section){
            if(!section.name){return}
            var index=0;
            self.sections.forEach(function(s){
                if(s.index>=index){
                    index=s.index+1;
                }
            })
            var newSection={
                name:section.name,child:[],categories:[],
                level:0,
                parent:null,
                index:index
            };
            Sections.save(newSection,function(res){
                section.name='';
                newSection._id=res.id;
                self.sections.push(newSection);

            })
        }
        self.dragoverCallback = function(event){
            return true;
            //console.log($(window).height(),event.y)
            if(!scrollTopAllow){return}
            scrollTopAllow=false;
            setTimeout(function(){
                scrollTopAllow=true;
            },500)
            if(event.y<250){

                //console.log(event.y)
                var y = $(window).scrollTop();  //your current y position on the page
                $(window).scrollTop(y-100);
            }
            if($(window).height()-event.y<200){

                //console.log(event.y)
                var y = $(window).scrollTop();  //your current y position on the page
                $(window).scrollTop(y+100);
            }
            //console.log(event);
        }
        function getLastIndex() {
            var  i =0;
            self.sections.forEach()
        }
        self.addSection=function(section){
            //console.log(section)
            if(!section.sectionNewName){return}
            var newSection={
                name:section.sectionNewName,child:[],categories:[],
                level:section.level+1,
                parent:section._id,
                //index:getLastIndex()+1
            };
            section.child.push(newSection)

            Sections.save(newSection,function(res){
                //console.log(res);
                newSection._id=res.id;
                newSection.url=res.url;
                newSection.section={url:section.url};
                console.log(section)
                section.sectionNewName='';
                var child=section.child.map(function(el){return el._id;})
                Sections.save({update:'child'},{_id:section._id,child:child},function(res){
                    //console.log(res)
                })
            })
            //newSection.focus=true;
        }
        self.saveSection=function(section,field){
            if (!section.name){section.name='раздел без названия'}
            //section.url=section.name.getUrl();
            var o ={_id: section._id};
            o[field]=section[field];
            Sections.save({update:field},o,function(){
                global.set('saving',true);
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            },function(err){});
        }
        self.deleteSection=function(parentSection,section){
            //console.log(parentSection,section);return;
            if (parentSection){
                var i=parentSection.child.indexOf(section);
                if (i>-1){
                    parentSection.child.splice(i,1);
                    Sections.delete({id:section._id},function(res){
                        console.log(res);
                    });
                    Sections.save(parentSection,function(res){
                        console.log(res);
                    });
                    return;
                }
            }else{
                if (!section.child.length && !section.categories.length){
                    var i=self.sections.indexOf(section);
                    if (i>-1){
                        self.sections.splice(i,1);
                        Sections.delete({id:section._id},function(res){
                            console.log(res);
                        });
                    }
                }
            }
        }
        var findSection = function(id,sections){
            for(var i= 0,l=sections.length;i<l;i++){
                if (sections[i]._id==id){
                    return sections[i];
                    break;
                }
            }
            var res;
            for(var i= 0,l=sections.length;i<l;i++){
                if (sections[i].child && sections[i].child.length){
                    res = findSection(id,sections[i].child);
                    if(res){
                        return res;
                        break;
                    }
                }
            }
        }
        self.dropSectionCallback=function(section,parentSection){
            setTimeout(function(){
                //console.log(section,parentSection)
                var oldParent=findSection(section.parent,self.sections);
                //console.log(oldParent);
                //return;
                Sections.save({update:'child'},{_id:parentSection._id,child:parentSection.child.map(function(el){return el._id})},function(res){
                    console.log(res);
                })
                if(oldParent._id!=parentSection._id){
                    section.parent=parentSection._id;
                    Sections.save({update:'parent'},{id:section._id},function(res){
                        console.log(res);
                    })
                    Sections.save({update:'child'},{_id:oldParent._id,child:oldParent.child.map(function(el){return el._id})},function(res){
                        console.log(res);
                    })
                }
            },50)
            return section;
        }
        self.dropMainSectionCallback=function(section){
            setTimeout(function(){
                self.sections.forEach(function(section,i){
                    section.index=i;
                    Sections.save({update:'index'},{_id:section._id,index:section.index});
                })
            },50)
            return section;
        }
        // управление категориями
        //**********************************************************
        self.addCategory=function(section,name){
            //todo find section id {section:id}
            if(!section.newCategoryName)return;
            var category={name:section.newCategoryName,
                group:section._id};
            section.categories.push(category);
            category.focus=true;
            Category.save(category,function(res){
                section.newCategoryName='';
                category._id=res.id;
                category.url=res.url;
                var categories=section.categories.map(function(el){return el._id})
                Sections.save({update:'categories'},{_id:section._id,categories:categories})
            })
        }
        self.saveCategoryName=function(c,section){
            if (!c.name){c.name='категория без названия'};
            //c.url=c.name.getUrl();
            //Category.save({update:'name url'},{_id: c._id,name: c.name,url: c.url},function(){},function(err){});
            Category.save({update:'name'},{_id: c._id,name: c.name},function(){
                global.set('saving',true);
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            },function(err){});
        }
        self.saveCategoryActive=function(c){
            console.log(c.name)
            Category.save({update:'notActive'},{_id: c._id,notActive: c.notActive},function(){
                global.set('saving',true);
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            },function(err){});
        }


        self.deleteCategory=function(section,idx){
            Category.delete({_id:section.categories[idx]._id},function(res){
                var category = section.categories.splice(idx,1)
                Sections.save({update:'categories'},{_id:section._id,categories:section.categories.map(function(el){return el._id})},function(res){})
                /*category.group=null;
                 Category.save({update:'group'},{_id: category._id,group: category.group},function(res){
                 console.log(res);
                 });*/
            },function(err){
                console.log(err)
            })



        }
        self.dropCategoryCallback = function(category,section) {
            // console.log(category)
            setTimeout(function(){
                section.categories.forEach(function(c,i){c.index=i})
                Sections.save({update:'categories'},{_id:section._id,categories:section.categories.map(function(el){return el._id})},function(res){})

                if (category.group!=section._id){
                    var oldSection=findSection(category.group,self.sections);
                    oldSection.categories.forEach(function(c,i){c.index=i});
                    Sections.save({update:'categories'},{_id:oldSection._id,categories:oldSection.categories.map(function(el){return el._id})},function(res){})
                }

                category.group=section._id;
                Category.save({update:'group'},{_id:category._id,group:category.group},function(res){})
            },50)
            return category;
        };
        self.movedCategory=function(section,index){
            // console.log(index,section.categories[index].index)
            if(index!=section.categories[index].index){
                index++
            }
            section.categories.splice(index,1)
        }
    }
    return {
        scope: {},
        bindToController: true,
        controller: sectionCtrl,
        controllerAs: '$ctrl',
        restrict:"E",
        templateUrl:"components/sections/sections.html",
    }
}])

.directive('categoryEdit',[function(){

    function categoryCtrl($scope,Category,$q,$stateParams,Filters,Brands,global,$timeout,Sections,$http,Photo){
        var self=this;
        self.Items=Category;
        self.global=global;
        self.block='desc';
        self.listOfBlocks=angular.copy(listOfBlocksForAll);
        self.selectCategoryFromMP=selectCategoryFromMP;
        self.deleteCategoryFromMP=deleteCategoryFromMP;

        self.addBlock=addBlock;
        self.deleteBlock=deleteBlock;
        self.refreshBlocks=refreshBlocks;
        self.type='Category';
        var mps;
        $q.when()
            .then(function(){
                return Category.get({_id:$stateParams.id} ).$promise;
            })
            .then(function(res){
                if(!res.blocks){res.blocks=[];}
                res.blocks.forEach(function(b,i){
                    b.i=i
                })
                res.filters= res.filters.map(function(el){return el._id})
                self.item=res;
            })
            .then(function(){
                return Filters.getFilters()
            })
            .then(function(filters){
                self.filters=filters
            })
            .then(function(){
                return Brands.getBrands()
            })
            .then(function(brands){
                self.brands=brands
            })
            .then(function () {
                // get categories for mp
                if(global.get('store').val.mp && global.get('store').val.mp.mps  && global.get('store').val.mp.mps.length){
                    mps = global.get('store').val.mp.mps.map(function (mp) {
                        return mp._id
                    })
                    //console.log(mps)
                    if(mps && mps.length){
                        var acts=[];
                        mps.forEach(function (mp) {
                            acts.push(getPromiseForMPCategories(mp))
                        })
                        return $q.all(acts)
                    }
                }

            })
            .then(function (results) {
                if(results && results.length){
                    self.mps={}
                    self.mpsCategories={}
                    mps.forEach(function (mp,i) {
                        //console.log(i)
                        results[i].shift()
                        self.mps[mp]=results[i]
                        self.mpsCategories[mp]=results[i].reduce(function (o,sec) {
                            if(sec.categories && sec.categories.length){
                                sec.categories.forEach(function (c) {
                                    o[c._id]=c;
                                })
                            }
                            if(sec.child && sec.child.length){
                                sec.child.forEach(function (ch) {
                                    if(ch.categories && ch.categories.length){
                                        ch.categories.forEach(function (c) {
                                            o[c._id]=c;
                                        })
                                    }
                                })
                            }
                           return o;
                        },{})
                        if(self.item.mp && self.item.mp[mp]){
                            self.item.mp[mp]=self.mpsCategories[mp][self.item.mp[mp]]
                        }
                    })
                }
                //console.log(self.mps)

            })
            .catch(function(err){
                self.edit=false;
            })

        function selectCategoryFromMP(mpId,data) {
            //console.log(mpId,data)
            var categoryId=(data && data._id)?data._id:null
            $q.when()
                .then(function () {
                    return Category.select(categoryId,null,self.mps[mpId])
                })
                .then(function (category) {
                    if(!self.item.mp){
                        self.item.mp={}
                    }
                    self.item.mp[mpId]=category;
                    var o={}
                    var categoriesMP=[]
                    for(var key in self.item.mp){
                        o[key]=self.item.mp[key]._id
                        categoriesMP.push(self.item.mp[key]._id)
                    }
                    //console.log(o)
                    saveField('mp',o)
                    changeCategoryForStuffs(self.item._id,categoriesMP)
                })
                .catch(function (err) {
                    console.log(err)
                })

        }
        function deleteCategoryFromMP(mp) {
            var categoryId=self.item.mp[mp]._id
            delete self.item.mp[mp]
            var  o={}
            for(var key in self.item.mp){
                o[key]=self.item.mp[key]._id
            }
            saveField('mp',o)
        }

        function getPromiseForMPCategories(store) {
            return Sections.query({store:store}).$promise;
        }

        function changeCategoryForStuffs(category,categoriesMP) {
            var o ={
                category:category,
                categoriesMP:categoriesMP
            }
            $http.post('/api/stuffs/changeMPCategory',o)
        }

        self.saveField = function(field,defer){
            console.log('field')
            defer =defer||0
            $timeout(function(){
                var o={_id:self.item._id};
                o[field]=self.item[field]
                Category.save({update:field},o,function(){
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function saveField(field,data){
            var o={_id:self.item._id};
            o[field]=data
            Category.save({update:field},o,function(){
                global.set('saving',true)
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            });
        };
        $scope.$on('changeLang',function(){
            $q.when()
                .then(function(){
                    return Category.get({_id:$stateParams.id} ).$promise;
                })
                .then(function(res){
                    if(!res.blocks){res.blocks=[];}
                    res.blocks.forEach(function(b,i){
                        b.i=i
                    })
                    res.filters= res.filters.map(function(el){return el._id})
                    self.item=res;

                })
        })

        function refreshBlocks() {
           // console.log('???????????????')
            return Category.get({_id:$stateParams.id} ).$promise
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function addBlock(type){
            if(!type){return}
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;
        }
        function deleteBlock(block) {
            console.log(block)
            var o={_id:self.item._id};
            o['id']=block.id;
            var update={update:'id',embeddedName:'blocks'};
            update.embeddedPull=true;

            console.log(update,o)
            //return;
            Confirm('удалить?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    self.item.blocks.splice(block.i,1)
                    self.item.blocks.forEach(function(b,i){
                        b.i=i;
                    })

                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stuff',images)
                    }

                })

        }

    }
    return {
        scope: {},
        bindToController: true,
        controller: categoryCtrl,
        controllerAs: '$ctrl',
        templateUrl:'components/sections/category.html',
    }
}])

.directive('fixSection',[function(){
    return{

        link:function(scope,element,attrs){
            var i=0;
            var delay;
            var visible;
            scope.$on('changeMenuStatus',function(event, reload) {
                if(delay){return}
                delay=true;
                /*timerId= setTimeout(function(){
                    init('reload')
                });


                setTimeout(function(){
                    delay=false;
                    clearTimeout(timerId);
                },200)
*/
                if(clonedBlock.is(":visible")){
                    visible=true;
                    clonedBlock.hide();
                }

                init('reload')
                setTimeout(function(){
                    delay=false;
                    if(visible){
                        visible=false;
                        clonedBlock.fadeIn(200);
                    }

                },400)

            });
            $(window ).resize(function(){

            })
            if($( window ).width()<1200){return}
            /*$(window).resize(function(){
                console.log($( window ).width());
            })*/


            var mainDiv=$('#sectionsTree');
            var borderElement;
            var clonedBlockDisplay=false;
            var clonedBlock;
            var sdvig=(attrs['subSection'])?15:0;
            function getOffsetTop(){
                var offset = $(element).offset();
                return offset.top - $(window).scrollTop();
            }
            function getOffsetBorderElement(){
                var offset = element.offset();
                return offset.top - $(window).scrollTop()+borderElement.height();
            }
            function setScrollBlock(){
                var posY=getOffsetTop();
                var posBottonBorderElement=getOffsetBorderElement();
                //console.log(posY,posBottonBorderElement)
                if (posY<70 && !clonedBlockDisplay && posBottonBorderElement>150){
                    clonedBlockDisplay=true;
                    clonedBlock.show()
                    $(element).css('opacity',0)
                    //console.log('show')
                    //console.log(clonedBlock)
                }
                if (posY>70 && clonedBlockDisplay){

                    clonedBlockDisplay=false;
                    $(element).css('opacity',1)
                    clonedBlock.hide()
                    //console.log('hide')
                }
                if (posBottonBorderElement<150 && clonedBlockDisplay){
                    clonedBlockDisplay=false;
                    $(element).css('opacity',1)
                    clonedBlock.hide()
                    //console.log('hide')
                }
            }
            function init(reload){
                setTimeout(function(){
                    if(!reload){
                        clonedBlock=element.clone().hide()
                        clonedBlock
                            .css('position','fixed')
                            .css("top", 43 )
                            .css('height',element.height())
                    }
                    clonedBlock
                        .css("left",$(element).offset().left )
                        .css('width',element.width()+15+sdvig)




                    if(!reload){
                        mainDiv.append(clonedBlock)
                        borderElement=$('#borderBox'+attrs['fixSection']);
                        setScrollBlock()
                    }
                },200)
            }
            init();

            $(window).scroll(setScrollBlock);;

        }
    }
}])


'use strict';
(function() {

    angular.module( 'gmall.services' )
        .service( 'Brands', function ($resource, $q,global,$uibModal,Sections) {
            var Items = $resource( '/api/collections/Brand/:id', {id: '@_id'} );
            var brands = null;
            var pending = true;
            this.query = Items.query;
            this.get = Items.get;
            this.delete = Items.delete;
            this.save = Items.save;
            this.reloadItems=reloadItems;
            this.select=selectBrand;
            this.getList=getList;
            this.getItem=getItem;



            function getList(paginate,query){
                if(!paginate){
                    paginate={page:0}
                }
                var data ={perPage:paginate.rows ,page:paginate.page,query:query};
                if(global.get('crawler') && global.get('crawler').val){
                    data.subDomain=global.get('store').val.subDomain;
                }
                return Items.query(data).$promise
                    .then(getListComplete)
                //.catch(getListFailed);
                function getListComplete(response) {
                    if(paginate.page==0){
                        if(response && response.length){
                            paginate.items=response.shift().index;
                        }else{
                            paginate.items=0;
                        }
                    }
                    //console.log(response)
                    return response;
                }

                function getListFailed(error) {
                    console.log('XHR Failed for getNews.' + error);
                    return $q.reject(error);
                }
            }
            function getItem(id){
                return Items.get({_id:id} ).$promise
                    .then(getItemComplete)
                //.catch(getItemFailed);
                function getItemComplete(response) {
                    if(response && response.blocks && response.blocks.length){
                        response.blocks.forEach(function (b) {
                            if(b.type=='stuffs'){
                                if(b.stuffs && b.stuffs.length){
                                    b.imgs=b.stuffs.map(function(s){
                                        if(s.gallery && s.gallery.length && s.gallery[0].img){
                                            s.img=s.gallery[0].img;
                                        }
                                        return s;
                                    });
                                }else{b.imgs=[]}
                            }
                        })
                    }
                    return response;
                }
                function getItemFailed(error) {
                    return $q.reject(error);
                }
            }


            function returnBrands(resolve) {
                if (pending) {
                    setTimeout( function () {
                        returnBrands( resolve )
                    }, 300 );
                } else {
                    resolve( brands )
                }
            }

            this.getBrands = function () {
                return $q( function (resolve, reject) {
                    if(global.get('brands') && global.get('brands').val){
                        if(!brands){brands=global.get('brands').val}
                        return resolve(global.get('brands').val);
                    }
                    if (pending) {
                        setTimeout( function () {
                            returnBrands( resolve )
                        }, 300 );
                    } else {
                        if (brands) {
                            resolve( brands )
                        } else {
                            pending = true;
                            Items.query( function (res) {
                                res.shift();
                                brands = (res)?res:[];
                                pending = false;
                                resolve( brands )
                            }, function (err) {
                                pending = false;
                                ;
                                reject( err )
                            } )
                        }
                    }

                } )
            }
            if(!global.get('brands') || !global.get('brands' ).val){
                Items.query( function (res) {
                    res.shift();
                    brands = res;
                    if(global.get('brands') && !global.get('brands' ).val){
                        global.set('brands',brands)
                    }
                    pending = false;
                } )
            }


            function reloadItems(){
                pending=true;
                Items.query( function (res) {
                    res.shift();
                    brands = res;
                    global.set('brands',brands)
                    pending = false;
                } )
            }


            function selectBrand(data){
                var sections =(data &&  data.section)?Sections.getSections():null;
                return $q(function(resolve,reject){
                    var options={
                        animation: true,
                        templateUrl: 'components/brand/selectBrand.html',
                        controller: selectBrandCtrl,
                        size: 'lg',
                        controllerAs:'$ctrl',

                        resolve:{
                            sections: function(){
                                return sections
                            }
                        }

                    }
                    var modalInstance = $uibModal.open(options);
                    modalInstance.result.then(function (selected) {
                        resolve(selected)
                    }, function () {
                        console.log('Modal dismissed at: ' + new Date());
                        reject()
                    });
                })
            }
            selectBrandCtrl.$inject=['Brands','$uibModalInstance','$q','global','sections'];
            function selectBrandCtrl(Brands,$uibModalInstance,$q,global,sections){
                var self=this;

                self.global=global;
                self.sections=sections;
                if(self.sections){
                    self.section=self.sections[0].url
                }

                $q.when()
                    .then(function(){
                        return Brands.getBrands();
                    } )
                    .then(function(filters){
                        self.filters=filters;
                        //console.log(filters)
                    })
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                self.ok = function (filterTag) {

                    if(self.section){
                        filterTag.section=self.section;
                    }

                    $uibModalInstance.close(filterTag);
                };
            }

        } )


        //************************************************************
        .service( 'BrandTags', brandTagsService);
    brandTagsService.$inject=['$resource','$uibModal','$q','Sections'];
    function brandTagsService($resource,$uibModal,$q,Sections) {
        var Items = $resource( '/api/collections/BrandTags/:id', {id: '@_id'} );
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            selectBrandTag:selectBrandTag,
            select:selectBrandTag
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function selectBrandTag(data){
            var sections =(data &&  data.section)?Sections.getSections():null;
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/brand/selectBrandTag.html',
                    controller: selectBrandTagCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        sections: function(){
                            return sections
                        }
                    }
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedFilterTag) {
                    resolve(selectedFilterTag)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectBrandTagCtrl.$inject=['Brands','$uibModalInstance','$q','global','sections'];
        function selectBrandTagCtrl(Brands,$uibModalInstance,$q,global,sections){
            var self=this;
            self.global=global;
            self.sections=sections;
            if(self.sections){
                self.section=self.sections[0].url
            }
            $q.when()
                .then(function(){
                    return Brands.getBrands();
                } )
                .then(function(filters){
                    self.filters=filters;
                    //console.log(filters)
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (filterTag) {
                if(self.section){
                    filterTag.section=self.section;
                }
                filterTag.brand=self.filters.find(function(b){
                    return b._id==filterTag.brand
                })
                $uibModalInstance.close(filterTag);
            };
        }
    }
})()

'use strict';
angular.module('gmall.directives')
    .directive('brandsList',['$anchorScroll','Brands','BrandTags','$q','SelectCategory','$timeout','global','$http','Confirm','exception','Stuff',
        function($anchorScroll,Brands,BrandTags,$q,SelectCategory,$timeout,global,$http,Confirm,exception,Stuff){
        return {
            restrict:"E",
            templateUrl:"components/brand/brands.html",
            link:function($scope,element,attrs){

                $scope.$on('changeLang',function(){
                    activate()
                })

                activate();
                function activate() {
                    $q.when()
                        .then(function(){
                            var q=$q.defer();
                            Brands.query(function(res){
                                res.shift();
                                $scope.brands=res;

                                q.resolve()
                            },function(err){q.reject(err)})
                            return q.promise;
                        } )
                        .then(function(){
                            var q=$q.defer();
                            BrandTags.query(function(res){
                                res.shift();
                                $scope.brandTags=res;
                                q.resolve()
                            },function(err){q.reject(err)})
                            return q.promise;
                        } )
                        .then(function(){
                            return;
                            $scope.brands.forEach(function(brand){
                                /*brand.tags=[];
                                $scope.brandTags.forEach(function(tag){
                                    if(tag.brand==brand._id){
                                        tag.index=brand.tags.length;
                                        brand.tags.push(tag);
                                    }
                                })*/
                                brand.showTags=true;
                                if(!brand.tags){brand.tags=[];}

                                if(!brand.tags.length){
                                    $scope.brandTags.forEach(function(tag){
                                        if(tag.brand==brand._id){
                                            tag.index=brand.tags.length;
                                            brand.tags.push(tag);
                                        }
                                    })
                                }else{
                                    brand.tags.forEach(function(tag,i){
                                        tag.index=i;
                                    })
                                }
                            })
                        })
                }

                $scope.fixBrands=function(){
                    Confirm('Подтверждаете?')
                        .then(function () {
                            $scope.fixBrandsDesable=true;
                            var data = {}
                            return $http({
                                method: "post",
                                url: '/api/fixedDB/brand',
                                data:data,
                            })
                        })
                        .then(function(){
                            activate()
                            exception.showToaster('info','fix stucture','Ok')
                        })
                        .catch(function (err) {
                            exception.catcher('fix stucture')(err)
                        })

                }
                // управление фильтрами*************
                //**********************************
                $scope.addNewBrand=function(newBrand){
                    if(!newBrand.name){return};

                    var brand={name:newBrand.name.substring(0,25),
                        index:0,tags:[],

                    }
                    newBrand.name=''
                    //brand.focus=true;
                    $scope.brands.unshift(brand);
                    Brands.save(brand,function(res){
                        console.log(res);
                        brand._id=res.id;
                        //Filter.save(filter)
                    })
                }
                $scope.deleteBrand=function(brand,idx){
                    Brands.delete({id:brand._id},function(res){
                        $scope.brands.splice(idx,1)
                    },function(err){
                        console.log(err)
                    })

                }
                $scope.saveBrand = function(brand,field){
                    if (!brand.name){return};
                    //brand.url=brand.name.getUrl();
                    var o={_id:brand._id}
                    o[field]=brand[field]
                    Brands.save({update:field},o,function(res){
                        global.set('saving',true);
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                    })
                }
                $scope.dropBrandCallback=function(brand){
                    console.log(brand)
                    $timeout(function(){
                        $scope.brands.forEach(function(brand,idx){
                            brand.index=idx+1;
                            Brands.save({update:'index'},brand)
                        })
                    },200)
                    return brand;
                }
                //********************************************************
                $scope.addTag=function(brand,newTag){
                    if(!newTag.name){return}
                    var tag={name:newTag.name.substring(0,25),
                        brand:brand._id,actived:true}
                    newTag.name='';
                    brand.tags.unshift(tag);
                    //tag.focus=true;
                    BrandTags.save(tag,function(res){
                        //console.log(res);
                        tag._id=res.id;
                        Brands.save({update:'tags'},{_id:brand._id,tags:brand.tags.map(function(el){return el._id})},function(res){})
                        //Filter.save(filter)
                    })

                }
                $scope.saveTag=function(tag,field){
                    if (!tag.name){return};
                    //tag.url=tag.name.getUrl();
                    var o={_id:tag._id}
                    o[field]=tag[field]
                    BrandTags.save({update:field},o,function(res){
                        global.set('saving',true);
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                    },function(err){});
                }

                $scope.deleteTag=function(brand,idx){

                    Confirm('Delete?')
                        .then(function () {
                            return Stuff.getList({page:0,row:100},{brandTag:brand.tags[idx]._id})
                        })
                        .then(function (stuffs) {
                            if(stuffs && stuffs.length){
                                var s  ='привязаны товары';
                                stuffs.forEach(function (st) {
                                    s+=' '+st.name+' '+((st.artikul)?st.artikul:'')+ "|"
                                })
                                throw s
                            }
                        })
                        .then(function () {
                            BrandTags.delete({id:brand.tags[idx]._id},function(res){
                                var tag = brand.tags.splice(idx,1);
                                Brands.save({update:'tags'},{_id:brand._id,tags:brand.tags.map(function(el){return el._id})},function(res){})
                            },function(err){
                                console.log(err)
                            })
                        })
                        .catch(function (err) {
                            if(err){
                                exception.catcher('удаление')(err)
                            }
                        })


                }
                $scope.dropTagCallback = function(tag,index,brand) {
                    console.log(brand.tags.map(function(e){return e.name}))
                    $timeout(function(){
                        Brands.save({update:'tags'},{_id:brand._id,tags:brand.tags.map(function(el){return el._id})},function(res){
                            //console.log(res)
                        })
                        if (tag.brand!=brand._id){
                            brand.tags.forEach(function(tag,i){tag.index=i})
                            var oldBrand=$scope.brands.getObjectFromArray('_id',tag.brand);
                            Brands.save({update:'tags'},{_id:oldBrand._id,tags:oldBrand.tags.map(function(el){return el._id})},function(res){})
                            tag.brand=brand._id;
                            BrandTags.save({update:'brand'},tag,function(res){})
                        }
                    },450)
                   /* console.log(filter.tags)
                    console.log('dropTagCallback')*/
                    return tag;

                };
                $scope.tagMoved=function(brand,tag,idx){
                    if(idx==tag.index){
                        brand.tags.splice(idx,1)
                    } else {
                        brand.tags.splice(idx+1,1)
                    }
                    brand.tags.forEach(function(tag,i){
                        tag.index=i
                    })

                    //console.log(filter.tags)

                }

                // привязка к категориям
                $scope.selectCategory=function(id,revers){
                    if(revers){
                        SelectCategory.bindCategoryForFilterBrandCol(id,'categories',revers)
                    } else{
                        SelectCategory.bindCategoryForFilterBrandCol(id,'brands')
                    }

                }
            }
        }
    }])
    .directive('brandEdit',function(){
        return {
            restrict:"E",
            templateUrl:"components/brand/brandEdit.html",
            scope: {},
            bindToController: true,
            controller: brandEditCtrl,
            controllerAs: '$ctrl',
        }
    })



.directive('brandTagEdit',brandTagEdit);

brandEditCtrl.$inject=['$anchorScroll','Brands','global','$q','exception','$stateParams','$scope','$timeout'];
function brandEditCtrl($anchorScroll,Brands,global,$q,exception,$stateParams,$scope,$timeout){
    var self=this;
    self.Items=Brands;
    self.global=global;
    self.saveField=saveField;
    activate();
    $scope.$on('changeLang',function(){
        activate()
    })

    function activate(){
        $q.when()
            .then(function(){
                return self.Items.get({id:$stateParams.id}).$promise;
            })
            .then(function(res){
                self.item=res
                console.log(self.item)
            })
            .catch(function(err){
               if(err){
                   exception.catch('получение данных')(err)
               }
            })
    }
    function saveField(field,defer){
        defer =defer||0
        setTimeout(function(){
            var o={_id:self.item._id};
            o[field]=self.item[field]
            self.Items.save({update:field},o,function(){
                global.set('saving',true);
                $timeout(function(){
                    global.set('saving',false);
                },1500)
            });
        },defer)
    };
}


function brandTagEdit(){
    return {
        scope: {
            min: '='
        },
        bindToController: true,
        controller: brandTagEditCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/brand/collectionEdit.html',
        restrict: 'EA',
        //link: linkFunc
    }
    /*function linkFunc(scope, el, attr, ctrl) {

    }*/
}
brandTagEditCtrl.$inject=['BrandTags','$q','$state','global','$stateParams','$scope','$timeout'];
function brandTagEditCtrl(BrandTags,$q,$state,global,$stateParams,$scope,$timeout){
    var vm=this;
    vm.Items=BrandTags;
    self.global=global;
    vm.saveField=saveField;
    //*******************************************************
    activate($stateParams.id);
    //*******************************************************
    $scope.$on('changeLang',function(){
        activate($stateParams.id);
    })
    function activate(id) {
        return getItem(id).then(function() {
            //console.log('Activated item View');
        });
    }
    function getItem(id) {
        return vm.Items.get({id:$stateParams.id} ).$promise.then(function(res){
            vm.item=res;
        },function(err){

        })
    }
    function saveField(field,defer){
        defer =defer||0
        setTimeout(function(){
            var o={_id:vm.item._id};
            o[field]=vm.item[field];
            vm.Items.save({update:field},o,function(){
                global.set('saving',true);
                $timeout(function(){
                    global.set('saving',false);
                },1500)
            });
        },defer)
    };
}

'use strict';
angular.module('gmall.controllers')
.controller('stuffsFilterCtrl', ['$scope','$resource','$rootScope','global','Stuff','$section','$location','$q','Collection','$anchorScroll','$timeout',function ($scope,$resource,$rootScope,global,Stuff,$section,$location,$q,Collection,$anchorScroll,$timeout){
    var $state=$rootScope.$state;
    var $stateParams=$rootScope.$stateParams;
    $scope.stuffsFilterCtrl=this;
    $scope.stuffsFilterCtrl.paginate={page:0,rows:50,totalItems:0}
    $scope.stuffsFilterCtrl.query={section:'',brand:'',category:'',tags:[],artikul:($stateParams.searchStr)?$stateParams.searchStr.clearTag(20):'',brandTag:''};
    $scope.stuffsFilterCtrl.categories=[]; // список категорий для визуального блока фильтров
    var queryTags,category;// теги из строки запроса и активная категория
    $scope.stuffsFilterCtrl.brands=[]; // список брендов для визуального блока фильтров
    $scope.stuffsFilterCtrl.brandCollections=[];
    $scope.stuffsFilterCtrl.filters=[];


    // определяем в каком состоянии мы находимся. в разделе, категории или всем каталоге
    // затем устанавливаем параметры  в строку запроса если они соответствую  нащей логике
    // затем вызываем функцию получения списка
    // затем начинаем слущать клик на любом из фильтров
    // в функции $scope.stuffsFilterCtrl.changeFilter
    // если клик на категории то перегружаем контроллер если на фильтре то делаем запрос на новый список
    //*****************************************
    function initChainForGettingList(){
        var q=$q.defer(); q.resolve();return q.promise;
    }
    //console.log($stateParams)
    initChainForGettingList()
        .then(function(){
            //**************************************** Г Р У П П А   ********************************************
            var q=$q.defer();
            // группы категорий
            if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                // получение массива категорий
                var group=global.get('groups').val.getObjectFromArray('url',$stateParams.groupUrl);
                if(group){
                    // устанавливает груаау категорий
                    $scope.stuffsFilterCtrl.query.section=group._id;
                    if($stateParams.parentGroup){
                        // в дополнительных парметрах передается родительсая группа для категорий
                        // если ее нет, то все нет и списка категорий. соответствено нет ни фильтров ни брендо. выводится полный каталог для данной
                        var categories = $section.getCategories($stateParams.parentGroup).map(function(i){
                            return (i._id)?i._id:i;
                        });
                        //console.log(categories)
                        if (categories){
                            // приведение к общему виду списка категорий для фильтров
                            $scope.stuffsFilterCtrl.categories=global.get('categories').val.filter(function(item){return (categories.indexOf(item._id))>-1?true:false});
                        }
                    }
                    q.resolve($scope.stuffsFilterCtrl.categories);
                }else{
                    //нет такого раздела
                    $state.go('404')
                }
            } else {
                q.resolve(1);
            }
            return q.promise;
        })
        .then(function(r){
            //**************************************** К А Т Е Г О Р И Я  ********************************************
            // получение выбранной категории
            // основной шаг. от него отталкиваемся. есть категория в запросе или нет
            // для получения брендов и фильтров
            var q=$q.defer();
            if($scope.stuffsFilterCtrl.categories.length && $stateParams.categoryUrl){
                if ($stateParams.categoryUrl!='id'){
                    category=$scope.stuffsFilterCtrl.categories.getObjectFromArray('url',$stateParams.categoryUrl);
                    // устанавливаем категорию в строку запроса
                    if (category){
                        $scope.stuffsFilterCtrl.query.category=category._id;
                    } else {
                        // неверно уствновлен url категории
                        $state.go('404')
                    }
                }
            } else if($stateParams.categoryUrl!='id'){
                // не была установлена робительская группа. вычимляем ее по категории
                // если она не была установлена для всех категорий то весь каталог
                category=global.get('categories').val.getObjectFromArray('url',$stateParams.categoryUrl);
                if (category){
                    $scope.stuffsFilterCtrl.query.category=category._id;
                    $scope.stuffsFilterCtrl.categories=$section.getCategories(category.group.url)
                }
                //console.log(category)
            }
            q.resolve();
            return q.promise;
        })
        .then(function(){
            //****************************************Б Р Е Н Д   ********************************************
            var q=$q.defer();
            // бренд привязаны к категориям. соответственно если есть выбранная категория то
            // получаем списков брендов
            if ($scope.stuffsFilterCtrl.query.category){
                $scope.stuffsFilterCtrl.brands = global.get('brands').val.getArrayObjects('categories',$scope.stuffsFilterCtrl.query.category)
            }
            // если бренд один устанавливаем его активным и получаем список коллекций
            // при этом не важно есть ли бренд в параметрах
            if ($scope.stuffsFilterCtrl.brands.length===1){
                $scope.stuffsFilterCtrl.query.brand= $scope.stuffsFilterCtrl.brands[0]._id;
            } else {
                // проверяем наличие параметра  в url и если он совпадает с одним из брендов то устранавливаем бренд
                // в запросе
                if ($stateParams.brand){
                    var brand =  $scope.stuffsFilterCtrl.brands.getObjectFromArray('url',$stateParams.brand);
                    //console.log('brand-',brand)
                    if (brand){
                        $scope.stuffsFilterCtrl.query.brand=brand._id;
                        $location.search('brand',brand.url);
                    }
                }
            }
            if (!$scope.stuffsFilterCtrl.query.brand){
                $location.search('brand',null);
            }
            q.resolve();
            return q.promise;
        })
        .then(function(){
            //**************************************** К О Л Л Е К Ц И И  ********************************************
            var q=$q.defer();
            // console.log($stateParams)
            // если установлен бренд в запросе то  получаем для него коллекции
            if ($scope.stuffsFilterCtrl.query.brand){
                var query={brand:$scope.stuffsFilterCtrl.query.brand,group:$scope.stuffsFilterCtrl.query.section}
                Collection.getCollectionsForBrand({query:query},function(res){
                    res.shift();
                    $scope.stuffsFilterCtrl.brandCollections=res;
                    if ($stateParams.brandTag){
                        // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                        var brandTag=$scope.stuffsFilterCtrl.brandCollections.getObjectFromArray('url',$stateParams.brandTag);
                        //console.log($stateParams.brandTag,brandTag)
                        if(brandTag){
                            $scope.stuffsFilterCtrl.query.brandTag=brandTag._id;
                            $location.search('brandTag',brandTag.url);
                        } else {
                            $location.search('brandTag',null);
                        }
                    }
                    q.resolve(1);
                },function(){q.resolve(3);})
            }else{q.resolve(2);}
            return q.promise;
        }) // end collections
        .then(function(){
            //**************************************** Т Е Г И  ********************************************
            //console.log(r)
            var q=$q.defer();
            // получение тегов если они есть в параметрах в массив
            //для дальнейщей установки в визуальных фильтрах
            if($stateParams.queryTag){
                //console.log($stateParams);
                // агализ url на наличие тегов*************
                queryTags=$stateParams.queryTag.split('+');
                // удаляем возможные дубли
                queryTags = queryTags.filter(function(item, pos) {
                    return queryTags.indexOf(item) == pos;
                })
                queryTags=queryTags.reduce(function(tags,tag){
                    var t;
                    if (t=global.get('filterTags').val.getObjectFromArray('url',tag)){
                        tags.push(t);
                    }
                    return tags
                },[])
            }
            q.resolve();
            return q.promise;
        })
        .then(function(){
            //**************************************** Ф И Л Ь Т Р Ы ********************************************
            var q=$q.defer();
            // получение списка фильтров для данной категории для визуального представления
            if ($scope.stuffsFilterCtrl.query.category){
                var filters=global.get('filters').val.filter(
                    function(item){return (!item.dontshow && category.filters.indexOf(item._id)>-1)?true:false})
                // получение списка тегов для каждого фильтра
                filters.forEach(function(item,i){
                    item.tags=[];
                    global.get('filterTags').val.forEach(function(tag){
                        if (tag.filter==item._id){item.tags.push(tag)}
                    })
                    // устанавливаем значения в фильтрах
                    if (queryTags &&  queryTags.length){
                        queryTags.forEach(function(tag){
                            if (tag.filter==item._id){
                                if (!$scope.stuffsFilterCtrl.query.tags[i]){$scope.stuffsFilterCtrl.query.tags[i]=[]};
                                $scope.stuffsFilterCtrl.query.tags[i].push(tag._id);
                            }
                        })
                    }
                })
                $scope.stuffsFilterCtrl.filters=filters;

            } else {
                if (queryTags && queryTags.length){
                    $scope.stuffsFilterCtrl.query.tags[0]=[queryTags[0]._id]
                    $location.search('queryTag', queryTags[0].url);
                }
            }
            q.resolve('finsh');
            return q.promise;
        })
        .then(function(r){
            /*console.log(r)
             console.log($scope.stuffsFilterCtrl.query)
             console.log($scope.stuffsFilterCtrl.filters)*/
            $scope.stuffsFilterCtrl.getList($scope.stuffsFilterCtrl.paginate.page,$scope.stuffsFilterCtrl.paginate.rows)
        })


    var prevBrand;
    function _getCollections(){
        var query={brand:$scope.stuffsFilterCtrl.query.brand,group:$scope.stuffsFilterCtrl.query.section}
        Collection.getCollectionsForBrand({query:query},function(res){
            res.shift();
            $scope.stuffsFilterCtrl.brandCollections=res;
            if ($scope.stuffsFilterCtrl.brandCollections){
                if ($stateParams.brandTag){
                    // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                    var brandTag=$scope.stuffsFilterCtrl.brandCollections.getObjectFromArray('url',$stateParams.brandTag);
                    //console.log($stateParams.brandTag,brandTag)
                    if(brandTag){
                        $scope.stuffsFilterCtrl.query.brandTag=brandTag._id;
                        $location.search('brandTag',brandTag.url);
                    } else {
                        $location.search('brandTag',null);
                    }
                }
            }
        })
    }
    function _getQueryTag(){
        var arr =[];
        //console.log($scope.stuffsFilterCtrl.query.tags)
        $scope.stuffsFilterCtrl.query.tags.forEach(function(tags){
            if (tags.length){
                tags.forEach(function(tag){
                    arr.push(tag)
                })
            }
        })
        //console.log(arr)
        if(arr.length){
            return arr.map(function(tag){return global.get('filterTags').val.getObjectFromArray('_id',tag).url}).join('+')
        }else{
            return ;
        }

    }
    function _getBrand(){
        if ($scope.stuffsFilterCtrl.query.brand){
            return global.get('brands').val.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.brand).url;
        }

    }
    function _getBrandTag(){
        if ($scope.stuffsFilterCtrl.query.brandTag){
            return $scope.stuffsFilterCtrl.brandCollections.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.brandTag).url;
        }

    }
    $scope.stuffsFilterCtrl.getList=function(page,rows){
        //$scope.endLoadStuff=false;
        //console.log('получение списка - ',ii++,' раз')
        prevBrand=$scope.stuffsFilterCtrl.query.brand;
        // формирование строки запроса для выбора  товаров из БД
        var query=[];
        if (global.get('nostore').val){
            query.push({tags:{$nin:[global.get('nostore').val._id]}})
        }
        //console.log($scope.stuffsFilterCtrl.query)
        var queryTag=[];
        for (var key in $scope.stuffsFilterCtrl.query){
            if ($scope.stuffsFilterCtrl.query[key]){
                if (key=="tags"){
                    var qu=[];
                    var queryTags=$scope.stuffsFilterCtrl.query[key].filter(function(){return true});
                    //console.log(queryTags);
                    $scope.stuffsFilterCtrl.query[key].forEach(function(obj,i){
                        //console.log(i)
                        var q=[];
                        if (obj && obj.length){
                            obj.forEach(function(objT){
                                q.push({tags:objT});
                            })

                            if (q.length>1){
                                q={$or:q}
                                qu.push(q)
                            } else {
                                q=q[0];
                                qu.push(q)
                            }
                        }
                    })
                    if (qu.length){
                        if(qu.length==1){
                            query.push(qu[0]);
                        } else {
                            query.push({$and:qu});
                        }
                    }
                } else {
                    //console.log();
                    var obj={};
                    obj[key]=$scope.stuffsFilterCtrl.query[key];
                    query.push(obj);
                }
            }
        }
        if (query.length==1){
            query=JSON.stringify(query[0]);
        } else if(query.length>1){
            query =JSON.stringify({$and:query});
        } else {
            query='';
        }
        //console.log(query);
        /*console.log(query); if (i>1)return;
         i++;*/

        //********* start titles
         var queryTag=_getQueryTag();
         var brandTag=_getBrandTag();
         var brand=_getBrand();
         var queryTagsForSEO='';
         if (queryTag) {
            queryTagsForSEO+='queryTag='+queryTag;
         }
         if (brand) {
         if(queryTagsForSEO){queryTagsForSEO+='&';}
            queryTagsForSEO+='brand='+brand;
         }
         if (brandTag) {
         if(queryTagsForSEO){queryTagsForSEO+='&';}
            queryTagsForSEO+='brandTag='+brandTag;
         }
        console.log(queryTagsForSEO)
        $rootScope.$broadcast('$allDataLoaded',{state:$state.current.name,data:queryTagsForSEO});
        // передача данных в директиву
        $scope.stuffsFilterCtrl.queryForDirective=query;
    }
    $scope.stuffsFilterCtrl.changeFilter=function(c){
        $anchorScroll();
        //console.log($scope.stuffsFilterCtrl.query)
        var category= (!$scope.stuffsFilterCtrl.query.category)?{name:'category',url:'id'}:$scope.stuffsFilterCtrl.categories.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.category);
        //console.log(category)
        if (c){
            $state.current.reloadOnSearch = true;
            //var category= (!$scope.stuffsFilterCtrl.query.category)?{name:'category',url:'id'}:$scope.stuffsFilterCtrl.categories.getObjectFromArray('_id',$scope.stuffsFilterCtrl.query.category);
            var o={groupUrl:$stateParams.groupUrl,categoryUrl:category.url,categoryName:category.name,queryTag:undefined,brand:undefined,brandTag:undefined};
            $state.go($state.current.name,o,{reload:true});
            $state.current.reloadOnSearch = false;
        }else{
            // очищаем строку параметров
            $location.search('');


            $scope.stuffsFilterCtrl.query.artikul='';
            if ($scope.stuffsFilterCtrl.query.brand && (!$scope.stuffsFilterCtrl.brandCollections || prevBrand!=$scope.stuffsFilterCtrl.query.brand)){
                _getCollections($scope.stuffsFilterCtrl.query.brand);
                $scope.stuffsFilterCtrl.query.brandTag='';
            } else if (!$scope.stuffsFilterCtrl.query.brand){
                $scope.stuffsFilterCtrl.brandCollections=null;
                $scope.stuffsFilterCtrl.query.brandTag='';
            }
            $scope.stuffsFilterCtrl.paginate.page=0;
            $scope.stuffsFilterCtrl.getList($scope.stuffsFilterCtrl.paginate.page,$scope.stuffsFilterCtrl.paginate.rows);
            var queryTag=_getQueryTag();
            var brandTag=_getBrandTag();
            var brand=_getBrand();

            //var o = {groupUrl:$scope.stuffsFilterCtrl.groupUrl,categoryUrl:category.url,categoryName:category.name}
            if (queryTag) {
                $location.search('queryTag', queryTag);
            }
            if (brandTag) {
                $location.search('brandTag', brandTag);
            }
            if (brand) {
                $location.search('brand', brand);
            }
            if ($stateParams.brandTag){
                $location.search('brandTag',$stateParams.brandTag);
            }

            //$state.go('stuff',o,{notify:false});
        }
    }
    $scope.stuffsFilterCtrl.clearFilter=function(){
        console.log('clear filetrs')
        $scope.stuffsFilterCtrl.query.tags=[];
        $scope.stuffsFilterCtrl.changeFilter();
    }
}])


.controller('stuffsLWPCtrl', ['$scope','$resource','$rootScope','global','Stuff','$section','$location','$q','Collection','$anchorScroll','$timeout',function ($scope,$resource,$rootScope,global,Stuff,$section,$location,$q,Collection,$anchorScroll,$timeout){
    var $state=$rootScope.$state;
    var $stateParams=$rootScope.$stateParams;
    $scope.stuffsLWPCtrl=this;
    $scope.stuffsLWPCtrl.query=null;
    $scope.stuffsLWPCtrl.paginate={page:0,rows:20,totalItems:0}
    $scope.stuffsLWPCtrl.query=null;
    $scope.stuffsLWPCtrl.getList=function(page,rows){
        Stuff.getList($scope.stuffsLWPCtrl.query,null,page,rows,$scope.stuffsLWPCtrl.paginate).then(function(res){
            $scope.stuffsLWPCtrl.items=res;
            //$timeout(function(){$scope.$emit('endLoadStuffs');},300)
            $scope.stuffsLWPCtrl.query=null;
        },function(err){
            $state.go('404');
        });
    }
    $scope.$watch(function(){return $scope.stuffsLWPCtrl.query},function(n){
        if(n){
            $scope.stuffsLWPCtrl.paginate.page=0;
            $scope.stuffsLWPCtrl.getList($scope.stuffsLWPCtrl.paginate.page,$scope.stuffsLWPCtrl.paginate.rows);
        }
    })
    $timeout(function(){
        $scope.stuffsLWPCtrl.getList($scope.stuffsLWPCtrl.paginate.page,$scope.stuffsLWPCtrl.paginate.rows);
    })
    //*************************************************************************************************************
    //******************************************* для формирования url

    $scope.getUrlParams = Stuff.getUrlParams;
    //************************* for stuff URL *************************
    $scope.getCategoryName = Stuff.getCategoryName;
    $scope.getBrandName = Stuff.getBrandName;

}])
'use strict';
(function(){

    angular.module('gmall.services')
        .service('Stuff', stuffService)
        .service('Comments', commentService);
    stuffService.$inject=['$resource','$uibModal','$q','Sections','$stateParams','$state','$location','Brands','FilterTags','global','$order','exception','$user','$email','CreateContent','$rootScope','Filters','$timeout'];
    function stuffService($resource,$uibModal,$q,Sections,$stateParams,$state,$location,Brands,FilterTags,global,$order,exception,$user,$email,CreateContent,$rootScope,Filters,$timeout){
        var Items= $resource('/api/collections/Stuff/:_id',{_id:'@_id'});
        var categoriesLink={},
            queryData={};
        var stuffsService=[]

        $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
            if(to.name=='stuffs'||to.name=='stuffs.stuff' || to.name=='frame.stuffs'||to.name=='frame.stuffs.stuff'){
                $q.when()
                    .then(function () {
                        //console.log(toParams)
                        return getQuery(toParams,to)
                    })
                    .then(function (query) {
                        queryData=query;
                        //console.log(queryData)
                    })
            }
        })

        return {
            Items:Items,
            query:Items.query,
            get:Items.get,
            getList:getList,
            search:search,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            create:create,
            //setQuery:setQuery,
            getQuery:getQuery,
            getQueryFromUrl:getQueryFromUrl,
            setFilters:setFilters,
            cloneStuff:cloneStuff,
            saveField:saveField,
            selectItem:selectItem,
            select:selectItem,
            selectItemWithSort:selectItemWithSort,
            getServicesForOnlineEntry:getServicesForOnlineEntry,
            getAllBonus:getAllBonus,
            zoomImg:zoomImgGlobal,
            setDataForStuff:_setDataForStuff,
            getDataForBooking:_getDataForBooking,
        }

        function _salePrice(doc,sale){
            //console.log(doc.stack)
            if(doc.driveSalePrice && doc.driveSalePrice.maxDiscount){
                doc.maxDiscount=doc.driveSalePrice.maxDiscount;
            }
            if(!doc.driveSalePrice || doc.driveSalePrice.type==0){
                doc.priceSale= 0
                for(var key in doc.stock){
                    doc.stock[key].priceSale= 0;
                }
            } else if(doc.driveSalePrice.type==2){
                doc.priceSale=Math.ceil10(Number(doc.price)-sale*doc.price,-2);
                for(var key in doc.stock){
                    doc.stock[key].priceSale= Math.ceil10(Number(doc.stock[key].price)-sale*doc.stock[key].price,-2);
                }
            }else if(doc.driveSalePrice.type==1){
                if(doc.driveSalePrice.condition){
                    sale=doc.driveSalePrice.percent/100;
                    doc.priceSale=Math.ceil10(Number(doc.price)-sale*doc.price,-2);
                    for(var key in doc.stock){
                        doc.stock[key].priceSale= Math.ceil10(Number(doc.stock[key].price)-sale*doc.stock[key].price,-2);
                    }
                }else{
                    sale=Number(doc.driveSalePrice.sum);
                    doc.priceSale=Math.ceil10(Number(doc.price)-sale,-2);
                    for(var key in doc.stock){
                        doc.stock[key].priceSale= Math.ceil10(Number(doc.stock[key].price)-sale,-2);
                    }
                }
            }
        }
        
        function _getPrice() {
            
        }
        
        function _retailPrice(doc,retail){
            if(!doc.driveRetailPrice){
                if(global.get('store').val.seller.retail){
                    doc.driveRetailPrice={type:2}
                }else{
                    doc.driveRetailPrice={type:0}
                }

            }
            //console.log(doc.driveRetailPrice,!doc.driveRetailPrice || !doc.driveRetailPrice.type==0)
            if(doc.driveRetailPrice.type==0){
                doc.retail= 0
                for(var key in doc.stock){
                    doc.stock[key].retail= 0;
                }
            } else if(doc.driveRetailPrice.type==2){
                doc.retail= Math.ceil10(Number(doc.price)+retail*Number(doc.price),-2);
                for(var key in doc.stock){
                    doc.stock[key].retail= Math.ceil10(Number(doc.stock[key].price)+retail*doc.stock[key].price,-2);
                }
            }else if(doc.driveRetailPrice.type==1){
                if(doc.driveRetailPrice.condition){
                    retail=doc.driveRetailPrice.percent/100;
                    doc.retail= Math.ceil10(Number(doc.price)+retail*doc.price,-2);
                    for(var key in doc.stock){
                        doc.stock[key].retail= Math.ceil10(Number(doc.stock[key].price)+retail*doc.stock[key].price,-2);
                    }
                }else{
                    retail=Number(doc.driveRetailPrice.sum);
                    doc.retail= Math.ceil10(Number(doc.price)+retail,-2);
                    for(var key in doc.stock){
                        doc.stock[key].retail= Math.ceil10(Number(doc.stock[key].price)+retail,-2);
                    }
                }
            }
            //console.log(doc.stock)
            
        }
        function _setPrice(doc){
            if(!doc){
                doc=this;
            }
            if(doc.price<0){doc.price=0}
            //doc.price=Math.round10(doc.price, -2);
            //console.log(doc.stock)
            //return;
            doc.sort=null;
            var sale = (global.get('store').val.seller.sale||0)/100;
            var retail=(global.get('store').val.seller.retail||0)/100;
            var el = (doc)?doc:this;
            if (!el.stock || typeof el.stock!='object'){
                el.stock={notag:{quantity:1,price:el.price}}
                el.sort='notag'
            }else if(el.stock['notag']){
                el.stock['notag'].price=el.price;

            }
            if(global.get('currency') && el.currency && global.get('store').val.mainCurrency != el.currency){
                el.price=Math.ceil10(Number(el.price)/Number(global.get('store').val.currency[el.currency][0]),-2)
                for(var tag in el.stock){
                    el.stock[tag].price=Math.ceil10(Number(el.stock[tag].price)/Number(global.get('store').val.currency[el.currency][0]),-2)
                }
            }
           // console.log(el.driveRetailPrice)
            //console.log(el.price)
            _salePrice(el,sale);
            _retailPrice(el,retail);
            //console.log(el.stock)
            //global.get('store').val.seller.retail&&_retailPrice(el,retail);

            return el;
        }

        function _changeSortOfStuff(sort){
            /*console.log(this.stock && sort && this.stock[sort] && !this.stock[sort].quantity)
            console.log(this.stock,sort,this.stock[sort],this.stock[sort].quantity)*/
            if(this.stock && sort && this.stock[sort] && !this.stock[sort].quantity){
                return;
            }
            /*console.log(sort)
            console.log(this.name,sort);*/
            //console.log(sort)
            if(sort){
                this.sort=sort;
            }
            if(this.sort){
                var sort=this.stock[this.sort];
                this.sortName=sort.name;
                this.price=sort.price;
                this.priceSale=sort.priceSale;
                this.retail=sort.retail;
                this.priceCampaign=sort.priceCampaign;
            } else{
                this.sortName=null;
                if(!this.stock || !this.stock.notag){
                    this.price=0;
                    this.priceSale=0;
                    this.retail=0;
                }
            }
            //_onSelectedSort()
        }
        function _addItemToOrder(){
            var self=this;
            if(!this.sort){
                this.unableToOrder=true;
                //console.log(this.name,this.unableToOrder)
                $timeout(function () {
                    self.unableToOrder=false;
                },2500)
                return 'nosort';
            }
            //console.log(this.sort,this.name)
            if(this.sortsOfStuff && this.sortsOfStuff.filter && !this.sort){
                exception.catcher('ошибка')('выберите разновидность')
            }else {
                if(this.stock[this.sort].name){
                    this.sortName=this.stock[this.sort].name;
                }
                $order.addItemToCart(this)
            }
            $rootScope.$emit('AddToCart')

        }
        function _dateTime(){
            var self=this;
            if(!this.sort){
                this.unableToOrder=true;
                //console.log(this.name,this.unableToOrder)
                $timeout(function () {
                    self.unableToOrder=false;
                },2500)
                return 'nosort';
            }
            global.get('functions').val.witget('dateTime',{stuff:this})
        }
        function _setSticker(stuff){
            //console.log(stuff.tags)
            return FilterTags.getSticker(stuff.tags);
            //console.log(stuff.name+' '+stuff.artikul,stuff.sticker)
        }
        function _checkInCart(){
            //console.log($order.checkInCart(this))
            return $order.checkInCart(this)
            //return true;
        }
        var delay
        function zoomImgGlobal(i,images,home) {
            //console.log(images[i])
            var imgs = $("img[src$='"+images[i].img+"']"),img,horizontalOrient;
            //console.log(imgs)
            if(imgs && imgs[0]){
                img=$(imgs[0]);
                if(img.width() && img.height() && img.width() > img.height()){
                    horizontalOrient=true;
                }
            }else{
                imgs = $("img[src$='"+images[i].thumb+"']")
                //console.log(imgs)
                if(imgs && imgs[0]){
                    img=$(imgs[0]);
                    if(img.width() && img.height() && img.width() > img.height()){
                        horizontalOrient=true;
                    }
                }else{
                    if(images[i].el){
                        if(images[i].el.width && images[i].el.height && images[i].el.width > images[i].el.height){
                            horizontalOrient=true;
                        }
                        //console.log(images[i].el)
                    }
                }
            }
            //console.log('horizontalOrient',horizontalOrient)
           /* console.log($(img).width())
            console.log($(img).height())*/
            //console.log(horizontalOrient)
            if(delay){return}
            delay=true;
            $timeout(function () {
                delay=false
            },1000)
            //console.log(i)
            var self=this;
            var content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
            var contentZoom="width=device-width, initial-scale=1, maximum-scale=3"
            var viewPort=document.getElementById("viewport");
            //console.log(viewPort)
            var templ=(global.get('store').val.template.addcomponents && global.get('store').val.template.addcomponents.zoom && global.get('store').val.template.addcomponents.zoom.templ)?global.get('store').val.template.addcomponents.zoom.templ:'';
            var templateUrl = 'views/template/partials/stuffDetail/modal/zoom'+templ+'.html'
            viewPort.setAttribute("content", contentZoom);
            $rootScope.$emit('modalOpened');
            var options={
                animation: true,
                bindToController: true,
                controllerAs: '$ctrl',
                windowClass:  function(){return((horizontalOrient)?'zoom zoom-modal-horizontal':'zoom zoom-modal-vertical')},//'app-modal-window',
                templateUrl: templateUrl,
                controller: function ($uibModalInstance,global,gallery,i,home,horizontalOrient){
                    var self=this;
                    if(home){
                        if(horizontalOrient){
                            self.style="width:98vw;height:auto"
                        }else{
                            self.style="height:93vh;width:auto"
                        }

                    }else{
                        self.style="width:100%"
                    }
                    self.modal=global.get('mobile').val
                    self.idx=i;
                    self.gallery=angular.copy(gallery);
                    //console.log(self.gallery)
                    self.gallery[i].active=true;

                    self.next=next;
                    self.prev=prev;
                    self.chancheActiveSlide=chancheActiveSlide;
                    var delay=false
                    function next(i) {
                        //console.log('next',i)
                        if(delay){return}
                        delay=true
                        if(i+1==self.gallery.length){
                            self.gallery[0].active=true;
                            self.idx=0
                        }else{
                            self.gallery[i+1].active=true;
                            self.idx=i+1
                        }
                        $timeout(function () {
                            delay=false
                        },500)
                    }
                    function prev(i) {
                        //console.log('prev',i)
                        if(delay){return}
                        delay=true
                        if(i==0){
                            self.gallery[self.gallery.length-1].active=true;
                            self.idx=self.gallery.length-1
                        }else{
                            self.gallery[i-1].active=true;
                            self.idx=i-1
                        }
                        $timeout(function () {
                            delay=false
                        },500)
                    }
                    function chancheActiveSlide(i) {
                        self.gallery[i].active=true;
                        self.idx=i
                    }
                    self.ok=function(){
                        $uibModalInstance.close();
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss();
                    };
                },
                resolve:{
                    gallery:function(){
                        return images
                    },
                    i:function(){
                        return i;
                    },
                    home:function(){
                        return home;
                    },
                    horizontalOrient:horizontalOrient,

                }
            }
            if(!home){
                options.size='lg'
            }
            $q.when()
                .then(function(){
                    return $uibModal.open(options).result
                })
                .then(function(res){
                    //console.log(res)
                    viewPort.setAttribute("content", content);
                    $rootScope.$emit('modalClosed')
                })
                .catch(function(err){
                    viewPort.setAttribute("content", content);
                    $rootScope.$emit('modalClosed')
                    //console.log(err)
                    if(err && err!='backdrop click'){
                        err=err.data||err;
                        exception.catcher('zoom')(err)
                    }
                })
        }
        function _zoomImg(i) {
            zoomImgGlobal(i,this.gallery)
        }
        function _setCategoryName(item){
            //console.log(item)
            //console.log(item.name,item.artikul,item.category)
            if(item.category && item.category._id){
                item.category=[item.category]
            }
            if(item.category && item.category.length){
                //console.log(global.get('category').val)
                var i=0;
                var c=null;
                while(i<item.category.length && !c){
                    //console.log(i,global.get('categoriesO').val[item.category[i]])
                    if(typeof item.category[i]=='object'){item.category[i]=item.category[i]._id}
                    if(global.get('categoriesO').val[item.category[i]]){
                        c=global.get('categoriesO').val[item.category[i]]
                    }
                    i++
                }
            }
            //console.log(c)
            if(global.get('categories' ).val){
                if(!c){
                    if(!categoriesLink[item.category]){
                        c =global.get('categories').val.getOFA('_id',item.category);
                    }else{
                        c = categoriesLink[item.category];
                    }
                }

                if(c){
                    //console.log(c)
                    item.categoryUrl= c.url;
                    item.categoryName= c.name
                    if(c.linkData){
                        item.groupUrl= c.linkData.groupUrl
                        item.parentGroup=c.linkData.parentGroup||null;
                    }else{
                        item.groupUrl= 'group';
                        item.categoryUrl= 'category';
                        item.parentGroup=null;
                    }
                }else{
                    item.groupUrl= 'group';
                    item.categoryUrl= 'category';
                }
            }
            if(item.brand && global.get('brands') && global.get('brands').val){
                if(typeof item.brand=='object'){
                    item.brand=item.brand._id
                }
                var b =global.get('brands').val.getOFA('_id',item.brand);
                if(b){
                    item.brandUrl= b.url;
                    item.brandName=b.name;
                    if(item.brandTag){
                        var bt = b.tags.getOFA('_id',item.brandTag)
                        if(bt){
                            item.brandTagUrl=bt.url;
                            item.brandTagName=bt.name;
                        }


                    }
                }
            }

        }
        function _setDataForStuff(stuff,filterTags,stuffsState){
            //console.log(JSON.parse(JSON.stringify(stuff)));
            stuff.changeSortOfStuff=_changeSortOfStuff;
            stuff.addItemToOrder=_addItemToOrder;
            stuff.dateTime=_dateTime;
            stuff.onSelected =_onSelectedSort;
            stuff.order=_orderStuff,
            stuff.getBonus=_getBonus,
            stuff.zoomImg=_zoomImg,
            stuff.checkInCart=_checkInCart
            stuff.getDataForBooking=_getDataForBooking;
            _setCategoryName(stuff)
            _setPrice(stuff)
            stuff.setPrice=_setPrice;
            if(stuff.multiple && stuff.minQty){
                stuff.quantity= Number(stuff.minQty);
            }else{
                stuff.quantity=1;
                stuff.minQty=1;
            }
            if(!stuff.single){
                stuff.maxQty=150;
            }
            //stuff.quantity=1;
            if(!stuff.sale){
                _checkCamapign(stuff)
                //console.log(stuff)
            }
            stuff.expected=true;
            if(stuff.stock && typeof stuff.stock == 'object' && !stuff.stock.notag){
                if(stuff.sortsOfStuff && stuff.sortsOfStuff.filterGroup && global.get('filtersO') && global.get('filtersO').val && global.get('filtersO').val[stuff.sortsOfStuff.filterGroup]){
                    var filterGroup=global.get('filtersO').val[stuff.sortsOfStuff.filterGroup];
                    var filterGroupTags;
                    if(filterGroup){
                        stuff.sortsOfStuff.name = filterGroup.name.charAt(0).toUpperCase() + filterGroup.name.slice(1).toLowerCase();
                        stuff.groupName = stuff.sortsOfStuff.name;
                        filterGroupTags=filterGroup.tags.map(function(t){return t._id})
                        for(var ii=0;ii<stuff.tags.length;ii++){
                            var idx=filterGroupTags.indexOf(stuff.tags[ii]);
                            if(idx>-1){
                                stuff.groupTagName=filterGroup.tags[idx].name.charAt(0).toUpperCase() + filterGroup.tags[idx].name.slice(1).toLowerCase();
                                break;
                            }
                        }
                    }
                }
                if(stuff.sortsOfStuff && stuff.sortsOfStuff.filter && global.get('filtersO') && global.get('filtersO').val && global.get('filtersO').val[stuff.sortsOfStuff.filter]){
                    stuff.filterName=global.get('filtersO').val[stuff.sortsOfStuff.filter].name.toLowerCase();
                    stuff.filterName= stuff.filterName.charAt(0).toUpperCase() + stuff.filterName.slice(1).toLowerCase();
                }
                if(stuff.sortsOfStuff && stuff.sortsOfStuff.stuffs){
                    for(var  i21=0;i21<stuff.sortsOfStuff.stuffs.length;i21++){
                        if(stuff.sortsOfStuff.stuffs[i21]._id!=stuff._id && stuff.sortsOfStuff.stuffs[i21].archived){
                            stuff.sortsOfStuff.stuffs.splice(i21,1);
                            i21--;
                        }else if(stuff.sortsOfStuff.stuffs[i21].stock && typeof stuff.sortsOfStuff.stuffs[i21].stock =='object'){
                            for(var k in stuff.sortsOfStuff.stuffs[i21].stock){
                                if(stuff.sortsOfStuff.stuffs[i21].stock[k].quantity){
                                    stuff.sortsOfStuff.stuffs[i21].stock[k].quantity=Number(stuff.sortsOfStuff.stuffs[i21].stock[k].quantity)
                                }
                            }
                        }
                    }
                }

                /*if(stuff._id=='5bc5624a41c5753ecddc5e11'){
                    console.log(stuff.stock)
                    console.log(global.get('filterTagsO'))
                }*/
                var keys = Object.keys(stuff.stock);
                stuff.stockKeysArray =keys.map(function (k) {
                    stuff.stock[k].quantity=Number(stuff.stock[k].quantity)
                    if(global.get('filterTagsO') && global.get('filterTagsO').val && global.get('filterTagsO').val[k]){
                        var tag = global.get('filterTagsO').val[k];
                    }else{
                        var tag = filterTags.getOFA('_id',k);
                    }
                    /*if(stuff._id=='5bc5624a41c5753ecddc5e11'){
                        console.log('tag',tag)

                    }*/
                    if(tag){
                        return {_id:k,index:tag.index,name:tag.name,quantity:Number(stuff.stock[k].quantity)}
                    }else{
                        return null
                    }
                })
                .filter(function (key) {return key/* && (stuff.stock[key._id].quantity||stuff.stock[key._id].quantity==0);*/})
                .sort(function (a,b) {
                    if(!a || !b )return 1;
                    return a.index-b.index
                })
                /*console.log(stuff.stock)
                console.log(stuff.stockKeysArray)*/
                var sort_Id=null;
                stuff.stockKeysArray.forEach(function (key) {
                    // устанавливаем  разновидноть
                    //if(!stuff.sort &&(!global.get('sectionType') || !global.get('sectionType').val || !global.get('store').val.template.stuffListType[global.get('sectionType').val].unsetSort)) {
                    if(!stuff.sort &&(!global.get('sectionType') || !global.get('sectionType').val || !global.get('store').val.template.stuffListType[global.get('sectionType').val].unsetSort || $state.current.name!='stuffs.stuff' || stuffsState)) {
                        //console.log('устанавливаем разновидность')
                        if (!sort_Id && stuff.stock[key._id].quantity) {
                            sort_Id = key._id;
                            stuff.sort = sort_Id;
                            //console.log(key.name)
                        }
                    }else{
                        //console.log('не устанавливаем разновидность')
                    }



                    key.quantity=Number(stuff.stock[key._id].quantity);
                    if(key.quantity && stuff.expected){
                        stuff.expected=false;
                    }
                    if(key.quantity){
                        if(stuff.multiple && stuff.minQty){
                            key.quantity= Number(stuff.minQty);
                        }else{
                            key.quantity=1;
                            stuff.minQty=1;
                        }
                    }
                    stuff.stock[key._id].name=key.name;
                    //console.log(stuff.stock[key._id])
                })

                if(stuff.stockKeysArray.length && sort_Id){
                    _changeSortOfStuff.call(stuff,sort_Id);
                }
                //console.log(stuff.sort)

            }else if(stuff.stock && typeof stuff.stock == 'object' && stuff.stock.notag){
                if(stuff.stock['notag'].quantity){
                    stuff.sort='notag'
                    stuff.expected=false;
                }
                stuff.stockKeysArray=[{name:'notag',_id:'notag',quantity:stuff.stock['notag'].quantity}]
            }
            if(!stuff.campaignId){
                stuff.sticker=_setSticker(stuff)
            }
            if(stuff.gallery && stuff.gallery.length){
                stuff.gallery.sort(function(a,b){return a.index- b.index})
            }


            if(!stuffsState){
                //console.log(stuffsState)
                if(typeof _filtersO !='undefined'  && stuff.sortsOfStuff && stuff.sortsOfStuff.stuffs && stuff.sortsOfStuff.stuffs.length){
                    var filterGroup,filterGroupTags=[];
                    if(stuff.sortsOfStuff.filterGroup){
                        filterGroup= _filtersO[stuff.sortsOfStuff.filterGroup]
                        if(filterGroup){
                            filterGroupTags=filterGroup.tags.map(function(t){return t._id})
                        }
                    }
                    //console.log(filterGroup)
                    stuff.sortsOfStuff.stuffs.forEach(function (itemS,i) {
                        itemS.gallery.forEach(function (s,ii) {
                            if(!ii){
                                s.active=true
                            }else{
                                s.active=false
                            }
                        })
                        for(var ii=0;ii<itemS.tags.length;ii++){
                            var idx=filterGroupTags.indexOf(itemS.tags[ii]);
                            if(idx>-1){
                                if(filterGroup.tags[idx].img){
                                    stuff.sortsOfStuff.stuffs[i].gallery[0].thumbSmallTag=filterGroup.tags[idx].img
                                }
                                break;
                            }
                        }
                    })
                }
            }
            /*if(stuff.artikul=='БЕРН узор "саржа"'){
                console.log(stuff)
            }*/

            return stuff

        }
        function _onSelectedSort(){
            setTimeout(function(){
                $(':focus').blur();
            },50)
        }
        function _orderStuff(){
            var stuff=this;
            // очистка корзины
            $order.clearCart();
            stuff.cena=stuff.price;
            stuff.sum= stuff.cena*stuff.quantity;
            if(stuff.addItemToOrder()=='nosort'){
                return;
            }
            //console.log(stuff)
            // get user info
            //return;
            $q.when()
                .then(function(){
                     return $user.getInfo(stuff.service)
                })
                .then(function(user){
                    /*console.log(user);
                    return;*/
                    return $order.checkOutFromList(user)
                })
                .then(function(){
                    $order.clearCart();
                })
                .catch(function(err){
                    $order.clearCart();
                    if(err){
                        exception.catcher('заказ')(err)
                    }

                })

        }
        function getAllBonus() {
            return _getBonus(true)
        }
        function _getBonus(all){
            var stuffs;
            var stuff=this;
            return $q.when()
                .then(function () {
                    if(all){
                        var p={page:0,rows:100};
                        var query={$and:[{orderType:4},{actived:true}]}
                        return getList(p,query);
                    }else{
                        return [stuff]
                    }
                })
                .then(function (sts) {
                    stuffs=sts;
                })
                .then(function(){
                     return $user.getInfoBonus()
                })
                .then(function(user){
                    if(!user || !user.email){throw 'нет email'}
                    var content=CreateContent.emailBonus(stuffs);

                    var bonus=(stuffs && stuffs[0] && stuffs[0].imgs && stuffs[0].imgs[0] && stuffs[0].imgs[0].name)?stuffs[0].imgs[0].name:'получение контента'
                    //console.log(content,bonus)
                    /*var popupWin=window.open();
                    popupWin.document.write(content);
                    popupWin.window.focus();*/

                    //return;
                    var domain=global.get('store').val.domain;
                    var o={email:user.email,content:content,
                        subject:bonus+' ✔',from:  '<promo@'+domain+'>'};
                    return $q(function(resolve,reject){
                        $email.save(o,function(res){
                            exception.showToaster('note','Сообщение','На Ваш email отправлено письмо');
                            resolve()
                        },function(err){
                            exception.showToaster('warning','отправка уведомления',err.data)
                            resolve()
                        } )
                    })
                }) //email

                .then(function(){
                    var states= $state.get();
                    if(global.get('paps') && states.some(function(state){return state.name=='thanksPage'})){
                        var pap = global.get('paps').val.getOFA('action','bonus');
                        //console.log(pap)
                        if(pap && pap.url){
                            $state.go('thanksPage',{id:pap.url})
                        }else{
                            exception.showToaster('note','Заказ','Все прошло успешно.');
                        }
                    }else{
                        exception.showToaster('note','Заказ','Все прошло успешно.');
                    }

                })//paps
                .catch(function(err){
                    if(err){
                        exception.catcher('получение бонуса')(err)
                    }

                })

        }

        function _checkCamapign(stuff){
            return $order.checkCampaign(stuff);
        }
        function _getDataForBooking(){
            var el=this;
            var stuff={
                _id:this._id,
                artikul:this.artikul,
                name:this.name,
                nameL:this.nameL,
                link:this.link,
                backgroundcolor:this.backgroundcolor,
                timePart:(el.timePart)?el.timePart:4,
                price:this.price,
                priceSale:this.priceSale,
                currency:this.currency
            }
            if(el.sort){
                stuff.price= el.stock[el.sort].price;
                stuff.priceSale= el.stock[el.sort].priceSale;
                stuff.timePart=(el.stock[el.sort].timePart)?el.stock[el.sort].timePart:4;
            }
            if(el.sortName){
                stuff.name= el.name+' '+el.sortName;
            }
            //console.log(stuff)
            return stuff;
        }
        function getList(paginate,query,search){
            //console.log('???')
            if(!paginate){paginate={page:0}}
            /*if(global.get('crawler') && global.get('crawler').val){
                query={$and:[{store:global.get('store').val._id},{actived:true}]}
            }*/
            var data ={perPage:paginate.rows ,page:paginate.page,query:query,search:search};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                //console.log(response)
                //console.log(paginate)
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                var maxIndex;
                return $q.when()
                    .then(function(){
                        return FilterTags.getFilterTags()
                    })
                    .then(function (ft) {
                        //console.log(ft.length)
                        response.forEach(function(el){
                            if(el.index==99999 && maxIndex){
                                el.index--;
                            }
                            if(el.index==99999){
                                maxIndex=true;
                            }

                            _setDataForStuff(el,ft)
                        })
                    })
                    .then(function () {
                        return response;
                    })
            }
            function getListFailed(error) {
                console.log('XHR Failed for getStuffs.' + error);
                return $q.reject(error);
            }
        }
        function search(search,setData){
            // setData - если ищем товар в админке для дальнейшего использования необходимо получить с сервера все данные
            var data ={search:search,setData:setData};
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                //console.log(response)
                if(setData){
                    return $q.when()
                        .then(function(){
                            return FilterTags.getFilterTags()
                        })
                        .then(function (ft) {
                            //console.log(ft.length)
                            response.forEach(function(el){
                                if(el.index==99999 && maxIndex){
                                    el.index--;
                                }
                                if(el.index==99999){
                                    maxIndex=true;
                                }

                                _setDataForStuff(el,ft)
                            })
                        })
                        .then(function () {
                            return response;
                        })
                }else{
                    return response
                }

            }
            function getListFailed(error) {
                console.log('XHR Failed for getStuffs.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id,o){
            var query={_id:id};
            if(o){
                for(var k in o){
                    query[k]=o[k]
                }
            }
            //console.log(query)
            return Items.get( query).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(res) {

                //res.getDataForCart=_getDataForCart;
                return $q.when()
                    .then(function(){
                        return FilterTags.getFilterTags()
                    })
                    .then(function (ft) {
                        _setDataForStuff(res,ft)
                        //console.log(res.stock)
                        //res.quantity=1;
                        return res;
                    })
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            //console.log('!!!')
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/createStuff.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.item=''
                        self.ok=function(){
                            $uibModalInstance.close(self.item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (item) {
                    if(item.name){
                        resolve(item)
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function getQueryFromUrl(campaignCondition){
            //console.log(campaignCondition)
            if($state.current.name=='campaign.detail'){
                return $q.when()
                    .then(function(){
                        return global.get('campaign').val
                    })
                    .then(function(campaigns){
                        var campaign=campaigns.getOFA('url',$stateParams.id)
                        //console.log(campaign)
                        if(campaign){
                            return setQueryForCampaign(campaign,campaignCondition);
                        }
                    })
            }else{
                return queryData;
            }
            function setQueryForCampaign(campaign,campaignCondition){
                var query={};
                return $q.when()
                    .then(function(){
                        return FilterTags.getFilterTags()
                    })
                    .then(function(filterTags){
                        if(campaignCondition){
                            if(campaign.conditionTags && campaign.conditionTags.length){
                                query.queryTags={}
                                campaign.conditionTags.forEach(function(tag){
                                    var t = filterTags.getOFA('_id',tag);
                                    if(t){
                                        if(!query.queryTags[t.filter]){query.queryTags[t.filter]=[]}
                                        query.queryTags[t.filter].push(t._id)
                                    }
                                })
                            }
                            if(campaign.conditionBrandTags && campaign.conditionBrandTags.length){
                                query.brandTag={$in:campaign.conditionBrandTags};
                            }
                            if(campaign.conditionBrands && campaign.conditionBrands.length){
                                query.brand={$in:campaign.conditionBrands};
                            }
                            if(campaign.conditionCategories && campaign.conditionCategories.length){
                                query.category={$in:campaign.conditionCategories}
                            }
                            if(campaign.conditionStuffs && campaign.conditionStuffs.length){
                                query._id={$in:campaign.conditionStuffs}
                            }
                        }else{
                            if(campaign.tags && campaign.tags.length){
                                query.queryTags={}
                                campaign.conditionTags.forEach(function(tag){
                                    var t = filterTags.getOFA('_id',tag);
                                    if(t){
                                        if(!query.queryTags[t.filter]){query.queryTags[t.filter]=[]}
                                        query.queryTags[t.filter].push(t._id)
                                    }
                                })
                            }
                            if(campaign.brandTags && campaign.brandTags.length){
                                query.brandTag={$in:campaign.brandTags};
                            }
                            if(campaign.brands && campaign.brands.length){
                                query.brand={$in:campaign.brands};
                            }
                            if(campaign.categories && campaign.categories.length){
                                query.category={$in:campaign.categories}
                            }
                            if(campaign.stuffs && campaign.stuffs.length){
                                query._id={$in:campaign.stuffs}
                            }
                        }

                        _setQueryForTags(query)

                        var keys = Object.keys(query);
                        var q={}
                        if(keys.length==1){
                            q=query;
                        }else if(keys.length>1){
                            q.$or=[];
                            for(var k in query){
                                var o ={}
                                o[k]=query[k]
                                q.$or.push(o)
                            }

                        }
                        q.actived=true;
                        return q;
                    })
            }
        }
        function getQuery(stateParams,to) {
            return _setQuery(stateParams,to)
        }
        function _setQueryForTags(query,filters) {
            //console.log(query.queryTags,query.queryTags && typeof query.queryTags=='object')
            if(query.queryTags && typeof query.queryTags=='object'){
                try{
                    var keys = Object.keys(query.queryTags);
                }catch(err){
                    //console.log(err)
                    keys=[]
                }

                if(keys.length==1){
                    query.tags={$in:query.queryTags[keys[0]]}
                }else if(keys.length>1){
                    query.$and=[];
                    keys.forEach(function(k){
                        query.$and.push({tags:{$in:query.queryTags[k]}})
                    })
                }
            }
            delete query.queryTags

            if(query.filters && typeof query.filters=='object'){
                try{
                    var keys = Object.keys(query.filters);
                }catch(err){
                    //console.log(err)
                    keys=[]
                }
                if(keys.length==1){
                    var filter;
                    if(filters){
                        filter = filters.getOFA('_id',keys[0])
                    }
                    //console.log(filter)
                    if(filter && filter.price){
                        query['priceForFilter']=query.filters[keys[0]]
                        console.log('query.filters[keys[0]]',query.filters[keys[0]])
                    }else{
                        query['filters.'+keys[0]]=query.filters[keys[0]]
                    }

                }else if(keys.length>1){
                    if(!query.$and){
                        query.$and=[];
                    }
                    keys.forEach(function(k){
                        var filter;
                        if(filters){
                            filter = filters.getOFA('_id',k)
                        }
                        //console.log(filter)
                        if(filter && filter.price){
                            query['priceForFilter']=query.filters[k]
                        }else{
                            var o ={};
                            o['filters.'+k]=query.filters[k]
                            query.$and.push(o)
                        }
                    })
                    if(query.$and.length==1){
                        for(var k in query.$and[0]){
                            query[k] = query.$and[0][k];
                        }
                        delete query.$and
                    }

                }
            }
            delete query.filters
        }
        function _setQuery(stateParams,to) {
            //console.log(stateParams)
            global.set('category',null);
            var parentSection,sectionCategories,categoryBrands=[],categoryFilters=[],query={},breadcrumbs=[];
            return $q(function(resolve,reject){
                $q.when()
                    .then(function(){
                        return $q.all([Sections.getSections(),Brands.getBrands(),Filters.getFilters()])
                    })
                    .then(function(data){
                        var sections=data[0],brands=data[1],filters=data[2];
                        //console.log(stateParams)
                        parentSection=Sections.getSection(sections,stateParams.groupUrl);
                        //console.log(parentSection)

                        global.set('parentSection',parentSection)
                        if(parentSection){
                            if(stateParams.categoryUrl!='category'){
                                if(parentSection.categories && parentSection.categories.length){
                                    var categorySet;
                                    parentSection.categories.forEach(function(c){
                                        if(c.url==stateParams.categoryUrl){
                                            global.set('category',c);
                                            categorySet=true;
                                            c.set=true;
                                            query.category=c._id;
                                            categoryBrands=c.brands;
                                            categoryFilters=c.filters
                                            //console.log(categoryFilters)
                                        }else{
                                            c.set=false
                                        }
                                    })
                                    if(!query.category){
                                        throw 404
                                    }
                                } else{
                                    throw 404
                                }
                            }else{
                                sectionCategories=Sections.getEmbededCategories(parentSection,[]).map(function(el){return el._id})
                                if(!sectionCategories.length){
                                    query.category=null;
                                }else{
                                    query.category={$in:sectionCategories}
                                    //console.log(global.get('categoriesO').val)
                                    sectionCategories.forEach(function (cat) {
                                        //console.log(cat)
                                        var c = global.get('categoriesO').val[cat];

                                        c.filters.forEach(function(f){
                                            if(categoryFilters.indexOf(f)<0){
                                                categoryFilters.push(f)
                                            }
                                        })
                                        c.brands.forEach(function(b){
                                            if(categoryBrands.indexOf(b)<0){
                                                categoryBrands.push(b)
                                            }
                                        })
                                    })
                                }
                            }
                        }
                        // бренд и коллекци
                        // ************************************************************************
                        var brandSet,brandTagSet,brandsArr,brandTagsArr;
                        //console.log(categoryBrands)

                        if(stateParams.brand){
                            brandsArr=stateParams.brand.split('__')
                        }
                        if(stateParams.brandTag){
                            brandTagsArr=stateParams.brandTag.split('__')
                        }
                        query.brand=[];
                        query.brandTag=[];
                        brands.forEach(function (b){
                            //console.log(b)
                            b.inList=false;
                            b.showCollections=false;
                            if((to.name=='stuffs' || to.name=='stuffs.stuff')){
                                if(categoryBrands && categoryBrands.length){
                                    if(categoryBrands.indexOf(b._id)>-1){
                                        b.inList=true;
                                    }
                                }
                            }else{
                                b.inList=true;
                            }


                            if(brandsArr && brandsArr.indexOf(b.url)>-1){
                                query.brand.push(b._id)
                                b.set=true;
                                breadcrumbs.push({type:'brand',name:b.name,url:b.url})
                                brandSet=true;
                            }else{
                                b.set=false;
                            }
                            b.tags.forEach(function (t) {
                                if(brandTagsArr && brandTagsArr.indexOf(t.url)>-1){
                                    query.brandTag.push(t._id)
                                    t.set=true;
                                    breadcrumbs.push({type:'brandTag',name:t.name,url:t.url})
                                    b.showCollections=true;
                                    brandTagSet=true;
                                }else{
                                    t.set=false;
                                }
                            })

                        })
                        if(query.brand.length){
                            if(query.brand.length==1){
                                query.brand=query.brand[0]
                            }else{
                                query.brand={$in:query.brand}
                            }
                        }else{
                            query.brand=null;
                        }
                        if(query.brandTag.length){
                            if(query.brandTag.length==1){
                                query.brandTag=query.brandTag[0]
                            }else{
                                query.brandTag={$in:query.brandTag}
                            }
                        }else{
                            query.brandTag=null;
                        }
                        if(!query.brandTag){
                            delete query.brandTag
                        }
                        if(!query.brand){
                            delete query.brand
                        }
                        //console.log(query.brandTag)
                        if(!brandSet){$location.search('brand',null);}
                        if(!brandTagSet){$location.search('brandTag',null);}

                        // end brand && collections
                        var queryTags;
                        if(stateParams.queryTag){
                            // анализ url на наличие тегов*************
                            queryTags=stateParams.queryTag.split('__');
                            // удаляем возможные дубли
                            queryTags= queryTags.filter(function(item, pos) {
                                return queryTags.indexOf(item) == pos;
                            })
                        }
                        query.filters={} // для количественных признаков
                        var filterTags;
                        if(stateParams.filterTag){
                            // анализ url на наличие тегов*************
                            filterTags=stateParams.filterTag.split('__');
                            // удаляем возможные дубли
                            filterTags= filterTags.filter(function(item, pos) {
                                return filterTags.indexOf(item) == pos;
                            })
                            filterTags = filterTags.map(function(f){
                                return f.split('_')
                            }).filter(function(f){return f.length==3}).forEach(function(f){
                                query.filters[f[0]]={$gte:Number(f[1]),$lte:Number(f[2])}
                            })
                        }


                        query.queryTags={}
                        filters.forEach(function (f) {
                            f.inList=false;
                            if((to.name=='stuffs' || to.name=='stuffs.stuff')){
                                if(categoryFilters.indexOf(f._id)>-1){
                                    f.inList=true;
                                    f.open=false;
                                }
                            }else{
                                f.inList=true;
                            }

                            if(categoryFilters && categoryFilters.length){
                                if(categoryFilters.indexOf(f._id)>-1){
                                    f.inList=true;
                                    f.open=false;
                                }
                            }
                            if(f.count){
                                //console.log(query.filters[f._id])
                                if(query.filters[f._id]){
                                    f.open=true;
                                    f.set=true;
                                    f.minValue =query.filters[f._id].$gte
                                    f.maxValue=query.filters[f._id].$lte
                                }else{
                                    f.minValue =f.min
                                    f.maxValue=f.max
                                }
                            }else{
                                f.tags.forEach(function (t) {
                                    if(queryTags && queryTags.indexOf(t.url)>-1){
                                        if(!query.queryTags[t.filter]){query.queryTags[t.filter]=[]}
                                        query.queryTags[t.filter].push(t._id)
                                        f.open=true;
                                        t.set=true;
                                        breadcrumbs.push({type:'queryTag',name:t.name,url:t.url})
                                    }else{
                                        t.set=false;
                                    }
                                })
                            }
                        })
                        _setQueryForTags(query,filters)
                        global.set('breadcrumbs',breadcrumbs);
                        // для клиенского запроса только опубликованные товары
                        if(to.name=='stuffs' || to.name=='stuffs.stuff' ){
                            query.actived=true;
                        }
                        //console.log('query.actived',query.actived)
                        //console.log(stateParams)
                        if(stateParams.searchStr){
                            var search=stateParams.searchStr.substring(0,20);
                            query['keywords.'+global.get('store').val.lang]=search
                        }
                        //console.log(to.name,query)
                        resolve(query)
                    })
                    .catch(function(err){
                        reject(err)
                    })
            })
        }





        function setFilters(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl:'components/stuff/filterStuffsList.html',
                    controller: setFiltersCtrl,
                    controllerAs: '$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                });
                modalInstance.result.then(function () {resolve()},function(){reject()});
            })

        }
        function cloneStuff(stuff,clone){
            if(!global.get('seller' ).val){return};
            /*if(stuff) {
                stuff=angular.copy(stuff);
            }else{
                stuff={name:'',actived:false}
            }
            stuff.seller = global.get('seller' ).val*/
            //console.log(global.get('seller'));
            /*stuff.brand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand;
            stuff.brandTag=(stuff.brandTag && stuff.brandTag._id)?stuff.brandTag._id:stuff.brandTag;
            stuff.category=(stuff.category && stuff.category._id)?stuff.category._id:stuff.category;*/
            //stuff.sortsOfStuff=(stuff.sortsOfStuff && stuff.sortsOfStuff._id)?stuff.sortsOfStuff._id:stuff.sortsOfStuff;
            //delete stuff._id;
            /*delete stuff.url;
            delete stuff.gallery;
            delete stuff.setTagsValue;
            delete stuff.sortsOfStuff;*/
            return $q.when()
                .then(function(){
                    if(stuff && stuff._id) {
                        return Items.get({_id:stuff._id,clone:'clone'}).$promise
                    }else{
                        if($stateParams && $stateParams.categoryUrl!='category'){
                            var category=global.get('categories').val.getOFA('url',$stateParams.categoryUrl);
                            if(category && category._id){
                                stuff.category=category
                            }

                        }
                        return stuff;
                    }

                })
                .then(function(st){
                    console.log(st)
                    stuff=angular.copy(st);
                    if(stuff.category  && !stuff.category.length){
                        stuff.category=[stuff.category]
                    }


                    if(!stuff.index){stuff.index=0}
                    stuff.index++;
                    //console.log(stuff)
                    delete stuff._id;
                    delete stuff.url;
                    delete stuff.link;
                    delete stuff.__v;
                    delete stuff.nameL;
                    delete stuff.artikulL;
                    delete stuff.gallery;
                    delete stuff.sort;
                    delete stuff.sortsOfStuff;
                    delete stuff.keywords;
                    if(stuff.blocks && stuff.blocks.length){
                       stuff.blocks.forEach(function (b) {
                           delete b._id
                           b.template=null;
                           b.templateName=null;
                           if(b.img){b.img=null}
                           if(b.video){b.video=null}
                           if(b.imgs && b.imgs.length){
                               b.imgs.forEach(function (slide) {
                                   if(slide.img){slide.img=null;}
                               })
                           }
                       })
                    }
                    //console.log(stuff.blocks)
                    stuff.stock={'notag':{price:stuff.price}}
                    stuff.actived=false;
                    return $q(function(resolve,reject){
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl:'components/stuff/cloneStuffModal.html',
                            controller: cloneStuffCtrl,
                            controllerAs: '$ctrl',
                            size: 'lg',
                            resolve: {
                                stuff: function () {
                                    return stuff;
                                },
                                clone: function () {
                                    return clone;
                                },
                            }
                        });
                        modalInstance.result.then(function (stuff) {
                            /*console.log(stuff)
                            reject()*/
                            resolve(stuff)
                        },function(){
                            reject()
                        });
                    })

                })

            //console.log(stuff)


        }
        function saveField(stuff,field){
            var f=field.split(' ');
            var o={_id:stuff._id}
            f.forEach(function(el){o[el]=stuff[el]})
            return Items.save({update:field},o).$promise
        }
        function selectItem(query){
            console.log('внимание - сделать так же как и  selectItemWithSort')
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/modal/selectStuffModal.html',
                    controller: selectStuffCtrl,
                    controllerAs:'$ctrl',
                    size: 'lg',
                    resolve:{
                        query:function(){
                            return query;
                        }
                    }
                });

                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
        function selectItemWithSort(query){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/modal/selectStuffWithSortModal.html',
                    controller: selectItemWithSortCtrl,
                    controllerAs:'$ctrl',
                    size: 'lg',
                    resolve:{
                        query:function(){
                            return query;
                        }
                    }
                });
                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
        function getServicesForOnlineEntry(){
            //console.log('stuffsService',stuffsService)
            if(stuffsService && stuffsService.length){return stuffsService}
            var data ={query:{orderType:{$in:[2,7]},actived:true}};
            var filterTags=[];
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return $q.when()
                .then(function () {
                    return FilterTags.getFilterTags()
                })
                .then(function (fts) {
                    filterTags=fts;
                })
                .then(function () {
                    //console.log(data)
                    return Items.query(data).$promise
                })
                .then(getListComplete)
                .catch(getListFailed);

            function getListComplete(data) {
                //console.log(data)
                data.shift();
                var items=[];
                data.forEach(function(el){
                    //console.log(el)
                    _setPrice(el)
                    el.sort=null;
                    var category=(el.category && el.category.length)?el.category[0]:el.category;
                    //console.log(global.get('categoriesO'))
                    if(global.get('categoriesO') && global.get('categoriesO').val){
                        var c=global.get('categoriesO').val[category]
                    }else{
                        var c=global.get('categories').val.getOFA('_id',category);
                    }
                    //console.log(el.name,el.category,c)
                    if(!c){c={name:'Категория'}}
                    el.category=c.name
                    //console.log(el.category)

                    if(!el.timePart){el.timePart=4}
                    try{
                        if(el.sortsOfStuff && el.sortsOfStuff.differentPrice){
                            for (var sort in el.stock){
                                var s= {
                                    _id:el._id,
                                    name:el.name+' '+_getTagName(sort),
                                    nameL:el.nameL,
                                    link:el.link,
                                    artikul:el.artikul,
                                    price: el.stock[sort].price,
                                    category:el.category,
                                    timePart:el.timePart
                                }

                                //console.log('s',s)
                                items.push(s)
                            }
                        }else{
                            if(el.stock.notag){
                                el.price= el.stock.notag.price;
                            }else{
                                try{
                                    el.price=el.stock[Object.keys(el.stock)[0]].price
                                }catch (err){
                                    console.log(err)
                                }
                            }
                            items.push(el)
                        }
                    }catch(err){console.log(err)}

                    //console.log('done')
                })
                stuffsService=items;
                return items;

            }
            function getListFailed(error) {
                console.log('XHR Failed for getStuffs.' + error);
                return $q.reject(error);
            }
            //*********************************************************
            function _getTagName(_id){
                //console.log(_id)
                if(!_id || !filterTags || _id=='notag')return '';
                //console.log(_id,_filterTagsO)
                return ((_filterTagsO[_id])?_filterTagsO[_id].name:'');

                return filterTags.getOFA('_id',_id ).name||'';
            }

        }

    }
    setFiltersCtrl.$inject=['global','$uibModalInstance'];
    function setFiltersCtrl(global,$uibModalInstance){
        var self=this;
        self.global=global;
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
        self.ok = function () {
            $uibModalInstance.close();
        };

    }


    cloneStuffCtrl.$inject=['$q','global','Stuff','stuff','$uibModalInstance','Category','clone'];
    function cloneStuffCtrl($q,global,Stuff,stuff,$uibModalInstance,Category,clone){
        var self=this;
        self.Items=Stuff;
        var $ctrl=self;
        self.stuff=stuff;
        //console.log(stuff)
        self.clone=clone;
        self.categoryDisabled=true;
        self.selectCategory=function(){
            $q.when()
                .then(function(){
                    return Category.select();
                })
                .then(function(selectedCategory){
                    //console.log(selectedCategory)
                    if(!self.stuff.category){
                        self.categoryDisabled=false
                        setTimeout(function(){
                            $('#createStuffCategory').trigger("change");
                            self.categoryDisabled=true;
                        },100)
                    }
                    self.stuff.category=selectedCategory;
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        self.createNewStuff = function(){
            if(!self.stuff.category){
                self.alertMessage2=true;
                setTimeout(function(){
                    console.log('))))')
                    self.alertMessage2=false;
                },3000)
                return;
            }
            if(!self.stuff.name){
                self.alertMessage2=true;
                setTimeout(function(){
                    self.alertMessage2=false;
                },3000)
                return;
            }
            self.stuff.name=self.stuff.name.substring(0,100);
            if(self.stuff.artikul){
                self.stuff.artikul=self.stuff.artikul.substring(0,100);
            }


            if(!self.clone && self.stuff.category && self.stuff.category._id){
                self.stuff.category=self.stuff.category._id;
            }
            if(stuff.stock && stuff.stock.notag && stuff.stock.notag.price!=stuff.price){
                stuff.stock.notag.price=stuff.price;
            }
            $q.when()
                .then(function(){
                    self.stuff.keywords={};
                    var k =self.stuff.name;
                    if(self.stuff.artikul){
                        k+=' '+self.stuff.artikul;
                    }
                    //console.log(self.stuff.category)
                    if(self.stuff.category){
                        var c;
                        if(typeof self.stuff.category=='object'){
                            var cc=(typeof self.stuff.category[0]=='object')?self.stuff.category[0]._id:self.stuff.category[0]
                            c = global.get('categories').val.getOFA('_id',cc);
                        }else{
                            c = global.get('categories').val.getOFA('_id',self.stuff.category);
                        }
                        //console.log(c)
                        k+=' '+((c.nameL && c.nameL[global.get('store').val.lang])?c.nameL[global.get('store').val.lang]:c.name);
                    }
                    if(self.stuff.brand){
                        var bb=(typeof self.stuff.brand=='object')?self.stuff.brand._id:self.stuff.brand;
                        var b  = global.get('brands').val.getOFA('_id',bb);
                        k+=' '+((b.nameL&& b.nameL[global.get('store').val.lang])?b.nameL[global.get('store').val.lang]:b.name);
                        if(self.stuff.brandTag){
                            var bt = b.tags.getOFA('_id',self.stuff.brandTag);
                            if(bt && bt.nameL && bt.nameL[global.get('store').val.lang]){
                                k+=' '+bt.nameL[global.get('store').val.lang]
                            }
                        }


                    }

                    stuff.keywords[global.get('store').val.lang]=k;



                    return self.Items.save(self.stuff).$promise;
                })
                .then(function(res){
                    self.stuff._id=res.id;
                    self.stuff.url=res.url;
                    var c;
                    if(typeof self.stuff.category=='object'){
                        var cc=(typeof self.stuff.category[0]=='object')?self.stuff.category[0]._id:self.stuff.category[0]
                        c = global.get('categories').val.getOFA('_id',cc);
                    }else{
                        c = global.get('categories').val.getOFA('_id',self.stuff.category);
                    }
                    self.stuff.link='/'+c.linkData.groupUrl+'/'+c.linkData.categoryUrl+'/'+res.url;
                    self.Items.save({update:'link'},{_id:self.stuff._id,link:self.stuff.link})
                    $uibModalInstance.close(self.stuff)
                })
                .catch(function(err){
                    return $q.reject(err)
                })

        }
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
    }
    selectStuffCtrl.$inject=['$q','Stuff','$uibModalInstance','query'];
    function selectStuffCtrl($q,Stuff,$uibModalInstance,query){
        var cashQuery=angular.copy(query)
        //console.log(query)
        var self=this;
        self.stuffs=[];
        self.name='';
        var paginate={page:0,rows:30,items:0}
        self.search = function(name){
            if (name.length<3){return}

            if(query){
                if (!query.$and){query={$and:[query]}}
                query.$and.push({$or:[{name:name},{artikul:name}]})
            }else{
                query={$or:[{name:name},{artikul:name}]}
            }
            //console.log(query)

            $q.when()
                .then(function(){
                    return Stuff.search(name,true)
                })
                .then(function(res){
                    self.stuffs=res;
                })

            /*Stuff.getList(paginate,query).then(function(res){
                query=angular.copy(cashQuery)
                self.stuffs=res;
            })*/
        }
        self.selectStuff=function(stuff){
            if(stuff.imgThumb){stuff.img=stuff.imgThumb}
            stuff.link="/"+stuff.groupUrl+'/'+stuff.categoryUrl+"/"+stuff.url;
            $uibModalInstance.close(stuff);
        }
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
    }
    selectItemWithSortCtrl.$inject=['$q','Stuff','$uibModalInstance','Filters','FilterTags','exception','query','global'];
    function selectItemWithSortCtrl($q,Stuff,$uibModalInstance,Filters,FilterTags,exception,query,global){
        var cashQuery=angular.copy(query)
        var self=this;
        self.global=global;
        self.stuffs=[];
        self.name='';
        var paginate={page:0,rows:30,items:0}

        self.getFilterName=getFilterName;
        self.search = function(name){
            //console.log(name)
            if (name.length<3){return}
            $q.when()
                .then(function(){
                    return Stuff.search(name,true)
                })
                .then(function(res){
                    if(!global.get('seller') || !global.get('seller').val){
                        self.stuffs=res.map(function (s) {
                            //console.log(s)
                            for(var i=0;i<s.stockKeysArray.length;i++){
                                if(!s.stockKeysArray[i].quantity){
                                    s.stockKeysArray.splice(i,1)
                                    i--;
                                }
                            }
                            return s;
                        }).filter(function(s){
                            // /console.log(s)
                            return s.actived && s.stockKeysArray.length})
                        //console.log(self.stuffs)
                    }else{
                        self.stuffs=res;
                    }
                })


            return;
            if(query){
                if (!query.$and){query={$and:[query]}}
                query.$and.push({$or:[{name:name},{artikul:name}]})
            }else{
                query={$or:[{name:name},{artikul:name}]}
            }
            Stuff.getList(paginate,query).then(function(res){
                query=angular.copy(cashQuery)
                if(!global.get('seller') || !global.get('seller').val){
                    self.stuffs=res.map(function (s) {
                            //console.log(s)
                            for(var i=0;i<s.stockKeysArray.length;i++){
                                if(!s.stockKeysArray[i].quantity){
                                    s.stockKeysArray.splice(i,1)
                                    i--;
                                }
                            }
                            return s;
                        }).filter(function(s){
                            // /console.log(s)
                            return s.actived && s.stockKeysArray.length})
                    //console.log(self.stuffs)
                }else{
                    self.stuffs=res;
                }

            })
        }
        self.selectStuff=function(stuff){
            if(stuff.sortsOfStuff && stuff.sortsOfStuff.filter && !stuff.sort){
                exception.catcher('ошибка')('выберите разновидность')
            }else {
                /*var inCart= stuff.getDataForCart()
                if(inCart.sort){
                    inCart.addCriterionName=getTagName(inCart.sort);
                }*/
                $uibModalInstance.close(stuff);
            }
        }
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
        activate()
        function activate(){
            $q.when()
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){
                    self.filters=filters;
                })
                .then(function(){
                    return FilterTags.getFilterTags()
                })
                .then(function(filterTags){
                    self.filterTags=filterTags;
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function getFilterName(_id){
            return self.filters.getOFA('_id',_id ).name||null;
        }

    }
    //*******************comments************************************
    commentService.$inject=['$resource','$uibModal','$q'];
    function commentService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Comment/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){

            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/modal/createComment.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }


})()

'use strict';
(function(){
    angular.module('gmall.controllers').controller('stuffListFromServerCtrl',stuffListFromServerCtrl);
    angular.module('gmall.services')
        .directive('stuffList',stuffListDirective)
        .directive('stuffListTemplate',stuffListTemplateDirective)
        .directive('stuffListTemplateList',stuffListTemplateDirectiveList)
        .directive('stuffListTemplateServer',stuffListTemplateServer) // список товаро на сайте у клиента
        .directive('stuffListTemplateCampaignList',stuffListTemplateDirectiveCampaignList)
        .directive('emptyList',emptyList)
        .directive('stuffInList',stuffInList)
        .directive('homePageStuffOwl',function(){return {
            scope: {
                homePageStuffOwl:'@',
                zoomImg:"@",
                stuffs:'@',
                items:"@",
                autoplay:'@',
                duration:'@',
                gallery:'='
            },
            bindToController: true,
            controllerAs: '$ctrl',
            /*require: {
                parent: '^dateTimeEntry'
            },*/
            controller: homePageStuffOwlCtrl}})
        .directive('homePageHtml',function(){return {
            restrict:'C',
            scope: true,
            bindToController: true,
            controllerAs: '$ctrl',
            controller: homePageHtmlCtrl}})



        .directive('likesItem',likesItem)
    function likesItem(){
        return {
            scope: {
            },
            bindToController: true,
            controller: likesItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: '',
            restrict:'E'
        }
    }
    likesItemCtrl.$inject=['$compile','$timeout','localStorage','Stuff','global'];
    function likesItemCtrl($compile,$timeout,localStorage,Stuff,global) {
        return {
            restrict: 'EA',
            scope:{
                current:'=',
                header:'@',
                mobile:'@',
                blockElement:'@'
            },
            template:'<h3 class="text-center" ng-bind="header"></h3>'+
            '<div id="lastViewedWrapper" class="owl-carousel owl-theme">' +
            '<div ng-repeat="s in stuffs track by $index" class="item">' +
            '<a ui-sref="stuffs.stuff(s.linkData)">'+
            '<img style="max-width: 200px; border-color: transparent" ng-src="{{s.img}}" >' +
            '</a>'+
            '</div>'+
            '</div>',
            /*'<ul id="carouse{{localId}}"  class="elastislide-list">'+
             '<li ng-repeat="s in stuffs track by $index"><a ui-sref="stuffs.stuff(s.getUrlParams())">'+
             '<img style="max-width: 100px; border-color: transparent" ng-src="{{s.img}}" />'+
             '</a></li>'+
             '</ul>',*/
            link: function(scope, element, attrs) {
                var subDomain = global.get('store').val.subDomain

                //console.log('lastViewed')
                scope.localId=Date.now();
                var viewedStuffs=localStorage.get(subDomain+'-viewed');
                //console.log(viewedStuffs)

                if(!viewedStuffs ){
                    viewedStuffs=[];
                }
                scope.itemsInList=4;
                //viewedStuffs=[];
                function activate() {
                    //console.log(scope.mobile)
                    scope.position=JSON.parse(scope.blockElement).position
                    //console.log(scope.position)
                    /* if(scope.position && scope.position=='bottom'){
                     if(!scope.mobile){
                     scope.itemsInList=8;
                     }else{
                     scope.itemsInList=3;
                     }
                     }else{
                     if(!scope.mobile){
                     scope.itemsInList=8;
                     }else{
                     scope.itemsInList=3;
                     }
                     }*/
                    if(scope.mobile){
                        scope.itemsInList=3;
                    }else if(scope.position && scope.position=='bottom'){
                        scope.itemsInList=6;
                    }

                    setViewed(angular.copy(scope.current))
                    //console.log(viewedStuffs);
                    if (viewedStuffs.length>2){
                        scope.stuffs=viewedStuffs//.reverse();
                        scope.stuffs.forEach(function(el){el.getUrlParams=Stuff.getUrlParams;})
                        // console.log(Stuff)

                        $timeout(function(){
                            $("#lastViewedWrapper").owlCarousel({
                                items : scope.itemsInList,
                                itemsMobile	:[479,3],
                                itemsTablet	:[768,scope.itemsInList],
                                itemsDesktop : [1199,scope.itemsInList],
                                itemsDesktopSmall : [979,scope.itemsInList]

                            });
                        },150);
                        //$timeout(function(){$('#carouse'+scope.localId).elastislide();},50);
                    }else{
                        scope.stuffs=[];
                    }
                    if (!scope.header){
                        scope.header='Последние просмотренные.';
                    }
                }


                function setViewed (stuff){
                    var posItem = -1;
                    for (var i= 0,l=viewedStuffs.length;i<l;i++){
                        if (viewedStuffs[i]._id==stuff._id) {
                            posItem=i;
                            break;
                        }
                    }
                    // уже смотрели товар. удаляем его из ранее просмотренных
                    if (posItem>-1){
                        viewedStuffs.splice(posItem,1);
                    }
                    // добавляем его к конец списка
                    if(stuff.gallery[0]){
                        var img=(stuff.gallery[0].thumbSmall)?stuff.gallery[0].thumbSmall:stuff.gallery[0].thumb;
                    }else{
                        var img=null;
                    }

                    var linkData=global.get('categories').val.getOFA('_id',stuff.category).linkData;
                    linkData.stuffUrl=stuff.url;
                    viewedStuffs.unshift({_id:stuff._id,linkData:linkData,url:stuff.url,
                        img:img})
                    // ограничиваем список
                    if (viewedStuffs.length>15){
                        viewedStuffs.splice(15,1);
                    }
                    //console.log(viewedStuffs);
                    localStorage.set(subDomain+'-viewed', viewedStuffs);
                };
                /*scope.$watch('current',function(n,o){
                 if (n) {
                 setViewed(n);
                 }
                 })*/
                scope.$watch('current',function(n){
                    if(n){
                        activate()
                    }
                })
                scope.$on('$destroy', function() {
                    $('#carouse'+scope.localId).remove();
                });
            }
        }
    }

    homePageHtmlCtrl.$inject=['$scope','$rootScope','$timeout','$element','$compile','global','$q','$http']
    function homePageHtmlCtrl($scope,$rootScope,$timeout,$element,$compile,global,$q,$http){
        //console.log('homePageHtmlCtrl')
        var loaded=null;
        $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
          if(to.name=='home' && !loaded){
              getHomePageHtml()
          }
        })
        function getHomePageHtml() {
            console.log('getHomePageHtml')
            $q.when()
                .then(function () {
                    return $http.get('homepageHTML.html')
                })
                .then(function (response) {
                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                    $element.append(content);
                    loaded=true;
                })
                .catch(function (err) {
                    
                })

        }
    }

    homePageStuffOwlCtrl.$inject=['$scope','$timeout','$element','$compile','global']
    function homePageStuffOwlCtrl($scope,$timeout,$element,$compile,global){
            //console.log('homePageStuffOwlCtrl')
        /*if($element.context){
            if($element.context.attributes){
                console.log($element.context.attributes)
            }
        }*/
        var self = this;
        self.prev=prev;
        self.next=next;
        self.moment=moment;
        self.global=global;
        var imgs;
        self.zoomSliderImg=zoomSliderImg;
        var items=4,items3=3,items2=2,items1=1;
        var autoplay=false;
        var autoplayTimeout=4000;



        this.$onInit = function(){
            $timeout(function () {
                if(self.items){items=self.items}
                if(items==2){
                    items3=2;
                }else if(items==1){
                    items3=1;
                    items2=1;
                }
                if(self.autoplay){
                    autoplay=true;
                }

                if(self.duration){
                    try{
                        var duration=Number(self.duration)
                        if(duration>0 && duration<10){
                            autoplayTimeout=duration*1000;
                        }
                    }catch(err){console.log(err)}
                }


                self.$owl=$('body').find('#'+self.homePageStuffOwl)
                //console.log(self.$owl)
                self.$owl.on('initialized.owl.carousel', function(event) {
                    //console.log('initialized.owl.carousel for ',self.homePageStuffOwl)
                })
                var navLeft=$element.find('.nav-left')
                $(navLeft).click(function () {prev()})
                var navRight=$element.find('.nav-right')
                //console.log(navRight)
                $(navRight).click(function () {next()})
                activate()


            },100)

        }

        $scope.$watch(function () {
            return self.gallery
        },function (n,o) {
            //console.log(n,o)
            if(n && n.length){
                //console.log('reload gallery')
                var html=''
                imgs=[];
                //console.log(n.length)
                n.forEach(function (item,i) {
                    //console.log(photoHost)
                    if(photoHost){
                        item.src=photoHost+'/' + item.img;
                    }else{
                        item.src=item.img;
                    }

                    html+=
                        //'<div class="owl-item">' +
                            '<a>' +
                                '<span class="zoom-plus" data-i="'+i+'">' +
                                    '<span class="icon-zoom-img"></span>' +
                                    '<span class="icon-zoom-inverse"></span>' +
                                '</span>' +
                                '<img class="img-responsive2" src="'+item.src+'">' +
                            '</a>' +
                        //'</div>'
                    imgs.push({index:i,img:item.src})
                })
                self.$owl.trigger('replace.owl.carousel', html).trigger('to.owl.carousel',0).trigger('refresh.owl.carousel');
                $timeout(function () {
                    self.$owl.trigger('refresh.owl.carousel');
                },10)
                $timeout(function () {
                    if(self.zoomImg){
                        var spans=self.$owl.find('span.zoom-plus')
                        //console.log(spans)
                        spans.each(function (i,img) {
                            $(img).click(function (event) {
                                //console.log(img)

                                var ii=($(img).data('i')>=0)?$(img).data('i'):0;
                                /*console.log(i,imgs)
                                var imgTemp = imgs[i].img
                                var imgsTemp=imgs.reduce(function (o,item) {
                                    var i=o.getOFA('img',item.img)
                                    if(!i){
                                        o.push(item)
                                    }
                                    return o;
                                },[])
                                var ii=0;
                                for(var j=0;j<imgsTemp.length;j++){
                                    if(imgsTemp[j].img==imgTemp){
                                        ii=j;
                                        break;
                                    }
                                }
                                console.log(imgsTemp)*/
                                global.get('functions').val.zoomImg(ii,imgs,'home')
                            })
                        })

                    }

                },400)
            }
        })

        var items=(self.items)?self.items:4;

        var  activate = function(){
            $timeout(function(){
                //console.log('?????')
                var carousel_Settings={
                    loop:true,
                    margin:10,
                    responsiveClass:true,
                    autoplay:autoplay,
                    autoplayHoverPause:true,
                    autoplayTimeout:autoplayTimeout,
                    responsive:{
                        0:{
                            items:items1,
                            nav:false,
                            dots:true
                        },
                        380:{
                            items:items2,
                            nav:false,
                            dots:true
                        },
                        1068:{
                            items:items3,
                            nav:false,
                            dots:true
                        },
                        1400:{
                            items:items,
                            nav:false,
                            dots:true
                        }
                    }
                };
                //console.log(carousel_Settings)
                self.$owl.owlCarousel( carousel_Settings );
                var imgsEl=self.$owl.find('img')
                if(imgsEl && imgsEl.each){
                    imgs=[];
                    imgsEl.each(function (i,img) {
                        imgs.push({index:i,img:img.src,el:imgsEl[i]})
                        //console.log(img.src)
                    })
                }

                //console.log(imgs)
                if(self.zoomImg){
                    var spans=self.$owl.find('span.zoom-plus')
                    //console.log(spans)
                    spans.each(function (i,img) {
                        $(img).click(function (event) {
                            //console.log(i,imgs)
                            var imgTemp = imgs[i].img
                            var imgsTemp=imgs.reduce(function (o,item) {
                                var i=o.getOFA('img',item.img)
                                if(!i){
                                    o.push(item)
                                }
                                return o;
                            },[])
                            var ii=0;
                            for(var j=0;j<imgsTemp.length;j++){
                                if(imgsTemp[j].img==imgTemp){
                                    ii=j;
                                    break;
                                }
                            }
                            global.get('functions').val.zoomImg(ii,imgsTemp,'home')
                        })
                    })

                }
            },200)
        }

        function prev() {
            //console.log('prev',self.selectedDay)
            self.$owl.trigger('prev.owl.carousel', [self.selectedDay-3,300]);
        }
        function next() {
            //console.log('next',self.selectedDay)

            self.$owl.trigger('next.owl.carousel', [self.selectedDay+3,300]);
        }
        function zoomSliderImg(i) {
            $rootScope.zoomSliderImg(i,imgs)
        }
    }



    function emptyList(){
        return {
            templateUrl: 'views/template/partials/stuffs/emptyList.html',
            restrict:'E'
        }
    }
    function stuffListDirective(){
        return {
            scope: {
                //filtersBlock:'='
            },
            bindToController: true,
            controller: stuffListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/stuff/stuffsAdminList.html',
            restrict:'E'
        }
    }
    function stuffListTemplateDirective(global){
        return {
            scope: {
                filtersBlock:'@'
            },
            bindToController: true,
            controller: stuffListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/stuffs/stuffs-block.html',
            /*templateProvider: function(global,$http) {

                var url = 'views/'+global.get('store').val.template.folder+'/partials/stuff/stuffs.html';
                console.log(url)
                return $http.get(url).then(function(tpl){return tpl.data;});
            },*/
            restrict:'E'
        }
    }
    function stuffListTemplateDirectiveList(global){
        return {
            scope: {},
            bindToController: true,
            controller: stuffListCtrl,

            controllerAs: '$ctrl',
            templateUrl: function() {
                return 'views/template/partials/stuffs/stuffs-list/'+global.get('sectionType').val
            },
            //template:"<div ui-view></div></div><div></div>",
            //controller: stuffListFromServerCtrl,


            restrict:'E'
        }
    }





    function stuffInList(global,$timeout){
        return {
            scope: {
                stuffInList:'@'
            },
            bindToController: true,
            controllerAs: '$ctrl',
            restrict:'A',
            controller:function($scope,Stuff,global,$attrs,$stateParams,$rootScope,localStorage){
                var self=this;
                self.global=global;
                $scope.global=global;
                var subDomain = global.get('store').val.subDomain;
                //console.log($scope.global)

                //console.log(JSON.parse($attrs.stuffInList))
                $scope.stuff=JSON.parse($attrs.stuffInList)
                /*if($scope.stuff._id=='5aaf95fddfcc1b35f65cc17d'){
                    console.log(JSON.parse(JSON.stringify($scope.stuff)))
                }*/

                $scope.stuff = Stuff.setDataForStuff($scope.stuff,global.get('filterTags').val,'stuffs')
                //console.log($scope.stuff.name)
                $scope.stuff.stateObj=angular.copy($stateParams);
                //console.log($scope.stuff.stateObj)
                $scope.stuff.stateObj.stuffUrl=$scope.stuff.url;

                self.stuff=$scope.stuff;
                self.getMastersName=getMastersName
                self.getAveragePrice=getAveragePrice;
                self.addToLikes=addToLikes;

                var currency=global.get('currency').val
                var formatAverage=global.get('store').val.currency[currency][4];
                var del=-1;
                if(formatAverage==1){del=-1}else if(formatAverage==2){del=0}else if(formatAverage==3){del=1} else if(formatAverage==4){del=2}
                self.formatPrice=global.get('store').val.currency[currency][5];
                if(typeof self.formatPrice=='undefined'){
                    self.formatPrice=2;
                }
                self.stuff.currencySymbol=(global.get('store').val.currency[global.get('currency').val] && global.get('store').val.currency[global.get('currency').val][2])?global.get('store').val.currency[global.get('currency').val][2]:'';
                $rootScope.$on('changeCurrency',function () {
                    //console.log(global.get('currency').val,global.get('store').val.currency)
                    currency=global.get('currency').val
                    formatAverage=global.get('store').val.currency[currency][4];
                    self.formatPrice=global.get('store').val.currency[currency][5];
                    //console.log('self.formatPrice',self.formatPrice)
                    if(typeof self.formatPrice=='undefined'){
                        self.formatPrice=2;
                    }
                    del=-1;
                    if(formatAverage==1){del=-1}else if(formatAverage==2){del=0}else if(formatAverage==3){del=1} else if(formatAverage==4){del=2}
                    self.stuff.currencySymbol=(global.get('store').val.currency[global.get('currency').val] && global.get('store').val.currency[global.get('currency').val][2])?global.get('store').val.currency[global.get('currency').val][2]:global.get('currency').val;
                    //console.log(formatAverage,del)
                })
                //console.log(formatAverage,del)

                function getAveragePrice(price) {
                    //console.log('price',price)
                    //console.log(price,formatAverage)
                    if(!price){return}
                    var p=price*global.get('rate').val
                    p=(Math.round(p*100))/100
                    //console.log(p)
                    if(formatAverage){
                        if(formatAverage==4){
                            p= (Math.round(p/100))*100
                        }else if(formatAverage==3){
                            p= (Math.round(p/10))*10
                        }else if(formatAverage==2){
                            p= Math.round(p)
                        }else if(formatAverage==1){
                            p= (Math.round(p*10))/10
                        }
                    }
                    return p;

                }
                function getAveragePriceOld(price) {




                    //console.log(price)
                    if(!price){return}

                    if(!formatAverage){
                        return price*global.get('rate').val
                    }else{

                        //console.log(price*global.get('rate').val,Math.round10(price*global.get('rate').val,del),del)
                        var p = Math.round10(price*global.get('rate').val,del)
                        var del1=del;
                        while(!p){
                            p = Math.round10(price*global.get('rate').val,--del1)
                        }
                        return p;

                    }
                }

                //console.log(self.stuff)


                function getMastersName() {
                    self.stuff.masters=[]
                    global.get('masters').val.forEach(function (m) {
                        if(m.stuffs && m.stuffs.length){
                            if(m.stuffs.indexOf(self.stuff._id)>-1){
                                var o ={
                                    name:m.name,
                                    url:m.url,
                                }
                                self.stuff.masters.push(o)
                            }
                        }
                    })
                }
                getMastersName();
                var likes  = localStorage.get(subDomain+'-likes');
                if(likes && likes.length && likes.some(function(s){return s ===$scope.stuff._id})){
                    $scope.stuff.inLikes=true
                }

                function addToLikes($event) {
                    $event.stopPropagation()
                    console.log('addToLikes')
                    likes  = localStorage.get(subDomain+'-likes');
                    //console.log(likes)
                    if(!likes){
                        likes=[];
                    }
                    var i = likes.indexOf($scope.stuff._id);
                    if(i>-1){
                        $scope.stuff.inLikes=false;
                        likes.splice(i,1);

                    }else{
                        $scope.stuff.inLikes=true;
                        likes.push($scope.stuff._id);
                    }
                    localStorage.set(subDomain+'-likes', likes);
                    $rootScope.likes.totalCount=likes.length;

                }


            },
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                $timeout(function () {
                    if(global.get('stuffsInList').val){
                        //console.log(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id && global.get('stuffsInList').val[element[0].parentElement.parentElement.id])
                        /*console.log(element[0])
                        console.log(element[0].parentElement )
                        console.log(element[0].parentElement && element[0].parentElement.parentElement)
                        console.log(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id)
                        console.log(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id && global.get('stuffsInList').val[element[0].parentElement.parentElement.id])*/
                        if(element[0].parentElement && element[0].parentElement.parentElement && element[0].parentElement.parentElement.id && global.get('stuffsInList').val[element[0].parentElement.parentElement.id]){
                            global.get('stuffsInList').val[element[0].parentElement.parentElement.id].push(scope.stuff)
                            //console.log(scope.stuff)
                        }
                    }
                    //console.log(global.get('stuffsInList').val)
                },200)
                //console.log(scope.stuff)
                transclude(scope, function(clone) {
                    /*if(scope.stuff._id=='5aaf95fddfcc1b35f65cc17d'){
                        console.log(element,scope.stuff)
                    }*/

                    element.append(clone);
                });

            }

        }
    }
    function stuffListTemplateServer(){
        return {
            scope: {},
            bindToController: true,
            controllerAs: '$ctrl',
            template:"<div></div>",
            controller: stuffListFromServerCtrl,
            restrict:'E'
        }
    }

    stuffListFromServerCtrl.$inject=['$scope','$state','$compile','$element','$window','Stuff','$rootScope','$q','$uibModal','global','exception','FilterTags','Filters','Confirm','Helper','anchorSmoothScroll','Photo','$timeout','$anchorScroll','Category','Brands','BrandTags','seoContent','AddInfo','$http','$location','$sce'];
    function stuffListFromServerCtrl($scope,$state,$compile,$element,$window,Stuff,$rootScope,$q,$uibModal,global,exception,FilterTags,Filters,Confirm,Helper,anchorSmoothScroll,Photo,$timeout,$anchorScroll,Category,Brands,BrandTags,seoContent,AddInfo,$http,$location,$sce){

        //anchorSmoothScroll.scrollTo('topPage')
        //console.log('stuffListFromServerCtrl22')
        var stuffsInList = {'td-list-1':[],'td-list-2':[],'td-list-3':[],'td-list-4':[],'td-list-5':[],'td-list-6':[]}
        global.set('stuffsInList',stuffsInList)
        var self = this;
        $scope.global=global;
        self.stuffs={}
        self.Items=Stuff;
        self.mobile=global.get('mobile').val;
        self.global=global;
        self.globalProperty=$rootScope.globalProperty;
        self.$state=$rootScope.$state;
        self.$stateParams=$rootScope.$stateParams;
        self.query={};
        self.paginate={page:0,rows:20,items:0}
        self.filterList=filterList;
        self.initStuff=setDataForStuff;
        self.getList=getList;
        $scope.$on('addBlockAfterScroll',function () {
            //console.log(" $rootScope.$on('addBlockAfterScroll', from stuff-list")
            $scope.addBlockAfterScroll()
        })
        var pages=[0]
        var perPage=20;
        var rows=global.get('functions').val.setRows();
        if(global.get('store').val.template.stuffListType[global.get('sectionType').val] &&
            global.get('store').val.template.stuffListType[global.get('sectionType').val].perPage){
            //console.log('perPage')
            perPage = global.get('store').val.template.stuffListType[global.get('sectionType').val].perPage;
            self.paginate.rows=perPage;
        }
        //console.log(global.get('sectionType').val)
        var url='views/template/partials/stuffs/stuffs-list/'+global.get('sectionType').val+'/'+$rootScope.$stateParams.groupUrl+'/'+$rootScope.$stateParams.categoryUrl;
        var waiting,lastElement,page=0,waitingDiv;
        var td1,td2,td3,td4,td5;
        var color = (global.get('store').val.template.dimScreenColor)?global.get('store').val.template.dimScreenColor:"#000000"
        var BGcolor = (global.get('store').val.template.dimScreenBGColor)?global.get('store').val.template.dimScreenBGColor:"#F5F5F5"
        var innerWaitingDiv=[
            '<div class="spinner-box clearfix text-center" style="width:100%;height:200px;background-color:'+BGcolor+';color:'+color+'">',
            '<span class="icon-spinner-img"></span>',
            //'<img class="spinner" src="/img/spinner.gif" style="margin-top: 70px">',
            '</div>'
        ].join('')
        var tempContentIs=false;
        $q.when()
            .then(function(){
                var params ={group:self.$stateParams.groupUrl,category:self.$stateParams.categoryUrl}
                var query={
                    brand:self.$stateParams.brand,
                    brandTag:self.$stateParams.brandTag,
                };
                for(var k in self.$stateParams){
                    params[k]=self.$stateParams[k]
                }
                //console.log('params',params)
                self.query=dQ.getQuery(params)
                //console.log('self.query',self.query)

                if(self.query && self.query['priceForFilter']){
                    if(global.get('rate').val!=1){
                        self.query['priceForFilter'].$gte=Math.ceil10(self.query['priceForFilter'].$gte/global.get('rate').val,0)
                        self.query['priceForFilter'].$lte=Math.ceil10(self.query['priceForFilter'].$lte/global.get('rate').val,0)
                    }
                }
                if(global.get('tempContent').val){
                    if($state.current.name.indexOf('.stuff')<0){
                        //var html = global.get('tempContent').val;
                        //$('#tempContent').remove()
                        var html = $('#tempContent').detach().html();

                        var o ={data:{html:html}}
                        //console.log(tempTitles)
                        if(tempTitles){
                            o.data.titles=tempTitles
                        }
                        return o;
                    }else{
                        return null
                    }
                }else{
                    //console.log(url.trim())

                    return $q.when(self.query)
                        .then(function (query) {
                            /*console.log('query',query)
                            console.log(url)*/
                            return $http.get(url.trim()+'.html', {params:{pages:pages,perPage:perPage,rows:rows,query:query,url:$location.url()}})
                        })
                }
            })
            .then(function (response) {
                if(!response){$rootScope.$emit('$stateChangeEndToStuff');return;}
                //console.log(response.data.html)
                /*console.log('ldldldl!!!!!!!!!!!!!!!!!!!!')
                console.log(response.data.html)*/
                if(global.get('tempContent').val){
                    global.set('tempContent',null)
                    //var content = response.data.html;
                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                }else{
                    console.log('ldldldl')
                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                }

                $element.append(content);
                var style = $element.find('style')
                if(style && style[0]){
                    //console.log(style[0]);
                }
                //console.log(response.data.titles)
                var titles = {};
                if(response.data.titles && response.data.titles.title){
                    for(var k in response.data.titles){
                        if(response.data.titles[k]){
                            if(k=='canonical'){
                                titles[k] = $sce.trustAsResourceUrl(response.data.titles[k])
                            }else if(k!='desc'){
                                titles[k]= response.data.titles[k]
                            }
                        }

                    }
                    global.set('titles',titles)
                }else{
                    seoContent.setSeopageData()
                }
                //console.log(global.get('titles').val)

                //seoContent.setDataCatalog()

                waitingDiv=$('#paginateData'+page);
                self.totalQty=waitingDiv.data('total');
                self.paginate.items=self.totalQty;
                //console.log(self.totalQty)
                self.currentQty=waitingDiv.data('qty');
                self.page=waitingDiv.data('page');
                self.lastItemId=waitingDiv.data('lastItemId');
                td1=$('#td-list-1 .td-wrapper');
                td2=$('#td-list-2 .td-wrapper');
                td3=$('#td-list-3 .td-wrapper');
                td4=$('#td-list-4 .td-wrapper');
                td5=$('#td-list-5 .td-wrapper');
                //console.log(self.totalQty,self.currentQty,page,self.lastItemId)
                $timeout(function(){
                    $anchorScroll()
                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    //console.log(lastElement)
                })
                $timeout(function () {
                    $scope.$broadcast('rzSliderForceRender');
                },500);
                var addBlockAfterScroll = function(){
                    if($state.current.name!='stuffs'){return}
                    //console.log('addBlockAfterScroll')
                    if(!waiting && lastElement && $(lastElement).isOnScreen() && self.currentQty<self.totalQty){
                        /*console.log($(lastElement).offset())
                        console.log('addBlockAfterScroll start')
                        console.log(lastElement)
                        console.log($(lastElement).isOnScreen())*/
                        waiting=true;
                        page++
                        $q.when()
                            .then(function(){
                                //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                                waitingDiv.html(innerWaitingDiv);
                                return $http.get(url.trim()+'.html', {params:{pages:[page],perPage:perPage,rows:rows,query:self.query,url:$location.url()}})
                               // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                            })
                            .then(function(response){
                                if(!response){return;}
                                lastElement=null;
                                waitingDiv.html('');
                                var addHtml=angular.element(response.data.html)
                                var atd1,atd2,atd3,atd4,atd5;
                                if(addHtml.find('#td-list-1 .td-wrapper').html()){
                                    atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-2 .td-wrapper').html()){
                                    atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-3 .td-wrapper').html()){
                                    atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-4 .td-wrapper').html()){
                                    atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-5 .td-wrapper').html()){
                                    atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                                }
                                if(atd5){td5.append(atd5)}
                                if(atd4){td4.append(atd4)}
                                if(atd3){td3.append(atd3)}
                                if(atd2){td2.append(atd2)}
                                if(atd1){td1.append(atd1)}
                                //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                                self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                                self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                                //console.log(addHtml.find('#paginateData'+page))
                                //console.log(self.currentQty,self.totalQty)
                                $timeout(function () {
                                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                                    //console.log(lastElement)
                                    waiting=false;
                                },200)
                            })
                    }
                }


                if(!global.get('store').val.template.stuffListType[global.get('sectionType').val] ||
                    !global.get('store').val.template.stuffListType[global.get('sectionType').val].paginate){
                    angular.element($window).on('scroll', addBlockAfterScroll);
                }


                $scope.$on('$destroy', function() {
                    angular.element($window).off('scroll', addBlockAfterScroll);
                });
                $timeout(function(){
                    $rootScope.$emit('$stateChangeEndToStuff');
                })
            })

        $scope.addBlockAfterScroll = function(){
            //console.log('$scope.addBlockAfterScroll',self.currentQty,self.totalQty)
            if(!waiting && lastElement && self.currentQty<self.totalQty){
                waiting=true;
                page++
                $rootScope.$emit('$stateChangeStartToStuff');
                $q.when()
                    .then(function(){
                        //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                        waitingDiv.html(innerWaitingDiv);
                        return $http.get(url.trim()+'.html', {params:{pages:[page],perPage:perPage,rows:rows,query:self.query,url:$location.url()}})
                        // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                    })
                    .then(function(response){
                        if(!response){return;}
                        lastElement=null;
                        waitingDiv.html('');
                        var addHtml=angular.element(response.data.html)
                        var atd1,atd2,atd3,atd4,atd5;
                        if(addHtml.find('#td-list-1 .td-wrapper').html()){
                            atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-2 .td-wrapper').html()){
                            atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-3 .td-wrapper').html()){
                            atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-4 .td-wrapper').html()){
                            atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-5 .td-wrapper').html()){
                            atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                        }
                        if(atd5){td5.append(atd5)}
                        if(atd4){td4.append(atd4)}
                        if(atd3){td3.append(atd3)}
                        if(atd2){td2.append(atd2)}
                        if(atd1){td1.append(atd1)}
                        //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                        self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                        self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                        //console.log(addHtml.find('#paginateData'+page))
                        //console.log(self.currentQty,self.totalQty)
                        $timeout(function () {
                            lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                            //console.log(lastElement)
                            waiting=false;
                        },200)
                        $timeout(function () {
                            //console.log("$rootScope.$emit('addBlockAfterScrollDone') from stuff-list")
                            $rootScope.$broadcast('addBlockAfterScrollDone')
                            $rootScope.$emit('$stateChangeEndToStuff')

                        },300)
                    })
                    .catch(function () {
                        $rootScope.$emit('$stateChangeEndToStuff')
                    })
            }else{
                $timeout(function () {
                    $rootScope.$broadcast('addBlockAfterScrollDone')
                },200)

            }
        }

        function filterList(){
            console.log('filterList22')
            $q.when()
                .then(function(){
                    return self.Items.setFilters()
                })
                .catch(function(err){
                    //console.log(err)
                })
        }
        function setDataForStuff(stuff) {
            //console.log(stuff.name)
            /*if($rootScope.$state.current.name!='stuffs'){
                console.log('exit')
            }*/
            //console.log(stuff.name)
            stuff = Stuff.setDataForStuff(stuff,global.get('filterTags').val)
            stuff = angular.copy(stuff)
            console.log(stuff.name+' '+stuff.artikul,stuff.sticker)
            return stuff;
        }
        function getList() {
            $q.when()
                .then(function(){
                    return $http.get(url.trim()+'.html', {params:{pages:[self.paginate.page],perPage:perPage,rows:rows,query:self.query,url:$location.url()}})
                    //return $http.post(url.trim(),{pages:[self.paginate.page],perPage:self.paginate.rows,rows:rows,query:self.query})
                })
                .then(function(response){
                    if(!response){return;}
                    $anchorScroll()
                    lastElement=null;
                    var addHtml=angular.element(response.data.html)
                    if(addHtml.find('#td-list-1').html()){
                        var atd1=$compile(addHtml.find('#td-list-1').html())($scope)
                        td1.html(atd1)
                    }
                    if(addHtml.find('#td-list-2').html()){
                        var atd2=$compile(addHtml.find('#td-list-2').html())($scope)
                        td2.html(atd2)
                    }
                    if(addHtml.find('#td-list-3').html()){
                        var atd3=$compile(addHtml.find('#td-list-3').html())($scope)
                        td3.html(atd3)
                    }
                    if(addHtml.find('#td-list-4').html()){
                        var atd4=$compile(addHtml.find('#td-list-4').html())($scope)
                        td4.html(atd4)
                    }
                    self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                    self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                    $timeout(function () {
                        lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    },200)
                })
        }

    }
    function stuffListTemplateDirectiveCampaignList(){
        return {
            scope: {
                campaignCondition:'@',
            },
            bindToController: true,
            controller: campaignStuffListCtrl,
            controllerAs: '$ctrl',
            template:"<div></div>",
            /*templateUrl: function (el,attr) {
                var campaign = attr.campaign;
                var url = 'views/template/partials/'+campaign+'/stuffs';
                return url
            },*/
            restrict:'E'
        }
    }
    campaignStuffListCtrl.$inject=['$scope','$state','$compile','$element','$window','Stuff','$rootScope','$q','$uibModal','global','exception','FilterTags','Filters','Confirm','Helper','anchorSmoothScroll','Photo','$timeout','$anchorScroll','Category','Brands','BrandTags','seoContent','AddInfo','$http','$location','localStorage'];
    function campaignStuffListCtrl($scope,$state,$compile,$element,$window,Stuff,$rootScope,$q,$uibModal,global,exception,FilterTags,Filters,Confirm,Helper,anchorSmoothScroll,Photo,$timeout,$anchorScroll,Category,Brands,BrandTags,seoContent,AddInfo,$http,$location,localStorage){
        anchorSmoothScroll.scrollTo('topPage')

        var stuffsInList = {'td-list-1':[],'td-list-2':[],'td-list-3':[],'td-list-4':[],'td-list-5':[],'td-list-6':[]}
        global.set('stuffsInList',stuffsInList)
        var self = this;
        self.stuffs={}
        self.Items=Stuff;
        self.mobile=global.get('mobile').val;
        self.global=global;
        self.globalProperty=$rootScope.globalProperty;
        self.$state=$rootScope.$state;
        self.$stateParams=$rootScope.$stateParams;
        self.query={};
        self.paginate={page:0,rows:20,items:0}

        var cartType = ($element.data('cart'))?$element.data('cart'):'good'
        var campaignCondition = ($element.data('condition'))?$element.data('condition'):'stuffs'


        self.filterList=filterList;
        self.initStuff=setDataForStuff;
        self.getList=getList;
        $scope.$on('addBlockAfterScroll',function () {
            //console.log(" $rootScope.$on('addBlockAfterScroll', from stuff-list")
            $scope.addBlockAfterScroll()
        })





        var pages=[0]
        var perPage=20;
        var rows=global.get('functions').val.setRows();


        if(global.get('store').val.template.stuffListType[cartType] &&
            global.get('store').val.template.stuffListType[cartType].perPage){
            //console.log('perPage')
            perPage = global.get('store').val.template.stuffListType[cartType].perPage;
            self.paginate.rows=perPage;
        }
        var waiting,lastElement,page=0,waitingDiv;
        var td1,td2,td3,td4,td5;
        var color = (global.get('store').val.template.dimScreenColor)?global.get('store').val.template.dimScreenColor:"#000000"
        var BGcolor = (global.get('store').val.template.dimScreenBGColor)?global.get('store').val.template.dimScreenBGColor:"#F5F5F5"
        var innerWaitingDiv=[
            '<div class="spinner-box clearfix text-center" style="width:100%;height:200px;background-color:'+BGcolor+';color:'+color+'">',
            '<span class="icon-spinner-img"></span>',
            //'<img class="spinner" src="/img/spinner.gif" style="margin-top: 70px">',
            '</div>'
        ].join('')
        var campaign = $element.data('campaign');
        if($rootScope.$state.current.name==='likes'){
            campaign='likes';
            var likes = localStorage.get(global.get('store').val.subDomain+'-likes');
            if(likes && likes.length){
                campaignCondition = likes.join('_');
            }else{
                campaignCondition = '_';
            }
        }
        var url = 'views/template/partials/'+campaign+'/'+campaignCondition;
        console.log(url)
        $q.when()
            .then(function(){
                return $http.get(url, {params:{pages:pages,perPage:perPage,rows:rows}})
            })
            .then(function (response) {
                if(!response){$rootScope.$emit('$stateChangeEndToStuff');return;}
                //console.log(response.data.html)
                var linkFn = $compile(response.data.html);
                var content = linkFn($scope);
                $element.append(content);
                var style = $element.find('style')
                if(style && style[0]){
                    //console.log(style[0]);
                }

                waitingDiv=$('#paginateData'+page);
                self.totalQty=waitingDiv.data('total');
                self.paginate.items=self.totalQty;
                //console.log(self.totalQty)
                self.currentQty=waitingDiv.data('qty');
                self.page=waitingDiv.data('page');
                self.lastItemId=waitingDiv.data('lastItemId');
                td1=$('#td-list-1 .td-wrapper');
                td2=$('#td-list-2 .td-wrapper');
                td3=$('#td-list-3 .td-wrapper');
                td4=$('#td-list-4 .td-wrapper');
                td5=$('#td-list-5 .td-wrapper');
                //console.log(self.totalQty,self.currentQty,page,self.lastItemId)
                $timeout(function(){
                    $anchorScroll()
                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    //console.log(lastElement)
                })

                var addBlockAfterScroll = function(){
                    if(!waiting && lastElement && $(lastElement).isOnScreen() && self.currentQty<self.totalQty){
                        waiting=true;
                        page++
                        $q.when()
                            .then(function(){
                                //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                                waitingDiv.html(innerWaitingDiv);
                                return $http.get(url, {params:{pages:[page],perPage:perPage,rows:rows}})
                                // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                            })
                            .then(function(response){
                                if(!response){return;}
                                lastElement=null;
                                waitingDiv.html('');
                                var addHtml=angular.element(response.data.html)
                                var atd1,atd2,atd3,atd4,atd5;
                                if(addHtml.find('#td-list-1 .td-wrapper').html()){
                                    atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-2 .td-wrapper').html()){
                                    atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-3 .td-wrapper').html()){
                                    atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-4 .td-wrapper').html()){
                                    atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                                }
                                if(addHtml.find('#td-list-5 .td-wrapper').html()){
                                    atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                                }
                                if(atd5){td5.append(atd5)}
                                if(atd4){td4.append(atd4)}
                                if(atd3){td3.append(atd3)}
                                if(atd2){td2.append(atd2)}
                                if(atd1){td1.append(atd1)}
                                //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                                self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                                self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                                //console.log(addHtml.find('#paginateData'+page))
                                //console.log(self.currentQty,self.totalQty)
                                $timeout(function () {
                                    lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                                    //console.log(lastElement)
                                    waiting=false;
                                },200)
                            })
                    }
                }


                if(!global.get('store').val.template.stuffListType[cartType] ||
                    !global.get('store').val.template.stuffListType[cartType].paginate){
                    angular.element($window).on('scroll', addBlockAfterScroll);
                }
                $scope.$on('$destroy', function() {
                    angular.element($window).off('scroll', addBlockAfterScroll);
                });
                $timeout(function(){
                    $rootScope.$emit('$stateChangeEndToStuff');
                })
            })

        $scope.addBlockAfterScroll = function(){
            if(!waiting && lastElement && self.currentQty<self.totalQty){
                waiting=true;
                page++
                $rootScope.$emit('$stateChangeStartToStuff');
                $q.when()
                    .then(function(){
                        //console.log({params:{pages:[page],perPage:perPage,rows:rows,query:self.query}})
                        waitingDiv.html(innerWaitingDiv);
                        return $http.get(url, {params:{pages:[page],perPage:perPage,rows:rows}})
                        // return $http.post(url.trim(),{pages:[page],perPage:perPage,rows:rows,query:self.query})
                    })
                    .then(function(response){
                        if(!response){return;}
                        lastElement=null;
                        waitingDiv.html('');
                        var addHtml=angular.element(response.data.html)
                        var atd1,atd2,atd3,atd4,atd5;
                        if(addHtml.find('#td-list-1 .td-wrapper').html()){
                            atd1=$compile(addHtml.find('#td-list-1 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-2 .td-wrapper').html()){
                            atd2=$compile(addHtml.find('#td-list-2 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-3 .td-wrapper').html()){
                            atd3=$compile(addHtml.find('#td-list-3 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-4 .td-wrapper').html()){
                            atd4=$compile(addHtml.find('#td-list-4 .td-wrapper').html())($scope)
                        }
                        if(addHtml.find('#td-list-5 .td-wrapper').html()){
                            atd5=$compile(addHtml.find('#td-list-5 .td-wrapper').html())($scope)
                        }
                        if(atd5){td5.append(atd5)}
                        if(atd4){td4.append(atd4)}
                        if(atd3){td3.append(atd3)}
                        if(atd2){td2.append(atd2)}
                        if(atd1){td1.append(atd1)}
                        //console.log(addHtml.find('#td-list-4 .td-wrapper').html())



                        self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                        self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                        //console.log(addHtml.find('#paginateData'+page))
                        //console.log(self.currentQty,self.totalQty)
                        $timeout(function () {
                            lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                            //console.log(lastElement)
                            waiting=false;
                        },200)
                        $timeout(function () {
                            //console.log("$rootScope.$emit('addBlockAfterScrollDone') from stuff-list")
                            $rootScope.$broadcast('addBlockAfterScrollDone')
                            $rootScope.$emit('$stateChangeEndToStuff')

                        },300)
                    })
                    .catch(function () {
                        $rootScope.$emit('$stateChangeEndToStuff')
                    })
            }
        }

        function filterList(){
            $q.when()
                .then(function(){
                    return self.Items.setFilters()
                })
                .catch(function(err){
                    //console.log(err)
                })
        }
        function setDataForStuff(stuff) {
            console.log(stuff.name)
            /*if($rootScope.$state.current.name!='stuffs'){
             console.log('exit')
             }*/
            //console.log(stuff.name)
            stuff = Stuff.setDataForStuff(stuff,global.get('filterTags').val)
            stuff = angular.copy(stuff)
            console.log(stuff.name+' '+stuff.artikul,stuff.sticker)
            return stuff;
        }
        function getList() {
            //console.log('getList')
            $q.when()
                .then(function(){
                    return $http.get(url, {params:{pages:[self.paginate.page],perPage:self.paginate.rows,rows:rows}})
                    /*return $http.get(url.trim()+'.html', {params:{pages:[self.paginate.page],perPage:perPage,rows:rows,query:self.query}})
                    return $http.post(url.trim(),{pages:[self.paginate.page],perPage:self.paginate.rows,rows:rows,query:self.query})*/
                })
                .then(function(response){
                    if(!response){return;}
                    $anchorScroll()
                    lastElement=null;
                    var addHtml=angular.element(response.data.html)
                    if(addHtml.find('#td-list-1').html()){
                        var atd1=$compile(addHtml.find('#td-list-1').html())($scope)
                        td1.html(atd1)
                    }
                    if(addHtml.find('#td-list-2').html()){
                        var atd2=$compile(addHtml.find('#td-list-2').html())($scope)
                        td2.html(atd2)
                    }
                    if(addHtml.find('#td-list-3').html()){
                        var atd3=$compile(addHtml.find('#td-list-3').html())($scope)
                        td3.html(atd3)
                    }
                    if(addHtml.find('#td-list-4').html()){
                        var atd4=$compile(addHtml.find('#td-list-4').html())($scope)
                        td4.html(atd4)
                    }
                    self.lastItemId=addHtml.find('#paginateData'+page).data('lastItemId');
                    self.currentQty+=addHtml.find('#paginateData'+page).data('qty');
                    $timeout(function () {
                        lastElement=(self.lastItemId!=null)?$('#list'+self.lastItemId):null;
                    },200)
                })
        }

    }

    function stuffListTemplateDirectiveCampaignListOld(global){
        return {
            scope: {
                campaignCondition:'@'
            },
            bindToController: true,
            controller: stuffListCtrl,
            controllerAs: '$ctrl',
            templateUrl: function (el,attr) {
                var url = 'views/template/partials/stuffs/stuffs-list/campaign';
                return url
            },
            restrict:'E'
        }
    }
    stuffListCtrl.$inject=['$scope','Stuff','$rootScope','$q','$uibModal','global','exception','FilterTags','Filters','Confirm','Helper','anchorSmoothScroll','Photo','$timeout','$anchorScroll','Category','Brands','BrandTags','seoContent','AddInfo','$http','$location','$element'];
    function stuffListCtrl($scope,Stuff,$rootScope,$q,$uibModal,global,exception,FilterTags,Filters,Confirm,Helper,anchorSmoothScroll,Photo,$timeout,$anchorScroll,Category,Brands,BrandTags,seoContent,AddInfo,$http,$location,$element){
        //conosole.log('&&&&')
        anchorSmoothScroll.scrollTo('topPage')
        $element.on('$destroy', function () {
            //console.log('$destroy',stamp)
            //$scope.$destroy();
        });
        var stamp = Date.now()
        console.log('stuffListCtrl from admin ',stamp)
        var self = this;
        self.Items=Stuff;
        self.mobile=global.get('mobile').val;
        self.global=global;
        self.globalProperty=$rootScope.globalProperty;
        self.$state=$rootScope.$state;
        self.$stateParams=$rootScope.$stateParams;
        self.query={};
        self.data={rows:2}
        self.itemsArr2=[[],[]]
        self.itemsArr3=[[],[],[]]
        self.itemsArr4=[[],[],[],[]]
        self.itemsArr5=[[],[],[],[],[]]
        var queryForFilter;
        self.paginate={page:0,rows:100,items:0}
        setTimeout(function(){$rootScope.displaySlideMenu=true;},400)
        self.newStuff={name:'',actived:false}
        self.listOfActions={
            filterTag:'добавить характеристику',
            unfilterTag:'снять характеристику',
            addInfo:'таблица доп. параметров',
            category:'смена категории',
            brand:'смена бренда',
            order:'способ заказа',
            brandTag:'смена коллекции',
            changePrice:'смена цены',
            changeMinMax:'смена min max кол-ва для заказа',
            deleteStuffs:'удаление товаров',

            actived:'смена видимости',
            index:'смена позиции'
        }
        self.maxIndex=0;
        self.listCriteria={actived:true}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.createItem=createItem;
        self.filterList=filterList;
        self.getTagName=getTagName;
        self.getFilterName=getFilterName;
        self.deleteItem=deleteItem;
        self.zoomImg=zoomImg;
        self.markAllStuffs=markAllStuffs;
        self.changeAction=changeAction;
        self.dropCallback=dropCallback;
        self.filteringList=filteringList;
        self.alignmentIndex=alignmentIndex;
        self.fixData=fixData;
        self.reNewKeyWords=reNewKeyWords;
        self.changeRows=changeRows;
        self.clearSearch=clearSearch;
        self.changeListCriteria=changeListCriteria;
        self.changeStock=changeStock
        self.deleteIndexPageHtml=deleteIndexPageHtml;

        //*******************************************************
        activate();
       // var d1=Date.now()
        function activate() {

            if(global.get('tempContent') && global.get('tempContent').val){
                $('#tempContent').empty()
                global.set('tempContent',null)
            }
            self.data.rows=setRows();
            if(global.get('crawler') && global.get('crawler').val && self.$state.current.name=='stuffs.stuff'){
                return
            }
            $q.when()
                .then(function(){
                    return self.Items.getQueryFromUrl(self.campaignCondition)
                })
                .then(function(query){
                    self.query=query
                    //console.log(self.query)
                    return getList()

                })
                .then(function(){
                    return FilterTags.getFilterTags()
                })
                .then(function(filterTags){
                    self.filterTags=filterTags;
                })
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){
                    self.filters=filters;
                })
                .then(function(){
                    if($rootScope.reloadStuffId){
                        //console.log($rootScope.reloadStuffId)
                        $timeout(function(){
                            anchorSmoothScroll.scrollTo('stuff'+$rootScope.reloadStuffId,-150)
                            $rootScope.reloadStuffId=null;
                        },1300)

                    }
                    return;
                    return Helper.getItem(self.$state.current.name)
                })
                .then(function(helper){
                    if(helper){
                        self.helper=helper;
                        if(!global.get('store').val.helper) {
                            self.helper.popover=null;
                        }
                    }
                })
                .then(function(){
                    seoContent.setDataCatalog();
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        $scope.$on('fromStuffToStuffs',function () {
            console.log("$rootScope.$on('fromStuffToStuffs'",stamp)
            getList(true)
        });
        function getList(reload) {
            //console.log(reload)
            if(reload){
                $rootScope.$emit('$stateChangeStartToStuff');
            }
            if(self.listCriteria && !$rootScope.$stateParams.searchStr){
                for(var k in self.listCriteria){
                    if(self.listCriteria[k]!==null){
                        self.query[k]=self.listCriteria[k]
                    }else{
                        delete self.query[k];
                    }

                }

            }
            //console.log(self.query)
            //var search;
            /*if(self.query.search){
                search=self.query.search;
                delete  self.query.search
            }*/
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    //console.log(data)
                    $anchorScroll();
                    /*self.itemsArr2=data.divideArrayWithChunk(2);
                    self.itemsArr3=data.divideArrayWithChunk(3);
                    self.itemsArr4=data.divideArrayWithChunk(4);
                    self.itemsArr5=data.divideArrayWithChunk(5);*/
                    self.items = data;
                    if(data.length){
                        self.maxIndex=data[0].index;
                        data.forEach(function(el,i){
                            (el.index>self.maxIndex)&&(self.maxIndex=el.index)
                        })
                    }
                    if(self.$state.current.name=='stuffs.stuff' && self.paginate.page){
                        console.log(':::::')
                        self.$state.go('stuffs',self.$stateParams)
                    }
                    return self.items;
                })
                .then(function(items){
                    //console.log(items)
                    if(!items || !items.length){
                        self.stateComplite=true;
                        $rootScope.$emit('$stateChangeEndToStuff');
                    }else{
                        $timeout(function(){
                            $rootScope.$emit('$stateChangeEndToStuff');
                        },100)
                    }
                })
                .catch(function(err){
                    err = err.data||err
                    exception.catcher('получение списка')(err)
                });
        }
        function setRows(){
            return (global.get('functions').val.setRows)?
                global.get('functions').val.setRows():2
        }

        $(window).resize(function(){
            $timeout(function (){
                self.data.rows=setRows();
                //console.log(self.data.rows)
            })

        })
        function filteringList(item){
            //console.log(self.filterStr)
            if (!self.filterStr || (item.name.toLowerCase().indexOf(self.filterStr.toLowerCase()) != -1) ||
                (item.artikul.toLowerCase().indexOf(self.filterStr.toLowerCase()) != -1) ){
                return true;
            }
            return false;
        }
        function searchItem(artikul){

            if(!artikul || artikul.length<3){return};
            artikul=artikul.substring(0,20)
            self.$state.current.reloadOnSearch = true;
            var o={groupUrl:'group',categoryUrl:'category',searchStr:artikul.substring(0,20),
                queryTag:null,brand:null,brandTag:null,categoryList:null}
            self.$state.go(self.$state.current.name,o,{reload:true})
        }
        function saveField(item,field,defer){
            var o={_id:item._id};
            o[field]=item[field]
            if(field=='name' || field=='artikul'){
                var lang= global.get('store').val.lang
                //console.log($scope.item.keywords[lang]);
                var k = item.name;
                if(item.artikul){
                    k+=' '+item.artikul;
                }
                if(item.category && item.category[0] && global.get('categoriesO').val && global.get('categoriesO').val[item.category[0]] && global.get('categoriesO').val[item.category[0]].nameL){
                    k+=' '+global.get('categoriesO').val[item.category[0]].nameL[lang];
                }
                if(item.brand && global.get('brands').val){
                    var id = (item.brand._id)?item.brand._id:item.brand;
                    var b = global.get('brands').val.getOFA('_id',id)
                    k+=' '+((b.nameL && b.nameL[lang])?b.nameL[lang]:b.name);
                    if(item.brandTag){
                        var bt = b.tags.getOFA('_id',item.brandTag);
                        if(bt && bt.nameL && bt.nameL[lang]){
                            k+=' '+bt.nameL[lang]
                        }
                    }
                }
                //console.log(k)
                if(!item.keywords){item.keywords={}}
                item.keywords[lang]=k;
                field +=' keywords.'+lang
                o['keywords.'+lang]=k;
            }


            //console.log(o)
            if(field=='archived' && item[field]){
                field +=' actived'
                o['actived']=false;
                item['actived']=false;

            }

            return self.Items.save({update:field},o ).$promise.then(function(){
                global.set('saving',true);
                /*if(field=='index'){
                    var reload=true
                    getList(reload)
                }*/
                $timeout(function(){
                    global.set('saving',false);
                },1500)},function(err){console.log(err)});


            /*defer =defer||0
            $timeout(function(){

            },defer)*/
        };
        function createItem(stuff,clone){
            if(!stuff){
                stuff={name:''}
                stuff.index=(self.items&&self.items[0]&& self.items[0].index)?self.items[0].index:0;
            }

            $q.when()
                .then(function(){
                    return self.Items.cloneStuff(stuff,clone)
                })
                .then(function(stuff){
                    self.newStuff=stuff
                })
                .then(function(){
                    var url=self.newStuff.url;
                    var c = global.get('categoriesO').val[self.newStuff.category]
                    /*if(c.url==self.$stateParams.categoryUrl){
                        self.getList(true);
                    }*/
                    //self.$state.go('frame.stuffs.stuff',{groupUrl:c.linkData.groupUrl,categoryUrl:c.linkData.categoryUrl,stuffUrl:url},{reload: "frame.stuffs"});
                    self.$state.go('frame.stuffs.stuff',{groupUrl:self.$stateParams.groupUrl,categoryUrl:self.$stateParams.categoryUrl,stuffUrl:url});
                })
                .catch(function(err){
                    if(err){
                        err = err.data||err
                        exception.catcher('создание товара')(err)
                        console.log(err)
                    }
                })
        }
        function filterList(){
            $q.when()
                .then(function(){
                    return self.Items.setFilters()
                })
                .catch(function(err){
                    //console.log(err)
                })
        }
        function getTagName(_id){
            //console.log(_id)
            if(!_id || !self.filterTags || _id=='notag'  || !self.filterTags.length)return;
            return self.filterTags.getOFA('_id',_id ).name||null;
        }
        function getFilterName(_id){
            if(!_id ||!self.filters){return}
            var filter=self.filters.getOFA('_id',_id );
            return (filter)?filter.name:'';
        }
        function deleteItem(stuff){
            var folder='images/'+global.get('store').val.subDomain+'/Stuff/'+stuff.url
               // console.log(folder)


            Confirm("Удалить?" )
                .then(function(){
                    self.whileActions=true;
                    return Stuff.delete({_id:stuff._id} ).$promise;
                } )
                .then(function(){
                    var reload=true;
                    return self.getList(reload);
                })
                .then(function(){
                    self.whileActions=null;
                    return Photo.deleteFolder('Stuff',folder)
                })
                .catch(function(err){
                    self.whileActions=null;
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление товара')(err)
                    }

            })

            /*Stuff.Items.delete({_id:stuff._id} ).$promise.then(function(res){
                $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
            } ).catch(function(err){
                err = err.data||err
                exception.catcher('удаление товара')(err)
            })*/
        }
        function zoomImg(stuff) {
            if(!stuff.gallery || !stuff.gallery.length){return}
            var options={
                animation: true,
                bindToController: true,
                controllerAs: '$ctrl',
                //windowClass: 'app-modal-window',
                templateUrl: 'views/template/partials/stuffDetail/modal/zoom.html',
                controller: function ($uibModalInstance,gallery,i){
                    var self=this;
                    self.gallery=gallery;
                    self.idx=i;
                    self.ok=function(){
                        $uibModalInstance.close();
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss();
                    };
                },
                //size: 'lg',
                resolve:{
                    gallery:function(){
                        return stuff.gallery
                    },
                    i:function(){
                        return 0;
                    }
                }
            }
            $uibModal.open(options)

        }
        function markAllStuffs(m){
            self.items.forEach(function(el){
                el.select=m;
            })
        }
        function selectCategory() {
            function save(id,field) {

            }
            var acts=[]
            return $q.when()
                .then(function(){
                    return Category.select()
                } )
                .then(function(item){
                    self.items.forEach(function(el){
                        if(el.select){
                            //console.log(el.category)
                            if(typeof el.category=='object'){
                                el.category[0]=item._id
                            }else{
                                el.category=[item._id]
                            }
                            acts.push(saveField(el,'category'))
                        }

                    })
                    return $q.all(acts)
                })
                .then(function () {
                    getList(0)
                })
        }
        function selectBrand(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return Brands.select()
                } )
                .then(function (item) {
                    var o={}
                    o.brand=item._id;
                    o.brandTag=null;
                    massSaveField(o)
                })
        }
        function selectBrandTag(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return BrandTags.select()
                } )
                .then(function (item) {
                    //console.log(item)
                    var o={}
                    o.brand=item.brand._id;
                    o.brandTag=item._id;
                    massSaveField(o)
                })
        }
        function selectFilterTag(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return FilterTags.select()
                } )
                .then(function(item){
                    //console.log(item)
                    var tag=item._id;
                    self.items.forEach(function(el){
                        if(el.select){
                            el.select=false;
                            var k = el.tags.indexOf(tag)
                            if(k<0){
                                el.tags.push(tag)
                                acts.push(saveField(el,'tags'));
                            }
                        }
                    })
                })
                .then(function () {
                    return $q.all(acts);
                })
        }
        function unSelectFilterTag(){
            var acts=[];
            return $q.when()
                .then(function(){
                    return FilterTags.select()
                } )
                .then(function(item){
                    //console.log(item)
                    var tag=item._id;
                    self.items.forEach(function(el){
                        if(el.select){
                            el.select=false;
                            var k = el.tags.indexOf(tag);
                            if(k>-1){
                                el.tags.splice(k,1)
                                acts.push(saveField(el,'tags'));
                            }
                        }
                    })
                })
                .then(function () {
                    return $q.all(acts);
                })
        }
        function selectAddInfo(){
            return $q.when()
                .then(function(){
                    return AddInfo.select()
                } )
                .then(function(item){
                    massSaveField({'addInfo':item._id})
                })

        }
        function selectActived(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/selectActivedModal.html',
                bindToController: true,
                controller: selectActivedCtrl,
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (actived){
                massSaveField({'actived':actived}).then(function () {
                    getList(0)
                })

            });
        }
        selectActivedCtrl.$inject=['$uibModalInstance']
        function selectActivedCtrl($uibModalInstance){
            var self=this;
            self.actived=false;
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.actived);
            };
        }
        function selectPosition(){
            if(!self.items.length){return}
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/selectPositionModal.html',
                bindToController: true,
                controller: selectPositionCtrl,
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (position){

                //console.log(position)
                if(position=='down'){
                    var minIndex=Number(self.items[self.items.length-1].index)-1;

                    self.items.forEach(function(el){
                        //el.select=false;
                        if(el.select){

                            var i=minIndex--;
                            el.index=i;
                            saveField(el,'index');
                        }
                    })
                }else if(position=='up'){
                    var minIndex=Number(self.items[0].index)+1;
                    self.items.forEach(function(el){
                        //el.select=false
                        if(el.select){
                            var i=minIndex++;
                            el.index=i;
                            saveField(el,'index');
                        }
                    })
                }
                self.items.sort(function(a,b){return b.index-a.index})

            });
        }
        selectPositionCtrl.$inject=['$uibModalInstance']
        function selectPositionCtrl($uibModalInstance){
            var self=this;
            self.position='up';
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.position);
            };
        }
        function changeOrderType(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/orderTypeModal.html',
                bindToController: true,
                controller: orderTypeCtrl,
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (orderType){
                massSaveField({orderType:orderType})
                /*var item={orderType:orderType}
                item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
                return self.Items.save({update:'orderType'},item).$promise.then(function(){
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)},function(err){console.log(err)});*/
            });
        }
        orderTypeCtrl.$inject=['$uibModalInstance']
        function orderTypeCtrl($uibModalInstance){
            var self=this;
            self.orderType=0;
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.orderType);
            };
        }

        function changeMinMax(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/changeMinMaxModal.html',
                bindToController: true,
                controller: changeMinMaxCtrl,
                size:'lg',
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (item){
                massSaveField(item)
                /*item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
                return self.Items.save({update:'single multiple minQty maxQty'},item ).$promise.then(function(){
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)},function(err){console.log(err)});*/
            });
        }
        changeMinMaxCtrl.$inject=['$uibModalInstance']
        function changeMinMaxCtrl($uibModalInstance){
            var self=this;
            self.item={minQty:1,maxQty:1,single:false,multiple:false};
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.item);
            };
        }
        function changePrice(){
            var options={
                animation: true,
                templateUrl: 'components/stuff/modal/changePriceModal.html',
                bindToController: true,
                controller: changePriceCtrl,
                size:'lg',
                controllerAs: '$ctrl',
            }
            $uibModal.open(options).result.then(function (item){
                item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
                
                item.price=Number(item.value)
                delete item.value;
                try{

                    if(item.price){
                        if(item.sum){
                            item.$inc=true;
                            if(item.price<0){
                                self.items.forEach(function (el) {
                                    if(el.select){
                                        if(el.price+item.price<0){
                                            throw el.name+' '+'price below 0'
                                        }
                                    }
                                })
                            }
                        }else{
                            item.$mul=true;
                            if(item.price<-99){
                                throw 'percent value -99 - ~'
                            }
                            item.price +=100;

                            if(item.price>0){
                                item.price=item.price/100
                            }
                        }
                    }
                    delete item.sum;

                    //console.log(item)
                    return self.Items.save({update:'price'},item).$promise.then(function(){
                        global.set('saving',true);
                        getList(true)
                        $timeout(function(){
                            global.set('saving',false);
                        },1500)},function(err){console.log(err)});

                }catch(err){
                    exception.catcher('error')(err)
                }

            });
        }
        changePriceCtrl.$inject=['$uibModalInstance']
        function changePriceCtrl($uibModalInstance){
            var self=this;
            self.item={value:0,sum:false};
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function () {
                $uibModalInstance.close(self.item);
            };
        }

        function deleteStuffs(){
            Confirm('потверждаете?').then(function () {
                var ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id}).join('_')
                var folders=self.items.filter(function(el){return el.select}).map(function(el){
                    var folder='images/'+global.get('store').val.subDomain+'/Stuff/'+el.url
                    return folder;
                })
                $q.when()
                    .then(function () {
                        return self.Items.delete({ids:ids}).$promise.then(function(){
                            global.set('saving',true);
                            getList(true)
                            $timeout(function(){
                                global.set('saving',false);
                            },1500)},function(err){console.log(err)});
                    })
                    .then(function(){
                        Photo.deleteFolders('Stuff',folders)
                    })
                
            })

        }
        function massSaveField(item) {

            var fields= Object.keys(item).join(' ')
            //console.log(fields)
            item.ids=self.items.filter(function(el){return el.select}).map(function(el){return el._id})
            return self.Items.save({update:fields},item).$promise.then(function(){
                global.set('saving',true);
                if(item.actived || item.category){
                    getList(true)
                }
                $timeout(function(){
                    global.set('saving',false);
                },1500)},function(err){console.log(err)});
        }

        function changeAction(){
            Confirm('подтвердите действие')
                .then(function () {
                    if(!self.action){return}
                    var a=angular.copy(self.action);
                    self.action=null;
                    self.mark=false;
                    switch (a) {
                        case 'category':
                            return selectCategory()
                            break;
                        case 'brand':
                            return selectBrand()
                            break;
                        case 'brandTag':
                            return selectBrandTag()
                            break;
                        case 'filterTag':
                            return selectFilterTag()
                            break;
                        case 'unfilterTag':
                            return unSelectFilterTag()
                            break;
                        case 'addInfo':
                            return selectAddInfo()
                            break;
                        case 'actived':
                            return selectActived()
                            break;
                        case 'index':
                            return selectPosition()
                            break;
                        case 'order':
                            return changeOrderType()
                            break;
                        case 'changePrice':
                            return changePrice()
                            break;
                        case 'changeMinMax':
                            return changeMinMax()
                            break;
                        case 'deleteStuffs':
                            return deleteStuffs()
                            break;

                    }
                })

        }
        function dropCallback(item){
            return item;
        }
        function alignmentIndex(){
            Confirm('Подтверждаете?')
                .then(function () {
                    self.alignmentIndexDisable=true;
                    var data = {}
                    return $http({
                        method: "post",
                        url:'/api/alignmentIndex',
                        data:data,
                    })
                })
                .then(function(){})
                .catch(function (err) {
                    console.log(err)
                })



        }
        function fixData(){
            Confirm('Подтверждаете?')
                .then(function () {
                    self.fixDesable=true;
                    var data = {}
                    return $http({
                        method: "post",
                        url: '/api/fixedDB/stuff',
                        data:data,
                    })
                })
                .then(function(){
                    self.fixDesable=false
                    exception.showToaster('info','fix stucture','Ok')
                })
                .catch(function (err) {
                    exception.catcher('fix stucture')(err)
                })

        }
        function reNewKeyWords(){
            Confirm('Подтверждаете?')
                .then(function () {
                    self.reNewKeyWordsDisable=true;
                    var data = {}
                    return $http({
                        method: "GET",
                        url: '/api/reNewKeyWords',
                        data:data,
                    })
                })
                .then(function(){
                    self.reNewKeyWordsDisable=false
                    exception.showToaster('info','reNewKeyWords','Ok')
                })
                .catch(function (err) {
                    exception.catcher('reNewKeyWords')(err)
                })

        }
        function changeRows(rows) {
            if(self.paginate.rows!=rows){
                self.paginate.rows=rows;
                self.paginate.page=0;
                self.paginate.items=0;
                var reload = true;
                getList(reload);
            }
        }
        function clearSearch() {
            $location.search('searchStr',null)
        }
        function changeListCriteria(field,val) {
            if(self.listCriteria){
                self.listCriteria.actived=null
                self.listCriteria.archived=null
            }
            //console.log(self.listCriteria)
            if(field){
                self.listCriteria[field]=val;
            }
            if(field=='actived' && !val){
                self.listCriteria.archived=false
            }
            self.paginate.page=0;
            getList(true)
        }
        function changeStock(stuff,tag) {
            //console.log(stuff)
            if(stuff.stock && stuff.stock[tag._id]){
                stuff.stock[tag._id].quantity=tag.quantity
                saveField(stuff,'stock');
            }
            //console.log(tag)
            //console.log(tag.quantity)
        }
        console.log($rootScope.$stateParams)
        function deleteIndexPageHtml() {
            Confirm('перезаписать страницу?')
                .then(function () {
                    return $http.get('/api/deleteIndexPageHtml?catalog='+$rootScope.$stateParams.groupUrl+'_'+$rootScope.$stateParams.categoryUrl)
                })
                .then(function (res) {
                    exception.showToaster('info','все OK')
                })
                .catch(function(err){
                    exception.catcher('сброс страницы')(err)
                })

        }
    }


    angular.module('gmall.directives')
        .directive('filtersWrap',filtersWrapDirective)
    function filtersWrapDirective(global){
        return {
            scope: {},
            restrict:"C",
            bindToController: true,
            controller: filtersWrapCtrl,
            controllerAs: '$ctrl',
            templateUrl: function(){
                var s='';
                if(global.get('store').val){
                    var type = (global.get('sectionType') && global.get('sectionType').val)?global.get('sectionType').val:'good';
                    var sec = global.get('store').val.template.stuffListType[type];
                    if(sec.filters){
                        for(var i=0;i<sec.parts.length;i++){
                            if(sec.parts[i].name=='filters'){
                                if(sec.parts[i].templ){
                                    s=sec.parts[i].templ;
                                }
                                break;
                            }
                        }
                    }
                }
                //console.log('s','views/template/partials/stuffs/filters/filtersWrap'+s+'.html')
                return 'views/template/partials/stuffs/filters/filtersWrap'+s+'.html'
            }

        }
    }
    filtersWrapCtrl.$inject=['$element','$timeout','$q','$stateParams','Sections','$location','Filters','global','Brands','Stuff','$scope','$rootScope','$state'];
    function filtersWrapCtrl($element,$timeout,$q,$stateParams,Sections,$location,Filters,global,Brands,Stuff,$scope,$rootScope,$state) {
        var self=this;
        self.global=global;


        //console.log('set filers')

        //console.log(self.filters)

        self.chars=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
        self.char=self.chars[0]
        self.changeAllBrands=changeAllBrands;
        self.changeAllTags=changeAllTags;
        self.clearAll=clearAll;
        self.setCountFilter=setCountFilter;
        self.clearCountFilter=clearCountFilter;
        self.openFilterForBrands=openFilterForBrands;

        self.filterBrands = filterBrands;
        self.setCharForBrands=setCharForBrands;

        $rootScope.$on('changeCurrency',function () {
            console.log('changeCurrency',global.get('rate').val)
            self.filters.forEach(function (f) {
                if(f.count && f.price){
                    console.log(f.mixSave,global.get('rate').val)
                    f.min =Math.ceil10(f.mixSave*global.get('rate').val,0)
                    console.log(f.min)
                    f.max =Math.ceil10(f.maxSave*global.get('rate').val,0)
                    f.maxValue =f.max
                    f.minValue =f.min

                    console.log(f)
                }
            })
            $timeout(function () {
                $scope.$broadcast('rzSliderForceRender');
            },500);
        })

        activate()

        function activate(){
            $q.when()
                .then(function(){
                    return Brands.getBrands()
                })
                .then(function(brands){
                    self.brands=brands
                    self.checkedBrand=0;
                    if(self.brands){
                        self.brands.forEach(function (b) {
                            if(b.set){self.checkedBrand++}
                        })
                    }
                })
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){
                    filters.forEach(function (f) {
                        if(f.count && f.price){
                            if(!f.maxSave){
                                f.maxSave =f.max
                            }
                            if(!f.mixSave){
                                f.mixSave =f.min
                            }
                            /*f.maxValue =f.maxValue*global.get('rate').val
                            f.minValue =f.minValue*global.get('rate').val*/
                            f.min =Math.ceil10(f.mixSave*global.get('rate').val,0)
                            f.max =Math.ceil10(f.maxSave*global.get('rate').val,0)
                            //console.log(f)
                        }
                    })
                    self.filters=filters

                })
        }

        self.changeTag=changeTag;
        var parentDiv=$element.offsetParent()
        var box = $element.find('div')[0];
        //console.log(box)


        $timeout(function () {

            var w = $element.parent().width();
            var w1= Math.round(w/5)
            var list = $element.parent().children()[1];

            var nav = $('.navbar-fixed-top');
            var sdvig=0;
            nav.each(function (i,n) {
                // console.log($(n).outerHeight())
                sdvig+=$(n).outerHeight()
            })

            var filtersFirstBox=$element.find('.filters-first-box')[0];
            var filtersBox=$element.find('.filter-box')[0];

            var win = $(window);
            var delta=0 // сдвиг вверх от нижнего края окна просмотра

            win.scroll(filtersForScroll)
            var lastScrollTop = 0;
            $(filtersFirstBox).height($(filtersBox).height())

            $scope.$watch(function(){return $(filtersBox).height()},function (n,o) {
                $(filtersFirstBox).height(n+'px')
                //console.log(o,n)
                return;
                if(n>o){
                    /*if($(filtersBox).css('position')=='absolute'){
                     if($(filtersBox).height()>$(filtersFirstBox).height()){
                     $(filtersFirstBox).height($(filtersBox).height()+'px')
                     }
                     }*/
                    //console.log($(filtersBox).height(),$(filtersFirstBox).height())
                    if($(filtersBox).height()>$(filtersFirstBox).height()){
                        $(filtersFirstBox).height($(filtersBox).height()+'px')
                    }
                }
            })

            function filtersForScroll(event) {
                //console.log(list)
                if(!list){return}
                if($state.current.name!='stuffs'){return}
                var docViewTop = win.scrollTop();
                var docViewBottom = docViewTop + win.height();
                var elemTop =$(filtersBox).offset().top;
                var elemBottom = elemTop + $(filtersBox).height();
                var elemWidth = $(filtersBox).width();
                var listTop = $(list).offset().top;
                var listBottom = listTop + $(list).height();
                var st = $(this).scrollTop();
                if (st > lastScrollTop){
                    downscroll()
                } else {
                    upscroll()
                }
                lastScrollTop = st;


                /*function isOnScreen(element){
                 var bounds = $(element).offset();
                 bounds.bottom = bounds.top + $(element).outerHeight();
                 return (docViewTop < bounds.top-sdvig &&  docViewBottom > bounds.bottom);
                 };
                 */


                function upscroll() {
                    if(!elemBottom){return}
                    if($(filtersBox).css('position')=='fixed'){
                        if($(filtersBox).css('bottom')=='0px'){
                            // блок зафиксирован по нижнему краю
                            $(filtersFirstBox).css('height',docViewBottom-$(filtersFirstBox).offset().top)
                            $(filtersBox).css('position','absolute')
                            $(filtersBox).css('bottom','0px')
                            $(filtersBox).css('top','auto')
                            $(filtersBox).css('width',elemWidth+'px')
                            if($(filtersFirstBox).height()<$(filtersBox).height()){
                                $(filtersFirstBox).height($(filtersBox).height())
                            }
                        }else if($(filtersBox).css('top')==sdvig+'px'){
                            if(docViewTop+sdvig<=listTop){
                                $(filtersBox).css('position','absolute')
                                $(filtersBox).css('bottom','auto')
                                $(filtersBox).css('top','0px')
                                $(filtersBox).css('width',elemWidth+'px')
                            }else{

                            }
                        }else{
                            console.log('?????????????')
                        }
                    }else if($(filtersBox).css('position')=='absolute'){

                        if(elemTop > docViewTop+sdvig && elemTop>listTop){
                            /*****************/
                            /******* 7 *******/
                            /*****************/
                            $(filtersBox).css('position','fixed')
                            $(filtersBox).css('top',sdvig+'px')
                            $(filtersBox).css('bottom','auto')
                            $(filtersBox).css('width',elemWidth+'px')
                            /*console.log('ниже',$(filtersBox).css('top'))
                             if($(filtersBox).css('top')!='0px'){
                             $(filtersBox).css('position','fixed')
                             $(filtersBox).css('top',sdvig+'px')
                             $(filtersBox).css('bottom','auto')
                             $(filtersBox).css('width',elemWidth+'px')
                             }*/
                        }else{
                            //console.log('выше')
                        }




                        /*if(isOnScreen(filtersBox)){

                         }else{
                         // не помещается на экран
                         //console.log(listTop,elemTop)

                         }*/



                    }
                }

                function downscroll() {
                    if(!elemBottom){return}
                    if($(filtersBox).css('position')=='fixed'){
                        if($(filtersBox).css('top')==sdvig+'px'){
                            // по верхнему краю
                            if(elemBottom<docViewBottom){
                                //console.log('здесь?')
                            }else{
                                var t = elemTop-$(filtersFirstBox).offset().top
                                $(filtersFirstBox).css('height',t+'px')
                                $(filtersBox).css('position','absolute')
                                $(filtersBox).css('top',t+'px')
                                $(filtersBox).css('bottom','auto')
                            }
                        }else if($(filtersBox).css('bottom')=='0px'){
                            // по нижнему краю
                            if(listBottom<=elemBottom){
                                // список поднялся выше фильтров
                                $(filtersFirstBox).css('height',$(list).height())
                                $(filtersBox).css('position','absolute')
                                $(filtersBox).css('bottom','0px')
                                $(filtersBox).css('top','auto')
                            }

                        }

                    }else if($(filtersBox).css('position')=='absolute'){
                        if(docViewTop-sdvig >=elemTop &&  elemBottom  < docViewBottom && $(filtersBox).height()<(docViewBottom-docViewTop-sdvig)){
                            // фильтры не на весь екран
                            $(filtersBox).css('position','fixed')
                            $(filtersBox).css('bottom','auto')
                            $(filtersBox).css('top',sdvig+'px')
                            $(filtersBox).css('width',elemWidth+'px')
                        } else if(elemBottom <= docViewBottom && elemBottom<listBottom  && !($(filtersBox).height()<(docViewBottom-docViewTop-sdvig))){
                            // фильтры поднялись над низом окна и есть еще список
                            $(filtersBox).css('position','fixed')
                            $(filtersBox).css('bottom','0px')
                            $(filtersBox).css('top','auto')
                            $(filtersBox).css('width',elemWidth+'px')
                        }
                    }
                }

            }
            $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
                //console.log('filtersForScroll()')
                if(to.name=='stuffs'){
                    filtersForScroll()
                }
            })
            /*$timeout(function () {
                $scope.$broadcast('rzSliderForceRender')
            },200)*/
            $scope.$on('$destroy', function() {
                angular.element(window).off('scroll', filtersForScroll);
            });
        },150)




        function changeTag(){
            var queryTag='',brandTag='',brand='',filterTag='';
            //console.log(self.filters)
            self.filters.forEach(function(filter){
                if(filter.count){
                    if(filter.set){
                        //console.log(filter.name)
                        if(filterTag){filterTag+='__'}
                        filterTag+=filter._id+"_"+filter.minValue+"_"+filter.maxValue
                    }
                }else{
                    filter.tags.forEach(function(tag){
                        if (tag.set){
                            //console.log(filter.tags)
                            if(queryTag){queryTag+='__'}
                            queryTag+=tag.url;
                        }
                    })
                }

            })

            self.brands.forEach(function(b){
                if(b.set){
                    if(brand){brand+='__'}
                    brand+=b.url;
                }
                b.tags.forEach(function(tag){
                    if (tag.set){
                        if(brandTag){brandTag+='__'}
                        //console.log(tag.url,arr)
                        brandTag+=tag.url;
                    }
                })
            })
            //console.log(filterTag)
            if(brand.split('__').length>1){
                brandTag=null;
            }
            //console.log('query.brandTag при закрытии ',query.brandTag);

            if(!queryTag){
                $location.search('queryTag',null)
            }else{
                $location.search('queryTag',queryTag)
            }
            if(!brandTag){
                $location.search('brandTag',null)
            }else{
                $location.search('brandTag',brandTag)
            }

            if(brand){
                $location.search('brand',brand)
            }else{
                $location.search('brand',null)
            }
            if(filterTag){
                $location.search('filterTag',filterTag)
            }else{
                $location.search('filterTag',null)
            }
            //console.log(self.brand)

            var o={
                groupUrl:$stateParams.groupUrl,
                categoryUrl:$stateParams.categoryUrl,
                queryTag:queryTag,
                brand:self.brand,
                brandTag:brandTag,
                categoryList:undefined

            };
            //console.log(o)
        }
        function clearAllBrands() {
            self.brands.forEach(function (b) {
                b.set=false;
                if(b.tags && b.tags.length){
                    b.tags.forEach(function (t) {
                        t.set=false;
                    })
                }
            })
        }
        function changeAllBrands() {
            clearAllBrands()
            changeTag()
        }
        function clearFilter(filter) {
            filter.set=null;
            if(filter.tags && filter.tags.length){
                filter.tags.forEach(function (t) {
                    t.set=false;
                })
            }
        }
        function changeAllTags(filter) {
            clearFilter(filter)
            changeTag()
        }
        function clearAll() {
            clearAllBrands()
            self.filters.forEach(function(filter){
                clearFilter(filter)
            })
            changeTag()
        }
        function setCountFilter(filter){
            filter.set=true;
            //console.log(filter)
            changeTag();
        }
        function clearCountFilter(filter) {
            filter.set=null;
            changeTag();

        }
        function openFilterForBrands() {
            if(self.brands && self.brands.length){
                return self.brands.some(function(b){return b.open})
            }
        }
        function setCharForBrands(char) {
            self.char=char
        }
        function filterBrands(item) {
            //console.log(item)
            return item.name.toUpperCase()[0]==self.char
        }





    }
})()

'use strict';
angular.module('gmall.directives')
    .directive('driveSale',driveSaleDirective)
    .directive('driveRetail',driveRetailDirective)

.directive('stuffEdit',['$anchorScroll','global','Stuff','$stateParams','$window','$q','$http','Category','Filters','Brands','$uibModal','$document','$location','AddInfo','Comments','exception','Photo','$timeout','$rootScope','Confirm','SetCSS','Blocks',function($anchorScroll,global,Stuff,$stateParams,$window,$q,$http,Category,Filters,Brands,$uibModal,$document,$location,AddInfo,Comments,exception,Photo,$timeout,$rootScope,Confirm,SetCSS,Blocks){
    return {
        restrict:"E",
        scope:{},
        templateUrl:"components/stuff/stuffEdit.html",
        link:function($scope,element,attrs){
            $scope.$ctrl={};
            $scope.$ctrl.lang=global.get('store').val.lang
            $scope.$ctrl.deleteSlideStuff=deleteSlideStuff;
            $scope.$ctrl.editSlideStuff=editSlideStuff;
            $scope.Items= Stuff.Items;
            $scope.$ctrl.Items= Stuff.Items;
            $scope.global=global;
            $scope.$stateParams=$stateParams;
            $scope.item={name:'name',artikul:'',index:0,price:0,minQty:0,maxQty:0}
            $scope.unitOfMeasure=global.get('store').val.unitOfMeasure;
            $scope.$ctrl.listOfBlocksForStuffDetailBlocks=listOfBlocksForStuffDetailBlocks;
            $scope.$ctrl.listOfBlocks=angular.copy(listOfBlocksForAll);


            $scope.$ctrl.addBlock=addBlock;
            $scope.$ctrl.deleteBlock=deleteBlock;
            $scope.$ctrl.saveField=saveFieldBlocks;
            $scope.$ctrl.type='Stuff';
            /*$scope.$ctrl.setStyles=setStyles;
             $scope.$ctrl.deleteSlide=deleteSlide;
            $scope.$ctrl.movedItem=movedItem;
             $scope.$ctrl.editSlide=editSlide;
             $scope.$ctrl.getBlockConfig=getBlockConfig
            */

            $scope.$ctrl.changeStock=changeStock;
            $scope.$ctrl.refreshBlocks=refreshBlocks;

            $scope.$ctrl.animationTypes=animationTypes;
            $scope.$ctrl.tinymceOption = {
                plugins: 'code print preview fullpage searchreplace autolink directionality  visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount  imagetools  contextmenu colorpicker textpattern help',
                // toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | code'
                toolbar: 'code | formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat | code '
                //id:'editingText'

                /*plugins: 'link image code',
                 toolbar: 'undo redo | bold italic | alignleft aligncenter alignright | code'*/
            };



            function getBlockConfig(block) {
                $q.when()
                    .then(function () {
                        return Blocks.getBlockConfig(block,$scope.item._id,'Stuff')
                    })
                    .then(function () {
                        return saveField($scope.item,'blocks')
                    })
                    .then(function () {
                        //activate()
                    })
            }
            //console.log(SetCSS)
            function setStyles(block){
                $q.when()
                    .then(function(){
                        return SetCSS.setStyles(block)
                    })
                    .then(function(){
                        if(block.elements){
                            saveFieldBlocks('blocks.'+block.i+'.elements',block.elements)
                        }
                        if(block.blockStyle){
                            saveFieldBlocks('blocks.'+block.i+'.blockStyle',block.blockStyle)
                        }
                        //saveFieldBlocks('blocks.'+block.i,block)
                    })

            }
            function saveFieldBlocks(field,value,defer,indexImgs){
                console.log(field,value)
                /*if(field.indexOf('index')>-1){
                    $scope.item.blocks.sort(function (a,b) {
                        return a.index-b.index
                    })
                }*/
                defer =(defer)?defer:100;
                setTimeout(function(){
                    var o={_id:$scope.item._id};
                    o[field]=value
                    var query={update:field}
                    if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                        query.indexImgs=indexImgs;
                    }
                    $scope.Items.save(query,o,function () {
                        global.set('saving',true)
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                    },function(err){
                        if(field.indexOf('desc1')>-1){
                            o[field+'L']={}
                            $scope.Items.save({update:field+'L'},o,function () {
                                o[field]=value
                                $scope.Items.save(query,o,function () {
                                    global.set('saving',true)
                                    $timeout(function () {
                                        global.set('saving',false);
                                    },1500)
                                })
                            })
                        }
                    });
                },defer)
            };

            function refreshBlocks() {
                return Stuff.getItem($stateParams.stuffUrl)
                //console.log(id)
                    .then(function(data) {
                        /*console.log(data)
                         console.log(self.item.blocks.length)*/
                        data.blocks.forEach(function (b,i) {
                            b.i=i;
                            if(!b.desc){b.desc=''}
                            if(!b.descL){b.descL={}}
                            if(!b.desc1){b.desc1=''}
                            if(!b.desc1L){b.desc1L={}}
                            if(!b.name){b.name=''}
                            if(!b.nameL){b.nameL={}}
                            if(!b.name1){b.name1=''}
                            if(!b.name1L){b.name1L={}}
                            if(!b.videoLink){b.videoLink=''}
                        })
                        $scope.item.blocks=data.blocks
                        /*console.log(self.item.blocks.length)*/
                    })
            }
            function addBlock(type){
                if(!type){return}
                $scope.$broadcast('addNewBlock',{type:type})
                $scope.$ctrl.newBlock=null;
                return;
                //console.log(type)

                var index=1;
                $scope.item.blocks.forEach(function(block){
                    if(block.index && block.index>=index){
                        index=block.index+1;
                    }
                })
                var o={_id:$scope.item._id,type:type,index:index,id:Date.now()};
                var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
                if(type=='slider'){
                    o.imgs=[];
                    update.update+=' imgs'
                }

                //console.log(update,o)
                $q.when()
                    .then(function () {
                        return $scope.Items.save(update,o).$promise;
                    })
                    .then(function (res) {
                        $scope.$ctrl.newBlock=null
                        return  Stuff.getItem($stateParams.stuffUrl)
                    })
                    .then(function (item) {
                        item.blocks.forEach(function(b,i){
                            b.i=i
                        })
                        $scope.item.blocks=item.blocks;
                    })
                    .catch(function(err){
                        if(err){
                            exception.catcher('добавление блока')(err)
                        }
                    })
            }
            function deleteBlock(block) {
                console.log(block)

                var o={_id:$scope.item._id};
                o['id']=block.id;
                var update={update:'id',embeddedName:'blocks'};
                update.embeddedPull=true;

                console.log(update,o)
                //return;
                Confirm('удалить?')
                    .then(function () {
                        return $scope.Items.save(update,o).$promise;
                    })
                    .then(function (res) {
                        $scope.item.blocks.splice(block.i,1)
                        $scope.item.blocks.forEach(function(b,i){
                            b.i=i;
                        })

                        var images=[]
                        if(block.img){
                            images.push(block.img);
                        }
                        if(block.video){
                            images.push(block.video);
                        }
                        if(block.videoCover){
                            images.push(block.videoCover);
                        }
                        if(block.imgs && block.imgs.length){
                            block.imgs.forEach(function(im){
                                if(im.img){
                                    images.push(im.img);
                                }
                            })

                        }
                        if(images.length){
                            return Photo.deleteFiles('Stuff',images)
                        }

                    })



            }

            var reload = false;
            //var buff_stuff=null;
            //console.log($stateParams)
            /*if($scope.unitOfMeasure){
                $scope.unitOfMeasure.unshift('')
            }*/



            //***** nav
            //console.log($stateParams)
            if($stateParams.block){
                $scope.block=$stateParams.block;

            }else{$scope.block='mainInfo'}
            $scope.cnahgeBlock=function(block){
                $scope.block=block;
                $location.search('block',block)
            }
            //*************************************
            function getAddInfos(){
                return $q(function(resolve,reject){
                    var query=$scope.item.category[0].filters.map(function(filter){return filter._id})
                    query={filter:{$in:query}}
                    AddInfo.query({query:query},function(res){
                        res.shift();
                        $scope.item.addInfos=res;
                        //console.log($scope.item.addInfos)
                        resolve()
                    },function(err){reject(err)})
                })
            }
            //*******************************************************
           // textangular took bar
            $scope.textAngularToolBar="[['h1','h2','h3'],['bold','italics']]";
            // filters
            //****************************************************************
            function _setTagsValue(){
                if(!this.category){return}
                if(this.category[0] && (!this.category[0].filters || !this.category[0].filters.length)){
                    // console.log($scope.item.category)
                    this.category[0].filters=$scope.filters;
                }
                //**********************
                var tags=this.tags;
                if (this.category[0].filters.length){
                    this.category[0].filters.forEach(function(filter){
                        filter.tags.forEach(function(tag){
                            if(tags.indexOf(tag._id)>-1){
                                tag.set=true;
                            } else{
                                tag.set=false;
                            }
                        })
                    })
                }
                //console.log(this.category.filters)
                return;
            }
            function _getTagName(tag,e){
                if(e)console.log(e)
                if(!this.category || !this.category.filters){return}
                if (this.category.filters.length){
                    for(var i= 0,l=this.category.filters.length;i<l;i++){
                        for(var ii= 0,ll=this.category.filters[i].tags.length;ii<ll;ii++){
                            if(this.category.filters[i].tags[ii]._id==tag){
                                return this.category.filters[i].tags[ii].name
                            }
                        }
                    }
                }
            }
            /*$scope.item={name:'name',
                priceSale:1,price:1,retail:1,artikul:'SKU',
                index:1,url:'url',desc:'description',
                setTagsValue:_setTagsValue,
                timePart:0
            }*/
            self.minDurationForService=global.get('store').val.seller.minDurationForService||15;
            $scope.deltaTimePart=1;
            //console.log(self.minDurationForService)
            switch (self.minDurationForService){
                case 30: $scope.deltaTimePart=2;break;
                case 60: $scope.deltaTimePart=4;break;
                case 90: $scope.deltaTimePart=6;break;
                case 120:$scope.deltaTimePart=8;break;
                default :$scope.deltaTimePart=1;
            }
            $scope.slider = {
                value: 0,
                options: {
                    ceil: 12,
                    floor: 0,
                    showSelectionBar: true,
                    showTicks: true,
                    getTickColor: function (value) {
                        if (value < 3)
                            return 'red';
                        if (value < 6)
                            return 'orange';
                        if (value < 9)
                            return 'yellow';
                        return '#2AE02A';
                    },
                    //onChange : saveField($scope.item,'timePart')
                    onChange : function(){
                        $scope.item.timePart=$scope.slider.value*$scope.deltaTimePart
                        saveField($scope.item,'timePart')
                    }
                }
            };

            $scope.$on('changeLang',function(){
                activate();
                /*$q.when()
                    .then(function(){
                        return  Stuff.getItem($stateParams.stuffUrl)
                    })
                    .then(function(item){
                        $scope.item.name=item.name
                        $scope.item.artikul=item.artikul
                        $scope.item.desc=item.desc
                        $scope.item.desc1=item.desc1
                        $scope.item.desc2=item.desc2
                    })*/

            })
            $scope.$ctrl.paginate1={rows:5,page:0,items:0};
            activate();
            function activate() {
                $q.when()
                    .then(function(){
                        return Filters.getFilters()
                    } )
                    .then(function(filters){
                        $scope.filters=filters;
                    })
                    .then(function(){
                        return  Stuff.getItem($stateParams.stuffUrl)
                    })
                    .then(function(item){
                        //console.log(item);
                       if(item.addInfo && item.addInfo._id){
                           item.addInfo=item.addInfo._id
                       }
                        if(!item.blocks){
                            item.blocks=[];
                            saveField(item,'blocks')
                        }
                        item.blocks.forEach(function(b,i){
                            b.i=i
                        })

                        if(!item.timePart){
                            item.timePart=0;
                        }
                        $scope.slider.value=item.timePart/$scope.deltaTimePart;

                        for(var key in item){
                            if (item.hasOwnProperty(key)) {
                                $scope.item[key]=item[key];
                            }
                        }
                        $scope.item.setTagsValue=_setTagsValue;
                        $scope.$ctrl.checked=(item.index==99999)?true:false;
                        $scope.$ctrl.getComments();
                        $scope.$ctrl.item=$scope.item;
                    })
                    .then(function(){
                        //console.log($scope.item.category)
                        if($scope.item.category){
                            if(typeof $scope.item.category != 'object'){
                                $scope.item.category=[$scope.item.category]
                            }
                            var q=$q.defer()
                            //console.log($scope.item.category,$scope.item.category[0])
                            Category.get({_id:$scope.item.category[0]},function(res){
                                //console.log($scope.item.category)
                                $scope.item.category[0]=res;
                                $scope.item.setTagsValue();
                                q.resolve();
                            },function(err){q.reject(err)})
                            return q.promise;
                        }
                    })
                    .then(function(){
                        $timeout(function () {
                            $scope.item.ready=true;
                        },2000)

                        $rootScope.$emit('$stateChangeEndToStuff');
                        var q=$q.defer()
                        if($scope.item.brand){
                            Brands.get({id:$scope.item.brand},function(res){
                                $scope.item.brand=res;
                                q.resolve();
                            },function(err){q.reject(err)})
                        }else{
                            q.resolve()
                        }
                        return q.promise;
                    })
                    .then(function(){
                        //console.log($scope.item.sortsOfStuff)
                        if($scope.item.sortsOfStuff){
                            //console.log($scope.item.sortsOfStuff.filter)
                            if($scope.item.sortsOfStuff.filter){
                                //console.log($scope.item.category[0])
                                $scope.item.sortsOfStuff.filter=angular.copy($scope.item.category[0].filters.getOFA('_id',$scope.item.sortsOfStuff.filter));
                                //console.log($scope.item.sortsOfStuff.filter)
                            }
                            if($scope.item.sortsOfStuff.filterGroup){
                                $scope.item.sortsOfStuff.filterGroup=angular.copy($scope.item.category[0].filters.getOFA('_id',$scope.item.sortsOfStuff.filterGroup));
                            }
                            if($scope.item.sortsOfStuff.stuffs && $scope.item.sortsOfStuff.stuffs.length){
                                $scope.item.sortsOfStuff.stuffs.forEach(function (stuff) {
                                    if(stuff.stock && typeof stuff.stock=='object'){
                                        for(var k21 in stuff.stock){
                                            stuff.stock[k21].quantity=Number(stuff.stock[k21].quantity)
                                        }
                                    }
                                })
                            }
                        }
                        return;
                    })
                    .then(function(){
                        $anchorScroll();
                        return getAddInfos();
                    })
                    .catch(function(err){
                        console.log(err)
                        //$window.history.back();
                    })
            }



            function calculatePriceSale(price){
               return Math.ceil10(Number(price)-(global.get('store').val.seller.sale/100)*price,-2);
            }
            function calculatePriceRetail(price){
                return Math.ceil10(Number(price)+(global.get('store').val.seller.retail/100)*price,-2);
            }
            function saveField(stuff,field){
                if(field=='name' ||field=='artikul' || field=='category' || field=='brand' || field=='brandTag'){
                    var lang= global.get('store').val.lang
                    //console.log($scope.item.keywords[lang]);
                    var k = $scope.item.name;
                    if($scope.item.artikul){
                        k+=' '+$scope.item.artikul;
                    }
                    if($scope.item.category && $scope.item.category[0] && $scope.item.category[0].nameL && $scope.item.category[0].nameL[lang]){
                        k+=' '+$scope.item.category[0].nameL[lang];
                    }
                    if($scope.item.brand && $scope.item.brand.nameL && $scope.item.brand.nameL[lang]){
                        k+=' '+$scope.item.brand.nameL[lang];
                        if($scope.item.brandTag){
                            var bt = $scope.item.brand.tags.getOFA('_id',$scope.item.brandTag);
                            if(bt && bt.nameL && bt.nameL[lang]){
                                k+=' '+bt.nameL[lang]
                            }
                        }
                    }
                    //console.log(k)
                    if(!$scope.item.keywords){$scope.item.keywords={}}
                    $scope.item.keywords[lang]=k;
                    field +=' keywords.'+lang
                }


                if(field=='price' || field=='name' ||field=='artikul' ||field=='actived' ||field=='category'||field=='index'){
                    reload =true;
                }
                //console.log(field)

                if(field==='price' || field==='driveSalePrice'|| field==='driveRetailPrice'){
                    for(var key in stuff.stock){
                        stuff.stock[key].price= stuff.price
                    }
                    stuff.setPrice()
                    field +=' stock';



                }
                if(field==='stock'){
                    //stuff.priceSale = calculatePriceSale(stuff.price);
                    if(stuff.sortsOfStuff && stuff.sortsOfStuff.differentPrice && stuff.store){
                        for(var key in stuff.stock){
                            if(key==stuff.sort && !stuff.stock[key].quantity){
                                stuff.sort=null;
                                field +=' sort'
                            }
                            stuff.stock[key].priceSale= calculatePriceSale(stuff.stock[key].price);
                            stuff.stock[key].retail= calculatePriceRetail(stuff.stock[key].price);
                        }
                    }else{
                        for(var key in stuff.stock){
                            if(key==stuff.sort && !stuff.stock[key].quantity){
                                stuff.sort=null;
                                field +=' sort'
                            }
                        }
                    }

                }
                if(field==='stock' || field==='price'){
                    stuff.priceForFilter=[]
                    for(var key in stuff.stock){
                        if(stuff.stock[key].quantity){
                            var c = (stuff.currency)?stuff.currency:global.get('store').val.mainCurrency;
                            var price =(c==global.get('store').val.mainCurrency)?stuff.stock[key].price:Math.ceil10(stuff.stock[key].price/global.get('store').val.currency[c][0],-2)
                            stuff.priceForFilter.push(price)
                        }
                    }
                    field +=' priceForFilter'
                }

                var o={_id:stuff._id};
                var fieldArr=field.split(' ');
                fieldArr.forEach(function(el){
                    if(el.indexOf('.')>-1){
                        var ks = el.split('.');
                        if(ks.length){
                            var d=$scope.item;
                            for(var i=0;i<ks.length;i++){
                                if(d[ks[i]]){
                                    d=d[ks[i]];
                                }
                            }
                            if(d && !d._id){
                                o[el]=d;
                            }
                        }
                    }else{
                        o[el]=stuff[el];
                    }

                })
                if(field=='archived'){
                    if(stuff['archived']){
                        o['archivedDate']=Date.now()
                    }else{
                        o['archivedDate']=null;
                    }
                    field +=' archivedDate'
                }
                //console.log(field,o)
                Stuff.Items.save({update:field},o,function(res){
                    $scope.growlNotification='сохранено';
                    global.set('saving',true);
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)

                })
            }

            $scope.saveField = saveField;


            // select category in modal *************************


            $scope.selectCategory=function(){
                $q.when()
                    .then(function(){
                        return Category.select()
                    } )
                    .then(function(selectedCategory){
                       // console.log(selectedCategory)

                        if(!$scope.item.category || ($scope.item.category[0] && selectedCategory._id!=$scope.item.category[0]._id)){
                            Category.get({_id:selectedCategory._id},function(res){
                                $scope.item.category=[res];
                                if(res.mp && typeof res.mp =='object'){
                                    for(var key in res.mp){
                                        $scope.item.category.push(res.mp[key])
                                    }
                                }
                                console.log($scope.item.category)
                                $scope.item.setTagsValue();
                                var brandsArr=$scope.item.category[0].brands.map(function(el){return el._id});
                                var tagsArr=$scope.item.category[0].filters.reduce(function(tags,el){el.tags.forEach(function(t){tags.push(t._id)});return tags},[]);
                                //console.log(brandsArr,tagsArr)
                                var link='/'+selectedCategory.linkData.groupUrl+'/'+selectedCategory.linkData.categoryUrl+'/'+$scope.item.url;
                                var o ={_id:$scope.item._id,category:$scope.item.category.map(function(c){return c._id||c}),link:link}
                                var field='category link'
                                if($scope.item.brand && $scope.item.brand._id && brandsArr.indexOf($scope.item.brand._id)<0){
                                    $scope.item.brand=null;
                                    $scope.item.brandTag=null;
                                    field+=' brand brandTag'
                                    o.brnad=null;
                                    o.brandTag=null;
                                }
                                var oldLength=$scope.item.tags.length;
                                for(var i=0;i<$scope.item.tags.length;i++){
                                    if(tagsArr.indexOf($scope.item.tags[i])<0){
                                        console.log($scope.item.tags[i])
                                        $scope.item.tags.splice(i,1)
                                        i--;
                                    }
                                }
                                if(oldLength!=$scope.item.tags.length){
                                    field+=' tags';
                                    o.tags=$scope.item.tags;
                                }
                                //console.log(field)
                                $scope.saveField(o,field);
                                return;;

                            })
                        }
                    })
            }
            var editBody = $document.find('#filterBlock').eq(0);
            //console.log(editBody)
            $scope.selectFilter=function(filter,tags){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/selectCategoryModal/selectFilterModal.html',
                    controller: 'selectFilterModalCtrl',
                    size: 'sm',
                    appendTo:editBody,
                    resolve: {
                        filter: function () {
                            return filter;
                        },
                        tags: function () {
                            return tags;
                        }
                    }
                });
                modalInstance.result.then(function (selectedTags) {
                    //console.log(selectedTags)


                }, function () {
                    $scope.item.tags=[];
                    if ($scope.item.category[0].filters.length){
                        $scope.item.category[0].filters.forEach(function(filter){
                            filter.tags.forEach(function(tag){
                                if(tag.set){
                                    $scope.item.tags.push(tag._id)
                                }
                            })
                        })
                    }
                    //console.log($scope.item.tags);return;
                    $scope.saveField($scope.item,'tags');
                });
            }
            $scope.selectBrand=function(){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/selectCategoryModal/selectBrandModal.html',
                    controller: function($scope,$uibModalInstance,brandItem,brands){
                        $scope.brandItem=brandItem;
                        $scope.brands=brands;
                        $scope.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                        $scope.ok = function (brandItem) {
                            $uibModalInstance.close(brandItem);
                        };
                    },
                    size: 'sm',
                    resolve: {
                        brandItem: function () {

                            return ($scope.item.brand && $scope.item.brand._id)?$scope.item.brand._id:null;
                        },
                        brands:function () {
                            return ($scope.item.category[0] && $scope.item.category[0].brands)?$scope.item.category[0].brands:[];
                        },
                    }
                });
                modalInstance.result.then(function (selectedBrand) {
                    if(!$scope.item.brand ||($scope.item.brand && selectedBrand!=$scope.item.brand._id)){
                        // get new brand;
                        $scope.item.brandTag=null;
                        if(!selectedBrand){
                            $scope.item.brand=selectedBrand;
                        }else{
                            Brands.get({id:selectedBrand},function(res){
                                $scope.item.brand=res;
                            })
                        }
                        $scope.saveField({_id:$scope.item._id,brand:selectedBrand,brandTag:$scope.item.brandTag},'brand brandTag');
                    }
                }, function () {
                });
            }
            $scope.selectBrandTag=function(){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/selectCategoryModal/selectBrandTagModal.html',
                    controller: 'selectBrandTagModalCtrl',
                    size: 'sm',
                    resolve: {
                        brandTag: function () {
                            return $scope.item.brandTag||null;
                        },
                        brandTags: function () {
                            return $scope.item.brand.tags||null;
                        }
                    }
                });
                modalInstance.result.then(function (selectedBrandTag) {
                    if(selectedBrandTag!=$scope.item.brandTag){
                        $scope.item.brandTag=selectedBrandTag;
                        $scope.saveField({_id:$scope.item._id,brandTag:$scope.item.brandTag},'brandTag');
                    }
                }, function () {
                });
            }
            //********************************************************
            //*************** additionl info *************************
            $scope.setAddInfos=function(filter,currentAddInfo){
                $q.when()
                    .then(function(){
                        return AddInfo.editTable(filter)
                    })
                    .then(function () {
                        getAddInfos()
                    })
                    .catch(function(){
                        getAddInfos()
                    })

                
            }
            //********************************************************

            //***************************************************
            $scope.backState=function(){
                //console.log(reload)
                if(reload){
                    $rootScope.reloadStuffId=$scope.item._id
                }
                $rootScope.$state.go('frame.stuffs',$rootScope.$stateParams,{reload:reload})
                /*if(reload){

                }else{
                    $rootScope.$state.go('frame.stuffs',$rootScope.$stateParams,{reload:false})
                }*/
            }
            $scope.getUrlParams=function(stuff){
                //console.log($scope.stuff.getUrlParams.call(stuff))
                return $scope.stuff.getUrlParams.call(stuff)
            }

            $scope.movedImage = function() {
                $timeout(function(){
                    $scope.item.gallery.forEach(function(el,i){
                        el.index=i;
                    })
                    $scope.Items.save({update:'gallery'},{_id:$scope.item._id,gallery:$scope.item.gallery})
                },100)

            };

            $scope.deleteImage = function(images,index){
                var files=[];
                if(images){
                    if(images.img){
                        files.push(images.img)
                    }
                    if(images.thumb){
                        files.push(images.thumb)
                    }
                    if(images.thumbSmall){
                        files.push(images.thumbSmall)
                    }
                }
                var data={files:files,id:$scope.item._id,_id:'deleteFilesFromStuff'};

                $q.when()
                    .then(function(){
                        return Photo.deleteFiles('Stuff',files);
                    })
                    .then(function(){
                        $scope.item.gallery.splice(index,1)
                        $scope.Items.save({update:'gallery'},{_id:$scope.item._id,gallery:$scope.item.gallery})
                    })
                    .catch(function(err){
                        err = err.data||err
                        exception.catcher('удаление файла')(err)
                    });

                /*Stuff.save(data).$promise
                    .then(function successCallback(response) {
                    $scope.item.gallery.splice(index,1)
                    $scope.Items.save({update:'gallery'},{_id:$scope.item._id,gallery:$scope.item.gallery})
                }, function errorCallback(response) {

                });*/

            }

           /* $scope.onSelected=function(){
                setTimeout(function(){
                    $(':focus').blur();
                })
            }*/
            //******************** comment ************************
            $scope.$ctrl.moment=moment;
            $scope.$ctrl.createNewComment=function(){
                //console.log(Comments)
                $q.when()
                    .then(function(){
                        return Comments.create()
                    })
                    .then(function(res){
                        var newComment={text:res,stuff:$scope.item._id,user:global.get('user' ).val._id}
                        return Comments.save(newComment ).$promise;
                    })
                    .then(function(){
                        return $scope.$ctrl.getComments(0)
                    })
                    .catch(function(err){
                        err = err.data||err
                        exception.catcher('создание комментария')(err)
                    });
            }

            $scope.$ctrl.getComments=function(page){
                if(page===0){$scope.$ctrl.paginate1.page=page}
                var query={stuff:$scope.item._id}
                return Comments.getList($scope.$ctrl.paginate1,query)
                    .then(function(data) {
                        $scope.$ctrl.comments = data;
                        return $scope.$ctrl.comments;
                    })
                    .catch(function(err){
                        err = err.data||err
                        exception.catcher('получение списка')(err)
                    });
            }
            $scope.$ctrl.deleteComment = function(id){
                $q.when()
                    .then(function() {
                        return Comments.delete({_id:id}).$promise;
                    })
                    .then(function(){
                        return $scope.$ctrl.getComments(0)
                    })
                    .catch(function(err){
                        err = err.data||err
                        exception.catcher('удаление комментария')(err)
                    });
            }
            $scope.$ctrl.saveCommentField = function(item,field){
                $q.when()
                    .then(function() {
                        var o={
                            _id:item._id
                        }
                        o[field]=item[field];

                        return Comments.save({update:field},o).$promise;
                    })
                    .catch(function(err){
                        err = err.data||err
                        exception.catcher('схранение комментария')(err)
                    });
            }
            $scope.$ctrl.setBigIndex = function(checked){
                if(checked){
                    $scope.item.index=99999;
                }else{
                    $scope.item.index=1;
                }
                $scope.saveField($scope.item,'index')
            }

            function deleteSlideStuff(image,index){
                //var data={file:images.img,id:self.item._id,_id:'fileDeleteFromImgs'}
                //News.save(data).$promise
                Photo.deleteFiles('Stuff',[image.img])
                    .then(function(response) {
                        $scope.item.imgs.splice(index,1)
                        $scope.saveField($scope.item,'imgs')
                    }, function(err) {
                        console.log(err)
                    });

            }
            function editSlideStuff(slide,index){
                //console.log(slide)
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/stuff/modal/editSlide.html',
                    controller: function(slide,$uibModalInstance){
                        var self=this;
                        self.item=slide;
                        self.ok=function(){
                            console.log(self.item)
                            $uibModalInstance.close(self.item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    resolve: {
                        slide: function () {
                            return slide;
                        },
                    }
                });
                modalInstance.result.then(function (slide) {
                    console.log(slide)
                    $scope.saveField($scope.item,'imgs')
                }, function () {
                });
            }

            //******************** blocks ************************
            function deleteSlide(block,index){
                Photo.deleteFiles('Stuff',[block.imgs[index].img])
                    .then(function(response) {
                        block.imgs.splice(index,1)
                        saveFieldBlocks('blocks.'+block.i+'.imgs',block.imgs)
                    },function(err) {console.log(err)});
            }
            function editSlide(block,index){
                //console.log(index)
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/staticPage/editSlide.html',
                    controller: function(slide,$uibModalInstance){
                        var self=this;
                        self.item=slide;
                        self.ok=function(){
                            console.log(self.item)
                            $uibModalInstance.close(self.item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    size:'lg',
                    resolve: {
                        slide: function () {
                            return block.imgs[index];
                        },
                    }
                });
                modalInstance.result.then(function (slide) {
                    //console.log(slide)
                    saveFieldBlocks('blocks.'+block.i+'.imgs',block.imgs,null,index)
                }, function () {
                });
            }
            function movedItem(block,item) {
                $timeout(function(){
                    saveFieldBlocks('blocks.'+block.i+'.imgs',block.imgs)
                },100)
                return item;
            }

            function changeStock(stuff,tag) {
                //console.log(stuff)
                if(stuff.stock && stuff.stock[tag._id]){
                    stuff.stock[tag._id].quantity=tag.quantity
                    saveField(stuff,'stock');
                }
                //console.log(tag)
                //console.log(tag.quantity)
            }







        }
    }
}])

function driveSaleDirective(){
    return {
        restrict:'E',
        bindToController: true,
        controllerAs: '$ctrl',
        controller: driveSaleCtrl,
    }
}
driveSaleCtrl.$inject=['$scope','$element','$uibModal']
function driveSaleCtrl($scope,$element,$uibModal) {
    //console.log($scope.$parent.item)
    $element.bind('click',function(){
        if(!$scope.item.driveSalePrice){$scope.item.driveSalePrice={type:0,condition:true,percent:0,sum:0}}
        editPriceSetting($scope.item.driveSalePrice,'driveSalePrice')
    })
    function editPriceSetting(data,field){
        $uibModal.open({
            animation: true,
            templateUrl: 'components/stuff/modal/editPriceSetting.html',
            controller: editPriceSettingModalCtrl,
            controllerAs:'$ctrl',
            resolve: {
                data: function () {
                    return data;
                },
                field:function(){
                    return field;
                }
            }
        }).result.then(function (data) {
            console.log(data)
            $scope.saveField($scope.item,'driveSalePrice')
        }, function () {});
    }

}
function driveRetailDirective(){
    return {
        restrict:'E',
        bindToController: true,
        controllerAs: '$ctrl',
        controller: driveRetailCtrl,
    }
}
driveRetailCtrl.$inject=['$scope','$element','$uibModal']
function driveRetailCtrl($scope,$element,$uibModal) {
    //console.log($scope.$parent.item)
    $element.bind('click',function(){
        if(!$scope.item.driveRetailPrice){$scope.item.driveRetailPrice={type:0,condition:true,percent:0,sum:0}}
        editPriceSetting($scope.item.driveRetailPrice,'driveRetailPrice')
    })
    function editPriceSetting(data,field){
        $uibModal.open({
            animation: true,
            templateUrl: 'components/stuff/modal/editPriceSetting.html',
            controller: editPriceSettingModalCtrl,
            controllerAs:'$ctrl',
            resolve: {
                data: function () {
                    return data;
                },
                field:function(){
                    return field;
                }
            }
        }).result.then(function (data) {
            console.log(data)
            $scope.saveField($scope.item,'driveRetailPrice')
        }, function () {});
    }

}
editPriceSettingModalCtrl.$inject=['data','field','$uibModalInstance'];
function editPriceSettingModalCtrl(data,field,$uibModalInstance) {
    var self=this;
    self.header='';
    if(field=='driveSalePrice'){
        self.header='sale';
    }else if(field=='driveRetailPrice'){
        self.header='розница';
    }
    self.item=data;
    self.ok=function(){
        console.log(self.item)
        $uibModalInstance.close(self.item);
    }
    self.cancel = function () {
        $uibModalInstance.dismiss();
    };
}



'use strict';
angular.module('gmall.directives')
.directive('stuffsAdminListWithPaginate',['$rootScope','Stuff','$timeout','$q','Sections','createStuffService','queryFromUrlService','filterStuffsListService','FilterTags','Filters',function($rootScope,Stuff,$timeout,$q,Sections,createStuffService,queryFromUrlService,filterStuffsListService,FilterTags,Filters){
    return {
        restrict:"E",
        scope:{
            query:'=',
            rate:'=',
            mobile:'@'
        },
        //controller:"stuffsLWPCtrl",
        templateUrl:"components/stuff/stuffsAdminListWithPaginate.html",
        link:function($scope,element,attrs,ctrl){
            var $state=$rootScope.$state;
            var $stateParams=$rootScope.$stateParams;
            $scope.global=$rootScope.global;
            setTimeout(function(){$rootScope.displaySlideMenu=true;},400)

            var query,queryForFilter; // save current state params
            $scope.paginate={page:0,rows:20,totalItems:0}
            $scope.newStuff={name:'',actived:false}
            $scope.saveStuff = function(stuff,field){
                var f=field.split(' ');
                var o={_id:stuff._id}
                f.forEach(function(el){o[el]=stuff[el]})
                /*console.log(f)
                console.log(stuff)*/
                Stuff.Items.save({update:field},o,function(res){
                    console.log(res)
                    if(f[0]=='index'){
                        $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    }
                })
            }
            $scope.getList=function(page,rows,reload){
                if ($scope.paginate.page!=page){
                    $scope.paginate.page=page;
                }
                return $q(function(resolve,reject){
                    var queryString;
                    if(reload){queryString=query}else{queryString=$scope.query}
                    Stuff.getList(queryString,null,page,rows,$scope.paginate).then(function(res){
                        $scope.items=res;
                        $scope.newStuff.index=($scope.items && $scope.items[0])?$scope.items[0].index:1;
                        //$timeout(function(){$scope.$emit('endLoadStuffs');},300)
                        if(!reload){
                            try {
                                query=JSON.parse($scope.query);
                            } catch (err) {
                                query={};
                            }
                            $scope.query=null;
                        }
                        resolve();
                    },function(err){
                        reject(err)
                    });
                })
            }
            var i=0;
            //*************************************************************************************************************
            //******************************************* для формирования url
            $scope.getUrlParams = Stuff.getUrlParams;
            //$scope.getUrlParams = Stuff.getUrlParams;
            //************************* for stuff URL *************************
            $scope.getCategoryName = Stuff.getCategoryName;
            $scope.getBrandName = Stuff.getBrandName;
            // работа со списком

            $scope.reloadList = function(){
                $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
            }
            $scope.searchStuff = function(artikul){
                if(!artikul || artikul.length<3){return};
                artikul=artikul.substring(0,20)

                $state.current.reloadOnSearch = true;
                var o={groupUrl:'group',categoryUrl:'category',searchStr:artikul.substring(0,20),
                queryTag:null,brand:null,brandTag:null,categoryList:null}
                $state.go($state.current.name,o,{reload:true})
            }
            $scope.filterList=function(){
                $q.when()
                    .then(function(){
                        return filterStuffsListService.setFilters(queryForFilter)
                    })
                    .then(function(query){
                        queryForFilter=query;
                        $scope.query=prepareQueryForRequest(query)
                        //console.log($scope.query);
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows);
                    })
                    .then(function(){
                    })
                    .catch(function(err){
                        console.log(err)
                    })
            }
            $scope.cloneStuff=function(stuff){
                var newStuff=angular.copy(stuff);
                $q.when()
                    .then(function(){
                        return createStuffService.cloneStuff(newStuff,true)
                    })
                    .then(function(stuff){
                        console.log($scope.newStuff==stuff)
                        $scope.newStuff=stuff
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    })
                    .then(function(){
                        var url=newStuff.url;
                        //$scope.newStuff={name:'',actived:false}
                        $state.go('frame.stuffs.stuff',{groupUrl:'group',categoryUrl:'category',stuffUrl:url});
                    })
                    .catch(function(err){
                        console.log(err)
                    })




               /* var newStuff=angular.copy(stuff);
                $q.when()
                    .then(function(){
                        return createStuffService.cloneStuff(newStuff,true,$scope.reloadList)
                    })
                    .then(function(stuffFromResolve){
                        //console.log('stuffFromResolve-',stuffFromResolve);
                        console.log(newStuff===stuffFromResolve);

                    } )
                    .catch(function(err){
                        console.log(err)
                    })*/

            }
            $scope.createNewStuff = function(){
                $q.when()
                    .then(function(){
                        return createStuffService.cloneStuff($scope.newStuff)
                    })
                    .then(function(stuff){
                        console.log($scope.newStuff==stuff)
                        $scope.newStuff=stuff
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    })
                    .then(function(){
                        var url=$scope.newStuff.url;
                        $scope.newStuff={name:'',actived:false}
                        $state.go('frame.stuffs.stuff',{groupUrl:'group',categoryUrl:'category',stuffUrl:url});
                    })
                    .catch(function(err){
                        console.log(err)
                    })

                /*if(!$scope.newStuff.name){return}
                $scope.newStuff.index=($scope.items && $scope.items[0])?$scope.items[0].index:1;
                var stuffUrl;
                $q.when()
                    .then(function(){
                        return Sections.getSections()
                    }) // полчение списка разделов
                    .then(function(sections){
                    // получение категорий и разделов
                        if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                            var section=sections.getOFA('url',$stateParams.groupUrl);
                            if(sections){
                                $scope.newStuff.section=section._id;
                                $scope.newStuff.store=section.store;
                                if($stateParams.categoryUrl!='category'){
                                    if(query['$and']){
                                        var a=query.$and;
                                        for(var j=0,l=a.length;j<l;j++){
                                            if(a[j].category && !a[j].category.$in){
                                                $scope.newStuff.category= a[j].category;
                                                break;
                                            }
                                        }

                                    }else{
                                        if(query.category && !query.category.$in){
                                            $scope.newStuff.category= query.category
                                        }
                                    }
                                }
                            }

                        }
                        return;
                    })
                    .then(function(){
                       // console.log($scope.newStuff);return;
                        var q=$q.defer();
                        Stuff.Items.save($scope.newStuff,function(res){
                            $scope.newStuff={name:'',actived:false};
                            q.resolve(res.url);
                        },function(err){q.reject(err)})
                        return q.promise;
                    })
                    .then(function(url){
                        stuffUrl=url;
                        return $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');

                    } )
                    .then(function(){
                        $state.go('frame.stuffs.stuff',{stuffUrl:stuffUrl});
                    })
                    .catch(function(err){
                        console.log(err)
                    })*/
            }
            $scope.deleteStuff=function(stuff){
                if(confirm("удалить???")){
                    Stuff.Items.delete({_id:stuff._id},function(res){
                        $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
                    })
                }
            }

            function prepareQueryForRequest(queryStart){
                // формирование строки запроса для выбора  товаров из БД
                var query=[];
                for (var key in queryStart){
                    if (queryStart[key]){
                        if (key=="tags"){
                            var qu=[];
                            for (var key2 in queryStart[key]){
                                var obj=queryStart[key][key2];
                                var q=[];
                                if (obj && obj.length){
                                    obj.forEach(function(objT){
                                        q.push({tags:objT});
                                    })

                                    if (q.length>1){
                                        q={$or:q}
                                        qu.push(q)
                                    } else {
                                        q=q[0];
                                        qu.push(q)
                                    }
                                }
                            }
                            if (qu.length){
                                if(qu.length==1){
                                    query.push(qu[0]);
                                } else {
                                    query.push({$and:qu});
                                }
                            }
                        } else {
                            var obj={};
                            obj[key]=queryStart[key];
                            query.push(obj);
                        }
                    }
                }
                if (query.length==1){
                    query=JSON.stringify(query[0]);
                } else if(query.length>1){
                    query =JSON.stringify({$and:query});
                } else {
                    query={};
                }
                return query;
            }

            $q.when()
                .then(function(){
                    return queryFromUrlService.get()
                })
                .then(function(query){
                    queryForFilter=query;
                    $scope.query=prepareQueryForRequest(query)
                    return $scope.getList($scope.paginate.page,$scope.paginate.rows);

                })
                .then(function(){
                    return FilterTags.getFilterTags()
                })
                .then(function(filterTags){
                    $scope.filterTags=filterTags;
                })
                .then(function(){
                    return Filters.getFilters()
                })
                .then(function(filters){
                    $scope.filters=filters;
                })
                .catch(function(err){
                    console.log(err)
                })

            $scope.getTagName=function(_id){
                if(!_id)return;
                return $scope.filterTags.getOFA('_id',_id ).name||null;
            }
            $scope.getFilterName=function(_id){
                return $scope.filters.getOFA('_id',_id ).name||null;
            }
            $scope.changeSortOfStuff=function(stuff){
                var sort=stuff.stock[stuff.sort];
                //console.log(sort)
                stuff.price=sort.price;
                stuff.priceSale=sort.priceSale;
                stuff.retail=sort.retail;
            }
            $scope.filterSorts=function(sort){
                return sort.value.quantity
            }
            $scope.onSelected=function(){
                setTimeout(function(){
                    $(':focus').blur();
                })
            }
        }
    }
}])

'use strict';
angular.module('gmall.directives')
    .directive('filterForStuffs',['$rootScope','global','$q','$location','$section','Collection','Sections','Filter','FilterTags','Brands','Category',function($rootScope,global,$q,$location,$section,Collection,Sections,Filter,FilterTags,Brands,Category){
    return {
        scope:{
           query:'=',
            section:'=',
            admin:'@'

        },
        restrict:"E",
        templateUrl:"components/stuff/filterForStuffs.html",
        link:function($scope,element,attrs){
            console.log('??????????????')
            var $state=$rootScope.$state;
            var $stateParams=$rootScope.$stateParams;
            $scope.filterDirective={};
            $scope.filterDirective.query={section:'',brand:'',category:'',tags:[],artikul:($stateParams.searchStr)?$stateParams.searchStr.clearTag(20):'',brandTag:''};
            function getTagFromCategoriesList(tag,field){
                var category=$scope.filterDirective.category;
                if(category && category.filters && category.filters.length){
                    for (var ii= 0,ll=category.filters.length;ii<ll;ii++){
                        var filter=category.filters[ii];
                        if(filter && filter.tags && filter.tags.length){
                            for (var iii= 0,lll=filter.tags.length;iii<lll;iii++){
                                if(filter.tags[iii][field]==tag){
                                    return filter.tags[iii];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            function _setBrand(brandId,filed){
                if(brandId && $scope.filterDirective.brands){
                    $scope.filterDirective.brand =  $scope.filterDirective.brands.getObjectFromArray(filed,brandId);

                    //console.log($scope.filterDirective.brand)
                    if ($scope.filterDirective.brand){
                        $scope.filterDirective.query.brand=$scope.filterDirective.brand._id;
                        $location.search('brand',$scope.filterDirective.brand.url);
                        // установка коллекций
                        $scope.filterDirective.brandCollections=$scope.filterDirective.brand.tags;
                    } else {
                        $scope.filterDirective.brandCollections=[];
                        $location.search('brand',null);
                    }
                }else{
                    $scope.filterDirective.brandCollections=[];
                    $location.search('brand',null);
                }

            }
            function _setBrandTag(brandTagId,filed){
                // если установлена коллекция
                if (brandTagId && $scope.filterDirective.brandCollections){
                    // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                    var brandTag=$scope.filterDirective.brandCollections.getObjectFromArray(filed,brandTagId);
                    if(brandTag){
                        $scope.filterDirective.query.brandTag=brandTag._id;
                        $location.search('brandTag',brandTag.url);
                    } else {
                        $location.search('brandTag',null);
                    }
                } else {
                    $location.search('brandTag',null);
                }
            }
            function _setFilterTagsUrl(){
                if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                    var queryTag = $scope.filterDirective.filterTags.map(function(tag){return tag.url} ).join('+');
                    $location.search('queryTag', queryTag|| null);
                }else{
                    $location.search('queryTag', null);
                }

            }
            function _getQueryTag(){
                var arr =[];
                $scope.filterDirective.query.tags.forEach(function(tags){
                    if (tags.length){
                        tags.forEach(function(tag){
                            arr.push(tag)
                        })
                    }
                })
                return arr;
            }
            //для сео
            function _getFilterTag(){
                var arr =_getQueryTag();
                if(arr.length){
                    return arr.map(function(tag){return $scope.filterDirective.filterTags.getObjectFromArray('_id',tag).url}).join('+')
                }else{
                    return ;
                }
            }
            function _getBrand(id){
                if ($scope.filterDirective.query.brand){
                    $scope.filterDirective.brand = $scope.filterDirective.brands.getObjectFromArray('_id',$scope.filterDirective.query.brand);
                    return $scope.filterDirective.brand.url
                }

            }
            function _getBrandTag(){
                if ($scope.filterDirective.query.brandTag){
                    return $scope.filterDirective.brandCollections.getObjectFromArray('_id',$scope.filterDirective.query.brandTag).url;
                }

            }
            //*********************
            // определяем в каком состоянии мы находимся. в разделе, категории или всем каталоге
            // затем устанавливаем параметры  в строку запроса если они соответствую  нащей логике
            // затем вызываем функцию получения списка
            // затем начинаем слущать клик на любом из фильтров
            // в функции $scope.filterDirective.changeFilter
            // если клик на категории то перегружаем контроллер если на фильтре то делаем запрос на новый список
            //*****************************************
            $q.when()
                .then(function(){
                    return Sections.getSections()
                }) // полчение списка разделов
                .then(function(sections){
                    //**************************************** Г Р У П П А   ********************************************
                    var q=$q.defer();
                    // группы категорий
                    if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                        // получение раздела
                        if($stateParams.parentGroup){
                            $scope.parentSection=Sections.getParentSection($stateParams.parentGroup);
                        }else{
                            $scope.parentSection=Sections.getParentSection($stateParams.groupUrl);
                        }
                        // получение списка категорий
                        //$scope.filterDirective.sectionCategories -- для получения списка категорий в запросе
                        //**************************************** К А Т Е Г О Р И Я  ********************************************
                        // получение выбранной категории
                        // основной шаг. от него отталкиваемся. есть категория в запросе или нет
                        // для получения брендов и фильтров
                        // если есть
                        if($stateParams.categoryList=='allCategories' || $stateParams.categoryUrl!='category'){
                            $scope.filterDirective.categories=$scope.parentSection.categories;
                            $scope.filterDirective.sectionCategories=$scope.filterDirective.categories.map(function(el){return el._id})
                            if($stateParams.categoryUrl!='category'){
                                Category.get({id:$stateParams.categoryUrl},function(res){
                                    $scope.filterDirective.query.category=res._id;
                                    $scope.filterDirective.category=res;
                                    // устанавливаем список брендов
                                    if ($scope.filterDirective.category.brands && $scope.filterDirective.category.brands.length){
                                        $scope.filterDirective.brands=$scope.filterDirective.category.brands;
                                    }
                                    q.resolve();
                                })

                                //$scope.filterDirective.query.category=
                                   // $scope.filterDirective.categories.getObjectFromArray('url',$stateParams.categoryUrl)._id;
                            }else {
                                q.resolve();
                            }
                        }else{
                            //console.log($scope.parentSection)
                            $scope.filterDirective.sectionCategories=Sections.getEmbededCategories($scope.parentSection,[])
                                .map(function(el){return el._id})
                            //console.log($scope.filterDirective.sectionCategories)
                            // у раздела нет вложенных категорий соответственно нет товаров
                            if(!$scope.filterDirective.sectionCategories.length){
                                $scope.filterDirective.sectionCategories=[null];
                            }
                            q.resolve();
                        }
                    } else {
                        q.resolve();
                    }
                    return q.promise;
                })// категория
                .then(function(){
                    console.log($scope.filterDirective.brands)
                    var q=$q.defer();
                    if($stateParams.brand && !$scope.filterDirective.brands){
                        Brands.query(function(res){
                            res.shift();
                            $scope.filterDirective.brands=res;
                            q.resolve();
                        })
                    }else{
                        q.resolve();
                    }
                    return q.promise;
                })
                .then(function(){
                    //****************************************Б Р Е Н Д   ********************************************
                    //**************************************** К О Л Л Е К Ц И И  ********************************************
                    _setBrand($stateParams.brand,'url')
                    _setBrandTag($stateParams.brandTag,'url');
                    return;
                })// end brand && collections
                .then(function(){

                    var q=$q.defer();
                    //**************************************** Т Е Г И  ********************************************
                    // получение тегов если они есть в параметрах в массив
                    //для дальнейщей установки в визуальных фильтрах
                    if($stateParams.queryTag){
                        // анализ url на наличие тегов*************
                        var queryTags=$stateParams.queryTag.split('+');
                        // удаляем возможные дубли
                        queryTags= queryTags.filter(function(item, pos) {
                            return queryTags.indexOf(item) == pos;
                        })
                        if($scope.filterDirective.categories){
                            $scope.filterDirective.filterTags=queryTags.map(function(tag){
                                return getTagFromCategoriesList(tag,'url')
                            }).filter(function(tag){return tag})
                            q.resolve()
                        }else{
                            /*var o={query:{$or:[]}};
                            queryTags.forEach(function(tag){
                                o.query.$or.push({url:tag})
                            })

                            FilterTags.query(o,function(res){
                                res.shift();
                                $scope.filterDirective.filterTags=res;
                                q.resolve()
                            })*/
                            FilterTags.getTagsByUrl(queryTags,function(res){
                                $scope.filterDirective.filterTags=res;
                                q.resolve()
                            })
                        }
                    }else{
                        q.resolve()
                    }
                    return q.promise;
                }) // end tags
                .then(function(){

                    _setFilterTagsUrl()
                    return;
                })// установка урл тегов
                .then(function(){
                    //**************************************** Ф И Л Ь Т Р Ы ********************************************
                    // установка списка и значений
                    if ($scope.filterDirective.query.category && $scope.filterDirective.category){
                        if ($scope.filterDirective.category.filters && $scope.filterDirective.category.filters.length){
                            $scope.filterDirective.category.filters.forEach(function(item,i){
                                // устанавливаем значения в фильтрах
                                if ($scope.filterDirective.filterTags &&  $scope.filterDirective.filterTags.length){
                                    $scope.filterDirective.filterTags.forEach(function(tag){
                                        if (tag.filter==item._id){
                                            if (!$scope.filterDirective.query.tags[i]){$scope.filterDirective.query.tags[i]=[]};
                                            $scope.filterDirective.query.tags[i].push(tag._id);
                                        }
                                    })
                                }
                            })
                            $scope.filterDirective.filters=$scope.filterDirective.category.filters;
                        }
                    } else {
                        if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                            $scope.filterDirective.query.tags[0]=[];
                            $scope.filterDirective.filterTags.forEach(function(tag){$scope.filterDirective.query.tags[0].push(tag._id)})
                        }
                    }
                    return
                })// фильтры
                .then(function(){
                    $scope.filterDirective.getQuery()
                })
                .catch(function(err){
                    console.log(err)
                })





            $scope.filterDirective.getQuery=function(){
                // формирование строки запроса для выбора  товаров из БД
                var query=[];
                if (global.get('nostore').val){
                    query.push({tags:{$nin:[global.get('nostore').val._id]}})
                }
                //console.log($scope.filterDirective.query)
                var queryTag=[];
                for (var key in $scope.filterDirective.query){
                    if ($scope.filterDirective.query[key]){
                        if (key=="tags"){
                            var qu=[];
                            var queryTags=$scope.filterDirective.query[key].filter(function(){return true});
                            //console.log(queryTags);
                            $scope.filterDirective.query[key].forEach(function(obj,i){
                                //console.log(i)
                                var q=[];
                                if (obj && obj.length){
                                    obj.forEach(function(objT){
                                        q.push({tags:objT});
                                    })

                                    if (q.length>1){
                                        q={$or:q}
                                        qu.push(q)
                                    } else {
                                        q=q[0];
                                        qu.push(q)
                                    }
                                }
                            })
                            if (qu.length){
                                if(qu.length==1){
                                    query.push(qu[0]);
                                } else {
                                    query.push({$and:qu});
                                }
                            }
                        } else {
                            //console.log();
                            var obj={};
                            obj[key]=$scope.filterDirective.query[key];
                            query.push(obj);
                        }
                    } else{
                        if(key=='category' && $scope.filterDirective.sectionCategories && $scope.filterDirective.sectionCategories.length){
                            var obj={};
                            obj['category']={$in:$scope.filterDirective.sectionCategories}
                            query.push(obj);
                        }
                    }
                }
                if (query.length==1){
                    query=JSON.stringify(query[0]);
                } else if(query.length>1){
                    query =JSON.stringify({$and:query});
                } else {
                    query={};
                }
                // передача данных в директиву
                $scope.query=query;
                return;
                //********* start titles
                var filterTag=_getfilterTag();
                var brandTag=_getBrandTag();
                var brand=_getBrand();
                var queryTagsForSEO='';
                if (filterTag) {
                    queryTagsForSEO+='queryTag='+queryTag;
                }
                if (brand) {
                    if(queryTagsForSEO){queryTagsForSEO+='&';}
                    queryTagsForSEO+='brand='+brand;
                }
                if (brandTag) {
                    if(queryTagsForSEO){queryTagsForSEO+='&';}
                    queryTagsForSEO+='brandTag='+brandTag;
                }
                console.log(queryTagsForSEO)
                $rootScope.$broadcast('$allDataLoaded',{state:$state.current.name,data:queryTagsForSEO});

            }
            $scope.filterDirective.changeFilter=function(reloadController){
                if (reloadController){
                    if ($scope.filterDirective.category && $scope.filterDirective.query.category==$scope.filterDirective.category._id){return}
                    if($scope.filterDirective.query.category){
                        var categoryUrl=$scope.filterDirective.categories.getObjectFromArray('_id',$scope.filterDirective.query.category);
                        categoryUrl=(categoryUrl)?categoryUrl.url:'category';
                        $location.search('categoryList', null);
                    }else{
                        var categoryUrl='category';
                        $location.search('categoryList', 'allCategories');
                    }
                    $state.current.reloadOnSearch = true;
                    var o={groupUrl:$stateParams.groupUrl,categoryUrl:categoryUrl,queryTag:undefined,brand:undefined,brandTag:undefined};
                    $state.go($state.current.name,o,{reload:true});
                    $state.current.reloadOnSearch = false;
                }else{
                    $scope.filterDirective.query.artikul='';
                    _setBrand($scope.filterDirective.query.brand,'_id');
                    _setBrandTag($scope.filterDirective.query.brandTag,'_id');
                    $scope.filterDirective.filterTags=_getQueryTag().map(function(tag){
                        return getTagFromCategoriesList(tag,'_id')
                    } ).filter(function(tag){return tag})
                    _setFilterTagsUrl()
                    $scope.filterDirective.getQuery();
                }
            }
            $scope.filterDirective.clearFilter=function(){
                console.log('clear filetrs')
                $scope.filterDirective.query.tags=[];
                $scope.filterDirective.changeFilter();
            }
        }
    }
}])
    .directive('filterForStuffsClinic',['$rootScope','global','$q','$location','$section','Collection','Sections','Filter','FilterTags','Brands','Category',function($rootScope,global,$q,$location,$section,Collection,Sections,Filter,FilterTags,Brands,Category){
        return {
            scope:{
                query:'=',
                section:'=',
                admin:'@'

            },
            restrict:"E",
            templateUrl:"views/clinic/partials/stuff/filterForStuffs.html",
            link:function($scope,element,attrs){
                var $state=$rootScope.$state;
                var $stateParams=$rootScope.$stateParams;
                $scope.filterDirective={};
                $scope.filterDirective.query={section:'',brand:'',category:'',tags:[],artikul:($stateParams.searchStr)?$stateParams.searchStr.clearTag(20):'',brandTag:''};
                function getTagFromCategoriesList(tag,field){
                    var category=$scope.filterDirective.category;
                    if(category && category.filters && category.filters.length){
                        for (var ii= 0,ll=category.filters.length;ii<ll;ii++){
                            var filter=category.filters[ii];
                            if(filter && filter.tags && filter.tags.length){
                                for (var iii= 0,lll=filter.tags.length;iii<lll;iii++){
                                    if(filter.tags[iii][field]==tag){
                                        return filter.tags[iii];
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                function _setBrand(brandId,filed){
                    if(brandId && $scope.filterDirective.brands){
                        $scope.filterDirective.brand =  $scope.filterDirective.brands.getObjectFromArray(filed,brandId);

                        //console.log($scope.filterDirective.brand)
                        if ($scope.filterDirective.brand){
                            $scope.filterDirective.query.brand=$scope.filterDirective.brand._id;
                            $location.search('brand',$scope.filterDirective.brand.url);
                            // установка коллекций
                            $scope.filterDirective.brandCollections=$scope.filterDirective.brand.tags;
                        } else {
                            $scope.filterDirective.brandCollections=[];
                            $location.search('brand',null);
                        }
                    }else{
                        $scope.filterDirective.brandCollections=[];
                        $location.search('brand',null);
                    }

                }
                function _setBrandTag(brandTagId,filed){
                    // если установлена коллекция
                    if (brandTagId && $scope.filterDirective.brandCollections){
                        // если есть tag коллекции в стороке запроса то устанавливаем его в филоьтрах
                        var brandTag=$scope.filterDirective.brandCollections.getObjectFromArray(filed,brandTagId);
                        if(brandTag){
                            $scope.filterDirective.query.brandTag=brandTag._id;
                            $location.search('brandTag',brandTag.url);
                        } else {
                            $location.search('brandTag',null);
                        }
                    } else {
                        $location.search('brandTag',null);
                    }
                }
                function _setFilterTagsUrl(){
                    if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                        var queryTag = $scope.filterDirective.filterTags.map(function(tag){return tag.url} ).join('+');
                        $location.search('queryTag', queryTag|| null);
                    }else{
                        $location.search('queryTag', null);
                    }

                }
                function _getQueryTag(){
                    var arr =[];
                    $scope.filterDirective.query.tags.forEach(function(tags){
                        if (tags.length){
                            tags.forEach(function(tag){
                                arr.push(tag)
                            })
                        }
                    })
                    return arr;
                }
                //для сео
                function _getFilterTag(){
                    var arr =_getQueryTag();
                    if(arr.length){
                        return arr.map(function(tag){return $scope.filterDirective.filterTags.getObjectFromArray('_id',tag).url}).join('+')
                    }else{
                        return ;
                    }
                }
                function _getBrand(id){
                    if ($scope.filterDirective.query.brand){
                        $scope.filterDirective.brand = $scope.filterDirective.brands.getObjectFromArray('_id',$scope.filterDirective.query.brand);
                        return $scope.filterDirective.brand.url
                    }

                }
                function _getBrandTag(){
                    if ($scope.filterDirective.query.brandTag){
                        return $scope.filterDirective.brandCollections.getObjectFromArray('_id',$scope.filterDirective.query.brandTag).url;
                    }

                }
                //*********************
                // определяем в каком состоянии мы находимся. в разделе, категории или всем каталоге
                // затем устанавливаем параметры  в строку запроса если они соответствую  нащей логике
                // затем вызываем функцию получения списка
                // затем начинаем слущать клик на любом из фильтров
                // в функции $scope.filterDirective.changeFilter
                // если клик на категории то перегружаем контроллер если на фильтре то делаем запрос на новый список
                //*****************************************
                $q.when()
                    .then(function(){
                        return Sections.getSections()
                    }) // полчение списка разделов
                    .then(function(sections){
                        //**************************************** Г Р У П П А   ********************************************
                        var q=$q.defer();
                        // группы категорий
                        if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                            // получение раздела
                            if($stateParams.parentGroup){
                                $scope.parentSection=Sections.getParentSection($stateParams.parentGroup);
                            }else{
                                $scope.parentSection=Sections.getParentSection($stateParams.groupUrl);
                            }
                            // получение списка категорий
                            //$scope.filterDirective.sectionCategories -- для получения списка категорий в запросе
                            //**************************************** К А Т Е Г О Р И Я  ********************************************
                            // получение выбранной категории
                            // основной шаг. от него отталкиваемся. есть категория в запросе или нет
                            // для получения брендов и фильтров
                            // если есть
                            if($stateParams.categoryList=='allCategories' || $stateParams.categoryUrl!='category'){
                                $scope.filterDirective.categories=$scope.parentSection.categories;
                                $scope.filterDirective.sectionCategories=$scope.filterDirective.categories.map(function(el){return el._id})
                                if($stateParams.categoryUrl!='category'){
                                    Category.get({id:$stateParams.categoryUrl},function(res){
                                        $scope.filterDirective.query.category=res._id;
                                        $scope.filterDirective.category=res;
                                        // устанавливаем список брендов
                                        if ($scope.filterDirective.category.brands && $scope.filterDirective.category.brands.length){
                                            $scope.filterDirective.brands=$scope.filterDirective.category.brands;
                                        }
                                        console.log($scope.filterDirective.brands)
                                        q.resolve();
                                    })

                                    //$scope.filterDirective.query.category=
                                    // $scope.filterDirective.categories.getObjectFromArray('url',$stateParams.categoryUrl)._id;
                                }else {
                                    q.resolve();
                                }
                            }else{
                                //console.log($scope.parentSection)
                                $scope.filterDirective.sectionCategories=Sections.getEmbededCategories($scope.parentSection,[])
                                    .map(function(el){return el._id})
                                //console.log($scope.filterDirective.sectionCategories)
                                // у раздела нет вложенных категорий соответственно нет товаров
                                if(!$scope.filterDirective.sectionCategories.length){
                                    $scope.filterDirective.sectionCategories=[null];
                                }
                                q.resolve();
                            }
                        } else {
                            q.resolve();
                        }
                        return q.promise;
                    })// категория
                    /*.then(function(){

                    })*/
                    .then(function(){
                        var q=$q.defer();
                        if($stateParams.brand && !$scope.filterDirective.brands){
                            Brands.query(function(res){
                                res.shift();
                                $scope.filterDirective.brands=res;
                                q.resolve();
                            })
                        }else{
                            q.resolve();
                        }
                        return q.promise;
                    })
                    .then(function(){
                        //****************************************Б Р Е Н Д   ********************************************
                        //**************************************** К О Л Л Е К Ц И И  ********************************************
                        _setBrand($stateParams.brand,'url')
                        _setBrandTag($stateParams.brandTag,'url');
                        return;
                    })// end brand && collections
                    .then(function(){

                        var q=$q.defer();
                        //**************************************** Т Е Г И  ********************************************
                        // получение тегов если они есть в параметрах в массив
                        //для дальнейщей установки в визуальных фильтрах
                        if($stateParams.queryTag){
                            // анализ url на наличие тегов*************
                            var queryTags=$stateParams.queryTag.split('+');
                            // удаляем возможные дубли
                            queryTags= queryTags.filter(function(item, pos) {
                                return queryTags.indexOf(item) == pos;
                            })
                            if($scope.filterDirective.categories){
                                $scope.filterDirective.filterTags=queryTags.map(function(tag){
                                    return getTagFromCategoriesList(tag,'url')
                                }).filter(function(tag){return tag})
                                q.resolve()
                            }else{
                                /*var o={query:{$or:[]}};
                                 queryTags.forEach(function(tag){
                                 o.query.$or.push({url:tag})
                                 })

                                 FilterTags.query(o,function(res){
                                 res.shift();
                                 $scope.filterDirective.filterTags=res;
                                 q.resolve()
                                 })*/
                                FilterTags.getTagsByUrl(queryTags,function(res){
                                    $scope.filterDirective.filterTags=res;
                                    q.resolve()
                                })
                            }
                        }else{
                            q.resolve()
                        }
                        return q.promise;
                    }) // end tags
                    .then(function(){

                        _setFilterTagsUrl()
                        return;
                    })// установка урл тегов
                    .then(function(){
                        //**************************************** Ф И Л Ь Т Р Ы ********************************************
                        // установка списка и значений
                        if ($scope.filterDirective.query.category && $scope.filterDirective.category){
                            if ($scope.filterDirective.category.filters && $scope.filterDirective.category.filters.length){
                                $scope.filterDirective.category.filters.forEach(function(item,i){
                                    // устанавливаем значения в фильтрах
                                    if ($scope.filterDirective.filterTags &&  $scope.filterDirective.filterTags.length){
                                        $scope.filterDirective.filterTags.forEach(function(tag){
                                            if (tag.filter==item._id){
                                                if (!$scope.filterDirective.query.tags[i]){$scope.filterDirective.query.tags[i]=[]};
                                                $scope.filterDirective.query.tags[i].push(tag._id);
                                            }
                                        })
                                    }
                                })
                                $scope.filterDirective.filters=$scope.filterDirective.category.filters;
                            }
                        } else {
                            if ($scope.filterDirective.filterTags && $scope.filterDirective.filterTags.length){
                                $scope.filterDirective.query.tags[0]=[];
                                $scope.filterDirective.filterTags.forEach(function(tag){$scope.filterDirective.query.tags[0].push(tag._id)})
                            }
                        }
                        return
                    })// фильтры
                    .then(function(){
                        $scope.filterDirective.getQuery()
                    })
                    .catch(function(err){
                        console.log(err)
                    })





                $scope.filterDirective.getQuery=function(){
                    // формирование строки запроса для выбора  товаров из БД
                    var query=[];
                    if (global.get('nostore').val){
                        query.push({tags:{$nin:[global.get('nostore').val._id]}})
                    }
                    //console.log($scope.filterDirective.query)
                    var queryTag=[];
                    for (var key in $scope.filterDirective.query){
                        if ($scope.filterDirective.query[key]){
                            if (key=="tags"){
                                var qu=[];
                                var queryTags=$scope.filterDirective.query[key].filter(function(){return true});
                                //console.log(queryTags);
                                $scope.filterDirective.query[key].forEach(function(obj,i){
                                    //console.log(i)
                                    var q=[];
                                    if (obj && obj.length){
                                        obj.forEach(function(objT){
                                            q.push({tags:objT});
                                        })

                                        if (q.length>1){
                                            q={$or:q}
                                            qu.push(q)
                                        } else {
                                            q=q[0];
                                            qu.push(q)
                                        }
                                    }
                                })
                                if (qu.length){
                                    if(qu.length==1){
                                        query.push(qu[0]);
                                    } else {
                                        query.push({$and:qu});
                                    }
                                }
                            } else {
                                //console.log();
                                var obj={};
                                obj[key]=$scope.filterDirective.query[key];
                                query.push(obj);
                            }
                        } else{
                            if(key=='category' && $scope.filterDirective.sectionCategories && $scope.filterDirective.sectionCategories.length){
                                var obj={};
                                obj['category']={$in:$scope.filterDirective.sectionCategories}
                                query.push(obj);
                            }
                        }
                    }
                    if (query.length==1){
                        query=JSON.stringify(query[0]);
                    } else if(query.length>1){
                        query =JSON.stringify({$and:query});
                    } else {
                        query={};
                    }
                    // передача данных в директиву
                    $scope.query=query;
                    return;
                    //********* start titles
                    var filterTag=_getfilterTag();
                    var brandTag=_getBrandTag();
                    var brand=_getBrand();
                    var queryTagsForSEO='';
                    if (filterTag) {
                        queryTagsForSEO+='queryTag='+queryTag;
                    }
                    if (brand) {
                        if(queryTagsForSEO){queryTagsForSEO+='&';}
                        queryTagsForSEO+='brand='+brand;
                    }
                    if (brandTag) {
                        if(queryTagsForSEO){queryTagsForSEO+='&';}
                        queryTagsForSEO+='brandTag='+brandTag;
                    }
                    console.log(queryTagsForSEO)
                    $rootScope.$broadcast('$allDataLoaded',{state:$state.current.name,data:queryTagsForSEO});

                }
                $scope.filterDirective.changeFilter=function(reloadController){
                    if (reloadController){
                        if ($scope.filterDirective.category && $scope.filterDirective.query.category==$scope.filterDirective.category._id){return}
                        if($scope.filterDirective.query.category){
                            var categoryUrl=$scope.filterDirective.categories.getObjectFromArray('_id',$scope.filterDirective.query.category);
                            categoryUrl=(categoryUrl)?categoryUrl.url:'category';
                            $location.search('categoryList', null);
                        }else{
                            var categoryUrl='category';
                            $location.search('categoryList', 'allCategories');
                        }
                        $state.current.reloadOnSearch = true;
                        var o={groupUrl:$stateParams.groupUrl,categoryUrl:categoryUrl,queryTag:undefined,brand:undefined,brandTag:undefined};
                        $state.go($state.current.name,o,{reload:true});
                        $state.current.reloadOnSearch = false;
                    }else{
                        $scope.filterDirective.query.artikul='';
                        _setBrand($scope.filterDirective.query.brand,'_id');
                        _setBrandTag($scope.filterDirective.query.brandTag,'_id');
                        $scope.filterDirective.filterTags=_getQueryTag().map(function(tag){
                            return getTagFromCategoriesList(tag,'_id')
                        } ).filter(function(tag){return tag})
                        _setFilterTagsUrl()
                        $scope.filterDirective.getQuery();
                    }
                }
                $scope.filterDirective.clearFilter=function(){
                    console.log('clear filetrs')
                    $scope.filterDirective.query.tags=[];
                    $scope.filterDirective.changeFilter();
                }
            }
        }
    }])
'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('menuSections',menuSectionHorizontal)
        .directive('menuSectionsPug',menuSectionHorizontalPug)
        .directive('menuBrandsPug',menuBrandsHorizontalPug)
        .directive('menuSectionsVirtical',menuSectionVirtical)
        .directive('menuSectionsVirticalPug',menuSectionVirticalPug)
        .directive('menuBrandsVirticalPug',menuBrandsVirticalPug)
        .directive('dropdownOnHover',dropdownOnHover)

        .directive('slideMenuAfterScroll',slideMenuAfterScroll)

        .directive('setFonAfterStartScroll', ['$timeout','$state','$rootScope','global',function ($timeout,$state,$rootScope,global) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    var mainContentDiv= $('#mainContentDiv');
                    var templ=global.get('store').val.template;
                    var h1,h2;
                    $timeout(function () {
                        h1= $('#menu1-section').outerHeight();
                        h2= $('#menu2-section').outerHeight();
                        //h2&&(h1+=h2)
                        if(h2){h1+=h2}
                        if(global.get('store').val.template.menu1.hideMenuIfNotHome){
                            h1=h2;
                        }
                        h2=h1;
                        //console.log('h2',h1,h2)
                    })



                    //element.css('margin-top',-h1)

                    $(element).hover(function() {
                        $rootScope.$emit('menuHoverIn')
                        //$(element).addClass('menuColor')
                    },function() {
                        $rootScope.$emit('menuHoverOut')
                        //$(element).removeClass('menuColor')
                    })

                    $rootScope.$on('menuHoverIn',function(){
                        //console.log('menuHoverIn',console.log(element))
                        if(global.get('store').val.template.menu1.BGColorOnHover){
                            $(element).addClass('menuColor')
                        }

                    })
                    $rootScope.$on('menuHoverOut',function(){
                        if(global.get('store').val.template.menu1.BGColorOnHover && !global.get('store').val.template.menu1.background){
                            if(window.pageYOffset<5 && $rootScope.$state.current.name=='home'){
                                $(element).removeClass('menuColor')
                            }
                        }
                    })



                    //element.css('margin-top',-h1)



                    $rootScope.$on('$stateChangeStart', function(event, to){
                        //console.log(to.name)
                        if(to.name!='home'){
                            //console.log(to.name)
                            if(!templ.menu1.marginOther){
                                $(element).addClass('menuColor')
                            }
                            if(!templ.margin){
                                //console.log('templ.margin from setFonAfterStartScroll',templ.margin)
                                $timeout(function () {
                                    //console.log(templ.menu1)
                                    if(templ.menu1.position!='left' && templ.menu1.position!='right' && !templ.menu1.marginOther && templ.menu1.fixed){
                                        //console.log('set margin-top',h1)
                                        mainContentDiv.css('margin-top',h1)
                                    }
                                })
                            }
                        }else{
                            if(!global.get('store').val.template.menu1.background){
                                if(global.get('store').val.template.menu1.BGColorOnHover){
                                    if(window.pageYOffset<5){
                                        //console.log(global.get('store').val.template.menu1)
                                        $(element).removeClass('menuColor')
                                    }
                                }else{
                                    $(element).removeClass('menuColor')
                                }
                            }

                            /*if(window.pageYOffset<5 && !global.get('store').val.template.menu1.background){
                             //console.log(global.get('store').val.template.menu1)
                             $(element).removeClass('menuColor')
                             }*/

                            if(!templ.margin){
                                if(templ.menu1.position!='left' && templ.menu1.position!='right'){
                                    mainContentDiv.css('margin-top',0)
                                }
                            }
                        }
                    })


                    //console.log('link')
                    var is=false;
                    //console.log("attr['setFonAfterStartScroll']",attr['setFonAfterStartScroll'])
                    //console.log("global.get('store').val.template.menu1.BGColorOnHover",global.get('store').val.template.menu1.BGColorOnHover)
                    if(attr['setFonAfterStartScroll']){
                        //console.log(attr['setFonAfterStartScroll'])
                        $(element).addClass('menuColor')
                    }else{
                        //console.log('!!!!!!!!!!!!!!!!!??????????')
                        if(global.get('store').val.template.menu1.BGColorOnHover){
                            $(window).scroll(function(){
                                if(window.pageYOffset>5){
                                    if(!is){
                                        is=true;
                                        $(element).addClass('menuColor')
                                    }
                                }else{
                                    if($rootScope.$state.current.name=='home'){
                                        is=false
                                        $(element).removeClass('menuColor')
                                    }
                                }
                            })
                        }

                    }

                }
            }
        }])
        .directive('setMenuColorClass', ['$rootScope',function ($rootScope) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    console.log(element)
                    $rootScope.$on('$stateChangeStart', function(event, to){
                        if(to.name!='home'){
                            $(element).addClass('menuColor')
                        }else{

                            if(window.pageYOffset<5){
                                $(element).removeClass('menuColor')
                            }
                        }
                    })

                    $rootScope.$on('menuHoverIn',function(){
                        console.log('menuHoverIn',console.log(element))
                        $(element).addClass('menuColor')
                    })
                    $rootScope.$on('menuHoverOut',function(){
                        if($rootScope.$state.current.name=='home'){
                            if(window.pageYOffset<5){
                                $(element).removeClass('menuColor')
                            }
                        }
                    })
                    $(window).scroll(function(){
                        if($rootScope.$state.current.name=='home'){
                            if(window.pageYOffset>5){
                                $(element).addClass('menuColor')
                            }else{
                                $(element).removeClass('menuColor')
                            }
                        }

                    })
                }
            }
        }])
        .directive('marginMainContent22',function(global,$timeout){
            return {
                restrict:'A',
                link:function(scope,element,attrs){
                    var mainContentDiv= $('#mainContentDiv');
                    var templ=global.get('store').val.template;
                    //console.log(templ.menu1,templ.menu2)
                    //if(templ.margin && templ.menu1.is && templ.menu1.fixed && templ.menu1.position=='top'){

                    $timeout(function () {
                        if(templ.margin && templ.menu1.position!='left' && templ.menu1.position!='right'){
                            // console.log('templ.margin from setFonAfterStartScroll',templ.margin)
                            $timeout(function(){
                                var m1=$('#menu1-section')
                                var h1= m1.height();

                                var m2=$('#menu2-section')
                                if(m2){
                                    var h2= m2.height();
                                }
                                h2&&(h1+=h2)
                                //console.log(m1,m2)
                                mainContentDiv.css('margin-top',h1)
                                //element.css('margin-top',h1)
                            })
                        }
                    },100)



                }
            }
        })

        // минимальная высоты страницы что бы футер был по нижнему краю
        .directive('marginMainContent',function($rootScope,$timeout,global){
            return {
                restrict:'A',
                link:function(scope,element,attrs){
                    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
                        $timeout(function () {
                            //console.log(global.get('store').val.template.menu1)
                            if(!global.get('store').val.template.menu1.fixed){return}
                            //console.log('go go')
                            var h =$(document.body).find('#firstDiv').height();
                            var vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                            var delta=vh-h
                            //console.log(h,vh,delta)
                            //console.log()
                            if(delta>30){
                                //console.log($(element[0].querySelector('#mainContentDiv')).css('margin-top'))
                                var mt = $(element[0].querySelector('#mainContentDiv')).css('margin-top');
                                if(mt){
                                    mt=parseInt(mt, 10)
                                }else{
                                    mt=0;
                                }
                                var elH=element.height()
                                /*console.log(mt,elH+delta-mt)
                                console.log(elH,delta,mt)
*/

                                 //console.log(h,vh,delta,elH+delta)
                                //element.css('min-height',elH+delta-mt)
                                element.css('min-height',elH+delta)
                            }
                        },200)

                    })
                }
            }
        })
        .directive('footer22',function($timeout,$rootScope){
            return {
                restrict :'E',
                link:function(scope,element){
                    $rootScope.$on('$stateChangeStart', function(event, to, toParams, fromState, fromParams){
                        //console.log('$stateChangeStart')
                        element.css('position','static')
                    })
                    $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
                        $timeout(function () {
                           /*var h =document.body.clientHeight;
                           var vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
                           console.log(h,vh)
                            if(vh-h>20){
                                element.css('position','fixed')
                                element.css('bottom',0)
                            }*/
                        })

                    })
                }
            }
        })

    function menuSectionHorizontal(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenu,
            controllerAs: '$ctrl',
            templateUrl: 'components/menu/menuSectionHorizontel.html',
        }
    }
    function menuSectionHorizontalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenu,
            controllerAs: '$ctrl',

        }
    }
    function menuBrandsHorizontalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuBrands,
            controllerAs: '$ctrl',

        }
    }
    function menuSectionVirtical(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuV,
            controllerAs: '$ctrl',
            templateUrl: 'components/menu/menuSectionVertical.html',
        }
    }
    function menuSectionVirticalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuV,
            controllerAs: '$ctrl',
            //templateUrl: 'components/menu/menuSectionVertical.html',
        }
    }
    function menuBrandsVirticalPug(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            controller: directiveMenuVBrands,
            controllerAs: '$ctrl',
        }
    }
    function dropdownOnHover(){
        return {
            scope: {},
            restrict:"AE",
            bindToController: true,
            link: directiveDropdownOnHover,
            controllerAs: '$ctrl',
        }
    }
    directiveMenu.$inject=['Sections','$state','$q','global','$rootScope','$timeout'];
    function directiveMenu(Sections,$state,$q,global,$rootScope,$timeout){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.dropDownCatalog=global.get('store').val.template.dropDownCatalog;
        self.global=global;
        var menuLis;
        var sectionElements=[];
        var innerDivs=[];
        var innerDivsBrand=[];
        /*self.getSectionUrlParams=getSectionUrlParams;
        self.getCategoryUrlParams=getCategoryUrlParams;*/
        activate();
        //*********************************************************
        function activate(){
            //console.log('menu')
            $q.when()
                .then(function(){
                    return Sections.getSections();
                } )
                .then(function(sections){
                    global.get('brands').val.forEach(function(sec,i){
                        var el=$('#s'+sec._id );
                        var innerDiv=$(el).find('#innerDivBrand'+sec._id );
                        innerDivsBrand.push(innerDiv)
                    })


                    self.sections=sections.filter(function(el){return !el.parent && el.level===0});
                    setTimeout(function(){
                        // для горизонтального меню
                        var w=$(window ).width()
                        self.sections.forEach(function(sec,i){
                            var el=$('#s'+sec._id );
                            var elJS = document.getElementById('s'+sec._id);
                            document.getElementById

                            //if(sec.categories.length<2 && !sec.child.length){return}
                            var sec_element_offset=el.offset();
                            /*console.log(sec_element_offset)
                            console.log(elJS,elJS.getBoundingClientRect())
                            console.log(document.body.getBoundingClientRect)*/
                            if(sec_element_offset){
                                var offsetLeft;
                                if(elJS && elJS.getBoundingClientRect){
                                    //console.log('pageXOffset',pageXOffset)
                                    offsetLeft = pageXOffset + elJS.getBoundingClientRect().x
                                    //console.log('offsetLeft getBoundingClientRect',offsetLeft,sec_element_offset.left)
                                }
                                if(!offsetLeft &&  elJS && elJS.DOMRect){
                                    offsetLeft = pageXOffset + elJS.DOMRect.left
                                    console.log('offsetLeft DOMRect',offsetLeft,sec_element_offset.left)
                                }
                                if(!offsetLeft){
                                    offsetLeft=sec_element_offset.left
                                }
                                var innerDiv=$('#innerDiv'+sec._id );
                                var container=innerDiv.find('div');
                                var sub_menu=container.find('.sub-menu')

                                el.innerDiv=innerDiv;
                                //innerDivs.push(innerDiv)
                                innerDiv.css('left','-'+offsetLeft+'px')
                                bindHoverLi(el,i);
                                sectionElements.push(el)
                            }
                        })
                        $('.innerDiv' ).width(w)
                    },300);
                } )
                .catch(function(err){
                    console.log(err)
                })
        }
        $rootScope.$on('$stateChangeStart', function (ev) {
            //console.log('ddd in directiveMenu')
            for(var i=0,l=innerDivs.length;i<l;i++){
                if(innerDivs[i][0]){
                    if(innerDivs[i].is(':hover')){
                        //console.log('do it')
                        sectionElements[i].unbind()
                        innerDivs[i].slideUp(function(){
                            $timeout(function(){
                                bindHoverLi(sectionElements[i],i);
                            },700)
                        })
                        break;
                    }
                }

            }
            return;
        })
        function closeRest() {
            for(var i=0,l=innerDivsBrand.length;i<l;i++){
                innerDivsBrand[i].hide();
            }
        }
        function bindHoverLi(li,ii){
            if(self.clickMenu){
                //console.log(bindHoverLi)
                li.click(function(e) {
                    if($(e.target).hasClass('sibsection')){
                        li.find('.section-in-section').each(function (i,li2) {
                            $(li2).hover(function() {
                                //li.innerDiv.slideDown()
                                if(self.dropDownCatalog==1){
                                    $(li2).find('.sub-menu').stop(true, false, true).slideDown('slow');
                                }else if(self.dropDownCatalog==2){
                                    $(li2).find('.sub-menu').stop(true, false, true).slideDown('fast');
                                }else{
                                    $(li2).find('.sub-menu').stop(true, false, true).show();
                                }

                            },function() {
                                if(self.dropDownCatalog==1){
                                    $(li2).find('.sub-menu').stop(true, false, true).hide();
                                }else if(self.dropDownCatalog==2){
                                    $(li2).find('.sub-menu').stop(true, false, true).hide();
                                }else{
                                    $(li2).find('.sub-menu').stop(true, false, true).hide();
                                }
                            })
                        })
                    }else{
                        closeRest();
                        for(var i=0,l=sectionElements.length;i<l;i++){
                            if(sectionElements[i][0].id==li[0].id){
                                if(self.dropDownCatalog==1){
                                    li.innerDiv.stop(true, false, true).slideToggle('slow');
                                }else if(self.dropDownCatalog==2){
                                    li.innerDiv.stop(true, false, true).slideToggle('fast');
                                }else{
                                    li.innerDiv.stop(true, false, true).toggle();
                                }

                            }else{
                                if(self.dropDownCatalog==1){
                                    sectionElements[i].innerDiv.slideUp('slow');
                                }else if(self.dropDownCatalog==2){
                                    sectionElements[i].innerDiv.slideUp('fast');
                                }else{
                                    sectionElements[i].innerDiv.hide();
                                }


                            }
                        }
                    }

                });
            }else{
                li.hover(function() {
                    //li.innerDiv.slideDown()
                    if(self.dropDownCatalog==1){
                        li.innerDiv.stop(true, false, true).slideDown('slow');
                    }else if(self.dropDownCatalog==2){
                        li.innerDiv.stop(true, false, true).slideDown('fast');
                    }else{
                        li.innerDiv.stop(true, false, true).show();
                    }

                },function() {
                    if(self.dropDownCatalog==1){
                        li.innerDiv.stop(true, false, true).slideUp('slow');
                    }else if(self.dropDownCatalog==2){
                        li.innerDiv.stop(true, false, true).slideUp('fast');
                    }else{
                        li.innerDiv.stop(true, false, true).hide();
                    }

                    //li.innerDiv.slideUp();
                })
                li.find('.section-in-section').each(function (i,li2) {
                    $(li2).hover(function() {
                        //li.innerDiv.slideDown()
                        if(self.dropDownCatalog==1){
                            $(li2).find('.sub-menu').stop(true, false, true).slideDown('slow');
                        }else if(self.dropDownCatalog==2){
                            $(li2).find('.sub-menu').stop(true, false, true).slideDown('fast');
                        }else{
                            $(li2).find('.sub-menu').stop(true, false, true).show();
                        }

                    },function() {
                        if(self.dropDownCatalog==1){
                            $(li2).find('.sub-menu').stop(true, false, true).hide();
                        }else if(self.dropDownCatalog==2){
                            $(li2).find('.sub-menu').stop(true, false, true).hide();
                        }else{
                            $(li2).find('.sub-menu').stop(true, false, true).hide();
                        }
                    })
                })

            }

        }

    }
    directiveMenuV.$inject=['Sections','$state','$q','global','$rootScope','$element'];
    function directiveMenuV(Sections,$state,$q,global,$rootScope,$element){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.global=global;
        var sectionElements=[],innerDivs=[];
        var menuLis;
        activate();
        //*********************************************************
        function activate(){
            $q.when()
                .then(function(){
                    return Sections.getSections();
                } )
                .then(function(sections){
                    //console.log(sections)
                    self.sections=sections.filter(function(el){return !el.parent && el.level===0 && !el.hideSection});
                    setTimeout(function(){
                        /*menuLis=$('.myMenuV .mainli');
                        bindHover(menuLis);*/
                        self.sections.forEach(function(sec,i){
                            var el=$('#s'+sec._id )
                            var innerDiv=el.children('div')
                            innerDivs.push(innerDiv)
                            //console.log(el)
                            bindHoverLi(el,i);
                            sectionElements.push(el);
                        })

                        var innerUl = $element.find('.category-in-section');
                        $(innerUl).each(function (i,section) {
                            var ul = $(section).find('ul');
                            //console.log('slideToggle',ul)
                            $(ul).slideToggle()

                            $(section).click(function(e) {
                                console.log('section',section)
                                //e.stopPropagation()
                                $(ul).stop(true, false, true).slideToggle(300);
                            });
                        })


                    },100);
                } )
                .catch(function(err){
                    console.log(err)
                })
        }
        function bindHoverLi(li,ii){
            if(!self.sections[ii] || !self.sections[ii].openCatalog){
                $(innerDivs[ii]).slideToggle();
            }
            console.log(li,ii,self.clickMenu)
            if(self.clickMenu){
                li.click(function(e) {

                    for(var i=0,l=innerDivs.length;i<l;i++){
                        if(i==ii){
                            $(innerDivs[i]).stop(true, false, true).slideToggle(300);
                        }else{
                            //innerDivs[i].hide();
                        }

                    }
                });
            }else{
                li.hover(function() {
                    $(innerDivs[ii]).stop(true, false, true).slideToggle(300);
                });
            }
        }
    }

    directiveMenuBrands.$inject=['Sections','$state','$q','global','$rootScope','$timeout','$element'];
    function directiveMenuBrands(Sections,$state,$q,global,$rootScope,$timeout,$element){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.global=global;
        var menuLis;
        var sectionElements=[];
        var innerDivs=[];
        var innerDivsSection=[];
        activate();
        //*********************************************************
        function activate(){
            $q.when()
                .then(function(){
                    return Sections.getSections();
                } )
                .then(function(sections){

                    sections.forEach(function(sec,i){
                        var el=$('#s'+sec._id );
                        var innerDiv=$(el).find('#innerDiv'+sec._id );
                        innerDivsSection.push(innerDiv)
                    })


                    self.brands=(global.get('brands').val)?global.get('brands').val:[];
                    setTimeout(function(){
                        // для горизонтального меню
                        var w=$(window ).width()
                        //console.log(w)
                        var index=0;
                        self.brands.forEach(function(sec,i){
                            if(!sec.display){return}
                            var el=$('#s'+sec._id );
                            var sec_element_offset=el.offset();
                            //console.log(sec_element_offset)
                            if(sec_element_offset){
                                var offsetLeft=sec_element_offset.left
                                var innerDiv=$element.find('#innerDivBrand'+sec._id);
                                el.innerDiv=innerDiv;
                                //innerDivs.push(innerDiv)
                                innerDiv.css('left','-'+offsetLeft+'px')
                                bindHoverLi(el,index);
                                sectionElements.push(el)
                                index++
                            }
                        })
                        $('.innerDiv' ).width(w)
                    },100);
                } )
                .catch(function(err){
                    console.log(err)
                })
        }
        $rootScope.$on('$stateChangeStart', function (ev) {
             //console.log('ddd in brands')
            for(var i=0,l=innerDivs.length;i<l;i++){
                if(innerDivs[i][0]){
                    if(innerDivs[i].is(':hover')){
                        //console.log('do it')
                        sectionElements[i].unbind()
                        innerDivs[i].slideUp(function(){
                            $timeout(function(){
                                bindHoverLi(sectionElements[i],i);
                            },700)
                        })
                        break;
                    }
                }

            }
            return;
        })
        function closeRest() {
            for(var i=0,l=innerDivsSection.length;i<l;i++){
                innerDivsSection[i].hide();
            }
        }
        function bindHoverLi(li,ii){
            if(self.clickMenu){
                li.click(function(e) {
                    closeRest();
                    for(var i=0,l=sectionElements.length;i<l;i++){
                        if(sectionElements[i][0].id==li[0].id){
                            li.innerDiv.stop(true, false, true).toggle();
                        }else{
                            sectionElements[i].innerDiv.hide();
                        }
                    }
                });
            }else{
                li.hover(function() {
                    li.innerDiv.stop(true, false, true).show();
                },function() {
                    li.innerDiv.stop(true, false, true).hide();
                })

            }
        }

    }
    directiveMenuVBrands.$inject=['Sections','$state','$q','global','$rootScope'];
    function directiveMenuVBrands(Sections,$state,$q,global,$rootScope){
        var self=this;
        self.clickMenu=global.get('store').val.template.clickMenu;
        self.global=global;
        var sectionElements=[],innerDivs=[];
        var menuLis;
        activate();
        //*********************************************************
        function activate(){
            self.brands=(global.get('brands').val)?global.get('brands').val:[];
            setTimeout(function(){
                /*menuLis=$('.myMenuV .mainli');
                 bindHover(menuLis);*/
                var index=0;
                self.brands.forEach(function(sec,i){
                    if(!sec.display){return}
                    var el=$('#s'+sec._id )
                    var innerDiv=el.children('div')
                    innerDivs.push(innerDiv)
                    bindHoverLi(el,index);
                    sectionElements.push(el);
                    index++
                })


            },100);
        }
        function bindHoverLi(li,ii){
            $(innerDivs[ii]).slideToggle();
            //console.log(innerDivs[ii])
            if(self.clickMenu){
                li.click(function(e) {
                    for(var i=0,l=innerDivs.length;i<l;i++){
                        if(i==ii){
                            innerDivs[i].stop(true, false, true).slideToggle(300);
                        }else{
                            //innerDivs[i].hide();
                        }

                    }
                });
            }else{
                li.hover(function() {
                    innerDivs[ii].stop(true, false, true).slideToggle(300);
                });
            }
        }

    }

    function directiveDropdownOnHover(scope,element,arrts){
        activate();
        function activate(){
            //console.log('???')
            $(element).children('ul').hide()
            bindHover()
        }
        function bindHover(){
            //console.log('sss')
            $(element).hover(function() {
                $(this).children('ul').stop(true, false, true).slideToggle(200);
            });
        }
    }

    function slideMenuAfterScroll(global,$timeout,$rootScope){
        return {
            restrict:'A',
            link:function(scope,element,attrs){
                var firstLook=true;
                var menu=attrs['slideMenuAfterScroll'];

                var menuHide=attrs['hideMenu'];
                /*console.log(attrs)
                console.log('menuHide',menuHide)*/

                var template=global.get('store').val.template;
                var offset = 199;
                var done;
                var h=$('#menu1-section').height();

                if(menu=='menu2' && template.menu2.fixed && template.menu2.is && template.menu2.position=='top'){
                    //console.log('????')
                    //$(element).css('top',h+'px')
                }

                if(menu=='menu1' && template.menu1.fixed && template.menu1.position=='top' && template.menu1.scrollSlide){
                    $(window).scroll(scrollHandlerMenu1)
                }else if(menu=='menu2' && template.menu1.fixed && template.menu1.position=='top' && template.menu2.position=='top'  && template.menu1.scrollSlide){
                    $(window).scroll(scrollHandlerMenu2)
                }

                function scrollHandlerMenu1(){
                    if(menuHide && $rootScope.$state.current.name!='home'){
                        return
                    }

                    var scrolled = window.pageYOffset || document.documentElement.scrollTop;
                    if (scrolled > offset && !done) {
                        done=true;
                        $rootScope.$emit('hideMenu1AfterScroll')
                        $(element).css('top','-'+h+'px')
                    } else if (scrolled < offset && done) {
                        done=false;
                        $rootScope.$emit('showMenu1AfterScroll')
                        $(element).css('top',0)
                    }
                }

                function scrollHandlerMenu2(){
                    if(menuHide && $rootScope.$state.current.name!='home'){
                        return
                    }
                    var scrolled = window.pageYOffset || document.documentElement.scrollTop;

                    if (scrolled > offset && !done) {
                        done=true;
                        $(element).css('top',0)
                    }else if (scrolled < offset && done) {
                        done=false;
                        $(element).css('top',h+'px')
                    }
                }

                var logo,logoInverse;
                var cart,cartInverse;
                var humb,humbInverse;
                var likes,likesInverse;

                //http://stackoverflow.com/questions/4306387/jquery-add-and-remove-window-scrollfunction
                // можно еще делать bind unbind function in relative of $sate
                //console.log(template.inverseColor)
                if(template.inverseColor && template.inverseColor.use){
                    if(template.inverseColor.homePage){
                        listenState()
                    }
                    $timeout(function(){
                        logo=$("#mainLogo")
                        logoInverse=$("#inverseLogo")
                        cart=$("#mainCart")
                        cartInverse=$("#inverseCart")
                        humb=$("#mainHumb")
                        humbInverse=$("#inverseHumb")
                        likes=$("#mainLikes")
                        likesInverse=$("#inverseLikes")
                        if(template.inverseColor.startScroll){
                            listenScroll()
                        }else if(template.inverseColor.firstBanner){
                            listenBanner()
                        }
                    },300)
                }
                function inverseNone(){
                    logoInverse.css('display','none')
                    logo.css('display','block')
                    likesInverse.css('display','none')
                    likes.css('display','block')

                    cartInverse.css('display','none')
                    cart.css('display','block')
                    humbInverse.css('display','none')
                    humb.css('display','block')
                }
                function inverseBlock(){
                    logo.css('display','none')
                    logoInverse.css('display','block')
                    likes.css('display','none')
                    likesInverse.css('display','block')
                    cart.css('display','none')
                    cartInverse.css('display','block')
                    humb.css('display','none')
                    humbInverse.css('display','block')
                }
                function listenState() {
                    $rootScope.$on('$stateChangeSuccess', function(event, to, toParams, fromState, fromParams){
                        //console.log(to,toParams)
                        var delay=0;
                        if(firstLook){
                            delay=500;
                            firstLook=false;
                        }
                        $timeout(function () {
                            if(to.name=='home'){
                                element.removeClass('inverseColor')
                                inverseNone()
                            }else{
                                element.addClass('inverseColor')
                                inverseBlock()
                            }
                        },delay)

                    })
                }
                function listenScroll() {
                    $(window).scroll(function () {
                        if($rootScope.$state.current.name!='home'){
                            return
                        }
                        if(template.inverseColor.homePage && $rootScope.$state.current.name!='home'){return}


                        var scrolled = window.pageYOffset || document.documentElement.scrollTop;
                        if (scrolled > 10) {
                            element.addClass('inverseColor')
                            inverseBlock()
                        } else {
                            element.removeClass('inverseColor')
                            inverseNone()
                        }
                    })
                }
                function listenBanner() {
                    var el = document.getElementById('arrowDownDiv')
                    if(!el){return}
                    //console.log(el)
                    var elOffsetY=$(el).offset().top
                    $(window).scroll(function () {
                        if($rootScope.$state.current.name!='home'){
                            return
                        }
                        //console.log($rootScope.$state.current.name)
                        var scrolled = window.pageYOffset || document.documentElement.scrollTop;
                        //console.log($(el).height()+elOffsetY,scrolled)
                        if(($(el).height()+elOffsetY)-10>scrolled){
                            element.removeClass('inverseColor')
                            inverseNone()
                        }else{
                            element.addClass('inverseColor')
                            inverseBlock()
                        }
                    })
                }


                $rootScope.$on('$stateChangeSuccess', function(event, to, toParams, fromState, fromParams){
                    if(menuHide){
                        if(to.name=='home'){
                            $rootScope.$emit('showMenu1AfterScroll')
                            if(menu=='menu1'){
                                $(element).css('top',0)
                            }else{
                                $(element).css('top',h+'px')
                            }

                        }else{
                            $rootScope.$emit('hideMenu1AfterScroll')
                            if(menu=='menu1'){
                                $(element).css('top','-'+h+'px')
                            }else{
                                $(element).css('top',0)
                            }

                        }
                    }

                })
            }
        }
    }



})()


'use strict';
angular.module('gmall.services')
.service('Filters', function ($resource,$q,global,$uibModal) {
    var Items= $resource('/api/collections/Filter/:_id',{_id:'@_id'});
    var filters=null;
    var pending=true;
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;
    this.select=selectFilter;
    this.reloadItems=reloadItems;
    this.getItem=getItem;
    this.getList=getList;


    function getList(paginate,query){
        if(!paginate){
            paginate={page:0}
        }
        var data ={perPage:paginate.rows ,page:paginate.page,query:query};
        if(global.get('crawler') && global.get('crawler').val){
            data.subDomain=global.get('store').val.subDomain;
        }
        return Items.query(data).$promise
            .then(getListComplete)
        //.catch(getListFailed);
        function getListComplete(response) {
            if(paginate.page==0){
                if(response && response.length){
                    paginate.items=response.shift().index;
                }else{
                    paginate.items=0;
                }
            }
            //console.log(response)
            return response;
        }

        function getListFailed(error) {
            console.log('XHR Failed for getNews.' + error);
            return $q.reject(error);
        }
    }
    function getItem(id){
        return Items.get({_id:id} ).$promise
            .then(getItemComplete)
        //.catch(getItemFailed);
        function getItemComplete(response) {
            if(response && response.blocks && response.blocks.length){
                response.blocks.forEach(function (b) {
                    if(b.type=='stuffs'){
                        if(b.stuffs && b.stuffs.length){
                            b.imgs=b.stuffs.map(function(s){
                                if(s.gallery && s.gallery.length && s.gallery[0].img){
                                    s.img=s.gallery[0].img;
                                }
                                return s;
                            });
                        }else{b.imgs=[]}
                    }
                })
            }
            return response;
        }
        function getItemFailed(error) {
            return $q.reject(error);
        }
    }


    function returnFilters(resolve){
        if(pending){setTimeout(function(){returnFilters(resolve)}, 300);}else{
            resolve(filters)
        }

    }
    this.getFilters=function(){
        return $q(function(resolve,reject){
            if(global.get('filters') && global.get('filters').val){
                if(!filters){filters=global.get('filters').val}
                return resolve(global.get('filters').val);
            }
            if(pending){
                setTimeout(function(){returnFilters(resolve)}, 300);
            }else{
                if(filters){
                    resolve(filters)
                } else{
                    pending=true;
                    Items.query(function(res){
                        res.shift();
                        filters=res;
                        pending=false;
                        resolve(filters)
                    },function(err){pending=false;;reject(err)})
                }
            }
        })
    }
    if(!global.get('filters') || !global.get('filters' ).val){
        Items.query(function(res){
            res.shift();
            filters=res;
            if(global.get('filters') && !global.get('filters' ).val){
                global.set('filters',filters)
            }
            pending=false;
        })
    }

    function reloadItems(){
        pending=true;
        Items.query(function(res){
            res.shift();
            filters=res;
            global.set('filters',filters)
            pending=false;
        })
    }

    function selectFilter(){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/filters/selectFilter.html',
                controller: selectFilterCtrl,
                size: 'lg',
                controllerAs:'$ctrl',
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selected) {
                //console.log(selected)
                resolve(selected)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })
    }
    selectFilterCtrl.$inject=['Filters','$uibModalInstance','$q','global'];
    function selectFilterCtrl(Filters,$uibModalInstance,$q,global){
        var self=this;
        self.lang=global.get('lang').val;
        $q.when()
            .then(function(){
                return Filters.getFilters();
            } )
            .then(function(filters){
                self.filters=filters;
                //console.log(filters)
            })
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        self.ok = function (filter) {
            $uibModalInstance.close(filter);
        };
    }


})
    /*.service('FilterTags', function ($resource,) {
        var Items= $resource('/api/collections/FilterTags/:id',{id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }

        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
            //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                //console.log(response)
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
            //.catch(getItemFailed);
            function getItemComplete(response) {
                if(response && response.blocks && response.blocks.length){
                    response.blocks.forEach(function (b) {
                        if(b.type=='stuffs'){
                            if(b.stuffs && b.stuffs.length){
                                b.imgs=b.stuffs.map(function(s){
                                    if(s.gallery && s.gallery.length && s.gallery[0].img){
                                        s.img=s.gallery[0].img;
                                    }
                                    return s;
                                });
                            }else{b.imgs=[]}
                        }
                    })
                }
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }



    })*/



'use strict';
//console.log(_filterTagsO);
var __filterTagsO=_filterTagsO
var __filterTags=_filterTags
//(function(){

    angular.module('gmall.services')
        .service('FilterTags', filterTagsService);
    filterTagsService.$inject=['$resource','$uibModal','$q','global','$timeout','Sections'];
    function filterTagsService($resource,$uibModal,$q,global,$timeout,Sections){
        var Items= $resource('/api/collections/FilterTags/:_id',{_id:'@_id'});
        var filterTags=null;
        var pending=true;
        var qu;
        //console.log(_filterTagsO)
        /*console.log(_filterTagsO)
        if(typeof _filterTagsO=='undefined'){
            var _filterTagsO={}
        }*/
        //filterTags=global.get('filterTags').val
        /*if(typeof _filterTags!='undefined' && _filterTags.length){
            filterTags=_filterTags
        }*/
        filterTags=__filterTags
        $timeout(function(){ // это для админки
            qu={query:JSON.stringify({store:global.get('store').val._id})}
            if(!global.get('filterTags') || !global.get('filterTags' ).val){
                //console.log('????????????????')
                init();
            }else{
                filterTags=global.get('filterTags').val
            }
        },50)


        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            getFilterTags:getFilterTags,
            getTagsByUrl:getTagsByUrl,
            selectFilterTag:selectFilterTag,
            select:selectFilterTag,
            reloadItems:reloadItems,
            getSticker:getSticker,
            reloadItems:reloadItems
        }

        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            //console.log(query)
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function returnFilterTags(resolve){
            if(pending){setTimeout(function(){returnFilterTags(resolve)}, 100);}else{
                resolve(filterTags)
            }
        }
        function getFilterTags(){
            return $q(function(resolve,reject){
                //console.log( global.get('filterTags').val)
                if(global.get('filterTags') && global.get('filterTags').val){
                    if(!filterTags){filterTags=global.get('filterTags').val}
                    return resolve(global.get('filterTags').val);
                }
                if(pending){
                    return $timeout(function(){return resolve(filterTags)}, 400);
                }else{
                    if(filterTags){
                        resolve(filterTags)
                    } else{
                        pending=true;
                        Items.query(function(res){
                            //console.log(res)
                            res.shift();
                            filterTags=(res)?res:[];
                            pending=false;
                            resolve(filterTags)
                        },function(err){pending=false;;reject(err)})
                    }
                }
            })
        }
        function getTagsByUrl(queryTags,cb){
            //console.log(queryTags)
            $q.when()
                .then(function(){
                    return getFilterTags();
                })
                .then(function(){
                    //console.log(filterTags)
                    queryTags=queryTags.map(function(url){
                        //console.log(url)

                        return filterTags.getOFA('url',url)
                    });
                    cb(queryTags)
                })
        }

        function selectFilterTag(data){
            var sections =(data &&  data.section)?Sections.getSections():null;

            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/filters/bindFilterTagToModel.html',
                    controller: selectFilterTagCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        sections: function(){
                            return sections
                        }
                    }
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedFilterTag) {
                    resolve(selectedFilterTag)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectFilterTagCtrl.$inject=['Filters','$uibModalInstance','$q',,'global','sections'];
        function selectFilterTagCtrl(Filters,$uibModalInstance,$q,global,sections){
            var self=this;
            self.global=global;
            self.sections=sections;
            if(self.sections){
                self.section=self.sections[0].url
            }
            $q.when()
                .then(function(){
                    return Filters.getFilters();
                } )
                .then(function(filters){
                    self.filters=filters;
                    //console.log(filters)
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (filterTag) {
                //console.log(filterTag)
                if(self.section){
                    filterTag.section=self.section;
                }
                $uibModalInstance.close(filterTag);
            };
        }
        function init(){
            Items.query(qu,function(res){
                res.shift();
                filterTags=res;
                filterTags.forEach(function (t) {
                    _filterTagsO[t._id]=t;
                })
                pending=false;
            })
        }
        function reloadItems(){
            pending=true;
            init();
        }
        function getSticker(tags){
            if(tags && tags.length && filterTags && filterTags.length){
                for(var i =0;i<tags.length;i++){
                    if(__filterTagsO[tags[i]] && __filterTagsO[tags[i]].sticker){
                        //console.log(angular.copy(__filterTagsO[tags[i]].sticker))
                        return __filterTagsO[tags[i]].sticker
                    }
                }
            }
        }
    }
//})()


/*'use strict';
angular.module('gmall.services')
.service('FilterTags', function ($resource,$q) {
    var Items= $resource('/api/collections/FilterTags/:id',{id:'@_id'});
    var filterTags=null;
    var pending=true;
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;

    var getFilterTags=function(){
        return $q(function(resolve,reject){
            if(pending){
                setTimeout(function(){returnFilterTags(resolve)}, 100);
            }else{
                if(filterTags){
                    resolve(filterTags)
                } else{
                    pending=true;
                    Items.query(function(res){
                        res.shift();
                        filterTags=res;
                        pending=false;
                        resolve(filterTags)
                    },function(err){pending=false;;reject(err)})
                }
            }
        })
    }
    this.getFilterTags=getFilterTags;
    this.getTagsByUrl=function(queryTags,cb){
        $q.when()
            .then(function(){
                return getFilterTags();
            })
            .then(function(){
                queryTags=queryTags.map(function(url){
                    return filterTags.getOFA('url',url)
                });
                cb(queryTags)
            })
    }

    Items.query(function(res){
        res.shift();
        filterTags=res;
        pending=false;
    })

})*/
angular.module('gmall.services')
.service('SelectFilterTags', ['$q','$uibModal', function($q,$uibModal) {
    function bindFilterTagToModelCtrl(Filters,$uibModalInstance){
        var self=this;
        $q.when()
            .then(function(){
                return Filters.getFilters();
            } )
            .then(function(filters){
                self.filters=filters;
                //console.log(filters)
            })
        self.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
        self.ok = function (filterTag) {
            $uibModalInstance.close(filterTag);
        };
    }
    this.bindFiterTagToModel=function(){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/filters/bindFilterTagToModel.html',
                controller: bindFilterTagToModelCtrl,
                size: 'lg',
                controllerAs:'$ctrl',
            }
            var modalInstance = $uibModal.open(options);
            modalInstance.result.then(function (selectedFilterTag) {
                resolve(selectedFilterTag)
            }, function () {
                console.log('Modal dismissed at: ' + new Date());
                reject()
            });
        })



    }
}])


'use strict';
angular.module('gmall.directives')
.directive('filtersList',[function(){
    function filterCtrl($anchorScroll,Filters,FilterTags,$q,SelectCategory,$state,$timeout,$scope,global,Confirm,$http,$uibModal,exception,Stuff){
        console.log('lskdjfl')
        var self=this;
        self.$state=$state;
        $scope.$on('changeLang',function(){
            activate()
        })
        activate()
        self.setCountData=setCountData;
        function activate() {
            $q.when()
                .then(function(){
                    return Filters.getList({page:0,rows:200},{})
                } )
                .then(function(res){
                    //res.shift();
                    self.filters=res;
                    //console.log(self.filters)
                })
                .then(function(){
                    return FilterTags.query().$promise;
                } )
                .then(function(res){
                    res.shift();
                    self.filterTags=res;
                })
                .then(function(){
                    self.filters.forEach(function(filter){
                        if(!filter.tags){filter.tags=[];}
                        if(!filter.tags.length){
                            self.filterTags.forEach(function(tag){
                                if(tag.filter==filter._id){
                                    tag.index=filter.tags.length;
                                    filter.tags.push(tag);
                                }
                            })
                        }else{
                            filter.tags.forEach(function(tag,i){
                                //console.log(tag)
                                tag.index=i;
                            })

                        }
                    })
                    //console.log(self.filters[0].tags)
                })
        }


        // управление фильтрами*************
        self.newFilter={name:''}
        self.addNewFilter=function(filter){
            console.log(filter)
            if(!filter.name){return};
            var newFilter={
                name:filter.name.substring(0,50),
                index:0,type:1,tags:[],
                active:false,
                showTags:true}
            if(self.filters && self.filters.length){
                newFilter.index=self.filters[self.filters.length-1].index;
            }
            Filters.save(newFilter,function(res){
                // console.log(res);
                newFilter._id=res.id;
                self.filters.push(newFilter);
                filter.name='';
                //Filter.save(filter)
            })
        }
        self.deleteFilter=function(filter,idx){
            Confirm('Delete?').then(function () {
                Filters.delete({_id:filter._id},function(res){
                    self.filters.splice(idx,1)
                },function(err){
                    console.log(err)
                })
            })


        }
        self.saveFilter = function(filter,field){
            if (!filter.name){return};
            //filter.url=filter.name.getUrl();
            var o={_id:filter._id};
            o[field]=filter[field];
            Filters.save({update:field},o,function(res){
                global.set('saving',true);
                $timeout(function(){
                    global.set('saving',false);
                },1500)
            })
        }
        self.dropFilterCallback=function(filter){
            setTimeout(function(){
                self.filters.forEach(function(filter,idx){
                    filter.index=idx+1;
                    Filters.save({update:'index'},filter)
                })
            },200)
            return filter
        }
        self.saveField=function(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            Filters.save({update:field},o,function(res){
                global.set('saving',true);
                $timeout(function(){
                    global.set('saving',false);
                },1500)
            });
        }
        self.fixBrands=function(){
            Confirm('Подтверждаете?')
                .then(function () {
                    $scope.fixBrandsDesable=true;
                    var data = {}
                    return $http({
                        method: "post",
                        url: '/api/fixedDB/filter',
                        data:data,
                    })
                })
                .then(function(){
                    exception.showToaster('info','fix stucture','Ok')
                })
                .catch(function (err) {
                    exception.catcher('fix stucture')(err)
                })

        }
        //********************************************************
        self.addTag=function(filter){
            if(!filter.newTag){return};
            var newTag={name:filter.newTag.substring(0,50),index:1,filter:filter._id};
            if(filter.tags && filter.tags.length){
                newTag.index=filter.tags[filter.tags.length-1].index;
            }
            $q.when()
                .then(function(){
                    return FilterTags.save(newTag ).$promise
                })
                .then(function(res){
                    newTag._id=res.id;
                    filter.tags.push(newTag);
                    filter.newTag=''
                    //console.log(filter)
                    Filters.save({update:'tags'},{_id:filter._id,tags:filter.tags.map(function(el){return el._id})},function(res){})
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        self.saveTag=function(tag,field){
            if (!tag.name){return};
            /*if(!tag.url){
                tag.url=tag.name.getUrl();
            }*/

            var o={_id:tag._id};
            o[field]=tag[field];
            FilterTags.save({update:field},o,function(res){
                global.set('saving',true);
                $timeout(function(){
                    global.set('saving',false);
                },1500)
            },function(err){});
        }
        function saveTagPromise(tag,field) {
            return $q(function (res,rej) {
                var o={_id:tag._id};
                o[field]=tag[field];
                FilterTags.save({update:field},o,function(){res()},function(err){rej(err)});
            })
        }
        self.deleteTag=function(filter,idx){
            Confirm('Delete?')
                .then(function () {
                    return Stuff.getList({page:0,row:100},{tags:filter.tags[idx]._id})
                })
                .then(function (stuffs) {
                    if(stuffs && stuffs.length){
                        var s  ='привязаны товары';
                        stuffs.forEach(function (st) {
                            s+=' '+st.name+' '+((st.artikul)?st.artikul:'')+ "|"
                        })
                        throw s
                    }
                })
                .then(function () {
                    FilterTags.delete({_id:filter.tags[idx]._id},function(res){
                        var tag = filter.tags.splice(idx,1);
                        Filters.save({update:'tags'},{_id:filter._id,tags:filter.tags.map(function(el){return el._id})},function(res){})
                    },function(err){
                        console.log(err)
                    })
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('удаление')(err)
                    }
                })

        }
        self.dropTagCallback = function(tag,index,filter) {
            //console.log(tag,filter)
            setTimeout(function(){
                Filters.save({update:'tags'},{_id:filter._id,tags:filter.tags.map(function(el){return el._id})},function(res){
                    //console.log(res)
                })
                var acts=[];
                filter.tags.forEach(function(tag,i){
                    tag.index=i
                    acts.push(saveTagPromise(tag,'index'))

                })
                $q.all(acts)
                if (tag.filter!=filter._id && tag.filter){
                    //var acts=[];
                    filter.tags.forEach(function(tag,i){
                        tag.index=i
                        //acts.push(saveTagPromise(tag,'index'))

                    })
                    //$q.all(acts)
                    var oldFilter=self.filters.getObjectFromArray('_id',tag.filter);
                    Filters.save({update:'tags'},{_id:oldFilter._id,tags:oldFilter.tags.map(function(el){return el._id})},function(res){})
                    tag.filter=filter._id;
                    FilterTags.save({update:'filter'},tag,function(res){})
                }
            },200)
            /* console.log(filter.tags)
             console.log('dropTagCallback')*/
            return tag;

        };
        self.tagMoved=function(filter,tag,idx){
            //console.log(idx,tag.index)
            if(idx==tag.index){
                filter.tags.splice(idx,1)
            } else {
                filter.tags.splice(idx+1,1)
            }
            filter.tags.forEach(function(tag,i){
                tag.index=i
            })

            //console.log(filter.tags)

        }


        // привязка к категориям
        self.selectCategory=function(id){
            SelectCategory.bindCategoryForFilterBrandCol(id,'filters')
        }

        function setCountData(filter){
            $uibModal.open({
                animation: true,
                templateUrl: 'components/filters/modal/countData.html',
                controller: function($uibModalInstance,$q,saveField,filter){
                   // console.log(saveField,filter)
                    var self=this;
                    self.filter=filter
                    self.ok=function(){$uibModalInstance.close()}
                    self.cancel = function () {$uibModalInstance.dismiss()}
                    self.saveField=function(field){
                        saveField(filter,field)
                    }

                },
                resolve:{
                    saveField:function () {
                        return self.saveField
                    },
                    filter:function () {
                        return filter
                    },
                },
                controllerAs:'$ctrl',
                size:'lg',
            })
        }


    }
    return {
        scope: {},
        bindToController: true,
        controller: filterCtrl,
        controllerAs: '$ctrl',
        restrict:"E",
        templateUrl:"components/filters/filters.html"
    }
}])
.directive('filterTagEdit',[function(){
        /*return {
            restrict:"E",
            scope:{
                id:'@'
            },
            templateUrl:"components/filters/tagEdit.html",
            link:function($scope,element,attrs){
                FilterTags.get({id:$scope.id},function(res){
                    //console.log(res)
                    $scope.itemTag=res;
                    if(!$scope.itemTag.sticker){
                        $scope.itemTag.sticker=null;
                    }
                    if(!$scope.itemTag.img){
                        $scope.itemTag.img=null;
                    }
                })
                $scope.ItemsTag=FilterTags;
                $scope.updateItemTag=function(field){
                    FilterTags.save({update:field},$scope.itemTag)
                }
                /!*$scope.updateItemTag=function(field){
                 FilterTags.save({update:field},$scope.itemTag)
                 $state.go('frame.filters')
                 }*!/

            }
        }*/
    function tagCtrl($stateParams,global,FilterTags,$q,$timeout,$scope){
        var self=this;
        self.Items=FilterTags;
        self.global=global;
        $scope.$on('changeLang',function(){
            activate()
        })
       activate()
        function activate() {
            $q.when()
                .then(function(){
                    return self.Items.get({_id:$stateParams.id} ).$promise;
                })
                .then(function(res){
                    self.item=res;
                })
                .catch(function(err){
                    self.edit=false;
                })
        }
        self.saveField = function(field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=self.item[field]
                self.Items.save({update:field},o,function(res){
                        global.set('saving',true);
                        $timeout(function(){
                            global.set('saving',false);
                        },1500)
                    }
                );
            },defer)
        };
    }
    return {
        scope: {},
        bindToController: true,
        controller: tagCtrl,
        controllerAs: '$ctrl',
        restrict:"E",
        templateUrl:"components/filters/tagEdit.html",
    }
}])

    .directive('filterItemEdit',[function(){

        function filterItemEditCtrl($stateParams,global,Filters,$q,$timeout,$scope){
            //return
            var self=this;
            self.Items=Filters;
            self.global=global;
            $scope.$on('changeLang',function(){
                activate()
            })
            activate()
            function activate() {
                console.log($stateParams.id)
                $q.when()
                    .then(function(){
                        return self.Items.getItem($stateParams.id);
                    })
                    .then(function(res){
                        console.log(res)
                        self.item=res;
                    })
                    .catch(function(err){
                        self.edit=false;
                    })
            }
            self.saveField = function(field,defer){
                defer =defer||0
                setTimeout(function(){
                    var o={_id:self.item._id};
                    o[field]=self.item[field]
                    self.Items.save({update:field},o,function(res){
                            global.set('saving',true);
                            $timeout(function(){
                                global.set('saving',false);
                            },1500)
                        }
                    );
                },defer)
            };
        }
        return {
            scope: {},
            bindToController: true,
            controller: filterItemEditCtrl,
            controllerAs: '$ctrl',
            restrict:"E",
            templateUrl:"components/filters/filterEdit.html",
        }
    }])

    .directive('filterTagComponent',[function(){
        return {
            restrict:"E",
            templateUrl:"components/filters/filterTag.component.html",
        }
    }])
    .directive('filterComponent',[function(){
        return {
            restrict:"E",
            templateUrl:"components/filters/filter.component.html",
        }
    }])
/*.directive('bindFilterToCategory1',['Sections','Category',function(Sections,Category){
    return {
        restrict:"E",
        scope:{
            id:'@',
        },
        templateUrl:"components/filters/bindFiltersToCategory.html",
        link:function($scope,element,attrs){
            console.log($scope.id)
            function checkFilters(section){
                section.showCheck=false;
                if(section.categories && section.categories.length){
                    section.checkAll=true;
                    section.showCheck=true;
                    section.categories.forEach(function(category){
                        if(category.filters.indexOf($scope.id)>-1){
                            category.checked=true;
                        }else{
                            section.checkAll=false;
                        }
                    })
                }
                if(section.child && section.child.length){
                    section.checkAll=false;
                    section.child.forEach(function(s){
                        if (checkFilters(s)){
                            section.showCheck=true;
                        }
                    })
                }
                return section.showCheck;
            }
            function checkCategory(category){
                if (category.checked){
                    if(!category.filters ){
                        category.filters=[];
                        category.filters.push($scope.id)
                    }else{
                        console.log(category.filters.indexOf($scope.id))
                        if(category.filters.indexOf($scope.id)<0){
                            category.filters.push($scope.id)
                        }
                    }
                }else{
                    if(category.filters && category.filters.length){
                        var i = category.filters.indexOf($scope.id);
                        if(i>-1){
                            category.filters.splice(i,1)
                        }
                    }
                }
                Category.save({update:'filters'},category);
            }
            $scope.bindFilter=function(category,section){
                //console.log(category)
                checkCategory(category)
                section.checkAll=true;
                for(var i= 0,l=section.categories.length;i<l;i++){
                    if(section.categories[i].filters.indexOf($scope.id)<0){
                        section.checkAll=false;
                        break;
                    }
                }
            }
            $scope.bindFilterForSection=function(section,checkAll){
                section.checkAll=checkAll;
                if(section.categories && section.categories.length){
                    section.categories.forEach(function(category){
                        category.checked=checkAll;
                        checkCategory(category)
                    })
                }

                if(section.child && section.child.length){
                    section.child.forEach(function(s){
                        $scope.bindFilterForSection(s,checkAll)
                    })
                }
            }
            function foo(s){
                if (s.child && s.child.length){
                    for(var i = 0,l= s.child.length;i<l;i++){
                        var section=s.child[i];
                        //console.log( 'section - ',section.name,' ',section.showCheck)
                        if (section.showCheck){
                            if (section.child && section.child.length){
                                section.checkAll=foo(section);
                                if (!section.checkAll){
                                    return false;
                                }
                                //console.log( 'checkAll - ',section.name,' ',section.checkAll)
                            } else{
                                //console.log('end section ', section.name,' ',section.checkAll)
                                if(!section.checkAll){
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

            }

            Sections.query(function(res){
                res.shift();
                $scope.sections=res.filter(function(el){return el.level===0});
                $scope.sections.forEach(checkFilters)

                $scope.sections.forEach(function(s){
                    if(s.showCheck){
                        s.checkAll=foo(s);
                    }
                })

                console.log($scope.sections);
            });

        }
    }
}])*/




'use strict';
angular.module('gmall.services')
.provider('global',[function(){
    var _data = {}; // our data storage array
    var _urls = {}; // end urls
    this.setUrl = function(urls){
        _urls = urls;
    }
    var _set = function(what,val){
        val=val||null
        //console.log(what,val)
        //if(what=='user' && val){return;}
        if(angular.isDefined(what)){
            if (!_data[what]){
                _data[what]={val:val}}
            else {
                _data[what].val=(angular.isDefined(val)) ? val: null;
            }
            //return true;
        }/*else{
            return false;
        }*/
    }; // end _set
    var _getSticker = function(stuff){
        var id = (stuff._id)?stuff._id:stuff.stuff;
        if (!stuff.tags || !stuff.tags.length) return;
        if (!_data['filterTagsSticker'].val) return;
        //console.log(_data['filterTagsSticker'])
        for(var i=0,l=_data['filterTagsSticker'].val.length;i<l;i++){
            var tag = _data['filterTagsSticker'].val[i]._id;
            if (stuff.tags.indexOf(tag)>-1){
                return (_data['filterTagsSticker'].val[i].sticker)?_data['filterTagsSticker'].val[i].sticker:false;
                break;
            }
        }
        return false;
    }
    var _getDataForCart = function(stuff){
        console.log('не используется!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
        return;
        var inCart={}
        inCart.quantity=(stuff.quantity)?stuff.quantity:1;

        inCart.addCriterionName=[];
        //console.log(stuff.addCriterionToCart,stuff.addCriterionToCart.length)
        if(stuff.addCriterionToCart && stuff.addCriterionToCart.length){
            console.log(stuff.addCriterionToCart)
            stuff.addCriterionToCart.forEach(function(el){

                var t = _data['filterTags'].val.getObjectFromArray('_id',el);
                if (t && t.name){
                    inCart.addCriterionName.push(t.name)
                }
            })
        }
        inCart.addCriterionToCart=(stuff.addCriterionToCart)?stuff.addCriterionToCart:null;
        if (stuff.single){inCart.single=true;}
        inCart.unitOfMeasure= (stuff.unitOfMeasure)?stuff.unitOfMeasure:'шт';
        inCart.stuff=stuff._id;
        inCart.stuffUrl=stuff.url;
        inCart.seller=stuff.seller;
        inCart.img=(stuff.gallery[0].thumb)?stuff.gallery[0].thumb:'';
        inCart.price=stuff.price;
        inCart.retail=stuff.retail;
        inCart.priceSale=stuff.priceSale;
        inCart.brand=stuff.brand||'brand';
        var _brand =_data['brands'].val.getObjectFromArray('_id',stuff.brand);
        inCart.brandUrl=(_brand)?_brand.url:'brand';
        inCart.brandName=(_brand)?_brand.name:'';
        inCart.category=stuff.category||"category";
        var o=_data['categories'].val.getObjectFromArray('_id',stuff.category);
        if(o){
            inCart.categoryUrl=o.url;
            inCart.categoryName=o.name;
            inCart.groupUrl=o.group.url;
            inCart.groupName=o.group.name;
        } else {
            inCart.categoryUrl='id';
            inCart.categoryName='category';
            inCart.groupUrl="group"
        }
        inCart.tags=stuff.tags;
        inCart.name=stuff.name
        if (stuff.artikul){
            inCart.name +=' '+stuff.artikul;
        }
        if (stuff.sticker==='undefined'){
            inCart.sticker=_getSticker(stuff);
        } else {
            inCart.sticker=stuff.sticker;
        }

        //console.log(inCart);
        return inCart;
    }

// Provider method for set
    this.set = _set;

// service methods
    this.$get = ['$http',function($http){


        return {
            request : function(url,vars){
                //console.log(url)
                if(angular.isDefined(vars)){
                    return $http.post(url,$.param(vars),{headers:{'Content-Type': 'application/x-www-form-urlencoded'}});
                }else{
                    return $http.get(url);
                }
                //return ['a','d','c']
            },

            url : function(which){
                return _urls[which];
            }, // end url

            set : _set, // end set

            get : function(what){
                if(angular.isDefined(what) && (what in _data))
                    return _data[what];//angular.copy(_data[what]);
                else
                    return undefined;
            }, // end get

            del : function(what){
                if(angular.isDefined(what)){
                    var i = _data.indexOf(what);
                    if(i >= 0)
                        return _data.splice(i,1);
                }
                return false;
            }, // end del

            clear : function(){
                _data = [];
            }, // end clear
            getAll:function(){ return _data},
            //глобальные функции
            getSticker:_getSticker,
            getDataForCart: _getDataForCart

        };
    }]; // end $get
}]) // end appDataStoreSrvc / storage-services


.factory('globalSrv',['global',function(global){
    //-- Variables --//
    var _send = global.request;
    //-- Methods --//
    return {
        getData:function(name,param,abbr){
            //console.log(abbr)
            var url = global.url(name);
            if(angular.isDefined(param) && !(angular.equals(param,null) || angular.equals(param,'')))
                url += '/' + param;
            if(angular.isDefined(abbr) && !(angular.equals(abbr,null) || angular.equals(abbr,''))&& typeof abbr=='object'){
                url += '?';
                for(var key in abbr){
                    if (url[url.length-1]!='?'){
                        url+= '&';
                    }
                    url +=key+'='+abbr[key]
                }
            }

            //console.log(url)
            return _send(url);
        }
    };
}]) // end subjectSrv / module(myapp.services)

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Helper', helperService);
    helperService.$inject=['$resource','$uibModal','$q','exception'];
    function helperService($resource,$uibModal,$q,exception){
        var Items= $resource('/api/collections/Helper/:_id',{_id:'@_id'});
        var _items={};
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            getHelp:getHelp
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            if(_items[id]){return $q.when(_items[id])}
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                _items[id]=response;
                return response;
            }
            function getItemFailed(error) {
                _items[id]=null;
                return $q.reject(error);
            }
        }
        function getHelp(state){
            $q.when()
                .then(function(){
                    return getItem(state)
                })
                .then(function(helper){
                    $uibModal.open({
                        animation: true,
                        templateUrl:'components/helper/helperModal.html',
                        controller: function($uibModalInstance,$sce,desc){
                            var self=this;
                            self.desc=desc;
                            /*self.trustHtml=function(text){
                                console.log($sce.trustAsHtml(text))
                                return $sce.trustAsHtml(text)
                            }*/
                            self.cancel = function () {
                                $uibModalInstance.dismiss('cancel');
                            };
                        },
                        resolve:{desc:function(){return helper.desc}},
                        controllerAs:'$ctrl',
                    });

                    /*return $q(function(resolve,reject){
                        var modalInstance = $uibModal.open({
                            animation: true,
                            template:'ssdsdsd',
                            controller: function($uibModalInstance,desc){
                                var self=this;
                                self.desc=desc;
                                self.cancel = function () {
                                    $uibModalInstance.dismiss('cancel');
                                };
                            },
                            resolve:{desc:function(){return helper.desc}},
                            controllerAs:'$ctrl',
                        });
                        modalInstance.result.then(function () {resolve()}, function (err) {reject(err)});
                    })*/
                })
                .catch(function(err){
                    var msg='ошибка';
                    if(err){
                        if(typeof err =='object'){
                            if(err.data){
                                msg=err.data
                            }else if(err.message){
                                msg=err.message;
                            }
                        }else{msg=err}
                    }
                    err = err.data||err
                    exception.catcher('получение справки')(msg)
                })
        }


    }
})()


'use strict';
angular.module('gmall.services')
.factory('$email', function ($resource) {
    return $resource('/api/sendEmail');
})
    .factory('Email', function ($resource) {
        return $resource('/api/sendEmails');
    })


'use strict';
angular.module('gmall.services')
    .factory('CreateContent', ['global','$timeout',function(global,$timeout){
        /*console.log('photoHost',photoHost)
        if(!photoHost){
            console.log(global.get('store').val.link)
        }*/
        if(typeof photoHost=='undefined'){
            var photoHost;
        }
        var photoHostForFactory;
        $timeout(function(){
            photoHostForFactory=(photoHost)?photoHost:global.get('store').val.link
        },1000)



        //**************************************************************************************
        function getHeader(user) {
            var s=
                '<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 20px 0 0 0" border="0">'+
                '<tr width="100%" style="max-width:900px;">' +
                    // лого и название
                '<td width="50%" style=" padding:5px 20px"><a href="'+global.get('store').val.link+'">';
                    if(global.get('store').val.logo) {
                        s+='<img  style="width: 100px;" src="' + photoHostForFactory + '/' + global.get('store').val.logo + '"></br>'

                    }
                    if(global.get('store').val.name) {
                        s+='<span  style="width: 100px;" src="' + photoHostForFactory + '/' + global.get('store').val.name + '"></span>'
                    }
            s+='</a></td>';
            // телефон и емейл
            s+='<td width="50%"  style="text-align: right; padding:5px 20px">'
            if(global.get('store').val.seller.phone) {
                s+='<p><span>' +global.get('langOrder').val.phone+ '</span>'+
                    ': <a style="color:#666" href="tel:'+'+'+global.get('store').val.seller.phone+'"><span>'+'+' +global.get('store').val.seller.phone + '</span></a></p>'
            }
            if(global.get('store').val.feedbackEmail) {
                s += '<p><span>e-mail</span>'+
                    ': <a style="color:#666" href="mailto:'+global.get('store').val.feedbackEmail+'"><span>' + global.get('store').val.feedbackEmail + '</span></a></p>'
            }

            s+='</td></tr>';

            //переходы на сайт
            if(global.get('sections') && global.get('sections').val && global.get('sections').val[0]){
                s+='<table width="860px" cellpadding="0" cellspacing="0" style="max-width:900px;background-color: #000;border-collapse:collapse; border:1px solid #000;table-layout: fixed; padding: 0;margin: 0px 20px">' +
                    '<td width="50%" style="background-color: #333;text-align: center; padding: 20px;border:1px solid #fff;">' +
                    '<a style="color: #fff; text-transform: uppercase" href="'+global.get('store').val.link+'/cabinet'+'"><span>'+global.get('langOrder').val.mainCabinet+'</span></a>'+
                    '</td>';
                s+='<td width="50%" style="background-color: #333;text-align: center; padding: 20px;border:1px solid #fff;">' +
                    '<a style="color: #fff; text-transform: uppercase" href="'+global.get('store').val.link+'/'+global.get('sections').val[0].url+'/category'+'"><span>'+global.get('lang').val.catalog+'</span></a>'+
                    '</td>';
                s+='</tr></table>'

                /*'<tr width="100%" style="max-width:900px;"><td style="text-align: center; padding: 5px; font-size: 20px;"><h3>'+user+'</h3></td></tr>'+

                 '<tr width="100%"><td><h2 style="font-weight: 500; letter-spacing: 2px; text-transform: uppercase; text-align: center; color: #333333; font-family:  Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+name+'</h2></td></tr>';*/
                s+=    '</table>';
            }

            return s;
        }
        function getFooter(){
            var s='<style>.footer a</style><table class="footer" width="860px" cellpadding="0" cellspacing="0" style="margin: 20px;color: #000;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;" border="0">'+
                '<tr><td colspan="2" align="center" style="vertical-align: top; padding: 10px 20px;background-color:#333"><span style="font-family:Tahoma; font-size:12px; color:#e8e8e8;">';
            if(global.get('store').val.sn){
                for(var key in global.get('store').val.sn){
                    if(global.get('store').val.sn[key].is){
                        if(global.get('store').val.template.index && global.get('store').val.template.index.icons
                            &&global.get('store').val.template.index.icons[key+'white']){
                            s+='<a href="'+global.get('store').val.sn[key].link+'">'+
                                '<img style="width: 24px; height: 24px;margin: 0 10px" src="'+global.get('store').val.link+global.get('store').val.template.index.icons[key+'white'].img+'">'
                                +'</a>'
                        }

                    }
                }

            }
                    s+='</span></td></tr>'+
                        '<tr style="background-color: #fff;color: #000"><td align="left" style="vertical-align: top; padding: 10px 20px"><span style="font-size:14px; ">';
                            if(global.get('store').val.footer && global.get('store').val.footer.text){
                                s+=global.get('store').val.footer.text;
                            }

                        s+='</span></td>';
                        s+='<td align="right" style="vertical-align: top; padding: 10px 20px"><span style="font-size:14px;">';
                            if(global.get('store').val.footer && global.get('store').val.footer.text1){
                                s+=global.get('store').val.footer.text1;
                            }

                    s+='</span></td></tr></table>';
            return s
        }
        // ********************пустой контент
        function empty(){
            var s ='<h1>информация  отсутствует</h1>'
            return '<!DOCTYPE html><html><head><meta charset=utf-8/>' +
                '<style type="text/css">' +
                '@media only screen and (max-device-width:660px){.table-mobile{display:none !important;}}' +
                '</style>' +
                '</head><body onload="window.print()"><div style="max-width: 800px">' +s + '</div><body></html>';
        }
        //*************************** end empty*************************
        function getLink(t,u) {
            if(!t || !u){return null}
            var d = global.get('store').val.domain;
            console.log("global.get('store').val.domain",global.get('store').val.domain)
            switch(t){
                case 'stuffs':return d+'/group/category/'+u;
                case 'categories':return d+'/group/'+u;
                case 'brandTags':return d+'/group/category?brandTag='+u;
                case 'brands':return d+'/group/category?brand='+u;
                case 'filterTags':return d+'/group/category?queryTag='+u;
                case 'campaign':return d+'/camapign/'+u;
            }
        }
        function emailFromNews(item){
            var s=
                '<table width="100%" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr width="100%" style="max-width:900px;"><td style="text-align: center; padding: 5px"><a href="'+global.get('store').val.link+'"><img  style="width: 100px;" src="'+photoHostForFactory+'/'+global.get('store').val.logo+'"></a></td></tr>'+
                '<tr width="100%" style="max-width:900px;"><td style="text-align: center; padding: 5px; font-size: 20px;"><h3>usernameforreplace</h3></td></tr>'+

                '<tr width="100%"><td><h2 style="font-weight: 500; letter-spacing: 2px; text-transform: uppercase; text-align: center; color: #333333; font-family:  Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+item.name+'</h2></td></tr>';
            s+=    '</table>';


            s+='<table class="table-mobile" width="100%" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333; border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0 " border="0">';
            if(item.blocks && item.blocks.length){
                item.blocks.forEach(function (block) {
                    if(block.name){
                        if(block.type=='text2'){
                            s+='<tr width="100%" style="max-width:900px;">' +
                                '<td style="padding: 5px">' +
                                '<h3 style="text-align: center; color: :#333333; font: 22px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none; text-transform: uppercase">'+((block.name)?block.name:'')+'</h3>' +
                                '</td>' +
                                '<td style="padding: 5px">' +
                                '<h3 style="text-align: center; color: :#333333; font: 22px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none; text-transform: uppercase">'+((block.name1)?block.name1:'')+'</h3>' +
                                '</td>' +
                                '</tr>';
                        }else{
                            s+='<tr width="100%" style="max-width:900px;"><td colspan="2" style="padding: 5px"><h3 style="text-align: center; color: :#333333; font: 22px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none; text-transform: uppercase">'+block.name+'</h3></td></tr>';
                        }


                    }
                    if(block.img){
                        s+='<tr width="100%" style="max-width:900px;"><td  colspan="2" width="100%" style=" padding: 5px" >' ;
                        if(block.link){
                            s+= '<a href="'+global.get('store').val.link+block.link+'" style="cursor: pointer;">'
                        }

                        s+= '<img alt="" style="width: 100%;margin-bottom: 10px; display: block" src="'+photoHostForFactory+'/'+block.img+'">';
                        if(block.link){
                            s+= '</a>'
                        }

                        s+= '</td></tr>';

                    }
                    //console.log(block)
                    if(block.desc){
                        if(block.type=='text2'){
                            //console.log(block)
                            s+='<tr width="100%" style="max-width:900px;">' +
                                '<td style="padding: 5px">' +
                                '<span style="text-align: justify;  color: :#333333; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+((block.desc)?block.desc:'')+'</span>' +
                                '</td>' +
                                '<td style="padding: 5px">' +
                                '<span style="text-align: justify;  color: :#333333; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+((block.desc1)?block.desc1:'')+'</span>' +
                                '</td>' +
                                '</tr>';
                        }else{
                            s+='<tr width="100%" style="max-width:900px;"><td colspan="2" style="padding: 5px"><span style="text-align: justify;  color: :#333333; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+block.desc+'</span></td></tr>';
                        }

                    }

                    if(block.imgs && block.imgs.length){
                        for (var i=0,l=block.imgs.length;i<l;i += 2){
                            //console.log(i,!!block.imgs[i])
                            s+='<tr>';
                            var link1;
                            if(block.imgs[i].link){
                                if(block.imgs[i].link.indexOf('http')<0){
                                    link1=global.get('store').val.link+block.imgs[i].link;
                                }else{
                                    link1=block.imgs[i].link;
                                }
                            }else{
                                if(block.imgs[i].url){
                                    link1=getLink(block.type,block.imgs[i].url)
                                }

                            }
                            s+='<td style="padding: 5px; text-align: center;vertical-align: top">';
                            if(link1){
                                s+='<a href="'+link1+'">';
                            }

                            s+='<img alt="" style="width: 100%; display: block" src="'+photoHostForFactory+'/'+block.imgs[i].img+'">';
                            if(block.imgs[i].name){
                                s+='<span style="font-weight: 700; color: #666666; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+block.imgs[i].name+'</span>' ;
                            }

                            if(link1){
                                s+='</a>';
                            }
                            s+='</td>';
                            if(block.imgs[i+1])   {
                                //console.log(i+1)
                                var link2;
                                if(block.imgs[i+1].link){
                                    if(block.imgs[i].link.indexOf('http')<0){
                                        link2=global.get('store').val.link+block.imgs[i+1].link;
                                    }else{
                                        if(block.imgs[i+1].link){
                                            link2=block.imgs[i+1].link;
                                        }

                                    }
                                }else{
                                    link1=getLink(block.type,block.imgs[i+1].url)
                                }
                                s+='<td style="padding: 5px; text-align: center;vertical-align: top">';
                                if(link2){
                                    s+='<a href="'+link2+'">';
                                }

                                s+='<img alt="" style="width: 100%; display: block" src="'+photoHostForFactory+'/'+block.imgs[i+1].img+'">';
                                if(block.imgs[i+1].name){
                                    s+='<span style="font-weight: 700; color: #666666; font: 18px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+block.imgs[i+1].name+'</span>' ;
                                }
                                if(link2){
                                    s+='</a>';
                                }
                                s+='</td>';
                            }else{
                                s+='<td style="padding: 5px; text-align: center;vertical-align: top"></td>'
                            }

                            s+='</tr>'
                        }
                    }
                })
            }
            s+='</table>';



            s+='<table width="900px" cellpadding="0" cellspacing="0" style="color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr><td border="0" colspan="2" style="border:none; border-top:#cccccc 5px solid;"></td></tr>'+
                /*'<tr><td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td><td/><td/>'+*/
                /*'<td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td></tr>'+*/
                '<tr><td align="right" style="vertical-align: top"><span style="font-family:Tahoma; font-size:12px; color:#404040;">';
            if(global.get('store').val.sn){
                for(var key in global.get('store').val.sn){
                    if(global.get('store').val.sn[key].is){
                        s+='<a href="'+global.get('store').val.sn[key].link+'">'+
                               '<img style="width: 24px; height: 24px;margin: 15px 5px" src="'+global.get('store').val.link+'/views/template/img/icon/sn_grey/'+
                            key+'.png">'
                            +'</a>'
                    }
                }

            }
            s+='</span>' +
                '<td align="right"><span style="font-family:Tahoma; font-size:14px; color:#404040;">';
            if(global.get('store').val.footer && global.get('store').val.footer.text){
                s+=global.get('store').val.footer.text;
            }
            s+='</span></td></tr>'+
                '</table>'
            return s;
            return '<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" type="text/css" href="http://gmall.io/bower_components/bootstrap/dist/css/bootstrap.css" />' +
                '</head><body onload="window.print()"><div class="reward-body">' + s + '</div>' +
                '</html>';
        }
        function emailBonus(stuffs){
            //console.log(stuffs)
            var nameEmail='бонусы'
            var item;

            var s=
                '<table width="100%" cellpadding="0" cellspacing="0" style="max-width:600px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr width="100%" style="max-width:600px;"><td style="text-align: center; padding: 5px"><img alt="посмотреть на сайте" style="width: 100px;" src="'+photoHostForFactory+'/'+global.get('store').val.logo+'"></td></tr>'+
                '<tr width="100%"><td><h2 style="font-weight: 500; letter-spacing: 2px; text-transform: uppercase; text-align: center; color: #333333; font-family:  Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+nameEmail+'</h2></td></tr>';


            s+='</table>';
            stuffs.forEach(function(stuff){
                item=stuff;
                if(item.imgs && item.imgs.length){
                    s+='<table class="table-mobile" width="100%" cellpadding="0" cellspacing="0" style="max-width:600px;color: #333333; border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">';
                    for (var i=0,l=item.imgs.length;i<l;i++){
                        if(item.imgs[i].name){
                            s+='<tr width="100%" style="max-width:600px;">' +
                                '<td style=" padding: 5px"><p style="color: #333333; font: 16px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+item.imgs[i].name+'</p></td>' +
                                '</tr>';
                        }


                        s+='<tr><td style="padding: 5px;">'+
                            '<img alt="бонусный купон"  style="width: 100%; display: block"   src="'+photoHostForFactory+'/'+item.imgs[i].img+'"></td>';

                        s+='</tr>'
                        if(item.imgs[i].desc){
                            s+='<tr width="100%" style="max-width:600px;"><td style=" padding: 5px"><p style="color: #333333; font: 16px Arial, sans-serif; line-height: 30px; -webkit-text-size-adjust:none;">'+item.imgs[i].desc+'</p></td></tr>';
                        }

                    }
                    s+='</table>';
                }
            })





            s+='<table width="600px" cellpadding="0" cellspacing="0" style="color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr><td border="0" colspan="2" style="border:none; border-top:#cccccc 5px solid;"></td></tr>'+
                '<tr><td align="left" style="vertical-align: top"><span style="font-family:Tahoma; font-size:12px; color:#404040;">';
            if(global.get('store').val.sn){
                for(var key in global.get('store').val.sn){
                    if(global.get('store').val.sn[key].is){
                        s+='<a href="'+global.get('store').val.sn[key].link+'">'+
                            '<img style="width: 24px; height: 24px;margin: 15px 5px" src="'+global.get('store').val.link+'/views/template/img/icon/sn_natur/'+
                            key+'.png">'
                            +'</a>'
                    }
                }

            }
            s+='</span>' +
                '<td align="right"><span style="font-family:Tahoma; font-size:16px; color:#404040;">';
            if(global.get('store').val.footer && global.get('store').val.footer.text){
                s+=global.get('store').val.footer.text;
            }
            s+='</span></td></tr>'+
                /*'<tr><td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td><td/><td/><td width="20" height="20"><img src="1450821408255127738039" width="20" height="20" /></td></tr>'+*/
                '</table>'
            //return s;
            return '<!DOCTYPE html><html><head><meta charset="UTF-8"></head><body><div>' + s + '</div></html>';
        }
        //************************************************************************************
        function orderNote(order){
            //console.log(order)
            var s='';
            s +='<h3 class="order-name">'+global.get('langOrder').val.order+' № '+order.num+'</h3> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll');
            s+='<p>'+global.get('langOrder').val.sum+' '+(order.paySum).toFixed(2)+' '+order.currency+'</p>';
            return s;
        }
        function dateTimeNote(entry){
            //console.log(order)
            var s='';
            s +='<h3 class="order-name">'+global.get('langOrder').val.dateTime+'</h3> '+global.get('langOrder').val.onn+' '+entry.dateForNote;
            s+='<p>'+global.get('store').val.texts.masterName[global.get('store').val.lang]+' - '+entry.masterName+'</p>';
            s+='<p>'+entry.service.name+'</p>';
            return s;
        }
        function dateTimeCancelNote(entry){
            //console.log(order)
            var s='';
            s +='<h3 class="order-name">'+global.get('langOrder').val.dateTime+'<span style="color:red"> '+global.get('langOrder').val.removed+'</span></h3> '+global.get('langOrder').val.onn+' '+entry.dateForNote;
            s+='<p>'+global.get('store').val.texts.masterName[global.get('store').val.lang]+' - '+entry.masterName+'</p>';
            s+='<p>'+entry.service.name+'</p>';
            s+='<p>'+entry.user.name+'- '+entry.user.phone+'</p>';
            return s;
        }
        // html контент для ордера счет уведосление
        function order(order,invoice,commentPrint){
            //console.log(order)
            //console.log(global.get('groups').val)
            var lang = global.get('store').val.lang;
            var texts=global.get('store').val.texts;
            var user = (order.profile && order.profile.admin)?order.profile.admin:order.profile.fio;
            if(!user){
                user=order.user.name
            }
            var orderMailText=(texts.orderMailText && texts.orderMailText[lang])?texts.orderMailText[lang]:'';
            if(order.profile && order.profile.admin){
                orderMailText=''
            }
            var name =global.get('langOrder').val.order+' № '+order.num+'<small> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</small>'

            var status = global.get('langOrder').val.entered.toUpperCase();
            if(order.status==2){
                status =global.get('langOrder').val.accepted.toUpperCase();
            }else if(order.status==3){status =global.get('langOrder').val.statuspaid.toUpperCase();
            }else if(order.status==4){status =global.get('langOrder').val.statussent.toUpperCase();
            }else if(order.status==5){status =global.get('langOrder').val.statusdelivered.toUpperCase();}
            user =global.get('langOrder').val.hello + ', '+user+'!';
            var s= getHeader(name)

            s+='<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
            '<tr  width="100%"><td colspan="2" style="padding: 0 20px;"><h3 style="font-size: 24px">'+user+'</h3></td></tr>';
            if(order.status==1){
                s+='<tr  width="100%"><td colspan="2" style="padding: 0 20px"><p>'+orderMailText+'</p></td></tr>';
            }


            s+='<tr style="max-width:900px;"><td width="50%" style="max-width:900px;padding: 10px 20px;font-size: 16px;vertical-align: top">'+
                '<h4 style="font-weight: bold">'+status+'</h4>'+
                '<h4 style="font-weight: bold">'+global.get('langOrder').val.order.toUpperCase()+' № '+order.num+'</h4>'+
                '<p style="margin-bottom: 30px">'+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</p>';
            if(commentPrint && order.comment){
                s +='<div><h4 style="font-weight: bold">'+global.get('langOrder').val.comments+'</h4><p>'+order.comment+'</p></div>';
            }
            if(invoice && order.payInfo){
                s +='<h4 style="font-weight: bold">'+global.get('langOrder').val.forpayment+'</h4>';
                s +='<p>'+order.payInfo+'</p>';
            }
            if(invoice){
                //console.log(order.checkOutLiqpayHtmlIs)
                if(order.checkOutLiqpayHtmlIs){
                    s+='<p>'+order.checkOutLiqpayHtml+'</p>'
                }
            }

            s+='</td>';
            s+= '<td style=" padding: 10px 20px; font-size: 16px;vertical-align: top;">'

            /*if(order.seller.name){
                s+='<p>'+global.get('langOrder').val.seller+'<strong>'+order.seller.name+'</strong></p>';
            }*/

            // данные покупателя
            s +='<h4 style="font-weight: bold">'+global.get('langOrder').val.customerdata+'</h4>';
            s +='<p> e-mail - '+order.user.email+'</p>';
            if(order.profile.fio){
                s +='<p> '+global.get('langOrder').val.name+'  - '+order.profile.fio+'</p>';
            }
            if(order.profile.phone){
                s +='<p> '+global.get('langOrder').val.phone+' - '+order.profile.phone+'</p>';
            }
            if(order.profile.city){
                s +='<p> '+global.get('langOrder').val.city+'  - '+order.profile.city+'</p></div>';
            }



            s+=    '</td></tr></table>';


            /*s +='<div class="container"><div class="col-lg-10 col-lg-offset-1"><div class="col-lg-6">'+
                '<h3>'+global.get('langOrder').val.order+' № '+order.num+'</h3> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'<br/>';*/

            s +='<table style="margin: 20px" width="860px" cellspacing="0" cellpadding="5" border="1px">';
            s+= '<thead><tr><th style="padding: 10px">#</th>' +
                '<th style="padding: 10px">'+global.get('langOrder').val.title+'</th>' +
                '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.species+'</th>' +
                '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.price+'</th>';
            s+='<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.quantity+'</th>' +
                '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.sum+'</th></tr></thead>';

            s += '<tbody>';
            var cart = order.cart.stuffs;
            for (var j=0,lj=cart.length;j<lj;j++){
                var good =cart[j];
                s +='<tr><td style="padding: 10px">'+(j+1)+'</td><td style="padding: 10px"> '+good.name+' '+((good.artikul)?good.artikul:'')+'</td>' +
                    '<td class="text-center" style="padding: 10px; text-align: center">'+((good.sortName)?good.sortName:'')+
                    '</td><td class="text-center" style="padding: 10px; text-align: center">'+(order.kurs*good.cena).toFixed(2)+' '+order.currency+
                    '</td><td class="text-center" style="padding: 10px; text-align: center">'+good.quantity+'</td><td class="text-center">'+ ( order.kurs*good.sum).toFixed(2)+' '+order.currency+
                    '</td></tr>';
            }
            s +='</tbody>';
            s+='<tbody class="cart-item-total">';
            s +='<tr><th colspan="4" style="padding: 10px">'+global.get('langOrder').val.sum+'</th>'+
                '<th class="text-center" style="padding: 10px; text-align: center">'+order.getTotalQuantity()+'</th><th style="padding: 10px; text-align: center" class="text-center">'+(order.kurs*((order.sum0)?order.sum0:order.sum)).toFixed(2)+' '+order.currency+'</th></tr>';
            if(order.discount){
                s +='<tr><th colspan="4" style="padding: 10px">'+global.get('langOrder').val.withdiscount+'</th>';
                s +=(order.sum<order.sum0)?'<th class="text-center"  style="padding: 10px; text-align: center">'+Math.round((1-order.sum/order.sum0)*100)+'%</th>':'<th class="text-center" style="padding: 10px; text-align: center"></th>';
                s +='<th class="text-center"  style="padding: 10px; text-align: center">'+(order.kurs*order.sum).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            if(order.coupon && order.coupon._id){
                s +='<tr><th colspan="4" style="padding: 10px">'+global.get('langOrder').val.basedcoupon+'</th><th></th>'+
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+(order.kurs*order.getCouponSum()).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            var totalDiscont=order.getTotalDiscount();
            /*if(totalDiscont){
                s +='<tr><th colspan="2">'+'сумма по учетной цене '+(order.priceSum).toFixed(2)+' '+order.currency +
                    '</th><th colspan="2">'+global.get('langOrder').val.totalDiscont+'</th><th></th>'+
                    '<th class="text-center">'+totalDiscont+'% '+'</th></tr>';
            }*/
            if(order.shipCost){
                s +='<tr><th colspan="4">'+global.get('langOrder').val.delivery+'</th><th></th>'+
                    '<th class="text-center" style="padding: 10px; text-align: center">'+(order.shipCost).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            if(order.totalPay){
                s +='<tr><th colspan="4">'+global.get('langOrder').val.paid+'</th><th></th>'+
                    '<th class="text-center" style="padding: 10px; text-align: center">'+(order.totalPay).toFixed(2)+' '+order.currency+'</th></tr>';
            }
            if(order.paySum!=order.getCouponSum()){
                s +='<tr><th colspan="4">'+global.get('langOrder').val.totaltopay+'</th><th></th>'+
                    '<th class="text-center" style="padding: 10px; text-align: center">'+(order.paySum).toFixed(2)+' '+order.currency+'</th></tr>';
            }


            s +='</tbody></table></div></div></div>';
            s += getFooter()
            return '<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" type="text/css" href="http://gmall.io/bower_components/bootstrap/dist/css/bootstrap.css" />' +
                '</head><body onload="window.print()"><div class="reward-body">' + s + '</div>' +
                '</html>';
        }
        // *************************end order
        //**************************************************************************************
        //**************************************************************************************
        //**************************************************************************************
        // ********************информация по доставке в ордере новая
        function orderShipInfo(order){
            //console.log(order.seller)
            var shipDetail= order.shipDetail;

            var lang = global.get('store').val.lang;
            var texts=global.get('store').val.texts;

            //console.log(order.status,texts.orderMailText[lang])
            var name =global.get('langOrder').val.order+' № '+order.num+'<small> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</small>'
            var user = global.get('user').val.profile.fio|| global.get('user').val.name;
            var status = global.get('langOrder').val.entered.toUpperCase();
            if(order.status==2){
                status =global.get('langOrder').val.accepted.toUpperCase();
            }else if(order.status==3){status =global.get('langOrder').val.statuspaid.toUpperCase();
            }else if(order.status==4){status =global.get('langOrder').val.statussent.toUpperCase();
            }else if(order.status==5){status =global.get('langOrder').val.statusdelivered.toUpperCase();}
            user =global.get('langOrder').val.hello + ', '+user+'!';
            var s= getHeader(name)

            s+='<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr  width="100%"><td colspan="2" style="padding: 20px;"><h3 style="font-size: 24px">'+user+'</h3></td></tr></table>';

            s+='<table width="900px" cellpadding="0" cellspacing="0" style="max-width:900px;color: #333333;border-collapse:collapse; border:none;table-layout: fixed; padding: 0;margin: 0" border="0">'+
                '<tr style="max-width:900px;"><td width="50%" style="max-width:900px;padding: 10px 20px;font-size: 16px;vertical-align: top">'+
                '<h4 style="font-weight: bold">'+global.get('langOrder').val.order.toUpperCase()+' № '+order.num+'</h4>'+
                '<p>'+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'</p>'+
                '<h4 style="font-weight: bold;margin-bottom: 30px">'+status+'</h4>'+
                '<h4 style="font-weight: bold">'+global.get('langOrder').val.aboutdelivery+'' +'</h4>'+
                '</td></tr></table>';


            if(shipDetail && shipDetail.length){
                s +='<table style="margin: 20px" width="860px" cellspacing="0" cellpadding="5" border="1px">';
                s+='<thead><tr><th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.title+'</th>' +
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.where+'</th>' +
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.waybill+'</th>' +
                    '<th class="text-center"  style="padding: 10px; text-align: center">'+global.get('langOrder').val.date+'</th>' +
                    '<th class="text-center" style="padding: 10px; text-align: center">'+global.get('langOrder').val.sum+'</th>';
                shipDetail.forEach(function(ship){
                    s+='<tr><td style="padding: 10px">';
                    ship.stuffs.forEach(function(stuff){
                        s+='<div style="width:80%;float:left">'+stuff.name+'</div><div style="float:left">'+stuff.qty+((stuff.unitOfMeasure)?(' '+stuff.unitOfMeasure):'')+'</div><div style="clear: both"></div><hr/>';
                    });
                    s+=ship.qty;
                    /*s+=''+global.get('langOrder').val.numberofunits+' <strong>'+ship.stuffs.length+'</strong>';*/
                    s+='</td><td style="padding: 10px; vertical-align: top">'+(ship.info||'')+'</td>';
                    s+='<td style="padding: 10px; vertical-align: top">'+(ship.ttn||'')+'</td>';
                    s+='<td style="padding: 10px; vertical-align: top">'+moment(ship.date).format("LLL")+'</td>';
                    s+='<td style="padding: 10px; vertical-align: top">'+(ship.sum||0).toFixed(2)+'&nbsp;'+order.currency+'</td></tr>';
                })
                s+="</table></br></br>";
            }else{
                s+='<h1>'+global.get('langOrder').val.infisnot+'</h1>'
            }
            s += getFooter()
            return '<!DOCTYPE html><html><head>' +
                '<link rel="stylesheet" type="text/css" href="http://gmall.io/bower_components/bootstrap/dist/css/bootstrap.css" />' +
                '</head><body onload="window.print()"><div class="reward-body">' + s + '</div>' +
                '</html>';
        }
        //*************************** end orderSPShipInfo*************************
        // ********************информация по доставке в ордере уведомление
        function shipInfoNote(order){
            var s='';
            s +='<h3>'+global.get('langOrder').val.order+' № '+order.num+'</h3><br/> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'';
            if(order.user.profile){
                if(order.user.profile.fio){
                    s+="<p>"+order.user.profile.fio+"</p>";
                }else{
                    s+="<p>"+order.user.name+"</p>";
                }
                if(order.user.profile.phone){
                    s+="<p>"+order.user.profile.phone+"</p>";
                }
            }

            s+='<p>'+global.get('langOrder').val.totaltopay+' <strong>'+(order.paySum).toFixed(2)+' </strong>'+order.currency+'</p>';
            s+='<p>'+global.get('langOrder').val.sentshipinfo+'</p>'
            return s;
        }

        function shipInfo(order,ship){
            if (!ship.ttn || !ship.info ) return;
            var s = '<h3>'+global.get('langOrder').val.aboutdelivery+' ' +'</h3>';
            '<p>'+global.get('langOrder').val.onawarrant+' №'+order.num+' '+global.get('langOrder').val.from+' '+moment(order.date ).format('lll')+'</p>';
            s+='<strong>'+global.get('langOrder').val.waybill+' - '+ship.ttn||''+'</strong>'+' '+global.get('langOrder').val.from+' '+moment(ship.date ).format('LL')+'</p>';
            if (ship.info){
                s+='<p>'+ship.info.substring(0,250)+'</p>';
            }
            if (ship.sum){
                s+='<strong>'+(ship.sum).toFixed(2)+' '+order.currency+'</strong>';
            }
            if (ship.stuffs && ship.stuffs.length){
                s+='<strong>  '+ship.stuffs.length+' ед.</strong>';
            }

            return s;
        }

        //*************************** end ShipInfo***************************************
        //*******************************информация о платеже в ордере
        function payInfo(order,pay){
            if (!pay.sum ) return;
            var s = '<h3>'+global.get('langOrder').val.makepayment+' ' + '</h3>';
            s+='<p>'+global.get('langOrder').val.onawarrant+' №'+order.num+'<br> '+global.get('langOrder').val.from+' '+moment(order.date ).format('lll')+'</p>';
            s+='<p><strong>'+(pay.sum).toFixed(2)+' '+order.currency+'</strong></p>'+' '+moment(pay.date ).format('LL');
            if (pay.info){
                s+='<p>'+pay.info.substring(0,150)+'</p>';
            }
            return s;
        }
        //*********************************end PayInfo*************************************
        //****************************************************************************************
        //**************************************************************************************
        // ********************подтверждение ордера
        function acceptedInfo(order){
            var s = '<h3>'+global.get('langOrder').val.byorders+' №'+order.num+'</h3>';
            s+=' '+global.get('langOrder').val.from+' '+moment(order.date ).format('lll')+'.';
            if(order.user.profile){
                if(order.user.profile.fio){
                    s+="<p>"+order.user.profile.fio+"</p>";
                }else{
                    s+="<p>"+order.user.name+"</p>";
                }
                if(order.user.profile.phone){
                    s+="<p>"+order.user.profile.phone+"</p>";
                }
            }
            s+='<p><strong>'+global.get('langOrder').val.accepted+' </strong></p>';
            return s;
        }
        //*********************************end acceptedInfo*************************************
        //****************************************************************************************

        function invoiceInfo(order){
            var s='';
            s +='<h3>'+global.get('langOrder').val.order+' № '+order.num+'</h3><br/> '+global.get('langOrder').val.from+' '+moment(order.date).format('lll')+'';
            if(order.user.profile){
                if(order.user.profile.fio){
                    s+="<p>"+order.user.profile.fio+"</p>";
                }else{
                    s+="<p>"+order.user.name+"</p>";
                }
                if(order.user.profile.phone){
                    s+="<p>"+order.user.profile.phone+"</p>";
                }
            }

            s+='<p>'+global.get('langOrder').val.totaltopay+' <strong>'+(order.paySum).toFixed(2)+' </strong>'+order.currency+'</p>';
            s+='<p>'+global.get('langOrder').val.sentthepost+'</p>'
            //console.log(s)
            /*if(order.payInfo){
                s +='<p>Данные для оплаты</p>';
                s +='<p>'+order.payInfo+'</p>';
            }*/
            return s;
        }
        function call(number){
            //console.log(number)
            //number=number.substring(0,20)
            var s='';
            s+='<h3>'+number+'</h3>'
            s+='<p>'+global.get('langOrder').val.requestacallback+'</p>'
            s+='<p>'+moment().format('LLLL')+'</p>'
            return s;
        }



        return {
            empty:empty,
            order : order,
            orderNote:orderNote,
            dateTimeNote:dateTimeNote,
            shipInfo:shipInfo,
            payInfo:payInfo,
            invoiceInfo:invoiceInfo,
            acceptedInfo:acceptedInfo,
            orderShipInfo:orderShipInfo,
            call:call,
            emailFromNews:emailFromNews,
            emailBonus:emailBonus,
            shipInfoNote:shipInfoNote,
            dateTimeCancelNote:dateTimeCancelNote

        }
    }])
'use strict';
angular.module('gmall.services')
.service('$order',['localStorage','global','Orders','$q','$uibModal','CartInOrder','exception','$email','CreateContent','$notification','$state','$window','Coupon','$user','$rootScope','$timeout','$http',function(localStorage,global,Orders,$q,$uibModal,CartInOrder,exception,$email,CreateContent,$notification,$state,$window,Coupon,$user,$rootScope,$timeout,$http){
    //console.log(global.get('seller').val);
    var order;
    var storageName;
    this.type=null;
    this.reinitCart=function(){
        //console.log('reinitCart')
        order.comment='';
        delete order.action;
        delete order._id;
        delete order.num;
        delete order.date;
        delete order.seller;
        var seller=global.get('store').val.seller;
        order.setSellerData(seller._id,seller.cascade,seller.opt);
    }
    this.initOrderInList=function (res) {
        var order= myShareData.getOrder();
        //console.log(order)
        //var order1= myShareData.getOrder();
        var campaign=(global.get('campaign'))?global.get('campaign').val:null;
        // console.log(campaign)
        var mainCurrency = global.get('store').val.mainCarrency;
        var currencyStore = global.get('store').val.currency;

        var currency = (global.get('currency') && global.get('currency').val)?global.get('currency').val:'UAH';
        var seller=global.get('store').val.seller;

        order.type='order';
        order._id=res._id;
        order.init(res.campaign,mainCurrency,currencyStore);
        order.setCurrency(res.currency);
        order.kurs=order.currencyStore[order.currency][0];
        order.payInfo=res.seller.payInfo;
        order.setSellerData(res.seller,res.cascade,res.opt)
        order.unitOfMeasure=order._getUnitOfMeasure()
        /*order.setCart(res.cart.stuffs)
         */
        order.cart._id=res.cart;
        order.setDiscount(res.discount)
        order.setCoupon(res.coupon)
        //order.totalCount= order._cartCount();
        order.date=res.date;
        order.date2=res.date2;
        order.date3=res.date3;
        order.date4=res.date4;
        order.date5=res.date5;
        order.invoice=res.invoice;
        order.invoiceInfo=res.invoiceInfo;
        order.pay=res.pay;
        order.shipCost=res.shipCost;
        order.num=res.num;
        order.status=res.status;
        order.profile=res.profile;
        order.comment=res.comment;
        order.note=res.note;
        order.user=res.user;
        order.shipDetail=res.shipDetail;
        order.domain=global.get('store').val.domain||global.get('store').val.subDomain;
        order.paySum=res.paySum;
        return order;
    }
    this.init=function(type,id){
        storageName=global.get('store').val._id;
        var q = $q.defer();
        order= myShareData.getOrder();
        //console.log(order)
        //var order1= myShareData.getOrder();
        var campaign=(global.get('campaign'))?global.get('campaign').val:null;
       // console.log(campaign)
        var mainCurrency = global.get('store').val.mainCarrency;
        var currencyStore = global.get('store').val.currency;

        var currency = (global.get('currency') && global.get('currency').val)?global.get('currency').val:'UAH';
        var seller=global.get('store').val.seller;
        this.type=type;
        order.type=type;
        // получили новый объект с меьлдами для расчета цены
        // создание нового ордера или корзина
        if(type=='cart'){
            //корзина
            order.init(campaign,mainCurrency,currencyStore);
            order.setSellerData(seller._id,seller.cascade,seller.opt)
            order.setCurrency(currency);
            order.kurs=order.currencyStore[order.currency][0];
            //localStorage.set(storageName,[]);
            var o= localStorage.get(storageName);
            //console.log(o)
            if(!o){
                o=[];
                localStorage.set(storageName,o);
            }
            order.setCart(o);
            order.unitOfMeasure=order._getUnitOfMeasure()
            //console.log(order.unitOfMeasure)
            order.totalCount= order._cartCount();
            q.resolve(order)
        }else if(type=='order') {
            Orders.get({_id:id},function(res){
                if(!res || !res._id){q.reject('404')}
                /*res.prototype=order.prototype;
                console.log(order)
                console.log(res)*/
                /*for(var k in res) order[k]=res[k];
                order.init(res.campaign,mainCurrency,currencyStore);
                order.setCurrency(res.currency);
                order.kurs=order.currencyStore[order.currency][0];
                order.payInfo=res.seller.payInfo;
                order.setSellerData(res.seller,res.cascade,res.opt)
                order.setCart(res.cart.stuffs)
                order.setDiscount(res.discount)
                order.setCoupon(res.coupon)
                order.totalCount= order._cartCount();*/
                order._id=res._id;
                order.init(res.campaign,mainCurrency,currencyStore);
                order.setCurrency(res.currency);
                order.kurs=order.currencyStore[order.currency][0];
                order.payInfo=res.seller.payInfo;
                order.setSellerData(res.seller,res.cascade,res.opt)
                order.setCart(res.cart.stuffs)
                order.unitOfMeasure=order._getUnitOfMeasure()
                order.cart._id=res.cart._id;
                order.setDiscount(res.discount)
                order.setCoupon(res.coupon)
                order.totalCount= order._cartCount();
                order.date=res.date;
                order.date2=res.date2;
                order.date3=res.date3;
                order.date4=res.date4;
                order.date5=res.date5;
                order.invoice=res.invoice;
                order.invoiceInfo=res.invoiceInfo;
                order.pay=res.pay;
                order.shipCost=res.shipCost;
                order.num=res.num;
                order.status=res.status;
                order.profile=res.profile;
                order.comment=res.comment;
                order.note=res.note;
                order.user=res.user;
                order.shipDetail=res.shipDetail;
                order.domain=global.get('store').val.domain||global.get('store').val.subDomain;
                //order=res;
                q.resolve(order)
            },function(err){
                q.reject(order)
            })
            order.totalCount= order._cartCount();
        }
        return q.promise;

    };
    this.getOrder=function(){
        return order;
    }
    this.addItemToCart = function(itemTo){
        //console.log(itemTo);return;
       //console.log(global.get('seller').val,itemTo.seller)
        itemTo.seller=global.get('seller').val;
        /*if (!itemTo.seller){
            itemTo.seller=global.get('seller').val;
        }
        console.log(itemTo)*/
        //if(itemTo.seller!=global.get('seller').val){return};
        itemTo.img=(itemTo.gallery && itemTo.gallery.length && itemTo.gallery[0].thumbSmall)?itemTo.gallery[0].thumbSmall:'';
        itemTo.quantity||(itemTo.quantity=1);
        //console.log(itemTo)
        order.addStuffToOrder(itemTo)
        this.updateOrder(itemTo);
    }
    this.checkInCart=function(item){
        //console.log(item.sort,item.name)
        return order.checkInCart(item)
    }
    this.updateOrder=function(itemTo){
        order.totalCount= order._cartCount();
        order.unitOfMeasure=order._getUnitOfMeasure()
        if(itemTo){
            //console.log('send message &')
            $rootScope.$broadcast('$updateOrder',itemTo);
        }
        //console.log(this.type)
        if (this.type=='cart'){
            //console.log(order.cart.stuffs)
            localStorage.set(storageName,order.cart.stuffs);
            order.totalCount= order._cartCount();
        }else{
            $timeout( function(){}, 100 )
                .then(function(){
                    var o=angular.copy(order.cart);
                    o.order=order._id;
                    return CartInOrder.save(o).$promise;
                })
                .then(function(){
                    order.priceSaleHandle=order.cart.stuffs.some(function(s){return s.priceSaleHandle})
                    order.maxDiscountOver=order.cart.stuffs.some(function(s){return s.maxDiscountOver})
                    return Orders.save({update:'totalCount sum paySum maxDiscountOver priceSaleHandle'},
                        {_id:order._id,
                            totalCount:order.totalCount,
                        sum:order.sum,
                        paySum:order.paySum,
                            priceSaleHandle:order.priceSaleHandle,
                            maxDiscountOver:order.maxDiscountOver,
                        }).$promise;
                })
                .then(function(){

                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                    //exception.showToaster('note','обновлено','')
                })
                .catch(function(error){
                    exception.catcher('сохранение изменений')(error)
                })

        }


    }
    this.removeItem=function(i){
        //console.log(i)
        order.cart.stuffs.splice(i,1);
        this.updateOrder();
    }
    this.decreaseQty=function(i){
        var stuff=order.cart.stuffs[i]
        if(stuff && stuff.quantity>1){
            if(stuff.multiple && stuff.minQty){
                if(stuff.quantity-1>=stuff.minQty){
                    stuff.quantity--
                    this.updateOrder();
                }
            }else{
                stuff.quantity--
                this.updateOrder();
            }

        }
    }
    this.increaseQty=function(i){
        var stuff=order.cart.stuffs[i]
        if(stuff) {
            if(stuff.single && stuff.maxQty){
                if (stuff.quantity + 1 <= stuff.maxQty) {
                    stuff.quantity++
                    this.updateOrder();
                }
            }else{
                stuff.quantity++
                this.updateOrder();
            }


        }
    }

    this.clearCart=function(){
        order.clearOrder();
        this.updateOrder();
    }
    this.cartCount=function(){
        return order.totalCount;
    }
    this.sendOrder=function(user){
        var self=this;
        return $q.when()
            .then(function () {
                try{
                    if(user){
                        if(!user._id){
                            conosole.log(user)
                            throw  'не авторизирован!';
                        }
                    } else{
                        if(global.get('user' ).val && global.get('user' ).val._id){
                            order.user=global.get('user' ).val;
                            //order.profile=global.get('user').val.profile;
                            order.profile=angular.copy(global.get('user').val.profile);
                        }else{
                            throw  'не авторизирован!';
                        }
                    }
                    order.action='order'
                    if (order.comment){
                        order.comment.clearTag(400);
                    }else{
                        order.comment=''
                    }
                    //*********************************************
                    if (order.coupon && order.coupon._id){
                        order.paySum=order.kurs*order.getCouponSum();

                    }else{
                        order.paySum=order.kurs*order.getTotalSum();
                    }
                }catch(err){
                    throw err
                }

            })
            .then(function(){
                // проверка купона. если есть купон в ордере.
                // если его нет у пользователя. получаем его, если купон активен и не просрочен, то
                //записываем его в использованные купоны у пользователя.
                // при удалении ордера купон у пользователя аннулируется.
                return $q(function(resolve,reject){
                    if (order.coupon && order.coupon._id){
                        if (!global.get('user' ).val.coupons){global.get('user' ).val.coupons=[]}
                        //user.coupons=[]
                        if (global.get('user' ).val.coupons.indexOf(order.coupon._id)>-1){
                            // купон уже был использован
                            order.coupon=null;
                            resolve();
                        }else{
                            var now= Date.now();
                            Coupon.get({_id:order.coupon._id},function(coupon){
                                //console.log(coupon)
                                if (coupon){
                                    // добавляем купон в список использованных
                                    if(!global.get('user' ).val.coupons){
                                        global.get('user' ).val.coupons=[];
                                    }
                                    global.get('user' ).val.coupons=global.get('user' ).val.coupons.filter(function(el){return el})
                                    global.get('user' ).val.coupons.push(coupon._id);
                                    //console.log(global.get('user' ).val.coupons)
                                    $user.save({update:'coupons'},{_id:global.get('user' ).val._id,coupons:global.get('user' ).val.coupons},function(res){
                                        resolve();
                                    },function(err){
                                        if(err){return reject(err)}
                                    });
                                }else{
                                    // купон просрочен или не активен
                                    order.coupon=null;
                                    resolve();
                                }
                            })
                        }
                    }else{
                        resolve();
                    }
                })
            })// coupon
            .then(function(){
                //throw order;
                //console.log(order)
                return Orders.save(order).$promise
            })//сам заказ
            .then(function(res){
                if(!res.num || !res._id){
                    throw 'заказ не отправлен. произошла ошибка на сервере. не присвоен номер ордеру';
                }
                try{
                    order._id = res.id;
                    order.num = res.num;
                    order.date = Date.now();
                    order.seller = global.get( 'store' ).val.seller;
                    order.status=1;
                }catch(err){
                    throw err
                }
                // для отправка письма

            })
            .then(function(){
                if(!global.get('store').val.seller.salemail){
                    return;
                }
                try{
                    // письмо
                    order.profile.admin='Admin'
                    var email=global.get('store').val.seller.salemail;
                    var content=CreateContent.order(order,false,true)
                    delete order.profile.admin;

                    var domain=global.get('store').val.domain,
                        subj = ((global.get('langOrder').val.neworder)?global.get('langOrder').val.neworder.toUpperCase()+' ✔':'НОВЫЙ ЗАКАЗ'+' ✔')
                    var o={email:email,content:content,
                        subject:subj,from:  global.get('store').val.name+'<sales@'+domain+'>'};
                }catch(err){
                    throw err
                }

                return $q(function(resolve,reject){
                    $email.save(o,function(res){
                        exception.showToaster('note',global.get('langNote').val.emailSent,'');
                        resolve()
                    },function(err){
                        exception.showToaster('warning',global.get('langNote').val.error,err.data)
                        resolve()
                    } )
                })
            }) //email
            .then(function(){
                //order.profile=global.get('user').val.profile;
                try{
                    // письмо
                    order.user=(user)?user:global.get('user').val;
                    var email =(user)?user.email:global.get('user').val.email;
                    /*if(global.get('store').val.seller.salemail){
                     email=[email,global.get('store').val.seller.salemail]
                     }*/
                    var content=CreateContent.order(order,false,true)
                    var domain=global.get('store').val.domain,
                        subj = ((global.get('langOrder').val.neworder)?global.get('langOrder').val.neworder.toUpperCase()+' ✔':'НОВЫЙ ЗАКАЗ'+' ✔')
                    var o={email:email,content:content,
                        //subject:global.get('langOrder').val.order+' ✔',from:  global.get('store').val.name+'<'+global.get('store').val.subDomain+'@'+domain+'>'};
                        subject:subj,from:  global.get('store').val.name+'<sales@'+domain+'>'};
                }catch(err){
                    throw err
                }

                return $q(function(resolve,reject){
                    $email.save(o,function(res){
                        resolve()
                    },function(err){
                        exception.showToaster('warning',global.get('langNote').val.error,err.data)
                        resolve()
                    } )
                })
            }) //email admin
            .then(function(){
                try{
                    // отправка уведомления
                    var content=CreateContent.orderNote(order)
                    var o={addressee:'seller',
                        type:'order',
                        content:content,order:order._id,
                        num:order.num,
                        seller:order.seller._id};
                }catch(err){
                    throw err
                }

                return $q(function(resolve,reject){
                    $notification.save(o,function(res){
                        exception.showToaster('note', global.get('langNote').val.sent,'');
                        resolve()
                    },function(err){
                        exception.catcher('error')(err);
                        resolve()
                    } )
                })
            })//notification
            .then(function(){
                try{
                    var states= $state.get();
                    if(global.get('paps') && states.some(function(state){return state.name=='thanksPage'})){
                        var pap = global.get('paps').val.getOFA('action','order');
                        //console.log(pap)
                        if(pap && pap.url){
                            $state.go('thanksPage',{id:pap.url})
                        }else{
                            exception.showToaster('note',global.get('langNote').val.orderSuccess,'');
                        }
                    }else{
                        exception.showToaster('note',global.get('langNote').val.orderSuccess,'');
                    }
                }catch(err){
                    throw err
                }


            })
            .catch(function(err){
               throw err
            })
    }

    this.changeCurrency=function(lan){
        order.changeCurrency(lan)
    }
    this.checkCampaign=function(stuff){
        if(order && order.type){
            return order.checkCampaign(stuff);
        }else{
            return null;
        }

    }
    this.checkOutFromList = function(user){
        order.comment= (user.comment)?user.comment:'';
        order.profile=user.profile;
        order.user=user._id;
        order.seller=global.get('store').val.seller._id;
        return this.sendOrder(user)
    }
    this.getShipInfo=function(){
        return $q(function(resolve,reject){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/order/modal/shipInfo.html',
                controller: shipInfoCtrl,
                controllerAs:'$ctrl',
                //size: 'lg',
                windowClass:'modalProject',
                //windowTopClass:'modalTopProject',
                backdropClass:'modalBackdropClass',
                //openedClass:'modalOpenedClass'
            });
            $rootScope.$emit('modalOpened')
            modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
        })
    }
    shipInfoCtrl.$inject=['$uibModalInstance','$rootScope']
    function shipInfoCtrl($uibModalInstance,$rootScope) {

        var self = this;
        $rootScope.$on('closeShipModal',function(){
            $uibModalInstance.close();
        })
        self.ok = function () {
            $uibModalInstance.close();
        }
        self.cancel = function () {
            $uibModalInstance.dismiss();
        };
    }

    this.getCheckOutLiqpayHtml=function(order,invoice) {
        //console.log(order)
        return $q.when()
            .then(function () {
                if(invoice){
                    return $http.post('/api/orders/checkoutLiqpayInvoice',order)
                }else{
                    return $http.post('/api/orders/checkoutLiqpay',order)
                }

            })
            .then(function (res) {
                //console.log(res)
                if(!res || !res.data.html){
                    return;
                }
                order.checkOutLiqpayHtml=res.data.html
                order.checkOutLiqpayHtmlIs=true;
            })
            .then(function(res){
            })
            .catch(function(err){
                exception.catcher('error')(err);
            })


        /*LiqPayCheckout.init({
         data: "eyAidmVyc2lvbiIgOiAzLCAicHVibGljX2tleSIgOiAieW91cl9wdWJsaWNfa2V5IiwgImFjdGlv" +
         "biIgOiAicGF5IiwgImFtb3VudCIgOiAxLCAiY3VycmVuY3kiIDogIlVTRCIsICJkZXNjcmlwdGlv" +
         "biIgOiAiZGVzY3JpcHRpb24gdGV4dCIsICJvcmRlcl9pZCIgOiAib3JkZXJfaWRfMSIgfQ==",
         signature: "QvJD5u9Fg55PCx/Hdz6lzWtYwcI=",
         embedTo: "#liqpay_checkout",
         mode: "popup" // embed || popup
         }).on("liqpay.callback", function(data){
         console.log(data.status);
         console.log(data);
         }).on("liqpay.ready", function(data){
         // ready
         }).on("liqpay.close", function(data){
         // close
         });*/
    }


}])
.factory('localStorage', function(){
    var APP_ID =  'frame-local-storage';

    // api exposure
    return {
        // return item value
        getB: function(item){

            return JSON.parse(localStorage.getItem(item) || 'false');
        },
        // return item value
        getN: function(item){
            var i = localStorage.getItem(item);
            if (i!='undefined'){
                return JSON.parse(i)
            }
            else
                return '';
        },
        // return item value
        get: function(item){
            return JSON.parse(localStorage.getItem(item) || '[]');
        },
        set: function(item, value){
            // set item value
            localStorage.setItem(item, JSON.stringify(value));
        }

    };

})

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Orders', orderService);

    orderService.$inject=['$resource','$uibModal','$q'];
    function orderService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Order/:_id',{_id:'@_id'});
        this.query=Items.query;
        this.get=Items.get;
        this.delete=Items.delete;
        this.save=Items.save;
        return {
            getList:getList,
            getItem:getItem,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                if(response && response.length){
                    response.forEach(function(o){
                        o.totalPay=(o.pay && o.pay.length)?o.pay.reduce(function(s,i){return s+=i.sum},0):0;
                    })
                }
                return response;
            }
            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(o) {
                //console.log(o)
                return o;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }

    }
})()


'use strict';
(function(){

    angular.module('gmall.services')
        .service('CartInOrder', cartInOrderService);

    cartInOrderService.$inject=['$resource','$uibModal','$q'];
    function cartInOrderService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/CartInOrder/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }

    }
})()


'use strict';
(function(){

    angular.module('gmall.services')
        .directive('cartItem',itemDirective)
        .directive('previewCart',previewCartDirective)
        .directive('addedCart',addedCartDirective)
    function itemDirective(){
        //var s =(global.get('store').val.template.cartTempl)?global.get('store').val.template.cartTempl:'';
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/cart.html'
        }
    }
    function previewCartDirective(){
        return {
            scope:{},
            restrict:"EA",
            bindToController: true,
            controller: previewCartCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            templateUrl:'views/template/partials/cart/previewCart.html'
        }
    }
    function addedCartDirective(){
        return {
            scope:{},
            bindToController: true,
            controller: function($scope,$element,$timeout,global){
                $($element).fadeOut()
                var self = this;
                self.global=global;
                self.addItem=null;
                var timer=null;
                $scope.$on('$updateOrder',function(event,itemTo){
                    //console.log(itemTo)
                    self.addItem=angular.copy(itemTo);
                    //console.log(timer)
                    if(timer){
                        $timeout.cancel(timer)
                    }else{
                        $($element).fadeIn()
                    }
                    timer = $timeout(function () {
                        self.addItem =null;
                        timer=null;
                        $($element).fadeOut()
                    },2500)

                });
                $($element).hover(function () {
                    if(timer){
                        $timeout.cancel(timer)
                        timer=null
                    }
                },function () {
                    $($element).fadeOut()
                })
                $($element).click(function () {
                    $($element).fadeOut()
                })

            },
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/cart/addedCart.html'
        }
    }

    itemCtrl.$inject=['$scope','$anchorScroll','$order','global','exception','Confirm','$user','$q','CreateContent','$email','$notification','$state','$rootScope','$timeout'];
    function itemCtrl($scope,$anchorScroll,$order,global,exception,Confirm,$user,$q,CreateContent,$email,$notification,$state,$rootScope,$timeout){
        var self = this;
        $scope.myInterval = 2000;
        $scope.noWrapSlides = true;
        $scope.active33 = 2;
        var slides = $scope.slides = [];
        var currIndex = 0;
        $scope.addSlide = function() {
            var newWidth = 600 + slides.length + 1;
            slides.push({
                image: '//unsplash.it/' + newWidth + '/300',
                text: ['Nice image','Awesome photograph','That is so cool','I love that'][slides.length % 4],
                id: currIndex++
            });
        };

        $scope.randomize = function() {
            var indexes = generateIndexesArray();
            assignNewIndexesToSlides(indexes);
        };

        for (var i = 0; i < 4; i++) {
            $scope.addSlide();
        }




        self.currentBlock=0;
        var w2,blocks,widthBlock,cartSlidePageElement;
        self.global=global;
        self.mobile=global.get('mobile' ).val;
        //??
        /*console.log(global.get('store').val.seller.retail)
        console.log(global.get('store').val.seller.opt.quantity)*/
        self.opt=(global.get('store').val.seller.opt && global.get('store').val.seller.opt.quantity)?global.get('store').val.seller.opt.quantity:0;
        var retail=global.get('store').val.seller.retail
        self.disabledMessage=(self.opt>1&&!retail)?true:false;
        //console.log(self.disabledCheckOut);
        self.countryCode=global.get('country');
        self.clearCart=clearCart;
        self.removeItem=removeItem;
        self.saveCart=saveCart;
        self.checkOut=checkOut;
        self.enableCheckOut=enableCheckOut;
        self.goToStuff=goToStuff;
        self.disabledCheckOut=disabledCheckOut
        self.back=back;
        self.getFilterName=getFilterName;
        self.decreaseQty=decreaseQty
        self.increaseQty=increaseQty
        self.setCouponForOrder=setCouponForOrder;

        //********************activate***************************
        //var initDone=false;
        activate();
        $rootScope.$on('cartslide',function(event,data){
            console.log(data)
            //return;
            if(data){
                if(data.event =="shipInfoDone"){
                    sendOrder()
                }else if(data.event =="shipInfoDone"){
                    setSlide(0)
                }else if(data.event =="signLogin"){
                    forward()
                }else if(data.event =="init"){
                    setSlide(0)
                    /*if(!initDone){
                        initDone=true;
                        setSlide(0)
                    }*/
                }
            }
        })
        //*******************************************************
        function _setCoupons(){
            self.coupons=null;
            if(global.get('coupons') && global.get('coupons').val && global.get('coupons').val.length){
                global.get('coupons').val.forEach(function(c){
                    if(global.get('user').val){
                        if(global.get('user').val.coupons.indexOf(c._id)<0){
                            if(!self.coupons){
                                self.coupons=[]
                            }
                            self.coupons.push(c)
                        }
                    }else{
                        if(!self.coupons){
                            self.coupons=[]
                        }
                        self.coupons.push(c)
                    }
                })
            }
            //console.log(self.coupons)
            self.coupon=null;
            if(global.get('coupons') && global.get('coupons').val && global.get('user').val){
                if(global.get('coupons').val[0] && global.get('user').val.coupons.indexOf(global.get('coupons').val[0]._id)<0){
                    self.coupon=global.get('coupons').val[0]
                }else if(global.get('coupons').val[1] && global.get('user').val.coupons.indexOf(global.get('coupons').val[1]._id)<0){
                    self.coupon=global.get('coupons').val[1]
                }
            }else if(!global.get('user').val && global.get('coupons') && global.get('coupons').val){
                self.coupon=global.get('coupons').val[0]
            }
            //console.log(self.coupon)
        }
        function activate() {

            // если корзина была инициализированна, то просто получаем ордер.
            if(!$order.type || $order.type!='cart'){
                $order.init('cart' ).then(function(order){
                    self.order=order;

                })
            }else{
                self.order=$order.getOrder();
            }
            console.log(self.order)
            //console.log(self.order.cart.stuffs)
            $anchorScroll();
            // купон
            //console.log(global.get('user').val)
            _setCoupons()
            $scope.$on('logged',function(){
               _setCoupons();
                //console.log('logged')
            })
            if(global.get('store').val.cartSetting && global.get('store').val.cartSetting.slide){
                setSlide(0)
            }

        }

        function clearCart(){
            Confirm(global.get('langNote').val.clean+"?")
                .then(function(){
                    $order.clearCart();
                } ).catch(function(err){
                err = (err &&err.data)||err
                if(err){
                    exception.catcher(global.get('langNote').val.error)(err)
                }
            })
        }
        function removeItem(i){
            Confirm(global.get('lang').val.delete+'?').then(function () {
                $order.removeItem(i);
            })

        }
        function saveCart(stuff){
            //console.log(stuff)
            if(stuff){
                if(stuff.quantity){
                    if(stuff.quantity>stuff.maxQty){
                        stuff.quantity=stuff.maxQty
                        exception.catcher(global.get('langNote').val.error)('слишком много')
                    }else if(stuff.quantity<stuff.minQty){
                        stuff.quantity=stuff.minQty
                        exception.catcher(global.get('langNote').val.error)('слишком мало')
                    }else{
                        $order.updateOrder();
                    }
                }

            }else{
                $order.updateOrder();
            }

        }
        function decreaseQty(i){
            $order.decreaseQty(i)
        }
        function increaseQty(i){
            $order.increaseQty(i)
        }
        function checkOut(){

            $rootScope.$emit('InitiateCheckout')



            //console.log('checkOut')
            if(!self.order.cart.stuffs.length){return}
            //console.log(global.get('user').val)
            if(global.get('store').val.cartSetting && global.get('store').val.cartSetting.slide){
                if(global.get('user').val && global.get('user' ).val._id){
                    // проезжаем регистрацию
                    forward(2)
                }else{
                    forward()
                }
            }else{
                self.order = $order.getOrder();
                $q.when()
                    .then(function(){
                        if(!global.get('user' ).val || !global.get('user' ).val._id){
                            return $user.login();
                        }else{
                            return
                        }
                    })
                    .then(function(){
                        return $order.getShipInfo()
                    })
                    .then(function(){
                        return sendOrder()
                    })

            }



        }

        function sendOrder(){
            return $q.when()
                .then(function(){
                    $rootScope.$emit('$stateChangeStartToStuff');
                    return $order.sendOrder()
                })
                .then(function(){
                    return;
                    /*$rootScope.$emit('$stateChangeEndToStuff');
                    $order.init('cart');
                    $order.clearCart()
                    self.order=$order.getOrder();
                    $rootScope.order=$order.getOrder();
                    self.order.setCoupon(null)
                    _setCoupons();
                    $rootScope.$emit('Purchase');
                    $rootScope.checkedMenu.cart=false*/
                })
                .then(function () {
                    $rootScope.$emit('$stateChangeEndToStuff');
                    $rootScope.$emit('Purchase',{value:$order.paySum,currency:$order.currency});
                    $order.reinitCart()
                    $rootScope.order=$order.getOrder();
                    self.order.setCoupon(null)
                    _setCoupons();
                    $order.clearCart()
                    $rootScope.checkedMenu.cart=false
                })
                .then(function(){
                    return $user.saveProfile(global.get('user' ).val)
                })
                .catch(function(err){
                    $rootScope.$emit('$stateChangeEndToStuff');
                    if(!err){return;}
                    console.log('errerrerr ',err)
                    if(err.data){
                        var content = JSON.stringify(err.data);
                    }else{
                        var content = JSON.stringify(err, ["message", "arguments", "type", "name"]);
                    }
                    if(global.get('user').val){
                        content +="\r"+global.get('user').val.email
                    }

                    if($order.getOrder()){
                        content +="\r"+JSON.stringify($order.getOrder(), null, 4)
                    }
                    //console.log(content)
                    var domain=global.get('store').val.domain;
                    var o={email:['igorchugurov@gmail.com','vikachugurova@gmail.com'],content:content,
                        subject:'error in order ✔',from:  global.get('store').val.name+'<'+global.get('store').val.subDomain+'@'+domain+'>'};
                    //console.log(o)
                    $q(function(resolve,reject){$email.save(o,function(res){resolve()},function(err){resolve()} )})

                    if(err){
                        exception.catcher(global.get('langNote').val.error)(err)
                    }
                })
        }
        function enableCheckOut(){
            //console.log(self.opt,retail,self.order)
            if(!self.order.totalCount || !self.order.cart.stuffs.length){
                return false
            }else if(self.opt>1 && !retail && self.order.totalCount<self.opt){
                return false
            }else{
                return true;
            }
        }
        function goToStuff(o){
            var states= $state.get();
            if(states.some(function(state){return state.name=='frame.stuffs.stuff'})){
                $state.go('frame.stuffs.stuff',o)
            }else if(states.some(function(state){return state.name=='stuffs.stuff'})){
                $state.go('stuffs.stuff',o)
            }
        }

        function disabledCheckOut(){
            //console.log(self.order)
            if(!self.order.cart.stuffs.length){
                return true;
            }
        }

        function back() {
            if(self.currentBlock==2 && global.get('user').val){
                self.currentBlock=1;
            }
            if(self.currentBlock){self.currentBlock--}
        }
        function forward(num){
            if(num){
                self.currentBlock+=num
            }else{
                self.currentBlock++
            }
            console.log(self.currentBlock)
        }
        function setSlide(s){
            self.currentBlock=s;
        }

        function getFilterName(tag){
            //console.log(tag)
            var t = global.get('filterTags').val.getOFA('_id',tag)
            if(t && t.filter){
                var f = global.get('filters').val.getOFA('_id',t.filter)
                if(f){return f.name}else{
                    return ''
                }
            }else{return ''}
        }
        function setCouponForOrder(c,e) {
            e.stopPropagation()
            self.order.setCoupon(c)
        }
    }


    previewCartCtrl.$inject=['$scope','$anchorScroll','global','exception','$q','$state','$order','$element','$timeout','$rootScope'];
    function previewCartCtrl($scope,$anchorScroll,global,exception,$q,$state,$order,$element,$timeout,$rootScope){
        var self = this;
        self.global=global;
        //self.showPreview=false;
        var listDiv= $element.find('.cartItems')[0]
        $(listDiv).fadeOut()
        var hoverIn;
        $($element).hover(function () {
            //console.log('in')
            hoverIn=true
            $timeout(function () {
                if(hoverIn ){
                    $(listDiv).fadeIn(150)
                }
            },50)
            $(listDiv).fadeIn(100)
        },function () {
            //console.log('out')
            hoverIn=false
            $timeout(function () {
                if(!hoverIn ){
                    $(listDiv).fadeOut(100)
                }
            },100)

        })
        //$scope.$on('updateOrder',function(itemTo){console.log(itemTo)});


        self.global=global;
        self.mobile=global.get('mobile' ).val;
        self.opt=(global.get('store').val.seller.opt && global.get('store').val.seller.opt.quantity)?global.get('store').val.seller.opt.quantity:0;
        var retail=global.get('store').val.seller.retail
        self.disabledMessage=(self.opt>1&&!retail)?true:false;
        self.countryCode=global.get('country');
        self.removeItem=removeItem;
        self.saveCart=saveCart;
        self.goToStuff=goToStuff;

        //********************activate***************************

        //*******************************************************
        $timeout(function () {
            activate()
        },400)

        function activate() {
            //console.log("$order.type",$order.type)
            // если корзина была инициализированна, то просто получаем ордер.
            if(!$order.type || $order.type!='cart'){
                $order.init('cart' ).then(function(order){
                    self.order=order;
                })
            }else{
                self.order=$order.getOrder();
            }
            //self.inCart = self.items.cart.stuffs.reduce(function(sum,stuff){return sum+stuff.quantity},0)
            //console.log(self.order)
            $anchorScroll();
            self.loaded=true;
        }
        function removeItem(i){
            $order.removeItem(i);
        }
        function saveCart(){
            $order.updateOrder();
        }

        function goToStuff(o){
            var states= $state.get();
            if(states.some(function(state){return state.name=='frame.stuffs.stuff'})){
                $state.go('frame.stuffs.stuff',o)
            }else if(states.some(function(state){return state.name=='stuffs.stuff'})){
                $state.go('stuffs.stuff',o)
            }
        }

        $rootScope.$on('Purchase',function(){
            self.order=$order.getOrder();
        })

    }
})()


'use strict';
angular.module('gmall.services')
.factory('$notification', function ($resource) {
    var Items= $resource('/api/collections/Notification/:id',{id:'@_id'}, {
        deleteArray: { method: 'DELETE'},
        updateNote: {method:'POST', params:{update:'note'}}
    });
    return {
        getList:getList,
        query:Items.query,
        get:Items.get,
        save:Items.save,
        delete:Items.delete,
    }
    function getList(paginate,query){
        var data ={perPage:paginate.rows ,page:paginate.page,query:query};
        return Items.query(data).$promise
            .then(getListComplete)
        function getListComplete(response) {
            if(paginate.page==0){
                if(response && response.length){
                    paginate.items=response.shift().index;
                }else{
                    paginate.items=0;
                }
            }
            return response;
        }
    }
})


'use strict';
(function(){
    'use strict';
    angular.module('gmall.services')
        .factory('Session',['$resource', function ($resource) {
            return $resource('/api/session/');
        }])
        .factory('User', function ($resource) {
            return $resource('/api/users/:id/:email', {
                id: '@id'
            }, { //parameters default
                update: {
                    method: 'PUT',
                    params: {
                        id:'profile',
                        email:''
                    }
                },
                updateCoupon: {
                    method: 'PUT',
                    params: {
                        id:'coupon',
                        email:''
                    }
                },
                updatePswd: {
                    method: 'PUT',
                    params: {
                        // id:'profile'
                        id:'changepswd',
                        email:''
                    }
                },
                resetPswd: {
                    method: 'POST',
                    params: {
                        id:'resetpswd',
                        email:'@email'
                    }
                },
                get: {
                    method: 'GET',
                    params: {
                        id:'me',
                        email:''
                    }
                },
                checkEmail: {
                    method: 'GET',
                    params: {
                        id:'checkemail',
                       /* email:''*/
                    }
                },
                checkPhone: {
                    method: 'GET',
                    params: {
                        id:'checkphone',
                       /* email:''*/
                    }
                },
                useCoupon: {
                    method: 'GET',
                    params: {
                        id:'useCoupon'
                    }
                },
                cancelCoupon: {
                    method: 'GET',
                    params: {
                        id:'cancelCoupon'
                    }
                },
                repeatMailForConfirm: {
                    method: 'GET',
                    params: {
                        id:'repeatMailForConfirm'
                    }
                },

            });
        })
        .service('$user', userService)
        .service('UserEntry', userEntryService)
        .factory('Account', accountFactory)
        .factory('sendPhoneFactory', sendPhoneFactory)
        .service('SubscibtionList', subscibtionListService)

    userService.$inject=['$resource','$uibModal','$q','Session','User','global','exception','$state','$window','$rootScope','$http','$auth','Account'];
    function userService($resource,$uibModal,$q,Session,User,global,exception,$state,$window,$rootScope,$http,$auth,Account){
        var Items= $resource('/api/collections/User/:_id',{_id:'@_id'});
        //console.log(userHost)
        this.query=Items.query;
        this.get=Items.get;
        this.delete=Items.delete;
        this.save=Items.save;
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            selectItem:selectItem,
            selectOrCreat:selectOrCreat,
            login:login,
            loginOnlyPhone:loginOnlyPhone,
            logout:logout,
            saveProfile:saveProfile,
            newUser:newUser,
            newUserByPhone:newUserByPhone,
            query:Items.query,
            getInfo:getInfo,
            createUser:createUser,
            changePswd:changePswd,
            getInfoBonus:getInfoBonus,
            changeEmail:changeEmail,
            changePhone:changePhone,
            checkEmailForExist:checkEmailForExist,
            checkPhoneForExist:checkPhoneForExist,
        }

        function newUser(name,email,password){
            if(!name){
                name=email.split('@')[0]
            }
            return User.save({name: name, email: email,password: password,action:'subscribtion'} ).$promise
                .then( function(user) {
                    $rootScope.emit('CompleteRegistration')
                    //console.log(user)
                    if(global && global.get('user')){global.set('user',user);}
                    if ((global.get('local') && !global.get('local').val) && $window.ga){
                        $window.ga('send', 'event','registration','complete');}
                    if ($state.current.name!='cart' && $state.current.name!='couponDetail'){
                        var states= $state.get();
                        if(global.get('paps') && states.some(function(state){return state.name=='thanksPage'})){
                            var pap = global.get('paps').val.getOFA('action','subscribtion');
                            if (pap && pap.url){
                                $state.go('thanksPage',{url:pap.url})
                            } else {
                                //exception.showToaster('note','Подписка','вы успешно зарегистрировались');
                            }
                        }else{
                            //exception.showToaster('note','Подписка','вы успешно зарегистрировались');
                        }
                    }else {
                        //exception.showToaster('note','Подписка','вы успешно зарегистрировались');
                    }
                    return user;
                })
        }
        function newUserByPhone(name,phone) {
            var email= phone+'@gmall.io'
            var user = {email:email,name:name,profile:{phone:phone,fio:name}};
            return $auth.signup(user)
                .then(function(response) {
                    console.log(response)
                    if(response && response.data &&  response.data.token){
                        if(response.data.token=='update'){
                            throw null;
                        }else{
                            //$auth.setToken(response);
                            //return Account.getProfile()
                        }
                    } else{
                        throw response;
                    }

                })
                .then(function(response){
                    /*console.log(response)
                    if(response){
                        global.set('user',response.data);
                        global.get('functions').val.logged();
                    }*/

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('new client')(err)
                    }
                })

        }
        function getList(paginate,query){
            //console.log(query)
            if(!paginate){paginate={}}
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
            function getListFailed(error) {
                /*console.log('XHR Failed for getList.' + error.data);
                console.log(error.data)*/
                return $q.reject(error);
            }
        }
        function getItem(id,param){
            return Items.get({_id:id,param:param}).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function selectItem(query){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/selectUser.html',
                    controller: function($user,$uibModalInstance,query){
                        //console.log(query)
                        var cashQuery=angular.copy(query)
                        var self=this;
                        self.items=[];
                        self.name='';
                        var paginate={page:0,rows:30,items:0}
                        self.search = function(name){
                            var q=angular.copy(query);
                            if (name.length<3){return}
                            //console.log(query)
                            if(q){
                                if (!q.$and){q={$and:[query]}}
                                q.$and.push({$or:[{name:name},{email:name}, {'profile.fio':name}]})
                            }else{
                                q={$or:[{name:name},{email:name}, {'profile.fio':name}]}
                            }
                            //console.log(query)
                            $user.getList(paginate,q).then(function(res){
                                self.items=res;
                            })
                        }
                        self.selectItem=function(item){
                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',
                    resolve:{
                        query:function(){
                            return query;
                        }
                    }
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })

        }

        function selectOrCreat(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/selectOrCreate.html',
                    controller: function($user,UserEntry,global,$uibModalInstance){
                        var self=this;
                        self.items=[];
                        self.user='';
                        self.oldPhone=null;
                        self.userName='name';
                        self.userEmail='';
                        self.global=global;
                        self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
                        self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';
                        var paginate={page:0,rows:30,items:0}
                        self.refreshUsers=refreshUsers;
                        self.addUser=addUser;
                        self.clearUser=clearUser;
                        function refreshUsers(str){
                            if (str.length<3){return}
                            //var newVal = phone.replace(pattern, '').substring(0,10);
                            //self.oldPhone=phone
                            //if(self.oldPhone==phone){return}else{self.oldPhone=phone}
                            searchUser(str)
                        }
                        var reg = new RegExp(/^\d+$/);
                        function searchUser(str){
                            /*console.log(reg.test(str))
                            console.log(str,jQuery.isNumeric(str))*/
                            if(isNumeric(str)){
                                if(str.length>10){
                                    self.oldPhone=str.substring(0,10);
                                }else{
                                    var d = 10-str.length;
                                    for(var i=0;i<d;i++){
                                        str+='0';
                                    }
                                    self.oldPhone=str
                                }

                                self.userName=''
                            }else{
                                self.oldPhone=null;
                                self.userName=str;
                            }

                            self.users=[]
                            var users=[];
                            var q={$or:[{name:str},{email:str}, {'profile.fio':str},{'profile.phone':str}]}
                            var q1= {$or:[{'phone':str},{name:str},{email:str}]}

                            var acts=[];
                            acts.push(get$user(q))
                            acts.push(getEntryUser(q1))
                            $q.all(acts)
                                .then(function(res){
                                    if(res[0] && res[0].length){
                                        res[0].forEach(function(item){
                                            item.type='user'
                                            users.push(item)
                                        })
                                    }
                                    if(res[1] && res[1].length){
                                        res[1].forEach(function(item){
                                            item.type='userEntry'
                                            users.push(item)
                                        })
                                    }
                                    self.users=users;
                                })


                        }
                        function get$user(q){
                            return $user.getList(paginate,q)
                        }
                        function getEntryUser(q){
                            return  UserEntry.getList(paginate,q)
                        }
                        function addUser(){
                           // console.log('add user')
                            var user={name:self.userName,
                                email:self.userEmail,
                                phone:self.phoneCode.substring(1)+self.oldPhone.substring(0,10),
                                type:"userEntry"
                            }
                            return $q.when()
                                .then(function(){
                                    return UserEntry.save(user).$promise
                                })
                                .then(function(res){
                                    user._id=(res._id)?res._id:res.id;
                                    self.addingUser=false;
                                    self.userName='';
                                    self.user=user;
                                    //console.log(user)
                                    self.oldPhone=''
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('новый клиент')(err)
                                    }
                                })
                        }
                        function clearUser(){
                            self.user=null;
                        }
                        self.ok=function(){
                            $uibModalInstance.close(self.user);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        function isNumeric(n) {
                            return !isNaN(parseFloat(n)) && isFinite(n);
                        }
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',

                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })

        }
        function saveProfile(user){
            return Items.save({update:'profile'},{_id:user._id,profile:user.profile}).$promise;
        }
        function login(){
            return $q(function(resolve,reject){
                if(global.get('user') && global.get('user').val && global.get('user').val._id){
                    return resolve()
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/login-sign.html',
                    controller: loginCtrl2,
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        function loginOnlyPhone(){
            return $q(function(resolve,reject){
                if(global.get('user') && global.get('user').val && global.get('user').val._id){
                    return resolve()
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/login-sign.onlyPhone.html',
                    controller: loginOnlyPhoneCtrl,
                    controllerAs:'$ctrl',
                    windowClass:'modalProject',
                    backdropClass:'modalBackdropClass',
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        function getInfo(service){
            service=false;
            service=(service)?'Service':'Good'
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/getInfo.html',
                    controller: getInfoCtrl,
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                    resolve:{
                        service:function(){return service}
                    }
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        getInfoCtrl.$inject=['$uibModalInstance','exception','global','User','$q','$http','service',Account];
        function getInfoCtrl($uibModalInstance,exception,global,User,$q,$http,service,Account){
            var self=this;
            self.service=service;
            self.global=global;
            self.user=global.get('user' ).val;
            if(!self.user){
                self.user={email:'',profile:{}};
            }
            self.ok=closeModal;
            function  closeModal(){
                $q.when()
                    .then(function(){
                        // если не авторизированy
                        /*нужен айд пользователя*/
                        if(!self.user._id){
                            return $http.post('/auth/signupOrder',self.user)
                        }else{
                            // обновляем профайл
                            return Items.save({update:'profile'},{_id:self.user._id,profile:self.user.profile}).$promise
                        }
                    })
                    .then(function(response){
                        if(response && response.data && response.data.token){
                            $auth.setToken(response);
                            return Account.getProfile()
                        }else if(response && response.data && response.data._id) {
                            self.user._id = response.data._id;
                        }/*else{
                            $uibModalInstance.dismiss('не получилось авторизировать');
                        }*/

                    })
                    .then(function(){
                        if (global.get('user').val){
                            self.user=global.get('user').val;
                        }
                        $uibModalInstance.close(self.user);
                    })

            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }


        function getInfoBonus(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/getInfoBonus.html',
                    controller: getInfoBonusCtrl,
                    controllerAs:'$ctrl',
                    //size: 'lg',
                    windowClass:'modalProject',
                    //windowTopClass:'modalTopProject',
                    backdropClass:'modalBackdropClass',
                    //openedClass:'modalOpenedClass'
                });
                $rootScope.$emit('modalOpened')
                modalInstance.result.then(function(item){$rootScope.$emit('modalClosed');resolve(item)},function(){$rootScope.$emit('modalClosed');reject()});
            })

        }
        getInfoBonusCtrl.$inject=['$uibModalInstance','exception','global','User','$q','$http','Account','$auth'];
        function getInfoBonusCtrl($uibModalInstance,exception,global,User,$q,$http,Account,$auth){
            var self=this;
            self.global=global;
            self.user=global.get('user').val;
            self.formData=(global.get('store').val.bonusForm)?global.get('store').val.bonusForm:null;
            //console.log(self.formData)
            if(!self.user){
                self.user={email:'',profile:{},addInfo:{}};
            }
            self.ok=closeModal;
            function  closeModal(){
                $q.when()
                    .then(function(){
                        // если не авторизированy
                        /*нужен айд пользователя*/
                        if(!self.user._id){
                            return $http.post('/auth/signupOrder',self.user)
                        }else{
                            // обновляем профайл
                            return Items.save({update:'profile'},{_id:self.user._id,profile:self.user.profile}).$promise
                        }
                    })
                    .then(function(response){
                        if(response && response.data && response.data.token){
                            $auth.setToken(response);
                            return Account.getProfile()
                        }else if(response && response.data && response.data._id) {
                            self.user._id = response.data._id;
                        }

                    })
                    .then(function(){
                        if (global.get('user').val){
                            self.user=global.get('user').val;
                        }
                        $uibModalInstance.close(self.user);
                    })

            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }

        function createUser(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/createUser.html',
                    controller: function($user,$uibModalInstance,$http,$q,exception){
                        var self=this;
                        self.user={profile:{}}
                        self.ok=function(form){
                            if(form.$invalid){return}
                            self.blockButton=true;
                            $q.when()
                                .then(function () {
                                    if(self.user.profile && self.user.profile.phone){
                                        var phone=self.user.profile.phone
                                        //return $user.checkPhoneForExist(phone)
                                        return $user.getItem(phone,'profile.phone')
                                    }else {
                                        return null;
                                    }
                                })
                                .then(function(res){
                                    //console.log(res)
                                    if(res && res._id){throw 'phone exist'}
                                })
                                .then(function(){
                                    return $user.checkEmailForExist(self.user.email)
                                })
                                .then(function(res){
                                    if(res && res.exist){throw 'email exist'}
                                })
                                .then(function(){
                                    var uploadUrl='/api/createUser'
                                    return $http.post(userHost+uploadUrl,self.user);
                                })
                                .then(function(res){
                                    $uibModalInstance.close(res);
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('error')(err)
                                    }
                                    self.blockButton=false;
                                    //$uibModalInstance.dismiss(err);
                                })
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    //size: 'lg',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })
        }
        function changeEmail(userId){
            //console.log('userId',userId)
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/changeEmail.html',
                    controller: function($user,global,$uibModalInstance,$http,$q,exception){
                        var self=this;
                        self.global=global;
                        self.checkEmail=checkEmail;
                        self.email=''
                        self.ok=function(){
                            if(!self.cheched){
                                exception.catcher('change email')('email используется')
                                return;
                            }
                            self.blockButton=true;
                            $q.when()
                                .then(function(){
                                    return Items.save({update:'email'},{_id:userId,email:self.email})
                                    //return User.changeEmail({email:self.email,id:userId})
                                })
                                .then(function(res){
                                    $uibModalInstance.close(self.email);
                                })
                                .catch(function(err){
                                    self.blockButton=false;
                                })
                            return;
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        function checkEmail(email,valid) {
                            if(!valid){
                                self.cheched=false;
                                return;
                            }
                            $q.when()
                                .then(function(){
                                    return $user.checkEmailForExist(email)
                                })
                                .then(function(res){
                                    if(res && !res.exist){
                                        self.cheched=true;
                                    }else{
                                        throw 'email exist'
                                    }
                                    //console.log(self.cheched)
                                })
                                .catch(function(err){
                                    if(err){
                                        exception.catcher('change email')(err)
                                    }
                                    self.cheched=false;
                                })
                        }
                    },
                    controllerAs:'$ctrl',
                    windowClass:'modalProject',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })
        }
        function checkEmailForExist(email,_id) {
            return $q(function (rs,rj) {
                var o={email:email}
                if(_id){
                    o['_id']=_id
                }
                //console.log(o)
                User.checkEmail(o,function (res) {
                    //console.log(res)
                    rs(res)
                },function (err) {
                    //console.log(err)
                  rj(err)
                })

            })
        }
        function checkPhoneForExist(phone,_id) {
            return $q(function (rs,rj) {
                var o={email:phone}
                if(_id){
                    o['_id']=_id
                }
                User.checkPhone(o,function (res) {
                    //console.log(res)
                    rs(res)
                },function (err) {
                    //console.log(err)
                    rj(err)
                })

            })
        }
        function changePhone(userId){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/changePhone.html',
                    controller: function($user,global,$uibModalInstance,$http,$q,exception){
                        var self=this;
                        self.global=global;
                        self.checkPhone=checkPhone;
                        self.email=''
                        self.ok=function(){
                            //console.log(self.phone)
                            if(!self.phone){
                                exception.catcher('change phone')('phone???')
                                return;
                            }
                            self.blockButton=true;
                            $q.when()
                                .then(function () {
                                    return checkPhone(self.phone)
                                })
                                .then(function(){
                                    var o ={_id:userId}
                                    o['profile.phone']=self.phone;
                                    return Items.save({update:'profile.phone'},o)
                                })
                                .then(function(res){
                                    $uibModalInstance.close(self.phone);
                                })
                                .catch(function(err){
                                    exception.catcher('change phone')(err)
                                    self.blockButton=false;
                                })
                            return;
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        function checkPhone(phone) {
                            return $q.when()
                                .then(function(){
                                    return $user.checkPhoneForExist(phone)
                                })
                                .then(function(res){
                                    if(!res || res.exist){
                                        throw 'phone exist'
                                    }
                                })
                        }
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })
        }
        function changePswd(_id){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/user/modal/changePswd.html',
                    controller: function($user,global,$uibModalInstance,$http,$q,_id){
                        var self=this;
                        self.global=global;
                        self.user={_id:_id,password:''}
                        self.ok=function(){
                            $q.when()
                                .then(function(){
                                    var uploadUrl='/api/changePswd'
                                    return $http.post(userHost+uploadUrl,self.user);
                                })
                                .then(function(res){
                                    $uibModalInstance.close(res);
                                })
                                .catch(function(err){
                                    $uibModalInstance.dismiss(err);
                                })
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                    resolve:{_id:function(){return _id}},
                    windowClass:'modalProject',
                    //size: 'lg',
                });
                modalInstance.result.then(function(item){resolve(item)},function(){reject()});
            })

        }
        function logout(callback) {
            var cb = callback || angular.noop;
            return Session.delete(function() {
                    global.set('user',null);
                    //$rootScope.$broadcast('logout', null);
                    return cb();
                },
                function(err) {
                    return cb(err);
                }).$promise;
        }

        loginCtrl2.$inject=['$scope','$uibModalInstance','exception','global','User','$state']
        function loginCtrl2($scope,$uibModalInstance,exception,global,User,$state){
            var self=this;
            self.global=global;
            //self.closeModal=closeModal;
            $scope.$on('closeWitget',function () {
                //console.log('ssss')
                $uibModalInstance.close()
            })
            /*function  closeModal(action){
                //paps action
                $uibModalInstance.close();
            }*/
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }

        loginOnlyPhoneCtrl.$inject=['$scope','$uibModalInstance','exception','global','User','$state']
        function loginOnlyPhoneCtrl($scope,$uibModalInstance,exception,global,User,$state){
            var self=this;
            self.global=global;
            $scope.$on('closeWitget',function () {
                $uibModalInstance.close()
            })
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }


        loginCtrl.$inject=['$uibModalInstance','exception','global','User','$state']
        function loginCtrl($uibModalInstance,exception,global,User,$state){
            var self=this;
            // авторизация
            //-- Variables --//
            self.login={};
            self.login.user={email : '',password:''};
            //-- Methods --//
            self.login.resetPswd = function(form) {
                if(form.$valid) {
                    self.submittedReset=true;
                    User.resetPswd({email:self.login.reseteEmail}).$promise
                    /*Auth.resetPswd({email: self.login.reseteEmail,action:'resetPassword'})*/
                        .then( function(data) {
                            exception.showToaster('note','Сброс пароля','информация отправлена на email')
                        })
                        .catch( function(err) {
                            self.errors = {};
                            //console.log(err);
                            if (err.data && err.data.error){
                                form['emailreset'].$setValidity('mongoose', false);
                                self.errors['emailreset'] = err.data.error;
                                exception.catcher('авторизация')(err.data.error);
                            } else {
                                exception.catcher('авторизация')(err.data);
                            }
                        });
                }
            } // end resetPswd

            self.login.login2 =function(form) {
                //console.log(form)
                self.submittedLogin = true;
                if(form.$valid) {
                    return Session.save({email: self.login.user.email, password: self.login.user.password} ).$promise
                        .then(function(user){
                            if(global && global.get('user')){
                                global.set('user',user);
                            }
                            //$rootScope.$broadcast('logged', user);
                            $uibModalInstance.close(user)
                        })
                        .catch( function(err) {

                            err = err.data;
                            console.log(err)
                            self.errors = {};
                            // Update validity of form fields that match the mongoose errors
                            if (err && err.errors){
                                angular.forEach(err.errors, function(error, field) {
                                    console.log(field)
                                    form[field].$setValidity('mongoose', false);
                                    self.errors[field] = error.message;
                                    exception.catcher('авторизация')(error.message)
                                });
                            } else {
                                exception.catcher('авторизация')(err)
                            }
                        });
                }
            }; // end login
            self.signup={};
            self.signup.user = {name:'',email : '',password:''};
            self.signup.signup =function(form) {
                //console.log(form);
                self.submitted = true;
                if(form.$valid) {
                    newUser(self.signup.user.name, self.signup.user.email,
                        self.signup.user.password,'subscribtion')
                        .then(function(user){
                            //console.log(user)
                            $uibModalInstance.close(user);
                            var pap;
                            if (global.get('paps' ) && global.get('paps' ).val && (pap=global.get('paps' ).val.getOFA('action','subscription'))){
                                $state.go('thanksPage',{url:pap.url})
                            }
                        })
                        .catch( function(err) {
                            err = err.data;
                            self.errors = {};
                            if (err && err.error){
                                form['email'].$setValidity('mongoose', false);
                                self.errors['email'] = err.error;
                                exception.catcher('подписка')(err.error)
                            } else {
                                exception.catcher('подписка')(err)
                            }
                        });
                }
            }; // end signup
            self.selectItem=function(item){
                $uibModalInstance.close(item);
            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }
    }
    accountFactory.$inject=['$http','$state','global'];
    function accountFactory($http,$state,global) {
        return {
            getProfile: function() {
                //console.log('ssss')
                var store=global.get('store').val._id;
                return $http.get('/api/me/'+store);
                //return $http.get(userHost+'/api/me/'+store);
            },
            getPermission: function() {
                var store=global.get('store').val._id;
                //console.log(global.get('store').val)
                return $http.get('/api/permission/'+store);
            },
            getPermissionTranslator: function() {
                var store=global.get('store').val._id;
                //console.log(global.get('store').val)
                return $http.get('/api/permissionTranslator/'+store);
            },
            getPermissionOrder: function() {
                var store=global.get('store').val._id;
                return $http.get('/api/permissionOrder/'+store);
            },
            getPermissionMaster: function(master) {
                var store=global.get('store').val._id;
                return $http.get('/api/permissionMaster/'+store+'/'+master);
            },
            getEnterButton: function(user) {
                var store=global.get('store').val._id;
                user.frame=$state.get('frame')?$state.get('frame' ).url:null;
                user.store=store;
                return $http.post('/api/getEnterButton',user);
            },
            updateProfile: function(profileData) {
                var store=global.get('store').val._id;
                profileData.store=store;
                return $http.put(userHost+'/api/me', profileData);
            },
            unsubscription: function() {
                var store=global.get('store').val._id;
                return $http.get('/api/unsubscription/'+global.get('user').val._id);
            }

        };
    }
    subscibtionListService.$inject=['$resource'];
    function subscibtionListService($resource){
        var Items= $resource('/api/collections/SubscribtionList/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                //console.log('XHR Failed for SubscibtionList.' + error);
                throw  error
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return error
            }
        }
    }
    userEntryService.$inject=['$resource','$q'];
    function userEntryService($resource,$q){
        var Items= $resource('/api/collections/UserEntry/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query
        }
        function getList(paginate,query){
            //console.log(query)
            if(!paginate){paginate={}}
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(!paginate.page){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }
            function getListFailed(error) {
                return $q.reject(error);
            }
        }
        function getItem(id,param){
            return Items.get({_id:id,param:param}).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
    }



    sendPhoneFactory.$inject=['$http','$q','$user']
    function sendPhoneFactory($http,$q,$user) {
        return {
            sendCodeToPhone:sendCodeToPhone,
            verifyCode:verifyCode,
            checkPhone:checkPhone,
        }

        function sendCodeToPhone(phone) {
            if(!phone){return}
            var o = {phone:phone}
            return $q.when()
                .then(function () {
                    return $http.post('/api/users/sendSMS',o)
                })
        }
        function verifyCode(code,phone) {
            var o = {code:code,phone:phone}
            return $q.when()
                .then(function () {
                    return $http.post('/api/users/verifySMScode',o)
                })


        }
        function checkPhone(phone) {
            var query = {phone:phone};
            return $q.when()
                .then(function () {
                    return $user.getItem(phone,'profile.phone')
                })
                .then(function(res){
                    if(res){return res}else{return null}
                })
        }
    }

})()


'use strict';
angular.module('gmall.directives')
    //https://github.com/deltreey/angular-simple-focus/blob/master/simple-focus.js
.directive('focusElement',['$timeout',function($timeout){
    return{
        scope:{
            focusElement:'=',
        },
        link:function($scope, $element, $attr){
            $scope.$watch('focusElement', function(value) {
                console.log(value)
                if (value) {
                    setTimeout(function(){
                        $element[0].focus();
                        $scope.focusElemen=false;
                    },200)
                    return;
                }
            })
        }
    }
}])
    .directive('simpleFocusElement',[function(){
        return{
            restrict: 'A',
            link:function(scope,element,attrs){
                setTimeout(function() {
                    element[0].focus();
                    //console.log(element[0])
                },300);
                if(attrs.simpleFocusElement=='false'){
                    console.log('focus',element[0])
                    //element[0].focus();
                    setTimeout(function() {
                        element[0].focus();
                    },200);
                }

            }
        }
    }])
    //http://stackoverflow.com/questions/14833326/how-to-set-focus-on-input-field
    .directive('focusMe1', function($timeout, $parse) {
        return {
            //scope: true,   // optionally create a child scope
            link: function(scope, element, attrs) {
                var model = $parse(attrs.focusMe);
                scope.$watch(model, function(value) {
                    console.log('value=',value);
                    if(value === true) {
                        $timeout(function() {
                            element[0].focus();
                            //https://docs.angularjs.org/error/$rootScope/inprog?p0=$apply
                        },300, false);
                    }
                });
                // to address @blesh's comment, set attribute value to 'false'
                // on blur event:
                element.bind('blur', function() {
                    console.log('blur');
                    scope.$apply(model.assign(scope, false));
                });
            }
        };
    })
.directive('focusMe', function($timeout) {
    return {
        link: function(scope, element, attrs) {
            scope.$watch(attrs.focusMe, function(value) {
                if(value === true) {
                    //console.log('value=',value);
                    $timeout(function() {
                        element[0].focus();
                        scope[attrs.focusMe] = false;
                    },300,false);
                }
            });
        }
    };
});



'use strict';
angular.module('gmall.directives')
.directive('selectDropDown',['$window',function($window){
    return{
        link:function(scope,element,attrs){
            //console.log(attrs['selectDropDown'])
            var defer=50;
            if(attrs['selectDropDown']=='defer'){
                defer=200;
            }
            setTimeout(function(){
                $(element).dropdown({ "callback": function($dropdown) {
                    // $dropdown is the shiny new generated dropdown element!
                    $dropdown.fadeIn("slow");
                }})
            },defer)
        }
    }
}])



'use strict';
angular.module('gmall.directives')
.directive('paginatorMain', function (anchorSmoothScroll,$anchorScroll) {
        return {
            restrict:'E',
            scope :{
                paginate:'=',
                getlist:'&',
                scroll:"@"
            },
            link: function (scope, element, attrs, controller) {
               //console.log('likn paginator',scope.paginate);
               if(!scope.paginate || typeof scope.paginate!='object'){
                   //console.log('exit')
                   return;
               }

                var l;
                scope.paginator={};
                scope.$watch('paginate.items',function(n,o){
                    //console.log(n)
                    if (n || n===0) {
                        scope.paginate.items=Number(n)
                        l=scope.paginator.pageCount();
                        scope.arrayPage=scope.getListPage();
                    }
                })


                function getList(){
                    //console.log(scope.scroll)
                    if(scope.scroll){
                        anchorSmoothScroll.scrollTo(scope.scroll,200);
                    }
                    scope.getlist();
                }

                scope.paginator.setPage = function (page) {
                    //console.log(page)
                    page = Number(page);
                    if (!page && page!==0) return;
                    if (page > scope.paginator.pageCount() || page==scope.paginate.page) {
                        return;
                    }
                    scope.paginate.page = page;

                    if (scope.paginate.page==0){
                        //console.log('думаем');
                        scope.arrayPage=scope.getListPage(2)

                    }
                    //console.log(l)
                    if (scope.paginate.page==(l-1)){
                        //console.log('посдедняя страница');
                        scope.arrayPage=scope.getListPage(6)
                    }

                    if (scope.paginate.page==scope.arrayPage[3] && scope.arrayPage.length==6&& ((l-1)-scope.paginate.page)>2){
                        scope.arrayPage=scope.getListPage()
                    } else if(scope.paginate.page==scope.arrayPage[4] && scope.arrayPage.length==7){
                        scope.arrayPage=scope.getListPage()
                    } else if (scope.paginate.page==scope.arrayPage[2] && scope.paginate.page-scope.arrayPage[0]>=2){
                        scope.arrayPage=scope.getListPage()
                    }


                    getList()
                };
                scope.paginator.nextPage = function () {
                    if (scope.paginator.isLastPage()) {
                        return;
                    }
                    scope.paginate.page++;
                    if (scope.paginate.page==scope.arrayPage[3] && scope.arrayPage.length==6&& ((l-1)-scope.paginate.page)>2){
                        scope.arrayPage=scope.getListPage()
                    } else if(scope.paginate.page==scope.arrayPage[4] && scope.arrayPage.length==7){
                        scope.arrayPage=scope.getListPage()
                    } else if (scope.paginate.page==scope.arrayPage[2] && scope.paginate.page-scope.arrayPage[0]>=2){
                        scope.arrayPage=scope.getListPage()
                    }
                    getList()
                };
                scope.paginator.perviousPage = function () {
                    if (scope.paginator.isFirstPage()) {
                        return;
                    }
                    scope.paginate.page--;
                    if (scope.paginate.page==scope.arrayPage[3] && scope.arrayPage.length==6&& ((l-1)-scope.paginate.page)>2){
                        scope.arrayPage=scope.getListPage()
                    } else if(scope.paginate.page==scope.arrayPage[4] && scope.arrayPage.length==7){
                        scope.arrayPage=scope.getListPage()
                    } else if (scope.paginate.page==scope.arrayPage[2] && scope.paginate.page-scope.arrayPage[0]>=2){
                        scope.arrayPage=scope.getListPage()
                    }
                    getList()
                };
                scope.paginator.firstPage = function() {
                    scope.paginate.page = 0;
                    getList()
                };
                scope.paginator.lastPage = function () {
                    scope.paginate.page = scope.paginator.pageCount() - 1;
                    getList()
                };
                scope.paginator.isFirstPage = function () {
                    return scope.paginate.page == 0;

                };
                scope.paginator.isLastPage = function () {
                    return scope.paginate.page == scope.paginator.pageCount() - 1;
                };
                scope.paginator.pageCount = function () {
                    var count = Math.ceil(parseInt(scope.paginate.items, 10) / parseInt(scope.paginate.rows, 10)); if (count === 1) { scope.paginate.page = 0; }
                    return count;
                };


                scope.changeRow = function(rows){
                    scope.paginate.rows=rows;
                    while (scope.paginator.pageCount()<(scope.paginate.page-1)){
                        scope.paginate.page--;
                    }
                    getList()
                }
                scope.arrayPage=[];

                scope.getListPage = function(num){
                    //console.log(num)
                    //if (!page){page=}
                    var page=scope.paginate.page;
                    var arrayPage=[];
                    if (num===0 || num){page = num}
                    //var page=scope.paginate.page;
                    //console.log(page,l)
                    if (l<=6){
                        for(var i=0;i<l;i++){
                            arrayPage.push(i)
                        }
                    }else{
                        if (page>=3 ){
                            arrayPage.push(0)
                            arrayPage.push('...');
                            arrayPage.push(page-1)
                            arrayPage.push(page)
                            arrayPage.push(page+1)
                        } else{
                            for(var i=0;i<4;i++){
                                arrayPage.push(i)
                            }
                        }
                        if(((l-1)-page)>2){
                            arrayPage.push('...');
                        }
                        arrayPage.push(l-1)
                    }
                    //console.log(arrayPage)
                    return arrayPage;
                }
                scope.getPageStr = function(i){
                    if (Number(i) || i===0){return i+1} else {return i}
                }

            },
            templateUrl: 'components/paginator/paginator.html'
        };
    })

'use strict';
angular.module('gmall.directives')
.directive('lostFocus',['$window',function($window){
    return{
        scope:{
            lostFocus:'&',
            focusElement:'=',
        },
        link:function(scope,element){
            //console.log('lostFocus')
            setTimeout(function () {
                if(scope.focusElement){
                    element[0].focus();
                }
                element.bind('blur', function (e) {
                    setTimeout(function () {
                        //console.log('scope.lostFocus()')
                        scope.lostFocus()
                    })
                });
                element.trigger('change')
            },  500);

            /*scope.$watch('focusElement',function(n){
                if(n){
                    setTimeout(function() {
                        element[0].focus();
                        scope.focusElement=false;
                    });
                }
            })*/
        }
    }
}])

    .directive('focusMe',[function(){
        return{
            scope:{
                focusMe:'=',
            },
            link:function(scope,element){
                scope.$watch('focusMe',function(n){
                    if(n){
                        setTimeout(function() {
                            element[0].focus();
                            scope.focusMe=false;
                        });
                    }
                })
            }
        }
    }])
    .directive('isScrolledIntoView',[function(){
        return {
            scope:{
                isScrolledIntoView:'='
            },
            link:function(scope,elem){
                function isScrolledIntoViewF(elem) {
                    var docViewTop = $(window).scrollTop();
                    var docViewBottom = docViewTop + $(window).height();

                    var elemTop = $(elem).offset().top-150;
                    var elemBottom = elemTop + $(elem).height();

                    return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
                }
                $(window).scroll(function(){
                    scope.isScrolledIntoView=isScrolledIntoViewF(elem)
                    scope.$apply()
                })
            }

        }
    }])


'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('ngAutocompleteCity', function($parse,$timeout,global) {
            return {
                scope: {
                    user:'=',
                    change:'&'
                },

                link: function(scope, element, attrs, model,contorller) {
                    var placeChosen=false;
                    setTimeout(function(){
                        activate()
                    },500)
                    function activate(){
                        if(!scope.user){scope.user={}}
                        if(!scope.user.profile){scope.user.profile={}}
                        if(!scope.user.profile.city){scope.user.profile.city=''}
                        element[0].value=scope.user.profile.city;
                        if (scope.gPlace == undefined) {
                            //console.log(google.maps.places)
                            scope.gPlace = new google.maps.places.Autocomplete(element[0], {types: ['(cities)']});
                        }
                        google.maps.event.addListener(scope.gPlace, 'place_changed',place_changed);
                        google.maps.event.addDomListener(element[0], 'keydown', function(e) {
                            if (e.keyCode == 13) {
                                e.preventDefault();
                            }
                            //console.log(scope.user.profile.cityId)
                        });
                    }
                    scope.$watch(function(){return element.val()},function (o,n) {
                        //console.log(o,n)
                        if(n && n!=o && !placeChosen){
                            scope.user.profile.cityId=null;
                            scope.user.profile.city= element.val();
                            //scope.$apply()
                        }
                    })
                    function place_changed() {
                        placeChosen=true;
                        var place = scope.gPlace.getPlace();
                        if(place.place_id){

                            setTimeout(function(){
                                scope.user.profile.city= element.val();
                                $timeout(function () {
                                    scope.user.profile.cityId=place.place_id;
                                },200)

                                scope.$apply()
                                if(scope.change && typeof scope.change=='function'){
                                    scope.change()
                                }
                            },50)
                        }else{
                            scope.cityId=null;
                            scope.user.profile.city= element.val();
                            scope.$apply()
                        }
                        $timeout(function () {
                            placeChosen=false;
                        },1000)
                    }
                }
            };
        });
})()


'use strict';

angular.module('gmall.services')

.factory('Collection', function ($resource) {
    return $resource('/api/collections/Collection/:id', {
        id: '@id'
    }, {
        getCollectionsForBrand: {
            method: 'GET',
            isArray: true,
            params: {
                id:'',
                query:'query'
            }
        }
    });
})


'use strict';
angular.module('gmall.services')
.service('anchorSmoothScroll', function(){
    
    this.scrollTo = function(eID,diff) {

        // This scrolling function 
        // is from http://www.itnewb.com/tutorial/Creating-the-Smooth-Scroll-Effect-with-JavaScript
        
        var startY = currentYPosition();
        var stopY = elmYPosition(eID)+((diff)?diff:0);
        //console.log(elmYPosition(eID),stopY,diff)
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
            scrollTo(0, stopY); return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
            for ( var i=startY; i<stopY; i+=step ) {
                setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
                leapY += step; if (leapY > stopY) leapY = stopY; timer++;
            } return;
        }
        for ( var i=startY; i>stopY; i-=step ) {
            setTimeout("window.scrollTo(0, "+leapY+")", timer * speed);
            leapY -= step; if (leapY < stopY) leapY = stopY; timer++;
        }
        
        function currentYPosition() {
            // Firefox, Chrome, Opera, Safari
            if (self.pageYOffset) return self.pageYOffset;
            // Internet Explorer 6 - standards mode
            if (document.documentElement && document.documentElement.scrollTop)
                return document.documentElement.scrollTop;
            // Internet Explorer 6, 7 and 8
            if (document.body.scrollTop) return document.body.scrollTop;
            return 0;
        }
        
        function elmYPosition(eID) {
            //console.log(eID)
            var elm = document.getElementById(eID);
            //console.log(elm)
            if (!elm) return 0;
            var y = elm.offsetTop;
            var node = elm;
            while (node.offsetParent && node.offsetParent != document.body) {
                node = node.offsetParent;
                y += node.offsetTop;
            } return y;
        }

    };
    
})



'use strict';
(function(){
    angular.module('gmall.services')
        .service('Coupon', serviceFunction);
    serviceFunction.$inject=['$resource','$uibModal','$q'];
    function serviceFunction($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Coupon/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            console.log(id)
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/PROMO/coupon/createCoupon.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()

'use strict';
angular.module('gmall.directives')
    .directive('externalCatalog',externalCatalogComponent)
    .directive('externalCatalogDownload',externalCatalogDownload);
function externalCatalogComponent(){
    return{
        scope: {},
        restrict:"E",
        bindToController: true,
        controller: externalCatalogCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/externalCatalog/externalCatalog.html'
    }
}
function externalCatalogDownload(){
    return{
        scope: {},
        restrict:"E",
        bindToController: true,
        controller: externalCatalogDownloadCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/externalCatalog/externalCatalogDownload.html'
    }
}
externalCatalogDownloadCtrl.$inject=['ExternalCatalog','$q','Confirm','exception','global','$timeout','$http','$resource','Sections','Brands','$uibModal'];
function externalCatalogDownloadCtrl(Items,$q,Confirm,exception,global,$timeout,$http,$resource,Sections,Brands,$uibModal){
    var self=this;
    self.downloadCatalog=downloadCatalog;
    self.setGroup=setGroup;
    self.setBrand=setBrand;
    self.viewLogFile=viewLogFile;
    self.clearField=clearField;
    self.saveField=saveField;

    self.updateList=updateExternalCatalogList;
    //console.log(updateExternalCatalogList)
    self.lang=global.get('store').val.lang
    //self.changeActive=changeActive;
    activate()
    function activate(){
        $q.when()
            .then(function(){
                return Brands.getBrands()
            })
            .then(function (brands) {
                self.brands=brands
                return Sections.getSections()
            })
            .then(function (sections) {
                self.sections=sections
            })
            .then(function () {
                /*console.log(self.brands)
                console.log(self.sections)*/
                getList()
            })

    }
    function getList() {
        var query={}
        return  $q.when()
            .then(function () {
                return Items.getList(null,query)
            })
            .then(function (res) {
                //console.log(res)
                res.forEach(function(item){
                    if(item.brand){
                        item.brand=self.brands.find(function(b){return b._id==item.brand})
                    }
                    if(item.group){
                        item.group=self.sections.find(function(s){return s._id==item.group})
                    }
                })
                self.items=res;

            })

    }
    function downloadCatalog(item) {
        //Confirm('Подтверждаете?')
        $q.when()
            .then(function () {
                var file = self.myFile;

                $uibModal.open({
                    animation: true,
                    templateUrl: 'components/externalCatalog/modal/uploadExternalCatalog.html',
                    controller: function($uibModalInstance,$q,$resource,item){
                        var self=this;
                        self.disabledUpload=true;

                        var uploadUrl = stuffHost+'/api/downLoadExternalCatalog';
                        self.ok=function(){$uibModalInstance.close()}
                        self.cancel = function () {$uibModalInstance.dismiss()}
                        self.catalogName=item.name;
                        self.confirmUpload=confirmUpload;
                        console.log(item)
                        var fdata = new FormData();
                        if(item.file){
                            fdata.append("file",item.file);
                        }
                        fdata.append("_id",item._id);
                        fdata.append("url",item.url);
                        fdata.append("link",item.link);
                        fdata.append("index",item.index);
                        if(item.group){
                            fdata.append("group",item.group._id);
                        }
                        if(item.brand){
                            fdata.append("brand",item.brand._id);
                        }
                        if(item.name){
                            fdata.append("name",item.name);
                        }
                        if(item.desc){
                            fdata.append("desc",item.desc);
                        }
                        if(item.price){
                            fdata.append("price",item.price);
                        }
                        if(item.qty){
                            fdata.append("qty",item.qty);
                        }
                        if(item.artikul){
                            fdata.append("artikul",item.artikul);
                        }
                        if(item.tags){
                            fdata.append("tags",item.tags);
                        }
                        //return;
                        $q.when()
                            .then(function(){

                                return $http.post(uploadUrl,fdata, {
                                    withCredentials: true,
                                    transformRequest: angular.identity,
                                    headers: {'Content-Type': undefined}
                                })

                                /*return $resource(uploadUrl, {}, {
                                    postWithFile: {
                                        method: "POST",
                                        params: fdata,
                                        withCredentials: true,
                                        transformRequest: angular.identity,
                                        headers: { 'Content-Type': undefined }
                                    }
                                }).postWithFile(fdata).$promise*/
                            })
                            .then(function(res){
                                console.log(res)
                                if(res.err){
                                    self.errText=JSON.stringify(res.err);
                                    //console.log(self.errText)
                                    if(self.errText=='{}'){
                                        self.errText='произошла ошибка при обработке файла'
                                    }
                                    //console.log(self.errText)
                                }else{
                                    self.disabledUpload=false;
                                    self.disableSpinner=true;
                                    self.updateStuffs=res.updateStuffs
                                    self.newStuffs=res.newStuffs
                                    self.newCategories=res.newCategories
                                    self.newBrands=res.newBrands
                                    self.newBrandTags=res.newBrandTags
                                    self.newFilters=res.newFilters
                                    self.newFilterTags=res.newFilterTags

                                }
                                /*self.countFfomFile=res.data.countFfomFile;
                                self.countInDb=res.data.countInDb;
                                self.countPermission=res.data.countPermission;
                                self.countToDb=res.data.countToDb;
                                self.disableSpinner=true;*/
                            })
                        /*socket.on('endUploadUsers',function(data){
                            getList();
                        })*/
                        function confirmUpload(){
                            fdata.append("confirm",true);
                            $resource(uploadUrl, {}, {
                                postWithFile: {
                                    method: "POST",
                                    params: fdata,
                                    transformRequest: angular.identity,
                                    headers: { 'Content-Type': undefined }
                                }
                            }).postWithFile(fdata)
                            $uibModalInstance.close()
                        }

                    },
                    controllerAs:'$ctrl',
                    size:'lg',
                    resolve:{
                        item:function(){
                            return item
                        }
                    }

                }).result
            })
            .catch(function(error){
                //error
                console.log(error)
            });
    }

    function setGroup(item) {
        $q.when()
            .then(function(){
                return Sections.select()
            })
            .then(function(group){
                item.group=group
                saveField(item,'group',group._id)
            })
    }
    function setBrand(item) {
        $q.when()
            .then(function(){
                return Brands.select()
            })
            .then(function(brand){
                item.brand=brand
                saveField(item,'brand',brand._id)
            })
    }
    function clearField(item,field){
        item[field]=null;
        saveField(item,field)
    }
    function saveField(item,field,value) {
        console.log(item)
        var o ={_id:item._id}
        if(value!='undefined'){
            o[field]=item[field]
        }else{
            o[field]=value
        }
        Items.save({update:field},o,function () {
            global.set('saving',true);
            $timeout(function(){
                global.set('saving',false);
            },1500)
            var url = stuffHost+'/api/changeTaskSchedule'
            var i =angular.copy(item)
            if(i.brand){
                i.brand=i.brand._id
            }
            if(i.group){
                i.group=i.group._id
            }
            $http.post(url,i).success(function(res){
                exception.showToaster('info','schedule','was changed')
            }).error(function (err) {
                exception.catcher('error')(err)
                console.log(err)
            })

        })
    }
    function viewLogFile() {
        $uibModal.open({
            animation: true,
            templateUrl: 'components/externalCatalog/modal/viewLog.html',
            controller: function($uibModalInstance,$q,$http,global,$sce){
                var self=this;
                self.$sce
                //self.url1 = $sce.getTrustedResourceUrl(stuffHost+"/log/"+global.get('store').val.subDomain+'_users.log');
                self.url = stuffHost+"/log/"+global.get('store').val.subDomain+'_externalCatalog.log';
                //console.log(self.url1)
                self.ok=function(){$uibModalInstance.close()}
                self.cancel = function () {$uibModalInstance.dismiss()}

                $http.get(self.url).success(function(res){
                    console.log(res.replace(/[\r\n]/g, "<br />"))
                    self.loaded;
                    self.logFile=$sce.getTrustedHtml(res.replace(/[\r\n]/g, "<br />"));
                }).error(function (err) {
                    self.loaded;
                    console.log(err)
                })
            },
            controllerAs:'$ctrl',
            size:'lg',
        })
    }
}

externalCatalogCtrl.$inject=['ExternalCatalog','$q','Confirm','exception','global','$timeout'];
function externalCatalogCtrl(Items,$q,Confirm,exception,global,$timeout) {
    var self=this;
    self.saveField=saveField;
    self.createItem=createItem;
    self.deleteItem=deleteItem;
    activate()
    function activate(){
        getList()
    }
    function getList() {
        var query={}
        return  $q.when()
            .then(function () {
                return Items.getList(null,query)
            })
            .then(function (res) {
                console.log(res)
                self.items=res;
            })
            .then(function () {
                var d = new Date()

                self.items.forEach(function(item){
                    if(!item.timezoneOffset && item.timezoneOffset!=0){
                        item.timezoneOffset= Math.ceil(d.getTimezoneOffset()/60);
                        saveField(item,'timezoneOffset')
                    }
                    //console.log(item.timezoneOffset)
                })
            })
    }
    function saveField(item,field) {
        //console.log(item)
        var o ={_id:item._id}
        o[field]=item[field]
        Items.save({update:field},o,function () {
            global.set('saving',true);
            $timeout(function(){
                global.set('saving',false);
            },1500)

        })
    }
    function createItem(){
        //console.log('create')
        $q.when()
            .then(function(){
                return Items.create()
            })
            .then(function(item){
                var d = new Date()
                item.timezoneOffset = d.getTimezoneOffset();
                return Items.save(item).$promise
            })
            .then(function(){
                return getList()

            })
            .catch(function(err){
                if(err){
                    exception.catcher('создание внешнего каталога')(err)
                }
            })
    }
    function deleteItem(item){
        Confirm("удалить?" )
            .then(function(){
                item.actived=false;
                saveField(item,'actived')
                //return Items.delete({_id:item._id} ).$promise;
            } )
            .then(function(){
                //return getList();
            })
            .catch(function(err){
                err = (err &&err.data)||err
                if(err){
                    exception.catcher('удаление внешнего каталога')(err)
                }

            })
    }

}
angular.module('gmall.services')
.service('ExternalCatalog', function($resource,$q,$uibModal){
    var Items= $resource('/api/collections/ExternalCatalog/:_id',{_id:'@_id'});
    var items;
    return {
        getList:getList,
        getItem:getItem,
        query:Items.query,
        get:Items.get,
        save:Items.save,
        delete:Items.delete,
        create:create,
        getItems:getItems
    }
    function getItems(reload){
        if(!items || reload){
            return getList();
        }else{
            return items;
        }

    }
    function getList(paginate,query){
        //console.log('get list')
        if(!paginate){
            paginate={page:0}
        }
        return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
            .then(getListComplete)
            .catch(getListFailed);
        function getListComplete(response) {
            if(paginate.page==0){
                if(response && response.length){
                    paginate.items=response.shift().index;
                }else{
                    paginate.items=0;
                }
            }
            items=response;
            //console.log(response)
            return response;
        }

        function getListFailed(error) {
            console.log('XHR Failed for getNews.' + error);
            return $q.reject(error);
        }
    }
    function getItem(id){
        return Items.get({_id:id} ).$promise
            .then(getItemComplete)
            .catch(getItemFailed);
        function getItemComplete(response) {
            return response;
        }
        function getItemFailed(error) {
            return $q.reject(error);
        }
    }
    function create(){
        return $q(function(resolve,reject){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/externalCatalog/createExternalCatalog.html',
                controllerAs:'$ctrl',
                controller: function ($uibModalInstance){
                    var self=this;
                    self.name='';
                    self.ok=function(){
                        if(!self.name){
                            exception.catcher('создание объекта')('нужено название')
                            return
                        }
                        $uibModalInstance.close({name:self.name});
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss();
                    };
                },

            });
            modalInstance.result.then(function (item) {
                if(item.name){
                    item.name=item.name.substring(0,25)
                    resolve(item)
                }else{
                    reject('empty')
                }
            }, function (err) {
                reject(err)
            });
        })
    }
    /*createExternalCatalogCtrl=['$uibModalInstance'];
     function createExternalCatalogCtrl($uibModalInstance){
     var self=this;
     self.name='';
     self.addOwner=addOwner;
     self.ok=function(){
     if(!self.name){
     exception.catcher('создание объекта')('нужено название')
     return
     }
     $uibModalInstance.close({name:self.name});
     }
     self.cancel = function () {
     $uibModalInstance.dismiss();
     };
     }*/

})




'use strict';
(function(window) {

    'use strict';

    /**
     * Extend Object helper function.
     */
    function extend(a, b) {
        for(var key in b) {
            if(b.hasOwnProperty(key)) {
                a[key] = b[key];
            }
        }
        return a;
    }

    /**
     * Each helper function.
     */
    function each(collection, callback) {
        for (var i = 0; i < collection.length; i++) {
            var item = collection[i];
            callback(item);
        }
    }

    /**
     * Menu Constructor.
     */
    function Menu(options) {
        this.options = extend({}, this.options);
        extend(this.options, options);
        this._init();
    }

    /**
     * Menu Options.
     */
    Menu.prototype.options = {
        type:'c-menu--push-left'
    };

    /**
     * Initialise Menu.
     */
    Menu.prototype._init = function() {
        this.menu = document.querySelector('#c-menu--' + this.options.type);
        console.log()
    };

    /**
     * Open Menu.
     */
    Menu.prototype.open = function() {
        this.menu.classList.add('is-active')
    };

    /**
     * Close Menu.
     */
    Menu.prototype.close = function() {
        this.menu.classList.remove('is-active');
    };

    /**
     * Add to global namespace.
     */
    window.MenuSlide = Menu;

})(window);
//http://callmenick.com/post/slide-and-push-menus-with-css3-transitions
angular.module('gmall.directives')
.directive('slideMenu',['$rootScope','$q','Sections','$state',function($rootScope,$q,Sections,$states){
    return {
        restrict: "E",
        scope: {
            displaySlideMenu:'='
        },
        templateUrl: "components/slideMenu/slideMenu.html",
        link: function ($scope, element, attrs) {
            var slideLeft,initDone;
            setTimeout(function(){
                initDone=true;
                slideLeft = new MenuSlide({type:'push-left'});
                $( '#c-menu--push-left' ).niceScroll();
                if($scope.displaySlideMenu){
                    $scope.openMenu()
                }

            })
            $scope.$watch('displaySlideMenu',function(n,o){
                //console.log(n,o)
                if(n && initDone){
                    $scope.openMenu()
                } else if(!n && initDone){
                    $scope.closeMenu()
                }
            })
            $scope.closeMenu = function(){
                if ($('#mainContent' ).hasClass('pl300')){
                    slideLeft.close();
                    $('#mainContent' ).removeClass('pl300')
                    $('#mainContent' ).addClass('pl150')
                }
            }
            $scope.openMenu=function(){
                getSection()
                slideLeft.open();
                $('#mainContent' ).addClass('pl300')
                $('#mainContent' ).removeClass('pl150')
            }

            getSection();

            function getSection(){
                $q.when()
                    .then(function(){
                        return Sections.getSections();
                    })
                    .then(function(sections){
                        $scope.sections=sections;
                    })
            }

            $scope.getSectionUrlParams=function(section){
                //console.log(section)
                var params={
                    groupUrl:'group',
                    categoryUrl:'category',
                    categoryList:null,
                    parentGroup:null,
                    brand:null,
                    artikul:null,
                    brandTag:null,
                    queryTag:null,
                    searchStr:null
                }
                if (section.level===0){
                    params.groupUrl=section.url;
                    if(!section.child || !section.child.length){
                        params.categoryList='allCategories';
                    }else{
                        params.categoryList=null;
                    }
                }else{
                    //params.groupUrl=section.section.url;
                    params.parentUrl=section.url;
                    //params.categoryList='allCategories';
                }
                return params;
            }
            $scope.getSectionUrlParamsAndGo=function(section){
                //console.log(section)
                var params={
                    groupUrl:'group',
                    categoryUrl:'category',
                    categoryList:null,
                    parentGroup:null,
                    brand:null,
                    artikul:null,
                    brandTag:null,
                    queryTag:null,
                    searchStr:null
                }
                if (section.level===0){
                    params.groupUrl=section.url;
                    if(!section.child || !section.child.length){
                        params.categoryList='allCategories';
                    }else{
                        params.categoryList=null;
                    }
                }else{
                    params.groupUrl=section.section.url;
                    params.parentGroup=section.url;
                    params.categoryList='allCategories';
                }
                $state.go('frame.stuffs',params);
            }




        }
    }
}])


"use strict";
angular.module('gmall.controllers')
 // for stuff edit
.controller('selectCategoryModalCtrl', function ($scope, $uibModalInstance,$q,Sections,categoryId) {
    $scope.categoryId=categoryId;
    console.log($scope.categoryId)
    $q.when().then(function(){
            return Sections.getSections();
        } )
        .then(function(sections){
            $scope.sections = sections;
        })
    $scope.selectCategory = function (selectedCategory) {
        $uibModalInstance.close(selectedCategory);
    };
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
})
// for filters brans collections edit
.controller('bindCategoryToFilterCtrl', function ($scope, $uibModalInstance,Category,$resource,$q, sections,field,id,revers) {
    $scope.id=id;
    $scope.revers=revers;
    sections.forEach(function(s){
        if(s.categories && s.categories.length){
            s.categories.forEach(function (c) {
                c.checked=false;
            })
        }
        if(s.child && s.child.length){
            s.child.forEach(function (s) {
                if(s.categories && s.categories.length){
                    s.categories.forEach(function (c) {
                        c.checked=false;
                    })
                }
            })
        }

    })
    function checkField(section){
        section.showCheck=false;
        if(section.categories && section.categories.length){
            section.checkAll=true;
            section.showCheck=true;
            section.categories.forEach(function(category){
                if(!$scope.revers){
                    if(category[field].indexOf($scope.id)>-1){
                        category.checked=true;
                    }else{
                        section.checkAll=false;
                    }
                }else{
                    if($scope.item[field].indexOf(category._id)>-1){
                        category.checked=true;
                    }else{
                        section.checkAll=false;
                    }
                }

            })
        }
        if(section.child && section.child.length){
            section.checkAll=false;
            section.child.forEach(function(s){
                if (checkField(s)){
                    section.showCheck=true;
                }
            })
        }
        return section.showCheck;
    }
    function checkCategory(category){
        if (category.checked){
            if(!$scope.revers){
                if(!category[field] ){
                    category[field]=[];
                    category[field].push($scope.id)
                }else{
                    if(category[field].indexOf($scope.id)<0){
                        category[field].push($scope.id)
                    }
                }
            }else{
                if($scope.item[field].indexOf(category._id)<0){
                    $scope.item[field].push(category._id)
                }
                category=$scope.item;
            }

        }else{
            if(!$scope.revers){
                if(category[field] && category[field].length){
                    var i = category[field].indexOf($scope.id);
                    if(i>-1){
                        category[field].splice(i,1)
                    }
                }
            }else{
                if($scope.item[field] && $scope.item[field].length){
                    var i = $scope.item[field].indexOf(category._id);
                    if(i>-1){
                        $scope.item[field].splice(i,1)
                    }
                }
                category=$scope.item;
            }
        }
        var o={_id:category._id}
        o[field]=category[field].filter(function(el){return el;})
        Category.save({update:field},category);
    }
    $scope.bindFilter=function(category,section){
        checkCategory(category)
        section.checkAll=true;
        for(var i= 0,l=section.categories.length;i<l;i++){
            if(!$scope.revers){
                if(section.categories[i][field].indexOf($scope.id)<0){
                    section.checkAll=false;
                    break;
                }
            }else{
                if($scope.item[field].indexOf(section.categories[i]._id)<0){
                    section.checkAll=false;
                    break;
                }
            }

        }
    }
    $scope.bindFilterForSection=function(section,checkAll){
        section.checkAll=checkAll;
        if(section.categories && section.categories.length){
            section.categories.forEach(function(category){
                category.checked=checkAll;
                checkCategory(category)
            })
        }

        if(section.child && section.child.length){
            section.child.forEach(function(s){
                $scope.bindFilterForSection(s,checkAll)
            })
        }
    }
    function foo(s){
        if (s.child && s.child.length){
            for(var i = 0,l= s.child.length;i<l;i++){
                var section=s.child[i];
                //console.log( 'section - ',section.name,' ',section.showCheck)
                if (section.showCheck){
                    if (section.child && section.child.length){
                        section.checkAll=foo(section);
                        if (!section.checkAll){
                            return false;
                        }
                        //console.log( 'checkAll - ',section.name,' ',section.checkAll)
                    } else{
                        //console.log('end section ', section.name,' ',section.checkAll)
                        if(!section.checkAll){
                            return false;
                        }
                    }
                }
            }
            return true;
        }

    }


    $q.when()
        .then(function(){
            var q=$q.defer();
            if($scope.revers){
                var Item = $resource('/api/collections/BrandTags/:id',{id:'@_id'});
                Item.get({id:$scope.id},function(res){
                    if(!res[$scope.field]){
                        res[$scope.field]=[]
                    }
                    $scope.item=res;
                    q.resolve()
                })
                Category=Item;
            }else{
                q.resolve()
            }
            return q.promise
        })
        .then(function(){
            $scope.sections=sections.filter(function(el){return el.level===0});
            $scope.sections.forEach(checkField)
            $scope.sections.forEach(function(s){
                if(s.showCheck){
                    s.checkAll=foo(s);
                }
            })
        })


    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
})
.controller('selectFilterModalCtrl', function ($scope, $uibModalInstance,filter,tags) {
    $scope.filter=filter;
    $scope.allTags=false;
    $scope.changeAllTags=function(criteria){
        filter.tags.forEach(function(tag){
            tag.set=criteria;
        })
    }
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
})
.controller('selectBrandModalCtrl', function ($scope, $uibModalInstance,$q,Brands,brandItem,brands) {
    $scope.brandItem=brandItem;
    $scope.brands=brands;
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ok = function (brandItem) {
        $uibModalInstance.close(brandItem);
    };
    $q.when()
        .then(function(){
            var q=$q.defer()
            if(brands && brands.length){
                $scope.brands=brands;
                q.resolve();
            }else{
                Brands.query(function(res){
                    res.shift();
                    $scope.brands=res;
                    q.resolve();
                },function(err){q.reject(err)})
            }
            return q.promise;
        } )


    

})
.controller('selectBrandTagModalCtrl', function ($scope, $uibModalInstance,brandTag,brandTags) {
    setTimeout(function(){
        $scope.brandTag=brandTag;
    },200)
    $scope.brandTags=brandTags;
    console.log(brandTag,brandTags)
    $scope.ok = function (brandTag) {
        $uibModalInstance.close(brandTag);
    };
    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

})


angular.module('gmall.services')
.service('SelectCategory', ['$q','$uibModal','Sections', function($q,$uibModal,Sections) {
    this.bindCategoryForFilterBrandCol=function(id,field,revers){
        $q.when()
            .then(function(){
                return Sections.getSections();
            } )
            .then(function(sections){
                var options={
                    animation: true,
                    templateUrl: 'components/selectCategoryModal/bindCategoryToFilter.html',
                    controller: 'bindCategoryToFilterCtrl',
                    size: 'lg',
                    resolve: {
                        sections: function () {
                            return sections;
                        },
                        field:function () {
                            return field;
                        },
                        id:function () {
                            return id;
                        },
                        revers:function () {
                            return revers;
                        }
                    }
                }
                return options;
            })
            .then(function(options){
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedCategory) {
                    console.log(selectedCategory)
                    if(selectedCategory._id!=$scope.item.category._id){
                        Category.get({id:selectedCategory._id},function(res){
                            $scope.tagsValue=setTagsValue($scope.item.tags,res.filters)
                            $scope.item.category=res;
                        })

                    }
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                });
            })

    }
}])
'use strict';
angular.module('gmall.directives')
.directive('growlNotification',[function(){
    return{
        restrict:"AE",
        scope:{msg:'='},
        templateUrl:"components/growlNotification/growlNotification.html",
        link:function(scope,element,arrts){
            $(element ).hide();
            scope.$watch('msg',function(n){
                if(n){
                    $(element).fadeIn(500);
                    setTimeout(function(){
                        $(element ).fadeOut(500);
                        scope.msg=null;
                    },2000)
                }
            })
        }
    }
}])




'use strict';
angular.module('gmall.directives')
.directive('backToTop',[function(){
    return{
        restrict: 'AC',
        link:function(scope,element){
            $(element).hide()
            $(window).scroll(function() {
                if ($(this).scrollTop() > 200) {
                    $(element).fadeIn(400);
                } else {
                    $(element).fadeOut(400);
                }
            });
            element.bind('click',function(){
                $('html, body').animate({
                    scrollTop: 0
                },300);

                return false;
            })
        }
    }
}])
.directive('bounce', [function () {
        return {
            restrict: 'C',
            link: function (scope, iElement, iAttrs) {

                $(window).scroll(function() {
                    if ($(this).scrollTop() < 30) {
                        $(iElement).fadeIn(400);
                    } else {
                        $(iElement).fadeOut(400);
                    }
                });
            }
        };
    }])





'use strict';

/* Directives */
angular.module('gmall.directives')

    .directive("fileReadSrc", ['$parse','$timeout',function ($parse,$timeout) {
        return {
            restrict: 'A',
            scope: {
                fileSrc : "=fileReadSrc",
                myFile:'='
            },

            link: function (scope, element, attrs) {
                element.bind("change", function (changeEvent) {
                    /*var model = $parse(attrs.fileReadScr);

                     var modelSetter = model.assign;
                     //console.log(modelSetter)*/
                    var reader = new FileReader();
                    reader.onload = function (loadEvent) {
                        //console.log(loadEvent.target.result);
                        scope.$apply(function () {
                            $timeout(function(){
                                scope.fileSrc = loadEvent.target.result;
                                //console.log(scope.fileSrc);
                            });
                        });
                    }
                    scope.myFile= changeEvent.target.files[0];
                    reader.readAsDataURL(changeEvent.target.files[0]);
                });
            }
        }
    }])

.directive('loadImage',['$fileUpload','$timeout','Photo', function($fileUpload,$timeout,Photo) {
    return {
        restrict : 'AE',
        scope: {
            uploadUrl:'@',
            itemId:'@',
            itemUrl:'@',
            fileSrc:'=',
            Item:'=itemResourse',
            gallery:'=',
            nameImg:'@',
            nameImgForSave:'@',
            deleteFile:"@",
            replaceIndex:'@'
            //fileReadSrc
        },
        controller:function($scope){
            $scope.$ctrl={fileDimension:'Origin'}
            $scope.dimen= $scope.uploadUrl.split('/');
            $scope.$ctrl.fileDimension=''
            $scope.$ctrl.fileDimension=$scope.dimen[$scope.dimen.length-1].slice(10);
        },
        templateUrl: 'components/loadImage/loadimage.html',
        link: function(scope, element,attrs) {
            var string='abcdefghijklmnopqrstuvwxyzQAZWSXEDCRFVTGBYHNUJMIKOLP1234567890';
            var oldImg;
            scope.noLoad=true;
            scope.noChange=false;
            scope.now=Date.now()+string.shuffle(5);
            if (!scope.nameImg){scope.nameImg='img';}
            scope.photoIndexArray=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,100];
            scope.$watch('fileSrc',function(n,o){
                if(n && n.indexOf('base64') < 0){
                    //console.log(n)
                    oldImg=n;
                    //console.log(oldImg)
                }
            });

            scope.$watch('myFile',function(n,o){
                if (!n){
                    scope.noLoad=true;
                } else {
                    scope.noLoad=false;
                }
            });
            scope.$watch('itemId',function(n,o){
                if (n){
                    scope.noChange=false;
                } else {
                    scope.noChange=true;
                }
            });
            scope.clickFile=function(){
                var id= '#imagefile'+scope.now;
                angular.element(id).trigger('click');
            }
            scope.uploadImg = function(){
                if (!scope.itemId) return;
                var file = scope.myFile;
                scope.noChange=true;
                var params={index:scope.index,nameImg:scope.nameImg}
                if(scope.itemUrl && scope.itemUrl!='undefined'){
                    params.url=scope.itemUrl;
                }
                scope.dimen[scope.dimen.length-1]=scope.dimen[scope.dimen.length-1].slice(0,10);
                var url = scope.dimen.join('/');
                url +=scope.$ctrl.fileDimension;
                /*console.log(url)
                return;*/
                //console.log(scope.uploadUrl,scope.fileDimension,url)
                $fileUpload.uploadFileToUrl(file, url,scope.itemId,params)
                    .then(function(res){
                        scope.myFile=null;
                        //console.log(res);
                        scope.noChange=false;
                        scope.noLoad=true;
                        scope.fileSrc=null;
                        //alert('загружено!');
                        var o={_id:scope.itemId}
                        $timeout(function(){
                            //if(!scope.gallery){scope.gallery=[]}
                            if(scope.nameImg=='imgs'){
                                if(scope.replaceIndex){
                                    scope.gallery[scope.replaceIndex].img=res.data.imgs[0].img
                                    if(oldImg){
                                        console.log('deleting');
                                        Photo.deleteFiles('Stuff',[oldImg]);
                                    }
                                }else{
                                    scope.gallery.push(res.data.imgs[0]);
                                }
                                if(scope.nameImgForSave){
                                    o[scope.nameImgForSave]=scope.gallery;
                                }else{o[scope.nameImg]=scope.gallery;}

                               // console.log(scope.gallery)
                            } else if(scope.nameImg=='gallery'){
                                scope.gallery.push(res.data.gallery[0]);
                                o[scope.nameImg]=scope.gallery;
                            } else{
                                if(oldImg){
                                    var small = oldImg.split('/');
                                    small[small.length-1]= small[small.length-1].replace('img','small');
                                    small=small.join('/')
                                    console.log('deleting');
                                    Photo.deleteFiles('Stuff',[oldImg,small]);
                                }
                                oldImg=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                scope.fileSrc=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                o[scope.nameImg]=(res.data.img)?res.data.img:res.data[scope.nameImg];
                            }


                            var field=(scope.nameImgForSave)?scope.nameImgForSave:scope.nameImg;
                            //console.log(field)
                            //for smallimg
                            if(res.data['small'+scope.nameImg]){
                                field+=' '+'small'+scope.nameImg;
                                o['small'+scope.nameImg]=res.data['small'+scope.nameImg];
                            }
                            //console.log(field,o)
                            scope.Item.save({update:field},o)
                        },10)
                    })
                    .catch(function (err) {
                        if(err){
                            exception.catcher('upload video')(err)
                        }

                    })
            }
            scope.deleteImg=function(){
                if (!scope.itemId) {scope.fileSrc=null;scope.noLoad=true; return};
                if(!oldImg){return}
                var o={_id:scope.itemId}

                var field=scope.nameImg;
                field+=' '+'small'+scope.nameImg;
                o[scope.nameImg]=null;
                o['small'+scope.nameImg]=null;


                scope.Item.save({update:field},o)
                var small = oldImg.split('/');
                small[small.length-1]= small[small.length-1].replace('img','small');
                small=small.join('/')
                Photo.deleteFiles('Stuff',[oldImg,small]);
                oldImg=null;
                scope.fileSrc='';
                scope.noChange=false;
                scope.noLoad=true;
                /*scope.noChange=true;
                scope.Item.delete({_id:scope.itemId,file:scope.nameImg},function(res){
                    scope.fileSrc='';
                    scope.noChange=false;
                    scope.noLoad=true;
                });*/
            }
        }

    };
}])
.directive('uploadVideo',['$fileUpload','$timeout','Photo','exception', function($fileUpload,$timeout,Photo,exception) {
    return {
        restrict : 'AE',
        scope: {
            uploadUrl:'@',
            itemId:'@',
            fileSrc:'=',
            Item:'=itemResourse',
            gallery:'=',
            nameImg:'@'
            //fileReadSrc
        },
        templateUrl: 'components/loadImage/uploadVideo.html',
        link: function(scope, element,attrs) {
            var oldImg;
            var string='abcdefghijklmnopqrstuvwxyzQAZWSXEDCRFVTGBYHNUJMIKOLP1234567890';
            scope.noLoad=true;
            scope.noChange=false;
            scope.now=Date.now()+string.shuffle(5);
            if (!scope.nameImg){scope.nameImg='img';}
            scope.photoIndexArray=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,100];
            scope.$watch('fileSrc',function(n,o){
                if(n && n.indexOf('base64') < 0){
                    //console.log(n)
                    oldImg=n;
                }
            });
            scope.$watch('myFile',function(n,o){
                if (!n){
                    scope.noLoad=true;
                } else {
                    scope.noLoad=false;
                }
            });
            scope.$watch('itemId',function(n,o){
                if (n){
                    scope.noChange=false;
                } else {
                    scope.noChange=true;
                }
            });
            scope.clickFile=function(){
                var id= '#imagefile'+scope.now;
                angular.element(id).trigger('click');
            }
            scope.uploadImg = function(){
                if (!scope.itemId) return;
                var file = scope.myFile;
                scope.noChange=true;
                var o={_id:scope.itemId}
                $fileUpload.uploadFileToUrl(file, scope.uploadUrl,scope.itemId,{index:scope.index,nameImg:scope.nameImg})
                    .then(function(res){
                    scope.myFile=null;
                    //console.log(res);
                    scope.noChange=false;
                    scope.noLoad=true;
                    scope.fileSrc=null;

                    //alert('загружено!');
                    $timeout(function(){
                        o[scope.nameImg]=res.data.img;

                        if(oldImg){
                            var small = oldImg.split('/');
                            small[small.length-1]= small[small.length-1].replace('img','small');
                            small=small.join('/')
                            console.log('deleting');
                            Photo.deleteFiles('Stuff',[oldImg,small]);

                        }
                        oldImg=res.data.img;
                        scope.fileSrc=res.data.img;
                        scope.Item.save({update:scope.nameImg},o)
                    },100)
                })
                    .catch(function (err) {
                        if(err){
                            exception.catcher('upload video')(err)
                        }

                    })
            }
            scope.deleteImg=function(){
                if (!scope.itemId) {scope.fileSrc=null;scope.noLoad=true; return};
                if(!oldImg){return}
                var o={_id:scope.itemId}
                o[scope.nameImg]=null;
                scope.Item.save({update:scope.nameImg},o)
                Photo.deleteFiles('Stuff',[oldImg]);
                oldImg=null;
                scope.fileSrc='';
                scope.noChange=false;
                scope.noLoad=true;
            }
        }
    };
}])
.directive('loadImageWithLink',['$fileUpload','$timeout','$http', function($fileUpload,$timeout,$http) {
        return {
            restrict : 'AE',
            scope: {
                noLoad:'=noLoad',
                noChange:'=noChange',
                uploadUrl:'@',
                itemId:'@',
                fileSrc:'=',
                additionUrl:'@',
                Item:'=itemResourse',
                gallery:'='
                //fileReadSrc
            },
            templateUrl: 'manager/views/templates/loadimagewithlinks.html',
            link: function(scope, element,attrs) {
                var additionUrl=(scope.additionUrl)?scope.additionUrl:'Subscribe';
                scope.photoIndexArray=[1,2,3,4,5,6,7,8,9,10,11,12,100];
                scope.$watch('myFile',function(n,o){
                    if (!n){
                        scope.noLoad=true;
                    } else {
                        scope.noLoad=false;
                    }
                });
                scope.$watch('itemId',function(n,o){
                    if (n){
                        scope.noChange=false;
                    } else {
                        scope.noChange=true;
                    }
                });
                scope.$watch('fileSrc',function(n,o){
                    if (!n){
                        scope.fileSrc='/img/upload/no.png'
                    }
                });
                scope.link=''
                scope.index=1;
                scope.uploadImg = function(){
                    if (!scope.itemId) return;
                    var file = scope.myFile;
                    //console.log(scope.itemId);

                    scope.noChange=true;
                    $fileUpload.uploadFileToUrl(file, scope.uploadUrl,scope.itemId,{index:scope.index,link:scope.link}).then(function(res){
                        scope.myFile=null;
                        scope.link=''
                        scope.index=1;
                        console.log(res);
                        scope.noChange=false;
                        scope.noLoad=true;
                        scope.fileSrc=res.data.img;
                        //alert('загружено!');
                        $timeout(function(){
                            scope.gallery=res.data.gallery
                        },10)
                    });
                }
                scope.deleteImg=function(){
                    if (!scope.itemId) return;
                    scope.noChange=true;

                    scope.fileSrc='';

                    scope.Item.delete({id:scope.itemId,file:'file'},function(res){
                        scope.noChange=false;
                        scope.noLoad=true;
                        alert(res.msg);
                    });
                }

                scope.deletePhoto = function(index){
                    if (confirm("Удалить?")){
                        $http.get("/api/collections/"+additionUrl+"/fileGalleryDelete/"+scope.itemId+'/'+index).then(function (response) {
                            scope.gallery=response.data.gallery;
                            //$scope.gallery=[];
                            /*$timeout(function(){
                             $scope.item.gallery=response.data.gallery;
                             },10);*/

                        });
                    }
                }

                scope.updateStuffGallery = function(){
                    $http.post("/api/collections/"+additionUrl+"/fileGalleryUpdate/"+scope.itemId,{gallery:scope.gallery}).then(function (response) {
                        //alert(response.data.msg);
                        scope.gallery=response.data.gallery;
                    });
                }
            }

        };
    }])

    .directive('loadImageBig',['$fileUpload','$timeout', function($fileUpload,$timeout) {
        return {
            restrict : 'AE',
            scope: {
                noLoad:'=noLoad',
                noChange:'=noChange',
                uploadUrl:'@',
                itemId:'@',
                fileSrc:'=',
                Item:'=itemResourse',
                nameImage:'@'
                //fileReadSrc
            },
            templateUrl: 'manager/views/templates/loadimagebig.html',
            link: function(scope, element,attrs) {
                /*scope.$watch('fileSrc',function(n){
                    console.log(n);
                })*/
                scope.$watch('myFile',function(n,o){
                    // console.log(n);
                    //console.log(o)
                    if (!n){
                        // console.log('sss');
                        scope.noLoad=true;
                    } else {
                        scope.noLoad=false;
                    }
                    //console.log(scope.fileSrc);
                });
                scope.$watch('itemId',function(n,o){
                    //console.log(n);
                    //console.log(o)
                    if (n){

                        scope.noChange=false;
                    } else {
                        scope.noChange=true;
                    }
                    //console.log(scope.fileSrc);
                });
                scope.clickOnUpload = function (id) {
                    $timeout(function() {
                       // console.log(id);
                        angular.element('#'+id).trigger('click');
                    }, 100);
                };

                scope.uploadImg = function(){
                    if (!scope.itemId) return;
                    var file = scope.myFile;
                    //console.log(scope.itemId);

                    scope.noChange=true;
                    $fileUpload.uploadFileToUrl(file, scope.uploadUrl,scope.itemId,{nameImg:scope.nameImage}).then(function(res){
                        scope.myFile=null;
                        //console.log(res);
                        scope.noChange=false;
                        scope.noLoad=true;
                        scope.fileSrc=res.data.img;
                        //alert('загружено!');
                        $timeout(function(){
                            scope.fileSrc=res.data.img;
                        },10)
                    });
                }
                scope.deleteImg=function(){
                    if (!scope.itemId) return;
                    scope.noChange=true;

                    scope.fileSrc='';

                    scope.Item.delete({id:scope.itemId,file:scope.nameImage},function(res){
                        scope.noChange=false;
                        scope.noLoad=true;
                        alert(res.msg);
                    });
                }
            }

        };
    }])

//http://www.tutorialspoint.com/angularjs/angularjs_upload_file.htm
.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                });
            });
        }
    };
}])
.directive('uploadFiles',function ($timeout) {
    return {
        link: function (scope, element, attrs) {
            console.log(element[0].form)

            var $form = $(element[0].form);
            var isAdvancedUpload = function() {
                var div = document.createElement('div');
                return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
            }();
            if (isAdvancedUpload) {
                $form.addClass('has-advanced-upload');
                var droppedFiles = false;

                $form.on('drag dragstart dragend dragover dragenter dragleave drop', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                })
                    .on('dragover dragenter', function() {
                        $form.addClass('is-dragover');
                    })
                    .on('dragleave dragend drop', function() {
                        $form.removeClass('is-dragover');
                    })
                    .on('drop', function(e) {
                        droppedFiles = e.originalEvent.dataTransfer.files;
                        console.log(e.target.files)
                        console.log(droppedFiles)
                    });
            }

            var changedHandler = function (event) {
                if (window.File && window.FileList && window.FileReader) {
                    scope.$apply(function () {
                        //scope.files.length = 0;
                        var files = event.target.files; //FileList object
                        var output = document.getElementById("result");
                        if(files.length){scope.hasFiles = true;}else{scope.hasFiles = false}
                        for (var i = 0; i < files.length; i++) {
                            var file = files[i];
                            var picReader = new FileReader();
                            picReader.addEventListener("load", function (event) {
                                var picFile = event.target;
                                file.imgSrc=picFile.result;
                                scope.files.push(file);
                                /*var div = document.createElement("div");
                                 div.innerHTML = "<img class='thumbnail' src='" + picFile.result + "'" + "title='" + picFile.name + "'/>";
                                 output.insertBefore(div, null);*/
                            });
                            //Read the image
                            picReader.readAsDataURL(file);
                        }
                    })
                    $timeout(function () {
                        //console.log(scope.files)
                    },1000)

                } else {
                    console.log("Your browser does not support File API");
                }

                return;





                var reader = new FileReader();
                reader.onload = function (loadEvent) {
                    scope.$apply(function () {
                        if (element[0].files) {
                            scope.files.length = 0;
                            angular.forEach(element[0].files, function (f) {
                                scope.files.push(f);
                                var fr = new FileReader;
                                //fr.onloadend = changeimg;
                                fr.readAsDataURL(f)
                            });
                            scope.hasFiles = true;
                        }
                        $timeout(function(){
                            scope.fileSrc = loadEvent.target.result;
                        });
                    });
                }
                scope.myFile= changeEvent.target.files[0];
                reader.readAsDataURL(changeEvent.target.files[0]);



                scope.$apply(function () {
                    console.log(element[0].files)
                    if (element[0].files) {
                        scope.files.length = 0;
                        angular.forEach(element[0].files, function (f) {
                            scope.files.push(f);
                            var fr = new FileReader;
                            fr.onloadend = changeimg;
                            fr.readAsDataURL(f)
                        });
                        scope.hasFiles = true;
                    }
                });
            };

            var resetHandler = function () {
                scope.$apply(function () {
                    scope.files.length = 0;
                    scope.hasFiles = false;
                });
            };

            element.bind('change', changedHandler);

            if (element[0].form) {
                angular.element(element[0].form).bind('reset', resetHandler);
            }

            // Watch the files so we can reset the input if needed
            scope.$watchCollection('files', function () {
                if (scope.files.length === 0) {
                    element.val(null);
                }
            })

            scope.$on('$destroy', function () {
                element.unbind('change', changedHandler);
                if (element[0].form) {
                    angular.element(element[0].form).unbind('reset', resetHandler);
                }
            });


        },
        restrict: 'A',
        scope: {
            files: '=uploadFiles',
            hasFiles: '='
        }
    }
})

'use strict';
angular.module('gmall.services')
.service('$fileUpload', ['$http','$uibModal','$q', function ($http,$uibModal,$q) {
        this.uploadFileToUrl = function(file, uploadUrl,id,params,type){
            var fd = new FormData();
            fd.append('file', file);
            fd.append('id', id);
            // console.log(uploadUrl,id,params);
            if (params && (typeof params == "object")){
                for (var key in params) {
                    ////fd[key]=params[key]
                    fd.append(key, params[key]);
                }
            }
            var preffix=photoUpload;
            switch(type){
                case 'user': preffix=userHost;break;
            }
           return $http.post(preffix+uploadUrl, fd, {
                withCredentials: true,
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            })
        }
        this.showFile =function (block,field) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/loadImage/showImgInModal.html',
                controllerAs:'$ctrl',
                controller: function ($uibModalInstance ,block,field) {
                    var self=this;
                    self.item=block;
                    console.log(self.item)
                    self.ok=ok;
                    self.cancel = cancel;

                    function ok(item){
                        $uibModalInstance.close();
                    }
                    function cancel() {
                        $uibModalInstance.dismiss();
                    };
                },
                resolve: {
                    block:function () {
                        return block
                    },
                    field:function () {
                        return field
                    }
                }
            });
            return modalInstance.result

        }

        this.fileUpload=function (uploadUrl,field,itemUrl,itemId,index) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: function () {
                return (field && field=='video')?'components/loadImage/loadVideoModal.html':'components/loadImage/loadImageModal.html';
                if(field=='video'){'components/loadImage/loadVideoModal.html'}else{return 'components/loadImage/loadImageModal.html'}
            },
            controller: function(uploadUrl,field,itemUrl,itemId,index,$uibModalInstance,$scope,$timeout,exception){
                //console.log(itemUrl)
                var self=this;
                self.files=[]
                self.hasFiles=false;
                self.urlArr=uploadUrl.split('?');
                self.suffix=(self.urlArr[1])?self.urlArr[1]:'';
                self.dimen= self.urlArr[0].split('/');
                self.fileDimension=''
                if(field!='video'){
                    self.fileDimension=self.dimen[self.dimen.length-1].slice(10);
                }
                self.uploadFiles=uploadFiles;
                var $form,$input;
                $timeout(function () {
                    $form = $('#uploadImgForm');
                    $input = $form.find('#inputFilesUpload')
                    $input.bind('change', changedHandler);
                    $form.bind('reset', resetHandler);
                    var isAdvancedUpload = function() {
                        var div = document.createElement('div');
                        return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
                    }();
                    if (isAdvancedUpload) {
                        $form.addClass('has-advanced-upload');
                        var droppedFiles = false;

                        $form.on('drag dragstart dragend dragover dragenter dragleave drop', function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                        })
                            .on('dragover dragenter', function() {
                                $form.addClass('is-dragover');
                            })
                            .on('dragleave dragend drop', function() {
                                $form.removeClass('is-dragover');
                            })
                            .on('drop', function(e) {
                                handleImage(e.originalEvent.dataTransfer.files)
                            });
                    }

                },300)
                /****************************************************************/
                /****************************************************************/
                var changedHandler = function (event) {
                    if (window.File && window.FileList && window.FileReader) {
                        handleImage(event.target.files)
                    } else {
                        console.log("Your browser does not support File API");
                    }
                };
                var resetHandler = function () {
                    $scope.$apply(function () {
                        self.files.length = 0;
                        self.hasFiles = false;
                        self.isUploading=false;
                    });
                };
                function handleImage(files) {
                    $scope.$apply(function () {
                        if(files.length){self.hasFiles = true;}else{self.hasFiles = false}
                        for (var i = 0; i < files.length; i++) {
                            var file = files[i];
                            var picReader = new FileReader();
                            closureI(picReader,file)
                            //Read the image
                            picReader.readAsDataURL(files[i]);
                        }
                    })
                    function closureI(picReader,file) {
                        picReader.addEventListener("load", function (event) {
                            var picFile = event.target;
                            file.imgSrc=picFile.result;
                            var is;
                            for(var j=0;j<self.files.length;j++){
                                if(self.files[j].name==file.name){
                                    is=true;
                                    break;
                                }
                            }
                            if(!is){
                                $timeout(function () {
                                    self.files.push(file);
                                },100)

                            }
                        });
                    }
                }
                // Watch the files so we can reset the input if needed
                $scope.$watchCollection('files', function () {
                    if (self.files.length === 0 && $input) {
                        $input.val(null);
                    }
                })
                $scope.$on('$destroy', function () {
                    $input.unbind('change', changedHandler);
                    $form.unbind('reset', resetHandler);
                });
                /****************************************************************/
                /****************************************************************/

                function uploadFiles() {
                    if(self.isUploading){return}
                    self.isUploading=true;
                    var acts=[];
                    self.files.forEach(function (file,i) {
                        if((field!='imgs' && field!='gallery' && i) || i>20){
                            return
                        }
                        acts.push(handlePhoto(file))
                    })

                    function handlePhoto(file) {
                        console.log(uploadUrl,self.fileDimension)
                        var url = self.urlArr[0]+self.fileDimension;
                        //console.log(url)
                        var fd = new FormData();
                        //console.log(file)
                        fd.append('file', file);
                        if(itemUrl){
                            fd.append('url', itemUrl);
                        }
                        if(field){
                            fd.append('nameImg', field);
                        }
                        if(itemId){
                            fd.append('id', itemId);
                        }
                        if(index){
                            fd.append('index', index);
                        }
                        var preffix=photoUpload;
                        console.log(preffix+url+'?'+self.suffix)
                        return $http.post(preffix+url+'?'+self.suffix, fd, {
                            withCredentials: true,
                            transformRequest: angular.identity,
                            headers: {'Content-Type': undefined}
                        })
                    }

                    return $q.all(acts)
                        .then(function (res) {
                            //console.log(res)
                            $uibModalInstance.close(res);
                        })
                        .catch(function (err) {
                            exception.catcher('load file')(err)
                            console.log(err)
                        })

                }




                $scope.$watch('fileSrc',function(n,o){
                    if(n && n.indexOf('base64') < 0){
                        //console.log(n)
                        oldImg=n;
                        //console.log(oldImg)
                    }
                });
                $scope.$watch('myFile',function(n,o){
                    if (!n){
                        $scope.noLoad=true;
                    } else {
                        $scope.noLoad=false;
                    }
                });
                $scope.clickFile=function(){
                    var id= '#imagefile'+$scope.now;
                    angular.element(id).trigger('click');
                }
                $scope.uploadImg = function(){
                    if (!scope.itemId) return;
                    var file = scope.myFile;
                    scope.noChange=true;
                    var params={index:scope.index,nameImg:scope.nameImg}
                    if(scope.itemUrl && scope.itemUrl!='undefined'){
                        params.url=scope.itemUrl;
                    }
                    scope.dimen[scope.dimen.length-1]=scope.dimen[scope.dimen.length-1].slice(0,10);
                    var url = scope.dimen.join('/');
                    url +=scope.$ctrl.fileDimension;
                    /*console.log(url)
                     return;*/
                    //console.log(scope.uploadUrl,scope.fileDimension,url)
                    $fileUpload.uploadFileToUrl(file, url,scope.itemId,params)
                        .then(function(res){
                            scope.myFile=null;
                            //console.log(res);
                            scope.noChange=false;
                            scope.noLoad=true;
                            scope.fileSrc=null;
                            //alert('загружено!');
                            var o={_id:scope.itemId}
                            $timeout(function(){
                                //if(!scope.gallery){scope.gallery=[]}
                                if(scope.nameImg=='imgs'){
                                    if(scope.replaceIndex){
                                        scope.gallery[scope.replaceIndex].img=res.data.imgs[0].img
                                        if(oldImg){
                                            console.log('deleting');
                                            Photo.deleteFiles('Stuff',[oldImg]);
                                        }
                                    }else{
                                        scope.gallery.push(res.data.imgs[0]);
                                    }
                                    if(scope.nameImgForSave){
                                        o[scope.nameImgForSave]=scope.gallery;
                                    }else{o[scope.nameImg]=scope.gallery;}

                                    // console.log(scope.gallery)
                                } else if(scope.nameImg=='gallery'){
                                    scope.gallery.push(res.data.gallery[0]);
                                    o[scope.nameImg]=scope.gallery;
                                } else{
                                    if(oldImg){
                                        var small = oldImg.split('/');
                                        small[small.length-1]= small[small.length-1].replace('img','small');
                                        small=small.join('/')
                                        console.log('deleting');
                                        Photo.deleteFiles('Stuff',[oldImg,small]);
                                    }
                                    oldImg=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                    scope.fileSrc=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                    o[scope.nameImg]=(res.data.img)?res.data.img:res.data[scope.nameImg];
                                }


                                var field=(scope.nameImgForSave)?scope.nameImgForSave:scope.nameImg;
                                //console.log(field)
                                //for smallimg
                                if(res.data['small'+scope.nameImg]){
                                    field+=' '+'small'+scope.nameImg;
                                    o['small'+scope.nameImg]=res.data['small'+scope.nameImg];
                                }
                                //console.log(field,o)
                                scope.Item.save({update:field},o)
                            },10)
                        })
                        .catch(function (err) {
                            if(err){
                                exception.catcher('upload video')(err)
                            }

                        })
                }
                self.ok=function(){
                    console.log(self.item)
                    $uibModalInstance.close(self.item);
                }
                self.cancel = function () {
                    $uibModalInstance.dismiss();
                };
            },
            controllerAs:'$ctrl',
            size:'lg',
            resolve: {
                uploadUrl: function () {
                    return uploadUrl;
                },
                field: function () {
                    return field;
                },
                itemUrl: function () {
                    return itemUrl;
                },
                itemId: function () {
                    return itemId;
                },
                index: function () {
                    return index;
                },
            }
        });
        return modalInstance.result
    }



    }])
.factory('Photo',photoFactory)

photoFactory.$inject=['$http'];
function photoFactory($http) {
    return {
        deleteFolder: function(model,folder) {
            return $http.post('/api/collections/Photo/deleteFolder',{folder:folder});
        },
        deleteFolders: function(model,folders) {
            return $http.post('/api/collections/Photo/deleteFolders',{folders:folders});
        },
        deleteFiles: function(model,files) {
            return $http.post('/api/collections/Photo/deleteFiles',{files:files});
        }
    };
    return {
        deleteFolder: function(model,folder) {
            return $http.post(photoUpload+'/api/collections/'+model+'/deleteFolder',{folder:folder});
        },
        deleteFolders: function(model,folders) {
            return $http.post(photoUpload+'/api/collections/'+model+'/deleteFolders',{folders:folders});
        },
        deleteFiles: function(model,files) {
            return $http.post(photoUpload+'/api/collections/'+model+'/deleteFiles',{files:files});
        }
    };
}



angular.module('gmall.directives')
.directive('checklistModel', ['$parse', '$compile', function($parse, $compile) {
    // contains
    function contains(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    return true;
                }
            }
        }
        return false;
    }

    // add
    function add(arr, item) {
        arr = angular.isArray(arr) ? arr : [];
        for (var i = 0; i < arr.length; i++) {
            if (angular.equals(arr[i], item)) {
                return arr;
            }
        }
        arr.push(item);
        return arr;
    }

    // remove
    function remove(arr, item) {
        if (angular.isArray(arr)) {
            for (var i = 0; i < arr.length; i++) {
                if (angular.equals(arr[i], item)) {
                    arr.splice(i, 1);
                    break;
                }
            }
        }
        return arr;
    }

    // http://stackoverflow.com/a/19228302/1458162
    function postLinkFn(scope, elem, attrs) {
        // compile with `ng-model` pointing to `checked`
        $compile(elem)(scope);

        // getter / setter for original model
        var getter = $parse(attrs.checklistModel);
        var setter = getter.assign;

        // value added to list
        var value = $parse(attrs.checklistValue)(scope.$parent);

        // watch UI checked change
        scope.$watch('checked', function(newValue, oldValue) {
            if (newValue === oldValue) {
                return;
            }
            var current = getter(scope.$parent);
            if (newValue === true) {
                setter(scope.$parent, add(current, value));
            } else {
                setter(scope.$parent, remove(current, value));
            }
        });

        // watch original model change
        scope.$parent.$watch(attrs.checklistModel, function(newArr, oldArr) {
            scope.checked = contains(newArr, value);
        }, true);
    }

    return {
        restrict: 'A',
        priority: 1000,
        terminal: true,
        scope: true,
        compile: function(tElement, tAttrs) {
            if (tElement[0].tagName !== 'INPUT' || !tElement.attr('type', 'checkbox')) {
                throw 'checklist-model should be applied to `input[type="checkbox"]`.';
            }

            if (!tAttrs.checklistValue) {
                throw 'You should provide `checklist-value`.';
            }

            // exclude recursion
            tElement.removeAttr('checklist-model');

            // local scope var storing individual checkbox model
            tElement.attr('ng-model', 'checked');

            return postLinkFn;
        }
    };
}]);

'use strict';
angular.module('gmall.directives')
.directive('bindModelToCategory',['Sections','Category','$q','$resource',function(Sections,Category,$q,$resource){
    return {
        restrict:"E",
        scope:{
            id:'@',
            field:'@',
            backstate:'@',
            model:'@',
            revers:'@'
        },
        templateUrl:"components/bindModelToCategory/bindModelToCategory.html",
        link:function($scope,element,attrs){

            var field=$scope.field;
            //console.log(field)
            function checkField(section){
                section.showCheck=false;
                if(section.categories && section.categories.length){
                    section.checkAll=true;
                    section.showCheck=true;
                    section.categories.forEach(function(category){
                        if(!$scope.revers){
                            if(category[field].indexOf($scope.id)>-1){
                                category.checked=true;
                            }else{
                                section.checkAll=false;
                            }
                        }else{
                            if($scope.item[field].indexOf(category._id)>-1){
                                category.checked=true;
                            }else{
                                section.checkAll=false;
                            }
                        }

                    })
                }
                if(section.child && section.child.length){
                    section.checkAll=false;
                    section.child.forEach(function(s){
                        if (checkField(s)){
                            section.showCheck=true;
                        }
                    })
                }
                return section.showCheck;
            }
            function checkCategory(category){
                if (category.checked){
                    if(!$scope.revers){
                        if(!category[field] ){
                            category[field]=[];
                            category[field].push($scope.id)
                        }else{
                            if(category[field].indexOf($scope.id)<0){
                                category[field].push($scope.id)
                            }
                        }
                    }else{
                        if($scope.item[field].indexOf(category._id)<0){
                            $scope.item[field].push(category._id)
                        }
                        category=$scope.item;
                    }

                }else{
                    if(!$scope.revers){
                        if(category[field] && category[field].length){
                            var i = category[field].indexOf($scope.id);
                            if(i>-1){
                                category[field].splice(i,1)
                            }
                        }
                    }else{
                        if($scope.item[field] && $scope.item[field].length){
                            var i = $scope.item[field].indexOf(category._id);
                            if(i>-1){
                                $scope.item[field].splice(i,1)
                            }
                        }
                        category=$scope.item;
                    }
                }
                Category.save({update:field},category);
            }
            $scope.bindFilter=function(category,section){
                checkCategory(category)
                section.checkAll=true;
                for(var i= 0,l=section.categories.length;i<l;i++){
                    if(!$scope.revers){
                        if(section.categories[i][field].indexOf($scope.id)<0){
                            section.checkAll=false;
                            break;
                        }
                    }else{
                        if($scope.item[field].indexOf(section.categories[i]._id)<0){
                            section.checkAll=false;
                            break;
                        }
                    }

                }
            }
            $scope.bindFilterForSection=function(section,checkAll){
                section.checkAll=checkAll;
                if(section.categories && section.categories.length){
                    section.categories.forEach(function(category){
                        category.checked=checkAll;
                        checkCategory(category)
                    })
                }

                if(section.child && section.child.length){
                    section.child.forEach(function(s){
                        $scope.bindFilterForSection(s,checkAll)
                    })
                }
            }
            function foo(s){
                if (s.child && s.child.length){
                    for(var i = 0,l= s.child.length;i<l;i++){
                        var section=s.child[i];
                        //console.log( 'section - ',section.name,' ',section.showCheck)
                        if (section.showCheck){
                            if (section.child && section.child.length){
                                section.checkAll=foo(section);
                                if (!section.checkAll){
                                    return false;
                                }
                                //console.log( 'checkAll - ',section.name,' ',section.checkAll)
                            } else{
                                //console.log('end section ', section.name,' ',section.checkAll)
                                if(!section.checkAll){
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }

            }


            $q.when()
                .then(function(){
                    var q=$q.defer();
                    if($scope.model){
                        var Item = $resource('/api/collections/'+$scope.model+'/:id',{id:'@_id'});
                        Item.get({id:$scope.id},function(res){
                            if(!res[$scope.field]){
                                res[$scope.field]=[]
                            }
                            $scope.item=res;
                            q.resolve()
                        })
                        Category=Item;
                    }else{
                        q.resolve()
                    }
                    return q.promise
                })
                .then(function(){
                    var q=$q.defer();
                    Sections.query(function(res){
                        res.shift();
                        $scope.sections=res.filter(function(el){return el.level===0});
                        $scope.sections.forEach(checkField)
                        $scope.sections.forEach(function(s){
                            if(s.showCheck){
                                s.checkAll=foo(s);
                            }
                        })
                        q.resolve()
                    });
                    return q.promise
                })


        }
    }
}])


'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('mongooseError', function () {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function(scope, element, attrs, ngModel) {
                    element.on('keydown', function() {
                        return ngModel.$setValidity('mongoose', true);
                    });
                }
            };
        })
})()


'use strict';

/* Directives */
var directives = angular.module('gmall.directives');
directives.directive('choiceUser',['$resource' ,function($resource) {
     return {
         restrict: 'E',
         scope: { onSelected: '&'},
         templateUrl:'components/choiceUser/index.html',

         link: function ( scope, $element ) {
             console.log('link');
             scope.select={};
             var User =$resource('/api/collections/User/:id',{id:'@_id'});
             scope.selectUser = function(user){
                 console.log(user)
                 scope.onSelected({user:user});
             }
             scope.refresUsers = function(search) {
                 //console.log(search)
                 if (search && search.length && search.length>2){
                     User.query({search:search.substring(0,30).replace(/\\/g, '')},function(res){
                         if(res){
                             scope.select.users=res;
                             //console.log(scope.select.users)
                         }else{
                             scope.select.users=[]
                         }
                     })
                 }
             }
         }
     };
 }])
'use strict';
(function(){

    angular.module('gmall.services')
        .service('Paps', papsService);
    papsService.$inject=['$resource','$uibModal','$q'];
    function papsService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Paps/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getPaps.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('papsItem',itemDirective)
        .directive('papsItemTemplate',itemDirectiveTemplate);


    function itemDirectiveTemplate(global){
        //var s=(global.get('store').val.template.paps)?global.get('store').val.template.paps:'';
        return {
            scope: {},
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/paps/paps.html',
            restrict:'E'
        }
    }
    function itemDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/paps/papsItem.html',
        }
    }
    itemCtrl.$inject=['Paps','$stateParams','$q','$uibModal','exception','global','$timeout','$scope','$anchorScroll'];
    function itemCtrl(Paps,$stateParams,$q,$uibModal,exception,global,$timeout,$scope,$anchorScroll){
        var self = this;
        self.Items=Paps;
        self.mobile=global.get('mobile' ).val;
        self.saveField=saveField;

        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate()
        })
        //*******************************************************
        function activate() {
            $anchorScroll()
            return getItem($stateParams.id).then(function() {
               /* console.log(id)
                console.log(ga)*/
            }).catch(function(err){
                err = err.data||err
                exception.catcher('получение post action page')(err)
            });
        }
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    self.item = data;
                    return self.item;
                } ).catch(function(err){
                    return $q.reject(err)
                });
        }
        function saveField(field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=self.item[field]
                self.Items.save({update:field},o,function(){
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                });
            },defer)
        };


    }
})()
'use strict';
(function(){

    angular.module('gmall.services')
        .directive('papsList',listDirective);
    function listDirective(){
        return {
            scope: {},
            restrict:'E',
            bindToController: true,
            controller: listCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/paps/papsList.html',
        }
    };
    listCtrl.$inject=['Paps','$state','global','exception','Confirm','$q'];
    function listCtrl(Paps,$state,global,exception,Confirm,$q){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$state;
        self.Items=Paps;
        self.query={};
        self.paginate={page:0,rows:10,totalItems:0}
        self.getList=getList;
        self.saveField = saveField;
        self.deleteItem=deleteItem;

        //*******************************************************
        activate();

        function activate() {
            return getList()
                .then(function() {
                    //console.log('Activated news list View');
                    var actions=[];
                    if(!self.items || !self.items.some(function(e){return e.action=='order'})){
                        actions.push(createItem('order'))
                    }
                    if(!self.items || !self.items.some(function(e){return e.action=='feedback'})){
                        actions.push(createItem('feedback'))
                    }
                    if(!self.items || !self.items.some(function(e){return e.action=='subscription'})){
                        actions.push(createItem('subscription'))
                    }
                    if(!self.items || !self.items.some(function(e){return e.action=='subscriptionAdd'})){
                        actions.push(createItem('subscriptionAdd'))
                    }

                    if(!self.items || !self.items.some(function(e){return e.action=='call'})){
                        actions.push(createItem('call'))
                    }
                    if(!self.items || !self.items.some(function(e){return e.action=='booking'})){
                        actions.push(createItem('booking'))
                    }
                    if(!self.items || !self.items.some(function(e){return e.action=='bonus'})){
                        actions.push(createItem('bonus'))
                    }
                    console.log(actions);
                    if (actions.length){
                        return $q.all(actions)
                    }
                       // return $q.all(actions)*/
                } )
                .then(function(res){
                    //console.log(res)
                    if(res){
                         return getList();
                    }
                })
                .catch(function(err){
                exception.catcher('получение списка')(err)
            })
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                } )
                .catch(function(err){
                    exception.catcher('получение списка')(err)
                })
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){
                },function(err){
                    exception.catcher('получение списка')(err)
                });
            },defer)
        };
        function createItem(name){
             return self.Items.save({name:name,action:name,url:name} ).$promise;
        }
        function deleteItem(item){
            Confirm("удалить?" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return getList();
                })
                .catch(function(err){
                    err = (err && err.data)||err
                    if(err){
                        exception.catcher('удаление страницы')(err)
                    }

                })
        }
    }
})()
'use strict';
(function(){

    angular.module('gmall.services')
        .service('Info', infoService);
    infoService.$inject=['$resource','$uibModal','$q'];
    function infoService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Info/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            create:create,
            selectInfo:selectInfo,
            select:selectInfo
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getPaps.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            //console.log(id)
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(header,button){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/info/createItem.html',
                    controller: createCtrl,
                    size:'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        header:function(){
                            return header
                        },
                        button:function(){
                            return button;
                        }
                    }
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        createCtrl.$inject=['$uibModalInstance','header','button']
        function createCtrl($uibModalInstance,header,button){
            var self=this;
            self.header=(header)?header:'создание информационной страницы'
            self.button=(button)?button:'создать страницу'
            self.name=''
            self.ok=function(){
                $uibModalInstance.close(self.name);
            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }

        function selectInfo(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/info/selectInfo.html',
                    controller: selectInfoCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl',
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedItem) {
                    resolve(selectedItem)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectInfoCtrl.$inject=['Info','$uibModalInstance','$q'];
        function selectInfoCtrl(Info,$uibModalInstance,$q){
            var self=this;
            $q.when()
                .then(function(){
                    return Info.getList();
                } )
                .then(function(items){
                    self.items=items;
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (item) {
                $uibModalInstance.close(item);
            };
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('infoList',listDirective)
        .directive('infoListTemplate',listTemplateDirective);
    function listDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: listCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/info/infoList.html',
        }
    };
    function listTemplateDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: listCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/info/info.html',
        }
    };
    listCtrl.$inject=['Info','$q','$state','$stateParams','global','Confirm','exception','$fileUpload','Photo'];
    function listCtrl(Items,$q,$state,$stateParams,global,Confirm,exception,$fileUpload,Photo){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.$state=$state;
        self.Items=Items;
        self.query={};
        self.paginate={page:0,rows:50,totalItems:0}
        self.newItem={name:'Новый информационный раздел',index:1}
        //console.log('Новый информационный раздел')
        self.getList=getList;
        self.saveField = saveField;
        self.searchItems=searchItems;
        self.createItem=createItem;
        self.deleteItem=deleteItem;
        self.dropCallback=dropCallback;
        self.loadPhoto=loadPhoto;
        self.deletePhoto=deletePhoto;
        //*******************************************************
        activate();

        function activate(page) {

            if(page || page===0){
                self.paginate.page=0;
            }
            return getList().then(function() {
                //console.log('Activated info list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.block=0;
                    if($stateParams.block){
                        for(var i =0;i<data.length;i++){
                            if($stateParams.block==data[i]._id){
                                self.block=i;
                                break;
                            }
                        }
                    }
                    self.items = data;
                    return self.items;
                });
        }
        function searchItems(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }
            self.paginate.page=0;
            activate();
        }
        function saveField(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            return self.Items.save({update:field},o ).$promise
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    return getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id;
                    //$state.go('frame.seoPages.item',{id:id})
                })
                .catch(function(err){
                    if(err){
                        err = err.datsa||err;
                        exception.catcher('создание объекта')(err)
                    }

                })
        }
        function deleteItem(item){
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    activate(0);
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('удаление страницы')(err)
                    }

                })
        }
        function dropCallback(item){
            //console.log(item)
            var actions=[];
            setTimeout(function(){
                self.items.forEach(function(item,idx){
                    item.index=idx+1;
                    actions.push(saveField(item,'index'))

                })
                $q.all(actions)
                //saveField('main')
            },100)
            return item
        }

        function loadPhoto(item){
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=Info";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=Info"
            $q.when()
                .then(function () {
                    return $fileUpload.fileUpload(self.uploadUrl,'img')
                })
                .then(function (res) {
                    //console.log(res)
                    var a=[];
                    if(res && res.length){
                        if(item.img){
                            a.push(item.img)
                        }
                        item.img=res[0].data.img
                        saveField(item,'img')
                        if(a.length){
                            Photo.deleteFiles('Info',a)
                        }

                    }
                })
                .catch(function (err) {
                    console.log(err)
                })
        }
        function deletePhoto(item){
            Confirm('удалить?').then(function () {
                var a=[];
                if(item.img){
                    a.push(item.img)
                }
                item.img=null
                console.log(item)
                saveField(item,'img')
                if(a.length){
                    Photo.deleteFiles('Info',a)
                }
            })

        }

    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('infoItem',itemDirective)
        .directive('infoItemTemplate',itemTemplateDirective)
        /*.component('infoItemTemplate',{
            bindings :{
                img:'@',
                info:'@'
            },
            controller: itemTemplateCtrl,
            templateUrl: 'views/template/partials/info/infoItem.html',
        })*/
        .directive('createInfoLink',itemInfoLinkDirective);
    function itemInfoLinkDirective(){
        return {
            scope: {
                info:'=',
                do:'&',
                title:'@'
            },
            rescrict:"E",
            bindToController: true,
            controller: itemInfoLinkCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/info/createLink.html',
        }
    }
    itemInfoLinkCtrl.$inject=['$q','Info','global']
    function itemInfoLinkCtrl($q,Info,global){
        var self = this;
        //console.log(self.change)
        if(!self.info){self.info={}}
        self.setInfoLink=setInfoLink;
        self.deleteLink=deleteLink;
        function setInfoLink(){
            $q.when()
                .then(function(){
                    return Info.selectInfo();
                })
                .then(function(tag){
                    self.info.link=tag._id;
                    self.info.name=tag.name;
                    //console.log(self.change())
                    self.do()
                    //console.log(self.info)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function deleteLink(){
            self.info.link=null;
            self.info.name='';
            console.log(self.info)
            self.do()

        }
    }
    function itemDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/info/infoItem.html',
        }
    }
    itemCtrl.$inject=['Info','$stateParams','$q','$uibModal','exception','global','$scope','$timeout','Confirm'];
    function itemCtrl(Items,$stateParams,$q,$uibModal,exception,global,$scope,$timeout,Confirm){
        var self = this;
        //console.log('!!')
        self.Items=Items;
        self.global=global;
        self.mobile=global.get('mobile' ).val;
        self.saveField=saveField;
        self.saveEmbeddedField=saveEmbeddedField;
        self.dropCallback=dropCallback;
        self.createNewRazdel=createNewRazdel;


        function createNewRazdel() {
            self.Items.create('создание раздела','создать раздел')
                .then(function(res){
                    if(res){
                        saveEmbeddedField({name:res},'name')
                    }
                })
        }

        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate();
        })
        //*******************************************************
        function activate() {
            return getItem($stateParams.id).then(function() {
            }).catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    self.item = data;
                    return self.item;
                } ).catch(function(err){
                    return $q.reject(err)
                });
        }
        function saveField(field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=self.item[field]
                var query={update:field}
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function saveEmbeddedField(item,field){
            //console.log(item)
            var o={_id:self.item._id};
            if(field){
                o[field]=item[field];
            }

            var update={update:field,embeddedName:'blocks'};
            if(item._id){
                if(!field){
                    update.embeddedPull=true;
                    update.update='name';
                    o.name=item.name;
                }else{
                    update.embeddedVal=item._id
                }

            }else{
                update.embeddedPush=true;
            }
            if(!field){
                Confirm('удалить?')
                    .then(function(){
                        return self.Items.save(update,o).$promise;
                    })
                    .then(function(){
                        global.set('saving',true)
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                        if(update.embeddedPush || update.embeddedPull){
                            activate($stateParams.id);
                        }
                    })
            }else{
                $q.when()
                    .then(function(){
                        return self.Items.save(update,o).$promise;
                    })
                    .then(function(){
                        global.set('saving',true)
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                        if(update.embeddedPush || update.embeddedPull){
                            activate($stateParams.id);
                        }
                    })
                    .catch(function(err){
                        if(err){
                            exception.catcher('saving')(err)
                            console.log(err)
                            if(err.data && err.data.message && err.data.message.indexOf('cannot use the part')>-1){
                                console.log(field)
                                update.update=field+'L';
                                delete o[field];
                                o[update.update]={}
                                $q.when()
                                    .then(function(){
                                        return self.Items.save(update,o).$promise;
                                    })
                                    .then(function(){
                                        global.set('saving',true)
                                        $timeout(function () {
                                            global.set('saving',false);
                                        },1500)
                                        if(update.embeddedPush || update.embeddedPull){
                                            activate($stateParams.id);
                                        }
                                    })
                                    .catch(function(err){
                                        if(err){
                                            exception.catcher('saving')(err)
                                        }

                                    })
                            }
                        }

                    })
            }


        }
        function dropCallback(item){
            //console.log(item)
            var actions=[];
            setTimeout(function(){
                saveField('blocks')
                /*self.item.blocks.forEach(function(item,idx){
                 item.index=idx+1;
                 actions.push(saveField(item,'index'))

                 })
                 $q.all(actions)
                 saveField('main')*/
            },100)
            return item
        }


    }

    /*********************************itemTemplateDirective*****************************/
    function itemTemplateDirective(global){
       /* var templ=global.get('store').val.template.main.left.getOFA('name','info')
        if(!templ){
            templ=global.get('store').val.template.main.right.getOFA('name','info')
        }*/
        //var s=(templ && templ.templ)?templ.templ:'';
        //console.log(s)
        return {
            scope: {
                img:'@',
                info:'@'
            },
            bindings :{
                img:'@',
                info:'@'
            },
            bindToController: true,
            controller: itemTemplateCtrl,
            controllerAs: '$ctrl',
            templateUrl: function(element, attrs) {

                if(attrs && attrs['templ'] && attrs['templ']!='0'){
                    console.log(attrs['templ'])
                }
                var s = (attrs && attrs['templ'] && attrs['templ']!='0')?attrs['templ']:'';

                return 'views/template/partials/home/info/infoItem'+s+'.html'
            }
        }
    }
    itemTemplateCtrl.$inject=['$scope','Info','$stateParams','$q','$uibModal','exception','global','$attrs'];
    function itemTemplateCtrl($scope,Items,$stateParams,$q,$uibModal,exception,global,$attrs){
        var self = this;
        self.$onInit = function() {
            if(self.info){
                activate(self.info);
            }

        }
        if(self.info){
            activate(self.info);
        }
        self.Items=Items;
        self.global=global;
        self.mobile=global.get('mobile').val;
        function activate(id) {
            return getItem(id);
        }
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    if(data && data.blocks && data.blocks.length){
                        data.blocks=data.blocks.filter(function (b) {
                            return b.actived
                        })
                    }
                    self.item = data;
                    return self.item;
                } ).catch(function(err){
                    exception.catcher('получение данных')(err)
                });
        }
    }

})()
'use strict';
angular.module('gmall.services')
.service('createStuffService', function($uibModal,$q,$state,global){
    this.cloneStuff=function(stuff,clone){
        if(!global.get('seller' ).val){return};
        stuff.seller = global.get('seller' ).val
        console.log(global.get('seller'));
        stuff.brand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand;
        stuff.brandTag=(stuff.brandTag && stuff.brandTag._id)?stuff.brandTag._id:stuff.brandTag;
        stuff.category=(stuff.category && stuff.category._id)?stuff.category._id:stuff.category;
        stuff.sortsOfStuff=(stuff.sortsOfStuff && stuff.sortsOfStuff._id)?stuff.sortsOfStuff._id:stuff.sortsOfStuff;
        delete stuff._id;
        delete stuff.url;
        delete stuff.gallery;
        delete stuff.setTagsValue;
        delete stuff.sortsOfStuff;
        if (stuff.stock){
            for(var key in stuff.stock){
                stuff.stock[key].quantity=1;
            }
        }
        //console.log(stuff)
        return $q(function(resolve,reject){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl:'components/createStuff/cloneStuffModal.html',
                controller: function($scope,stuff,$uibModalInstance,clone){
                    var self=this;
                    self.stuff=stuff;
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                    $scope.clone=clone;
                    $scope.$watch('clone',function(n){
                        //console.log(n)
                        if(n=='ready'){
                            $uibModalInstance.close(self.stuff);
                        }
                    })

                },
                controllerAs: '$ctrl',
                size: 'lg',
                resolve: {
                    stuff: function () {
                        return stuff;
                    },
                    clone: function () {
                        return clone;
                    },
                }
            });
            modalInstance.result.then(function (stuff) {
                resolve(stuff)
            },function(){
                reject('отказ')
            });
        })

    }
})

.directive('createNewStuff', function(){
    function createStuffCtrl($uibModal,$q,Stuff,$state){
        var self = this;
        var $ctrl=self;

       // console.log(self.goToStuff)

        self.categoryDisabled=true;
        self.selectCategory=function(){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/selectCategoryModal/selectCategoryModal.html',
                controller: 'selectCategoryModalCtrl',
                size: 'lg',
                resolve: {
                    categoryId: function () {
                        return null;
                    }
                }
            });
            modalInstance.result.then(function (selectedCategory) {
                if(!self.stuff.category){
                    self.categoryDisabled=false
                    setTimeout(function(){
                        $('#createStuffCategory').trigger("change");
                        self.categoryDisabled=true;
                    },100)
                }

                self.stuff.category=selectedCategory;
            },function(){});
        }
        self.createNewStuff = function(){
            if(!self.stuff.category){
                self.alertMessage2=true;
                setTimeout(function(){
                    console.log('))))')
                    self.alertMessage2=false;
                },3000)
                return;
            }
            if(!self.stuff.name){
                self.alertMessage2=true;
                setTimeout(function(){
                    self.alertMessage2=false;
                },3000)
                return;
            }
            self.stuff.name=self.stuff.name.substring(0,50);
            if(self.stuff.artikul){
                self.stuff.artikul=self.stuff.artikul.substring(0,50);
            }


            if(!self.clone && self.stuff.category && self.stuff.category._id){
                self.stuff.category=self.stuff.category._id;
            }

            $q.when()
                .then(function(){
                    return $q(function(resolve,reject){
                        Stuff.Items.save(self.stuff,function(res){
                            //self.stuff={name:'',actived:false};
                            self.stuff._id=res.id;
                            self.stuff.url=res.url;
                            resolve(res.url);
                        },function(err){reject(err)})
                    })
                })
                .then(function(url){
                    self.clone='ready'
                })
                .then(function(){
                    return
                })
                .catch(function(err){
                    console.log(err)
                })

        }
    }
    return {
        scope: {
            stuff: '=',
            clone:'=',
            /*goToStuff:"@",
            reloadList:'&'*/
        },
        bindToController: true,
        controller: createStuffCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/createStuff/createStuff.html'
    };
})
'use strict';
angular.module('gmall.directives')
.directive('sortsOfStuff', function () {
    return {
        scope: {
            stuff: '=',
        },
        bindToController: true,
        controller: sortsOfStuffctrlCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/sortsOfStuff/sortsOfStuff.html'
    };
});
sortsOfStuffctrlCtrl.$inject=['$uibModal','$resource','Stuff','$q','createStuffService','exception','global','$timeout'];
function sortsOfStuffctrlCtrl($uibModal,$resource,Stuff,$q,createStuffService,exception,global,$timeout){
    var Items = $resource('/api/collections/SortsOfStuff/:id',{id:'@_id'});
    var self = this;
    var $ctrl=self;
    //console.log($scope.stuff)

    //console.log(self.stuff)
    self.saveField=function(stuff,field){
        if(stuff._id==self.stuff._id){
            var fields=field.split(' ');
            fields.forEach(function(el){
                if(stuff[el]!='undefined'){
                    self.stuff[el]=stuff[el];
                    //console.log(self.stuff[el])
                }
            })

        }
        $q.when()
            .then(function () {
                return Stuff.saveField(stuff,field);
            })
            .then(function () {
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            })
            .catch(function (err) {
                console.log(err)
                if(err){
                    exception.catcher('сохранение')(err)
                }
            })


    }
    self.saveFieldsortsOfStuff=function(field){
        var o={_id:self.stuff.sortsOfStuff._id};
        if(!self.stuff.sortsOfStuff[field]){
            o[field]=null
        }else{
            o[field]=self.stuff.sortsOfStuff[field];
        }



        Items.save({update:field},o,function(res){
            global.set('saving',true);
            $timeout(function () {
                global.set('saving',false);
            },1500)
        })
    }
    self.changeDifferentPrice = function(){
        Items.save({update:'differentPrice'},{_id:self.stuff.sortsOfStuff._id,
            differentPrice:self.stuff.sortsOfStuff.differentPrice},function(res){
            global.set('saving',true);
            $timeout(function () {
                global.set('saving',false);
            },1500)
        })
    }
    self.changeStock = function(stuff,tag,value){

        //console.log(stuff)
        // установка значений  фильтров в stuff.tags
        //console.log(tag,value)
        stuff.priceForFilter=[]
        for(var key in stuff.stock){
            if(key==stuff.sort && !stuff.stock[key].quantity){
                stuff.sort=null;
            }
            if(stuff.stock[key].quantity){
                var c = (stuff.currency)?stuff.currency:global.get('store').val.mainCurrency;
                var price =(c==global.get('store').val.mainCurrency)?stuff.stock[key].price:Math.ceil10(stuff.stock[key].price/global.get('store').val.currency[c][0],-2)
                stuff.priceForFilter.push(price)
            }

        }
        if(tag && tag._id){
            var i= stuff.tags.indexOf(tag._id);
            if(value && i<0){ // add tag
                console.log('add')
                stuff.tags.push(tag._id);
            }else if(!value && i>-1){
                stuff.tags.splice(i,1)
            }
            if(stuff.setTagsValue){
                stuff.setTagsValue();
            }
            self.saveField(stuff,'stock tags sort priceForFilter')
        }else{
            self.saveField(stuff,'stock sort priceForFilter')
        }

    }
    self.getNameTag = function(tag){
        //console.log(tag)
        //console.log(self.stuff)
        if(!self.stuff.category || !self.stuff.category.filters){return}

        if (self.stuff.category.filters.length){
            for(var i= 0,l=self.stuff.category.filters.length;i<l;i++){
                for(var ii=0,ll=self.stuff.category.filters[i].tags.length;ii<ll;ii++){
                    if(self.stuff.category.filters[i].tags[ii]._id==tag){
                        //console.log(self.stuff.category.filters[i].tags[ii].name)
                        return self.stuff.category.filters[i].tags[ii].name
                    }
                }
            }
        }
    }

    // create sort *****************************************
    //******************************************************
    self.createSort = function(filter){
        return $q(function(resolve,reject){
            self.stuff.sortsOfStuff={stuffs:[self.stuff._id]}
            if(filter){
                self.stuff.sortsOfStuff['filter']=filter._id;
            }
            Items.save(self.stuff.sortsOfStuff,function(res){
                self.stuff.sortsOfStuff._id=res.id;
                self.stuff.sortsOfStuff.stuffs[0]=self.stuff;
                if(filter){
                    self.stuff.sortsOfStuff['filter']=filter;
                }
                Stuff.Items.save({update:'sortsOfStuff'},
                    {_id:self.stuff._id,sortsOfStuff:self.stuff.sortsOfStuff._id}
                    ,function(){resolve()},function(err){reject(err)});
            },function(err){reject(err)})
        })
    }
    //******************************************************
    //******************************************************
    // create sort *****************************************
    //******************************************************
    function setFilterInSort(filter){
        return $q(function(resolve,reject){
            self.stuff.sortsOfStuff['filter']=filter;
            Items.save({update:'filter'},{
                _id:self.stuff.sortsOfStuff._id,
                filter:(filter && filter._id)?filter._id:null,
            },function(){resolve()},function(err){reject(err)})
        })
    }
    function setFilterGroupInSort(filter){
        return $q(function(resolve,reject){
            self.stuff.sortsOfStuff['filterGroup']=filter;
            Items.save({update:'filterGroup'},{
                _id:self.stuff.sortsOfStuff._id,
                filterGroup:(filter && filter._id)?filter._id:null,
            },function(){resolve()},function(err){reject(err)})
        })
    }
    //******************************************************
    //******************************************************
    // получение товара*****************
    function getStuffPromise(stuff){
        return $q(function(resovle,reject){
            if(stuff && stuff._id){resovle(stuff)}else if(stuff && !stuff._id){
                Stuff.get({_id:stuff}).$promise.then(
                    function(res){resolve(res)},function(err){reject(err)}
                )
            }
        })
    }
    // создание таблицы наличия для товара*****************
    self.setStockTableForSort  = function(stuff,stockTemplate){
        return $q(function(resolve,reject){
            getStuffPromise(stuff).then(
                function(stuff){
                    var fields='stock';
                    if(stuff.sortsOfStuff && self.stuff.sortsOfStuff._id!=stuff.sortsOfStuff._id){
                        // если надо обновить группу у товара
                        stuff.sortsOfStuff=self.stuff.sortsOfStuff._id;
                        fields+=' sortsOfStuff'
                    }
                    if(stockTemplate){
                        var stock=angular.copy(stockTemplate);
                        for(var key in stock){
                            if(stuff.stock && stuff.stock[key]){
                                stock[key].quantity=stuff.stock[key].quantity;
                            }
                            //if(key=='notag'){delete stock[key];continue;}
                            stock[key].price=stuff.price;
                            stock[key].priceSale=stuff.priceSale;
                            stock[key].retail=stuff.retail;
                            if(key!='notag'){
                                var i= stuff.tags.indexOf(key);
                                if(i<0){ // add tag
                                    stuff.tags.push(key);
                                }
                            }
                        }
                        stuff.stock=stock;
                        if(stuff.setTagsValue){
                            stuff.setTagsValue();
                        }
                        fields +=' tags';
                    }else{
                        stock={notag:{quantity:1}};
                    }
                    Stuff.saveField(stuff,fields).then(function(){resolve()},function(err){reject(err)});
                },function(err){reject(err)}
            )

        })
    }

    self.setStockTableForSorts = function(filter,stuffs){
        /*return $q(function(resolve,reject){
         var stock;
         if(filter){
         filter.tags.forEach(function(tag){
         if(!stock){stock={}}
         stock[tag._id]={quantity:1}
         })
         }

         var actions = self.stuff.sortsOfStuff.stuffs.map(function(stuff){
         return self.setStockTableForSort(stuff,stock)
         })
         $q.all(actions ).then(function(){resolve()}).catch(function(err){reject(err)})
         })*/
        var stock;
        //global.get('store').val.settingContent.admin.sortsDisable
        var qty = (global.get('store').val.settingContent&& global.get('store').val.settingContent.admin && global.get('store').val.settingContent.admin.sortsDisable)?0:1;
        if(filter){
            filter.tags.forEach(function(tag){
                if(!stock){stock={}}
                stock[tag._id]={quantity:qty}
            })
        }
        var actions = stuffs.map(function(stuff){
            return self.setStockTableForSort(stuff,stock)
        })
        return $q.all(actions)

    }
    //******************************************************
    //******************************************************
    self.changeFilter=function(filter){
        //console.log(filter)
        return $q.when()
            .then(function(){
                if(!self.stuff.sortsOfStuff){
                    return self.createSort(filter);
                }else{
                    return setFilterInSort(filter);
                }
            })
            .then(function(newSort){
                $q(function(resolve,reject){
                    self.setStockTableForSorts(filter,self.stuff.sortsOfStuff.stuffs ).then(
                        function(){resolve()},function(err){reject(err)}
                    )
                })

            })
            .catch(function(err){
                console.log(err)
            })
    }
    self.changeFilterGroup=function(filter){
        return $q.when()
            .then(function(){
                return setFilterGroupInSort(filter);
            })
            .catch(function(err){
                console.log(err)
            })
    }
    //*************************************************
    //************************** select filter***********************
    self.selectFilter=function(){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/sortsOfStuff/selectFilter.html',
            controller: function(filters,sortsOfStuff,$uibModalInstance){
                var self=this;
                self.filters=filters;
                self.selectFilter=function(filter){
                    $uibModalInstance.close(filter);
                }
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            controllerAs:'$ctrl',
            resolve: {
                filters: function () {
                    return (self.stuff.category&& self.stuff.category[0].filters)?self.stuff.category[0].filters:[]
                },
                sortsOfStuff: function () {
                    return self.sortsOfStuff;
                }

            }
        });
        modalInstance.result.then(function (selectedfilter) {
            //console.log(selectedfilter)
            self.changeFilter(selectedfilter)
        }, function () {
        });
    }
    self.selectFilterGroup=function(){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/sortsOfStuff/selectFilter.html',
            controller: function(filters,sortsOfStuff,$uibModalInstance){
                var self=this;
                self.filters=filters;
                self.selectFilter=function(filter){
                    $uibModalInstance.close(filter);
                }
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            controllerAs:'$ctrl',
            resolve: {
                filters: function () {
                    return (self.stuff.category&& self.stuff.category[0] && self.stuff.category[0].filters)?self.stuff.category[0].filters:[]
                },
                sortsOfStuff: function () {
                    return self.sortsOfStuff;
                }

            }
        });
        modalInstance.result.then(function (selectedfilter) {
            self.changeFilterGroup(selectedfilter)
        }, function () {
        });
    }
    self.clearFilterGroup=function(){
        self.changeFilterGroup(null)
    }

    //************************************************************************
    //************************************************************************
    //************************************** stuffs **************************
    //************************************************************************
    function addStuffInSorts(stuff){
        //console.log(stuff);return;
        if(self.stuff.sortsOfStuff.stuffs.some(function(el){return el._id==stuff._id})){
            console.log('stuff already exist in sort');
            return;
        }
        $q.when()
            .then(function(){
                //получение группы для миграции
                return $q(function(resolve,reject){
                    if(stuff.sortsOfStuff){
                        Items.get({id:stuff.sortsOfStuff._id} ).$promise.then(
                            function(megreSorts){stuff.sortsOfStuff=megreSorts;resolve()},function(err){reject(err)}
                        )
                    }else{
                        resolve(null)
                    }
                })
            })
            .then(function(){
                // установка фильтра в группу
                return $q(function(resolve,reject){
                    //console.log(stuff.sortsOfStuff.filter,self.stuff.sortsOfStuff.filter)
                    if(stuff.sortsOfStuff && stuff.sortsOfStuff.filter && !self.stuff.sortsOfStuff.filter){
                        //console.log(stuff.sortsOfStuff.filter && !self.stuff.sortsOfStuff.filter)
                        Items.save({update:'filter'},{_id:self.stuff.sortsOfStuff._id,filter:stuff.sortsOfStuff.filter} ).$promise.then(
                            function(){resolve()},function(err){reject(err)}
                        )
                    }else{
                        resolve()
                    }
                })
            })
            .then(function(){
                // установка таблиц для товаров
                return $q(function(resolve,reject){
                    if(stuff.sortsOfStuff && stuff.sortsOfStuff.filter && !self.stuff.sortsOfStuff.filter){
                        // для текущих
                        self.stuff.sortsOfStuff.filter=
                            self.stuff.category.filters.getOFA('_id',stuff.sortsOfStuff.filter)
                        if(self.stuff.sortsOfStuff.filter){
                            self.setStockTableForSorts(self.stuff.sortsOfStuff.filter,self.stuff.sortsOfStuff.stuffs).then(
                                function(){resolve()},function(err){reject(err)}
                            )
                        }else{
                            resolve()
                        }
                    }else{
                        // для вносимых
                        var stuffs = (stuff.sortsOfStuff && stuff.sortsOfStuff.stuffs)?stuff.sortsOfStuff.stuffs:[stuff];
                        self.setStockTableForSorts(self.stuff.sortsOfStuff.filter,stuffs).then(
                            function(){resolve()},function(err){reject(err)}
                        )
                    }
                })
            })
            .then(function(){
                // обновление списка товаров в группе
                return $q(function(resolve,reject){
                    if(stuff.sortsOfStuff && stuff.sortsOfStuff.stuffs){
                        self.stuff.sortsOfStuff.stuffs.push.apply(self.stuff.sortsOfStuff.stuffs,
                            stuff.sortsOfStuff.stuffs)
                    }else{
                        self.stuff.sortsOfStuff.stuffs.push(stuff)
                    }

                    var o={_id:self.stuff.sortsOfStuff._id};
                    o.stuffs=self.stuff.sortsOfStuff.stuffs.filter(function(el){return el}).map(function(el){return el._id})
                    //console.log(o.stuffs,self.stuff.sortsOfStuff)
                    Items.save({update:'stuffs'},o ).$promise.then(
                        function(){resolve()},function(err){reject(err)}
                    )
                })
            })
            .then(function(){
                // удаление группы из которой осуществлялась миграция
                if(stuff.sortsOfStuff){
                    Items.delete({id:stuff.sortsOfStuff._id})
                }
            })
            .then(function(){
                // проверка ссылок на группу
                var action = self.stuff.sortsOfStuff.stuffs.filter(function(el){
                    return el.sortsOfStuff != self.stuff.sortsOfStuff._id}).map(function(el){
                    Stuff.Items.save({update:'sortsOfStuff'},{_id:el._id,sortsOfStuff:self.stuff.sortsOfStuff._id})
                })
            })
            .catch(function(){})

    }
    //************************************************************************
    //************************************************************************

    self.selectStuff=function(){
        $q.when()
            .then(function(){
                //return selectStuffModalService.selectStuff();
                var query={category: self.stuff.category._id};
                return Stuff.selectItem(query)
            })
            .then(function(stuff){
                if(stuff && stuff.sortsOfStuff && self.stuff.sortsOfStuff.filter && stuff.sortsOfStuff.filter!=self.stuff.sortsOfStuff.filter._id){
                    throw "признаки разновидностей не совподают"
                }else{
                    addStuffInSorts(stuff)
                }
            })
            .catch(function(err){
                err = err.data||err
                if(err){
                    exception.catcher('добавление товара')(err)
                }
            })
        /*var modalInstance = $uibModal.open({
         animation: true,
         templateUrl: 'components/sortsOfStuff/selectStuff.html',
         controller: function(category,Stuff,$uibModalInstance){
         var self=this;
         self.stuffs=[];
         self.name='';
         var paginate={page:0,rows:30,items:0}
         // select only stuffs with the same category
         var query={category: category};
         self.search = function(name){
         if (name.length<3){return}
         // console.log(name);
         Stuff.getList(paginate,query,name).then(function(res){
         //console.log(res)
         self.stuffs=res;
         })
         }
         self.selectStuff=function(stuff){
         $uibModalInstance.close(stuff);
         }
         self.cancel = function () {
         $uibModalInstance.dismiss('cancel');
         };
         },
         controllerAs:'$ctrl',
         size: 'lg',
         resolve: {
         category: function () {
         return self.stuff.category._id;
         }
         }
         });
         modalInstance.result.then(function (stuff) {
         if(stuff.sortsOfStuff && self.stuff.sortsOfStuff.filter && stuff.sortsOfStuff.filter!=self.stuff.sortsOfStuff.filter._id){
         console.log("filters don't match")
         }else{
         addStuffInSorts(stuff)
         }
         },function () {});*/
    }

    // create stuff from template*********************
    //*******************************************
    self.createAndAddStuff = function(){
        var newStuff=angular.copy(self.stuff);
        $q.when()
            .then(function(){
                return Stuff.cloneStuff(newStuff,true)
                //return createStuffService.cloneStuff(newStuff,true)
            })
            .then(function(stuffFromResolve){
                //console.log('stuffFromResolve-',stuffFromResolve);
                //console.log(newStuff===stuffFromResolve); true
                addStuffInSorts(stuffFromResolve);

            } )
            .catch(function(err){
                console.log(err)
            })


        return;

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/sortsOfStuff/createStuff.html',
            controller: function($uibModalInstance){
                var self=this;
                self.stuff={name:'',artikul:''}
                self.ok=function(stuff){
                    $uibModalInstance.close(stuff)
                }
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
            },
            controllerAs:'$ctrl',
        });
        modalInstance.result.then(function (stuffName) {
            if(stuffName.name){
                var stuff=angular.copy(self.stuff);
                stuff.brand=(stuff.brand && stuff.brand._id)?stuff.brand._id:stuff.brand;
                stuff.brandTag=(stuff.brandTag && stuff.brandTag._id)?stuff.brandTag._id:stuff.brandTag;
                stuff.category=(stuff.category && stuff.category._id)?stuff.category._id:stuff.category;
                stuff.sortsOfStuff=(stuff.sortsOfStuff && stuff.sortsOfStuff._id)?stuff.sortsOfStuff:null;
                stuff.name=stuffName.name.substring(0,50);
                stuff.artikul=stuffName.artikul.substring(0,50);
                delete stuff._id;
                delete stuff.url;
                delete stuff.gallery;
                delete stuff.setTagsValue;
                if (stuff.stock){
                    for(var key in stuff.stock){
                        stuff.stock[key].quantity=1;
                    }
                }
                $q.when()
                    .then(function(){
                        return $q(function(resolve,reject){
                            Stuff.Items.save(stuff,function(res){
                                stuff._id=res.id;
                                stuff.url=res.url;

                                resolve(stuff)
                            },function(err){reject(err)})

                        })
                    })
                    .then(function(stuff){
                        addStuffInSorts(stuff);
                    })
                    .catch(function(err){console.log(err)})
            }
        }, function () {});
    }
    //*******************************************
    // delet stuff from sort*********************
    //*******************************************
    self.deleteStuffFromSort=function(stuff,index){
        $q.when()
            .then(function(){
                // товары в группе
                return $q(function(resolve,reject){
                    if(self.stuff.sortsOfStuff.stuffs.length==1 && self.stuff.sortsOfStuff.stuffs[0]._id==stuff._id){
                        //deleting sort group
                        Items.delete({id:self.stuff.sortsOfStuff._id},function(err){
                            self.stuff.sortsOfStuff=null;
                            resolve()
                        },function(err){reject(err)})
                    }else{
                        // find stuff in sorts array and delete it from
                        self.stuff.sortsOfStuff.stuffs.splice(index,1);
                        //console.log(usedTad)
                        var o={_id:self.stuff.sortsOfStuff._id};
                        o.stuffs=self.stuff.sortsOfStuff.stuffs.map(function(el){return el._id})
                        Items.save({update:'stuffs'},o,function(res){
                            /*if(self.stuff._id==stuff._id) {
                             self.stuff.sortsOfStuff=null;
                             }*/
                            resolve()
                        },function(err){reject(err)})

                    }
                })


            })
            .then(function(){
                // создали группу
                return $q(function(resolve,reject){
                    if(self.stuff.sortsOfStuff && self.stuff.sortsOfStuff.filter){
                        var o={filter:self.stuff.sortsOfStuff.filter._id,stuffs:[stuff._id]}
                        Items.save(o,function(res){
                            resolve(res.id)
                        },function(err){reject(err)})
                    }else{
                        resolve(null)
                    }
                })
            })
            .then(function(sort){
                // save stuff
                return $q(function(resolve,reject){
                    if (!sort){
                        stuff.stock={notag:{quantity:1}}
                    }
                    Stuff.Items.save({update:'sortsOfStuff stock'},
                        {_id:stuff._id,sortsOfStuff:sort,stock:stuff.stock},function(){
                            resolve(sort)
                        },function(err){
                            reject(err);
                        })
                })
            })
            .then(function(sort){
                // save stuff
                return $q(function(resolve,reject){
                    if(sort) {
                        Items.get({id:sort},function(res){
                            self.stuff.sortsOfStuff=res;
                            self.stuff.sortsOfStuff.filter=
                                self.stuff.category.filters.getOFA('_id',self.stuff.sortsOfStuff.filter)
                            resolve()
                        },function(err){reject(err)})
                    }else{
                        resolve()
                    }
                })
            })
            .catch(function(err){console.log(err)})
    }
    //***********************************************************************
    //***********************************************************************
    //***********************************************************************
    //************************ .additionalInfo  *****************************
    self.additionalInfo = function(){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/sortsOfStuff/additionalInfo.html',
            controller: function(filter,carrentAddInfo,AddInfo,$uibModalInstance,global){
                var self=this;
                self.global=
                self.lang=global.get('store').val.lang
                var langArr = global.get('store').val.langArr;
                console.log(langArr)
                if(!filter){$uibModalInstance.dismiss('cancel');}else{self.filter=filter}

                var query={filter:filter._id};
                self.items=[];
                function initItem(){
                    self.item={header:{},table:{},name:'',filter:filter._id};
                    filter.tags.forEach(function(tag){
                        self.item.table[tag._id]={}
                    })
                    if(langArr && langArr.forEach){
                        langArr.forEach(function(lang){
                            self.item.header[lang]=['']
                            for(var key in self.item.table){
                                self.item.table[key][lang]=['']
                            }
                        })
                    }else{
                        self.item.header[self.lang]=['']
                        for(var key in self.item.table){
                            self.item.table[key][self.lang]=['']
                        }
                    }
                }
                initItem();

                self.getTagName=function(id){
                    for(var i= 1,l=self.filter.tags.length;i<l;i++){
                        if(self.filter.tags[i]._id==id){
                            return self.filter.tags[i].name;
                            break;
                        }
                    }
                    return 'noname'
                }
                activate()
                function activate(){
                    AddInfo.query({query:query},function(res){
                        res.shift();
                        self.items=res;
                        if(carrentAddInfo){
                            for(var i= 1,l=self.items.length;i<l;i++){
                                if(self.items[i]._id==carrentAddInfo){
                                    self.item=self.items[i];
                                    break;
                                }
                            }
                        }
                    },function(err){console.log(err)})
                }


                self.selectAddInfo=function(addInfo){
                    $uibModalInstance.close(addInfo);
                }
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                self.saveTable=function(){
                    //console.log(self.item)
                    if (self.item.header.length==1){return}
                    self.item.header.pop()
                    filter.tags.forEach(function(tag){
                        self.item.table[tag._id].pop();
                    })
                    if(!self.item.name){self.item.name=filter.name}

                    if(self.item._id){
                        //console.log('&&&')
                        AddInfo.save({'update':'header table name'},self.item,function(res){
                            AddInfo.query({query:query},function(res){
                                res.shift();
                                self.items=res;
                            })
                            initItem()
                        })
                    } else{
                        AddInfo.save(self.item,function(res){
                            AddInfo.query({query:query},function(res){
                                res.shift();
                                self.items=res;
                            })
                            initItem()
                        })
                    }
                }
                self.addRow = function(){
                    if(langArr && langArr.forEach){
                        langArr.forEach(function(lang){
                            self.item.header[lang].push('');
                            for(var key in self.item.table){
                                self.item.table[key][lang].push('');
                            }
                        })
                    }else{
                        self.item.header[self.lang].push('');
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].push('');
                        }
                    }
                    /*
                    self.item.header.push('');
                    filter.tags.forEach(function(tag){
                        self.item.table[tag._id].push('')
                    })*/
                    console.log(self.item)
                }
                self.deleteRow = function(i){
                    if(langArr && langArr.forEach){
                        langArr.forEach(function(lang){
                            self.item.header[lang].splice(i,1);
                            for(var key in self.item.table){
                                self.item.table[key][lang].splice(i,1);
                            }
                        })
                    }else{
                        self.item.header[self.lang].splice(i,1);
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].splice(i,1);
                        }
                    }
/*

                    self.item.header.splice(i,1);
                    filter.tags.forEach(function(tag){
                        self.item.table[tag._id].splice(i,1);
                    })*/
                }
                self.editTable = function(item){
                    console.log(item)
                    self.item=item;

                    if(langArr && langArr.forEach){
                        langArr.forEach(function(lang){
                            self.item.header[lang].push('');
                            for(var key in self.item.table){
                                self.item.table[key][lang].push('');
                            }
                        })
                    }else{
                        self.item.header[self.lang].push('');
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].push('');
                        }
                    }

                    /*self.item.header.push('');
                    filter.tags.forEach(function(tag){
                        self.item.table[tag._id].push('')
                    })*/


                }
                self.setTable = function(item){

                }
            },
            controllerAs:'$ctrl',
            size: 'lg',
            resolve: {
                filter: function () {
                    return self.stuff.sortsOfStuff.filter;
                },
                carrentAddInfo:function(){
                    return self.stuff.sortsOfStuff.addInfo;
                }
            }
        });
        modalInstance.result.then(function (addInfo) {
            self.stuff.sortsOfStuff.addInfo=addInfo._id
            /*Items.save({update:'addInfo'},{_id:self.stuff.sortsOfStuff._id,
             arrInfo:self.stuff.sortsOfStuff.addInfo},function(){
             AddInfo.query({query:{filter:self.stuff.sortsOfStuff.filter._id}},function(res){
             res.shift();
             self.stuff.addInf==res;
             })
             })*/
            console.log(addInfo)
        },function () {});
    }

    //***********************************************************************
    //***********************************************************************
}

var SortsOfSfuffSchema = {
    store:[{type : 'Schema.ObjectId', ref : 'Store'}],
    filterOne:{type : 'Schema.ObjectId', ref : 'Filter'},// характеристика с фото
    filterTwo:{type : 'Schema.ObjectId', ref : 'Filter'},//характеристика без фото
    tagsOne:[{tag:{type : 'Schema.ObjectId', ref : 'FilterTags'},stuff:{type : 'Schema.ObjectId', ref : 'Stuff'}}],
    tagsTwo:{},// {stuff._id:{price,....,quantity}}
    differentPrice:{type:Boolean,default:false}
}
'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('categoriesForList', categoriesForListDirective)
        .directive('categoriesForListTatiana', categoriesForListTatiana)
        .directive('categoriesForListTemplate', categoriesForListTemplate)
        .directive('categoriesForListTemplate1', categoriesForListTemplate1)
        .directive('categoriesForListTemplate2', categoriesForListTemplate2)
        .directive('categoriesForListTemplate3', categoriesForListTemplate3);

    function categoriesForListTatiana(global) {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/'+global.get('store').val.template.folder+'/partials/category/categoriesForList.html',
        };
    }
    function categoriesForListTemplate() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList.html',
        };
    }
    function categoriesForListTemplate1() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList1.html',
        };
    }
    function categoriesForListTemplate2() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList2.html',
        };
    }
    function categoriesForListTemplate3() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            transclude: true,
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
            //templateUrl:'views/template/partials/stuffs/categories/categoriesForList3.html',
        };
    }
    function categoriesForListDirective() {
        return {
            scope: {
                padding:'='
            },
            restrict:"E",
            bindToController: true,
            controller: categoriesForListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/categoriesForList/categoriesForList.html'
        };
    }
    categoriesForListCtrl.$inject=['$stateParams','$state','$q','$location','global']
    function categoriesForListCtrl($stateParams,$state,$q,$location,global){
        if(!global.get('store').val){return}
        //console.log('sss')
        var self = this;
        var $ctrl=self;
        self.getFilterTagsPhoto=getFilterTagsPhoto;


        self.global=global;
        self.prop={};
        self.category=$stateParams.categoryUrl;
        self.parentSection=global.get('parentSection').val;
        //console.log(self.parentSection)
        self.breadcrumbs=global.get('breadcrumbs').val;
        //console.log(self.padding)
        self.changeCategory=changeCategory;
        self.deleteCrumb=deleteCrumb;
        self.checkInnerData=checkInnerData;
        self.queryTag=null;
        if($stateParams.queryTag){
            if(global.get('store').val.saleTag && global.get('store').val.saleTag==$stateParams.queryTag){
                self.queryTag='sale'
            }else if(global.get('store').val.newTag && global.get('store').val.newTag==$stateParams.queryTag){
                self.queryTag='new'
            }
        }
        active();

        function active(){}
        function changeCategory(category,tag){
            var brand = ($stateParams.brand)?brand=$stateParams.brand:null
            var queryTag=null;
            if(tag){
                if(tag=='sale'){
                    queryTag=global.get('store').val.saleTag
                }else if(tag='new'){
                    queryTag=global.get('store').val.newTag
                }
            }
            var o={
                groupUrl:$stateParams.groupUrl,
                categoryUrl:category,
                queryTag:queryTag,
                brand:brand,
                brandTag:null,
                searchStr:undefined,
            };
            //console.log(o)
            /*$state.transitionTo($state.current, o, {
                reload: true, inherit: false, notify: false
            });*/
            //$state.reload()
            $state.go('stuffs',o,{reload:true,lacation:true,inherit: false, notify: true});
        }
        function deleteCrumb(index){
            change(self.breadcrumbs.splice(index,1)[0].type)
            function change(type){
                var query = self.breadcrumbs.reduce(function(q,item){
                    if(item.type==type){
                        if(q){q+='__'}
                        q+=item.url;
                    }
                    return q;
                },'')
                if(!query){
                    query=null;
                }
                $location.search(type,query)
            }
        }
        function checkInnerData() {
            if($ctrl.parentSection){
                return $ctrl.parentSection.categories.length && $ctrl.parentSection.categories.filter(function(c){return !c.notActive}).length>1
            }else{return false}

        }
        function getFilterTagsPhoto(url) {
            //console.log(url)
            return global.get('filterTags').val.getOFA('url',url)
        }


    }
})()


'use strict';
angular.module('gmall.services')
.service('filterStuffsListService', function($uibModal,$q,Filters){
    this.setFilters=function(query){
        return $q(function(resolve,reject){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl:'components/filterStuffsList/filterStuffsList.html',
                controller: function($scope,$stateParams,Sections,$uibModalInstance,query,$location){
                    var self=this;
                    self.global=global;
                    self.query=query;
                    console.log(query)
                    $q.when()
                        .then(function(){
                            return Filters.getFilters();
                        })
                        .then(function(filters){
                            //console.log(filters)
                            self.filters=filters;
                        })
                        .then(function(){
                            return Sections.getSections()
                        })
                        .then(function(sections){
                            if ($stateParams.groupUrl!='brand' && $stateParams.groupUrl!='group'){
                                if($stateParams.parentGroup){
                                    self.parentSection=Sections.getParentSection($stateParams.parentGroup);
                                }else{
                                    self.parentSection=Sections.getParentSection($stateParams.groupUrl);
                                }
                                if($stateParams.categoryList=='allCategories' || $stateParams.categoryUrl!='category'){
                                    if($stateParams.categoryUrl!='category' && self.parentSection && self.parentSection.categories){
                                        self.category= self.parentSection.categories.getOFA('url',$stateParams.categoryUrl)
                                        //console.log(self.category)
                                        if(self.category && self.category.filters && self.category.filters.length){
                                            self.filters=self.filters.filter(function(filter){
                                                return self.category.filters.indexOf(filter._id)>-1
                                            })

                                        }
                                    }
                                }
                            }
                            if(!self.filters || !self.filters.length){$uibModalInstance.dismiss('cancel');}
                            if(query && query.tags && typeof query.tags=='object'){
                                self.filters.forEach(function(filter){
                                    if(query.tags[filter._id]){
                                        filter.tags.forEach(function(tag){
                                            if (query.tags[filter._id].indexOf(tag._id)>-1){
                                                tag.set=true;
                                            }
                                        })
                                    }
                                })
                            }
                        })// категория

                    self.changeAllTags=function(filter){
                        filter.tags.forEach(function(tag){
                            tag.set=false;
                        })
                    }
                    self.clearAll=function(){
                        self.filters.forEach(function(filter){
                            filter.tags.forEach(function(tag){
                                tag.set=false;
                            })
                        })
                    }

                    /*self.changeTag=function(filter){
                        if(filter.tags.every(function(tag){return tag.set})){
                            filter.allTags=true;
                        }
                        if(filter.tags.some(function(tag){return !tag.set})){
                            filter.allTags=false;
                        }
                    }*/

                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                    self.ok = function () {
                        query.tags={}
                        var queryTag='';
                        self.filters.forEach(function(filter){
                            var arr=[];
                            filter.tags.forEach(function(tag){
                                if (tag.set){
                                    arr.push(tag._id);
                                    if(queryTag){queryTag+='+'}
                                    queryTag+=tag.url;
                                }
                            })
                            if(arr.length){
                                query.tags[filter._id]=arr;
                            }
                        })
                        if(!queryTag){
                            $location.search('queryTag',null)
                        }else{
                            $location.search('queryTag',queryTag)
                        }
                        $uibModalInstance.close(self.query);
                    };
                    //queryTag=novinki%2Bskoro-v-prodazhe%2Brozovyj%2Bkorichnevyj%2B52%2B56

                },
                controllerAs: '$ctrl',
                size: 'lg',
                resolve: {
                    query: function () {
                        return query;
                    }
                }
            });
            modalInstance.result.then(function (query) {
                resolve(query)
            },function(){
                reject('отказ')
            });
        })

    }
})

/*
angular.module('gmall.directives')
    .directive('filtersWrap',filtersWrapDirective)
function filtersWrapDirective(){
    return {
        scope: {},
        restrict:"C",
        bindToController: true,
        controller: filtersWrapCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'views/template/partials/stuffs/filters/filtersWrap.html'
    }
}
filtersWrapCtrl.$inject=[];
function filtersWrapCtrl() {
    var self=this;
    self.is=[];
    for(var i =0;i<100;i++){
        self.is.push(i)
    }
    console.log('link')

}
*/

'use strict';
(function(){
    angular.module( 'gmall.services' ).service( 'EditModelData',serviceFunction )
    serviceFunction.$inject=['$uibModal','$q']
    function serviceFunction($uibModal,$q){
        return {
            doIt:doIt
        }
        function doIt(model,_id,Item){
            var item=angular.copy(Item)
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/editModel/editModel.html',
                    controller: editModelCtrl,
                    size: 'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        model:function(){return model},
                        _id:function(){return _id},
                        item:function(){return item}
                    }
                });
                modalInstance.result.then(
                    function(){
                        //console.log(item.img)
                        var img
                        if(item.img && item.img.indexOf('data:image') < 0 ){
                            img=item.img;
                            //console.log(Item.img)
                        }
                        resolve(img)},
                    function(){
                            var img
                        if(item.img && item.img.indexOf('data:image') < 0 ){
                            img=item.img;
                        }
                        resolve(img)
                        //reject(item)
                    }
                );
            })
        }
        editModelCtrl.$inject=['$resource','$uibModalInstance','$q','model','_id'];
        function editModelCtrl($resource,$uibModalInstance,$q,model,_id,item){
            //console.log('!!!!!!!!!!!!')
            var self=this;
            var url= '/api/collections/'+model+'/:_id';
            self.urlFile='/api/collections/'+model+'/fileUploadBig'
            self.Items=$resource(url,{_id:'@_id'})
            self.saveField=saveField;
            self.item=item;
            activate()
            function activate(){
                $q.when()
                    .then(function(){
                        return self.Items.get({_id:_id} ).$promise
                    })
                    .then( function (res) {
                        //console.log(res)
                        if(res){
                            self.item=res;
                        }
                    })
                    .catch(function(){
                        self.cancel()
                    })
            }
            function saveField(field,defer){
                defer =defer||0
                var o={_id:self.item._id};
                setTimeout(function(){
                    o[field]=self.item[field]
                    self.Items.save({update:field},o);
                },defer)
            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
            self.ok = function () {
                $uibModalInstance.close(self.item);
            };
        }
    }


})()

'use strict';
angular.module('gmall.services')
.factory('seoContent',['global','$stateParams','$resource','$state','$q','$sce',function(global,$stateParams,$resource,$state,$q,$sce){
    //-- Variables --//
    var regex=/<\/?[^>]+(>|$)/g;
    var seoPageId;
    //-- Methods --//
    function setTitles(titles,res,noFooter){
        //console.log(titles)
        if (res.seo){
            if (res.seo.title){titles.title=res.seo.title}else titles.title=res.name;
            if (res.seo.description){titles.description=res.seo.description} else titles.description=res.desc.replace(regex, '').substring(0,200);
            if (res.seo.keywords){titles.keywords=res.seo.keywords}
        } else {
            titles.title=res.name;
            //console.log(res)
            if (res.desc){
                titles.description=res.desc.replace(regex, '').substring(0,200);
            } else {
                titles.description='';
            }
        }
        if (!noFooter){
            if (res.desc) {
                titles.pageDescFooter=res.desc.replace(regex, '');
            } else {
                titles.pageDescFooter='';
            }
            titles.namePageFooter=res.name;
        }



    }
    function getSeoPageInfo(titles){
        if (!global.get('seopage') || !global.get('seopage').val ||!global.get('seopage').val.length) return false;
        if (!titles.pageDescFooter){titles.pageDescFooter=''}
        if (!titles.namePageFooter){titles.namePageFooter=''}
        for(var i=0,l=global.get('seopage').val.length;i<l;i++){
            var a = global.get('seopage').val[i];
            console.log(a.url);
            var href= (titles.canonical)?titles.canonical:$location.path();
            //console.log(href);
            if (('http://'+global.get('store').val.domain+a['url'])==href){
                //console.log('есть');
                return a._id;

            }
        }
        return false;
    }
    function setSeopageData(){
        return $q.when()
            /*.then(function () {
                return global.get('langForm').val
            })*/
            .then(function(){
                //console.log(global.get('currentSeopage').val)
                return (global.get('currentSeopage'))?global.get('currentSeopage').val:null
            })
            .then(function(seopage){
                //console.log('seopage - ',seopage)
                if(seopage){
                    var sp=global.get('seopages').val.getOFA('link',seopage.link)
                }
                //console.log('sp - ',sp)
                if(sp && !sp.data){
                    if(!seopage.seo){
                        seopage.seo={}
                    }
                    seopage.seo.keywords=seopage.keywords.map(function(w){
                        return w.word
                        /*if(global.get('keywords').val){
                            w= global.get('keywords').val.getOFA('_id',w);
                            if(w){return w.word}{
                                return null;
                            }
                        }else{
                            return null;
                        }*/
                    }).filter(function(w){return w;}).join(',')
                    sp.data=seopage
                    // console.log('sp.data=seopage')
                }
                //console.log(seopage)
                if(seopage){
                    var titlesTemp = global.get('titles').val;
                    var titles=seopage.seo;
                    if(titlesTemp && titlesTemp.image && !titles.image){
                        titles.image=titlesTemp.image;
                    }
                    titles.title=seopage.title||titles.title
                    titles.domain=global.get('store').val.link;
                    titles.author=titles.author||global.get('store').val.name;
                    titles.canonical=$sce.trustAsResourceUrl(global.get('store').val.link+seopage.link);
                    seopage.desc&&(titles.desc=seopage.desc);
                    global.set('titles',titles)
                    //console.log(titles)
                    return true;
                }

            })
    }
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    return {
        setSeopageData:setSeopageData,
        setDataCatalog:function(){
            //console.log('????????')
            setSeopageData()
                .then(function(seopageIs){
                    //console.log($state.current.name)
                    if($state.current.name=='stuffs.stuff'){
                        return
                    }
                    //console.log('seopageIs',seopageIs)
                    if(seopageIs){return}
                    //console.log(global.get('category').val)
                    var s= global.get('store').val;
                    var titles={};
                    if(global.get('category') && global.get('category').val){
                        var c=global.get('category').val;
                        //console.log(c)
                        if(global.get('langForm').val){
                            //titles.title=capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+c.section.name+' '+c.name+' '+global.get('lang').val.inn+' '+s.name+' '+global.get('lang').val.onLine+'.'
                            titles.title=c.section.name+' '+c.name+' '+global.get('lang').val.inn+' '+s.name+'.'
                            titles.description= capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+global.get('lang').val.onLine+' '+
                                c.section.name+' '+c.name+' '+global.get('lang').val.inn+' '+s.name+','+s.location;
                        }
                        titles.keywords=s.name+','+c.name+','+c.section.name+','+s.location;
                        if(c.section.subSectionName){
                            titles.keywords+=','+c.section.subSectionName;
                        }
                        titles.canonical=$sce.trustAsResourceUrl(global.get('store').val.link+'/'+c.linkData.groupUrl+'/'+c.linkData.categoryUrl);
                    }else if($stateParams.groupUrl && $stateParams.groupUrl!='group'){
                        var sectionUrl=$stateParams.groupUrl;
                        var sec=global.get('functions').val.getSection(sectionUrl);
                        //console.log(sec);
                        //console.log(global.get('lang').val.inn)

                        if(sec){
                            if(global.get('langForm').val){
                                titles.title=capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+sec.name+' '+global.get('lang').val.inn+' '+s.name+' '+global.get('lang').val.onLine+'.';
                            }

                            var categories=''
                            if(sec.categories.length){
                                sec.categories.forEach(function(c,i){
                                    if(i){categories+=','}
                                    categories+=c.name
                                })
                            }
                            titles.keywords=s.name+','+sec.name+','+s.location+','+categories;
                            if(global.get('langForm').val){
                                titles.description= capitalizeFirstLetter(global.get('langForm').val.toorder)+' '+global.get('lang').val.onLine+' '
                                    +sec.name+categories+' '+global.get('lang').val.inn+' '+s.name+' '+s.name+','+s.location;
                            }

                            titles.canonical=global.get('store').val.link+'/'+sec.url+'/category';
                            //console.log(titles.canonical)
                        }else{
                            console.log('???')
                            titles.canonical=''
                            titles.title='Заказать из каталога '+s.name+' онлайн.'
                            titles.keywords=s.name+',каталог,'+s.location;
                            titles.description= 'Заказ онлайн из каталога'+' в '+s.name+','+s.location;
                        }
                        titles.canonical=$sce.trustAsResourceUrl(titles.canonical);
                    }else{
                        titles.title='Заказать из каталога '+s.name+' онлайн.'
                        titles.keywords=s.name+',каталог,'+s.location;
                        titles.description= 'Заказ онлайн из каталога'+' в '+s.name+','+s.location;
                        titles.canonical=global.get('store').val.link+'/group/category';
                        titles.canonical=$sce.trustAsResourceUrl(titles.canonical);
                    }
                    //console.log(titles)
                    titles.domain=s.link;
                    titles.author=s.name;
                    global.set('titles',titles)
                })
            return;
//*****************************************************************************
        },
        setDataHomePage:function(){
            setSeopageData()
        },

        setDataItem:function(item,news){
            //console.log(item);
            var domain=global.get('store').val.link;
            var titles=angular.copy(global.get('store' ).val.seo);
            if(!titles){titles={}}
            if(news){
                var img=(item.img)?item.img:'';
                titles.url=domain+'/news/'+item.url;
                titles.type='article'
            }else{
                var img=(item.gallery && item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:'';
                titles.url=domain+'/'+item.link;
                titles.type='product'
            }
            if(img){img=photoHost+'/'+img;}
            titles.image=img;
            //console.log(titles.url)
            try{
                titles.canonical= $sce.trustAsResourceUrl(titles.url);
            }catch(err){console.log(err)}
            //console.log(titles)
            //setTitles(titles,item,true);
            titles.title = item.name;
            if (!news){
                if(item.artikul){
                    titles.title +=' '+item.artikul;
                }
                titles.title=item.categoryName+' '+titles.title;
            }

            global.set('titles',titles);
            //console.log(JSON.stringify(titles))
            return true;

        },
        setDataList:function(type,name){
            setSeopageData()
                .then(function(seopageIs){
                        console.log('seopageIs',seopageIs)
                        if(seopageIs){return};
                    //console.log(type,name)
                    var domain=global.get('store').val.link;
                    var titles=angular.copy(global.get('store' ).val.seo);
                    if(!titles){titles={}}
                    titles.url=domain+'/'+type;
                    titles.type=''
                    //if(img){img=photoHost+'/'+img;}
                    //titles.image=img;
                    //console.log(titles.url)
                    try{
                        titles.canonical= $sce.trustAsResourceUrl(titles.url);
                    }catch(err){console.log(err)}
                    //console.log(titles.title)
                    //titles.title = name+". "+titles.title;

                    global.set('titles',titles);
                    //console.log(titles.title)
                    return true;
                })

        },


        setData404:function(res){
            //console.log('404');
            var titles={pageTitle:'',pageDescription:'',pageKeyWords:''},seoPageId;
            var titles=angular.copy(global.get('store' ).val.seo);
            titles.canonical= $sce.trustAsResourceUrl('http://'+global.get('store').val.domain+'/404');
            titles.url=titles.canonical;
            //console.log(getSeoPageInfo(titles));
            if (seoPageId=getSeoPageInfo(titles)){

                $resource('/api/collections/Seopage/:id',{id:'@_id'}).get({id:seoPageId},function(res){
                    // console.log(res);
                    setTitles(titles,res,true);
                    global.set('titles',titles);
                });
            } else {
                global.set('titles',titles);
            }
        },

    };
    var setDataPage = function(res,type){
        // вроде не используется
        console.log(res)
        /*console.log($state)
         if ($state.current.name=='page.pageDetail') return;
         console.log($state)*/
        var titles={pageTitle:'',pageDescription:'',pageKeyWords:''};
        var titles=angular.copy(global.get('store' ).val.seo);
        titles.image='http://'+global.get('store').val.domain+((res.img)?res.img:res.gallery[0].thumb);
        titles.url='http://'+global.get('store').val.domain+'/page/'+type+'/'+res.url;
        titles.canonical= $sce.trustAsResourceUrl(titles.url);
        setTitles(titles,res,true);
        if (!titles.pageTitle){titles.pageTitle=res.name}
        if (!titles.pageDescription){titles.pageDescription=res.desc.replace(regex, '').substring(0,200)}
        global.set('titles',titles);
        //******** социальные сети
        var shareUrl=titles.url
        var shareTitle=res.name;
        var shareImg = titles.image;
        var shareDesc= titles.pageDescription;
        return {
            url:  shareUrl,
            title: shareTitle,
            description: shareDesc,
            image: shareImg,
            noparse: true
        }
    };
    var setDataStuff=function(stuff,news){
        var img=(stuff.gallery && stuff.gallery[0] && stuff.gallery[0].thumb)?stuff.gallery[0].thumb:'';
        if(img){img=photoHost+'/'+img;}
        var domain=global.get('store').val.link;
        var titles=angular.copy(global.get('store' ).val.seo)
        //{pageTitle:'',pageDescription:'',pageKeyWords:''};
        titles.image=img;//domain+'/'+img;
        if(news){
            titles.url=domain+'/news/'+stuff.url;
        }else{
            titles.url=domain+'/'+stuff.link
        }
        titles.canonical= $sce.getTrustedResourceUrl(titles.url);
        //console.log(titles)
        setTitles(titles,stuff,true);
        //if (!titles.title){titles.title=stuff.name}
        if (stuff.artikul){
            titles.title +=' '+stuff.artikul;
        }
        //if (!titles.description){titles.description=stuff.desc.replace(regex, '').substring(0,200)}
        titles.title=stuff.categoryName+' '+titles.title;
        global.set('titles',titles);
        //console.log(titles)
        //!******** социальные сети
        //var shareTitle=stuff.categoryName+' '+stuff.name;
        //console.log(stuff.categoryName)
        return {
            url:  titles.url,
            title: titles.title,
            description: titles.description,
            image: titles.image,
            noparse: true
        }

    };
}])

'use strict';
angular.module('gmall.directives')
.directive('additionaInfo', function () {
    function additionaInfo(){

    }
    return {
        scope: {
            stuff: '=',
        },
        bindToController: true,
        controller: additionaInfoCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/additionaInfo/additionaInfo.html'
    };
})
.service('AddInfo', function ($resource,$q,$uibModal) {
    var Items= $resource('/api/collections/AddInfo/:id',{id:'@_id'});
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;
    this.editTable=editTable;
    this.select=selectItem;

    function selectItem(){
        return $q(function(resolve,reject){
            var options={
                animation: true,
                templateUrl: 'components/additionalInfo/selectItem.html',
                controller: selectItemCtrl,
                size: 'lg',
                controllerAs:'$ctrl',
            }
            $uibModal.open(options).result.then(function(selected){resolve(selected)},function(){reject()});
        })
    }
    selectItemCtrl.$inject=['Filters','AddInfo','$uibModalInstance','$q','global'];
    function selectItemCtrl(Filters,AddInfo,$uibModalInstance,$q,global){
        var self=this;
        self.global=global;
        self.lang=global.get('lang').val
        $q.when()
            .then(function(){
                return Filters.getFilters();
            } )
            .then(function(filters){
                self.filters=filters;
                return AddInfo.query().$promise;
            } )
            .then(function(addInfos){
                self.filters.forEach(function(f){
                    f.addInfos=[];
                    addInfos.forEach(function(a){
                        if(a.filter==f._id){
                            f.addInfos.push(a)
                        }
                    })
                })
                //console.log(addInfos)
            })
        self.cancel = function () {$uibModalInstance.dismiss();};
        self.ok = function (item) {$uibModalInstance.close(item);};
    }

    function editTable(filter,addInfo){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/additionalInfo/additionalInfo.html',
            controller: function(filter,carrentAddInfo,AddInfo,$uibModalInstance,global,exception,Confirm){
                var self=this;
                self.global=global;
                self.lang=global.get('store').val.lang
                var langArr = global.get('store').val.langArr;
                console.log(langArr)
                if(!filter){$uibModalInstance.dismiss('cancel');}else{self.filter=filter}

                var query={filter:filter._id};
                self.items=[];


                activate()
                function activate(){
                    initItem();
                    AddInfo.query({query:query},function(res){
                        res.shift();
                        self.items=res;
                    },function(err){console.log(err)})
                }
                function initItem(){
                    self.item={headerTable:{},table:{},name:'',filter:filter._id};
                    filter.tags.forEach(function(tag){
                        self.item.table[tag._id]={}
                    })
                    if(langArr && langArr.forEach&& langArr.length ){
                        langArr.forEach(function(lang){
                            if(!self.item.headerTable){self.item.headerTable={}}
                            self.item.headerTable[lang]=['']
                            for(var key in self.item.table){
                                self.item.table[key][lang]=['']
                            }
                        })
                    }else{
                        if(!self.item.headerTable){self.item.headerTable={}}
                        self.item.headerTable[self.lang]=['']
                        for(var key in self.item.table){
                            self.item.table[key][self.lang]=['']
                        }
                    }
                    //console.log(self.item)
                }

                self.getTagName=function(id){
                    for(var i= 1,l=self.filter.tags.length;i<l;i++){
                        if(self.filter.tags[i]._id==id){
                            return self.filter.tags[i].name;
                            break;
                        }
                    }
                    return 'noname'
                }
                /*self.selectAddInfo=function(addInfo){
                    $uibModalInstance.close(addInfo);
                }*/
                self.cancel = function () {
                    $uibModalInstance.dismiss('cancel');
                };
                self.saveTable=function(){
                    //console.log(self.item)
                    //if (self.item.headerTable[self.lang].length==1){return}
                    //self.item.headerTable[self.lang].pop()
                    /*filter.tags.forEach(function(tag){
                        self.item.table[tag._id][self.lang].pop();
                    })*/
                    if(!self.item.name){self.item.name=filter.name}

                    if(self.item._id){
                        AddInfo.save({'update':'headerTable table name'},self.item,function(res){
                            activate()
                        })
                    } else{
                        AddInfo.save(self.item,function(res){
                            activate()
                        })
                    }
                }
                self.addRow = function(){
                    if(langArr && langArr.forEach && langArr.length){
                        langArr.forEach(function(lang){
                            if(!self.item.headerTable){self.item.headerTable={}}
                            self.item.headerTable[lang].push('');
                            for(var key in self.item.table){
                                self.item.table[key][lang].push('');
                            }
                        })
                    }else{
                        if(!self.item.headerTable){self.item.headerTable={}}
                        self.item.headerTable[self.lang].push('');
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].push('');
                        }
                    }
                    console.log(self.item)
                }
                self.deleteRow = function(i){
                    if(langArr && langArr.forEach&& langArr.length ){
                        langArr.forEach(function(lang){
                            self.item.headerTable[lang].splice(i,1);
                            for(var key in self.item.table){
                                self.item.table[key][lang].splice(i,1);
                            }
                        })
                    }else{
                        self.item.headerTable[self.lang].splice(i,1);
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].splice(i,1);
                        }
                    }
                    /*

                     self.item.headerTable.splice(i,1);
                     filter.tags.forEach(function(tag){
                     self.item.table[tag._id].splice(i,1);
                     })*/
                }
                self.editTable = function(item){
                    console.log(item)
                    self.item=item;
                    if(langArr && langArr.forEach && langArr.length ){
                        langArr.forEach(function(lang){
                            self.item.headerTable[lang].push('');
                            for(var key in self.item.table){
                                self.item.table[key][lang].push('');
                            }
                        })
                    }else{
                        self.item.headerTable[self.lang].push('');
                        for(var key in self.item.table){
                            self.item.table[key][self.lang].push('');
                        }
                    }

                    /*self.item.headerTable.push('');
                     filter.tags.forEach(function(tag){
                     self.item.table[tag._id].push('')
                     })*/


                }
                self.deleteTable = function(item){
                    Confirm("удалить?" )
                        .then(function(){
                            return AddInfo.delete({id:item._id} ).$promise;
                        } )
                        .then(function(){
                            return activate();
                        })
                        .catch(function(err){
                            err = (err &&err.data)||err
                            if(err){
                                exception.catcher('удаление')(err)
                            }

                        })
                }
                self.setTable = function(item){
                    self.item=item;
                    if(langArr && langArr.forEach&& langArr.length ){
                        langArr.forEach(function(lang){
                            if(!self.item.headerTable){
                                self.item.headerTable={}
                                self.item.headerTable[lang]=[];
                                self.item.headerTable[lang].push('');
                            }
                            for(var key in self.item.table){
                                if(!self.item.table[key][lang]){
                                    self.item.table[key][lang]=[];
                                    self.item.table[key][lang].push('');
                                }
                            }
                        })
                    }else{
                        if(!self.item.headerTable){
                            self.item.headerTable={}
                            self.item.headerTable[self.lang]=[];
                            self.item.headerTable[self.lang].push('');
                        }
                        for(var key in self.item.table){
                            if(self.item.table[key].length){
                                self.item.table[key]={}
                                self.item.table[key][self.lang]=[];
                                self.item.table[key][self.lang].push('');
                            }

                        }
                    }
                    console.log(self.item)

                }
            },
            controllerAs:'$ctrl',
            size: 'lg',
            resolve: {
                filter: function () {
                    return filter;
                },
                carrentAddInfo:function(){
                    return addInfo;
                }
            }
        });
        return modalInstance.result.then(function (addInfo) {
            console.log(addInfo)
            //self.stuff.sortsOfStuff.addInfo=addInfo._id

        },function () {});
    }



})

'use strict';
(function(){
angular.module('gmall.directives')
.directive('staticPage',staticPageDirective)
.directive('staticPageTemplate',staticPageTemplateDirective)

    function staticPageDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: staticPageCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/staticPage/staticPage.html',
        }
    }
    /*function staticPageTemplateDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: staticPageCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/stat/staticPage.html',
        }
    }*/
    function staticPageTemplateDirective($stateParams){
        return {
            //template:"<div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$scope','$element','$compile','$http','$stateParams','global',function ($scope,$element,$compile,$http,$stateParams,global) {
                var self=this;
                $http.get('views/template/partials/Stat/itemPage/'+$stateParams.id).then(function(response){
                    //console.log(response)
                    self.content=response.data.html;
                    //$element.html(response.data.html)

                    var linkFn = $compile(response.data.html);
                    var content = linkFn($scope);
                    $element.append(content);
                    //console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
        }
    }
    staticPageCtrl.$inject=['Stat','$stateParams','global','Photo','$q','$uibModal','Stuff','FilterTags','BrandTags','Brands','Campaign','Category','$timeout','$scope','Confirm','SetCSS']
    function staticPageCtrl(Stat,$stateParams,global,Photo,$q,$uibModal,Stuff,FilterTags,BrandTags,Brands,Campaign,Category,$timeout,$scope,Confirm,SetCSS){
        var self = this;
        self.Items=Stat;
        self.type='Stat'
        self.global=global;
        self.listOfBlocksForStaticPage=listOfBlocksForAll;
        self.listOfBlocks=listOfBlocksForAll;
        self.animationTypes=animationTypes;
        self.setStyles=setStyles;
        self.saveField=saveField;
        self.newBlock=null;
        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        //self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        self.filterBlocks=filterBlocks;

        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;

        activate()

        function activate(){
            Stat.get({_id:$stateParams.id}).$promise.then(function(res){
                //console.log(res)
                if(res && !res.blocks){
                    res.blocks=[];
                    saveField('blocks',[])
                }
                var bl=res.blocks.filter(function (b) {
                    return b
                })
                if(bl.length!=res.blocks.length){
                    saveField('blocks',bl)
                    res.blocks=bl;
                }
                console.log(res.blocks)
                res.blocks.forEach(function (b,i) {
                    if(b){
                        b.i=i;
                    }

                })
                res.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item=res
            })
        }

        $scope.$on('changeLang',function(){
            activate();
        })






        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField('blocks.'+block.i,block)
                })
        }

        function saveField(field,value,defer,indexImgs){
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }
            var defer =100
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };

        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function addBlock(type){
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;

            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            if(type=='slider'){
                o.imgs=[];
                update.update+=' imgs'
            }
            if(type=='stuffs' || type=="campaign" || type=="filterTags"|| type=="brandTags"|| type=="brands"|| type=="categories"){
                o.imgs=[];
                update.update+=' imgs'
            }

            //console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    activate()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            //console.log(block,index)
            var o={_id:self.item._id};
            o['id']=block.id;
            var update={update:'id',embeddedName:'blocks'};
            update.embeddedPull=true;

            console.log(update,o)
            //return;
            Confirm('подтверждаете?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    self.item.blocks.splice(index,1)
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })
                .then(function () {
                    activate()
                })



        }
        function deleteSlide(block,index){
            Photo.deleteFiles('Stat',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/staticPage/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        var keyParts=global.get('store').val.template.stat.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        // collections
        function addItemInBlock(block,$index) {
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link,url=item.url;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link,url:url};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link,url:url})
                    }
                    
                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    //saveField('blocks.'+block.i,block)
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }


    }
})()
'use strict';
(function(){
    angular.module('gmall.services')
        .directive('staticPages',staticPagesDirective);
    function staticPagesDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: staticPagesCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/staticPage/staticPages.html',
        }
    };
    staticPagesCtrl.$inject=['Stat','$state','global','Confirm','exception','$q','Photo','$timeout'];
    function staticPagesCtrl(Items,$state,global,Confirm,exception,$q,Photo,$timeout){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$state;
        self.Items=Items;
        self.query={};
        self.paginate={page:0,rows:25,totalItems:0}
        self.newItem={name:'Новая статическая страница',actived:false}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItems=searchItems;
        self.createItem=createItem;
        self.deleteItem=deleteItem;
        self.movedItem = movedItem;

        //*******************************************************
        activate();


        function activate(page) {
            if(page || page===0){
                self.paginate.page=0;
            }
            return getList().then(function() {
                console.log('Activated staticPage list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItems(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }
            self.paginate.page=0;
            activate();
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){
                    console.log('saved')
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                },function(err){console.log(err)});
            },defer)
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={name:'Новая статическая страница',actived:false}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    return getList(self.paginate);
                })
                .then(function(){
                    $state.go('frame.stats.stat',{id:self.newItem._id})
                })
                .catch(function(err){
                    exception.catcher('создание компании')(err)
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Stat/'+item.url
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){

                    activate(0);
                    return Photo.deleteFolder('Stat',folder)
                })
                .catch(function(err){
                    exception.catcher('удаление компании')(err)
                })
        }
        function movedItem(){
            var actions = self.items.map(function(e,i){
                e.index=i;
                return self.saveField(e,'index')
            })
            $q.all(actions);
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .service('Stat', statService);
    statService.$inject=['$resource','$uibModal','$q'];
    function statService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Stat/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            create:create,
            selectItem:selectItem
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/staticPage/createStaticPage.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function selectItem(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components/staticPage/selectItem.html',
                    controller: selectItemCtrl,
                    controllerAs:'$ctrl',
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedFilterTag) {
                    resolve(selectedFilterTag)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectItemCtrl.$inject=['Stat','$uibModalInstance','$q'];
        function selectItemCtrl(Stat,$uibModalInstance,$q){
            var self=this;
            $q.when()
                .then(function(){
                    return Stat.getList({rows:100,page:0});
                } )
                .then(function(stats){
                    self.stats=stats;
                })
            self.cancel = function () {
                $uibModalInstance.dismiss('cancel');
            };
            self.ok = function (stat) {
                $uibModalInstance.close(stat);
            };
        }
    }
})()

'use strict';
(function(){
angular.module('gmall.directives')
.directive('additionalPage',additionalDirective)


    function additionalDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: pageCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/additional/additional.html',
        }
    }
    pageCtrl.$inject=['Additional','$stateParams','global','Photo','$q','$uibModal','News','Stuff','FilterTags','BrandTags','Brands','Campaign','Category','$timeout','$scope','Confirm','SetCSS']
    function pageCtrl(Additional,$stateParams,global,Photo,$q,$uibModal,News,Stuff,FilterTags,BrandTags,Brands,Campaign,Category,$timeout,$scope,Confirm,SetCSS){
        var self = this;
        self.Items=Additional;
        self.type='Additional'
        self.global=global;
        self.listOfBlocksForStaticPage=listOfBlocksForStaticPage;
        self.listOfBlocks=listOfBlocksForStaticPage;
        self.setStyles=setStyles;
        self.saveField=saveField;
        self.newBlock=null;
        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        //self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        //self.filterBlocks=filterBlocks;

        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;

        activate()

        function activate(){
            self.Items.get({_id:$stateParams.id}).$promise.then(function(res){
                //console.log(res)
                if(res && !res.blocks){
                    res.blocks=[];
                    saveField('blocks',[])
                }
                var bl=res.blocks.filter(function (b) {
                    return b
                })
                if(bl.length!=res.blocks.length){
                    saveField('blocks',bl)
                    res.blocks=bl;
                }
                //console.log(res.blocks)
                res.blocks.forEach(function (b,i) {
                    if(b){
                        b.i=i;
                    }

                })
                res.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item=res
            })
        }

        $scope.$on('changeLang',function(){
            activate();
        })






        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField('blocks.'+block.i,block)
                })
        }
        function saveField(field,value,defer,indexImgs){
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }
            var defer =100
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };

        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function addBlock(type){
            if(!type){return}
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;

            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            if(type=='slider'){
                o.imgs=[];
                update.update+=' imgs'
            }
            if(type=='stuffs' || type=="campaign" || type=="filterTags"|| type=="brandTags"|| type=="brands"|| type=="categories"){
                o.imgs=[];
                update.update+=' imgs'
            }

            //console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    activate()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            //console.log(block,index)
            var o={_id:self.item._id};
            o['id']=block.id;
            var update={update:'id',embeddedName:'blocks'};
            update.embeddedPull=true;

            console.log(update,o)
            //return;
            Confirm('подтверждаете?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    self.item.blocks.splice(index,1)
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Additional',images)
                    }

                })
                .then(function () {
                    activate()
                })



        }
        function deleteSlide(block,index){
            Photo.deleteFiles('Additional',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/CONTENT/additional/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        var keyParts=global.get('store').val.template.additional.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        /*function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }*/

        // collections
        function addItemInBlock(block,$index) {
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'news':model=News;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link,url=item.url;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'news':
                            img=(item.img)?item.img:null;
                            link='news/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link,url:url};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link,url:url})
                    }
                    
                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    //saveField('blocks.'+block.i,block)
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }


    }
})()
'use strict';
(function(){
    angular.module('gmall.services')
        .directive('additionalPages',additionalPagesDirective);
    function additionalPagesDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: pagesCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/additional/additionals.html',
        }
    };
    pagesCtrl.$inject=['Additional','$state','global','Confirm','exception','$q','Photo','$timeout'];
    function pagesCtrl(Items,$state,global,Confirm,exception,$q,Photo,$timeout){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$state;
        self.Items=Items;
        self.query={};
        self.paginate={page:0,rows:5,totalItems:0}
        self.newItem={name:'Новая  страница',actived:false}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItems=searchItems;
        self.createItem=createItem;
        self.deleteItem=deleteItem;
        self.movedItem = movedItem;

        //*******************************************************
        activate();


        function activate(page) {
            if(page || page===0){
                self.paginate.page=0;
            }
            return getList().then(function() {
                console.log('Activated  list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItems(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }
            self.paginate.page=0;
            activate();
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){
                    console.log('saved')
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                },function(err){console.log(err)});
            },defer)
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={name:'Новая  страница',actived:false}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    return getList(self.paginate);
                })
                .then(function(){
                    $state.go('frame.additionals.additional',{id:self.newItem._id})
                })
                .catch(function(err){
                    exception.catcher('создание страницы')(err)
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Additional/'+item.url
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){

                    activate(0);
                    return Photo.deleteFolder('Additional',folder)
                })
                .catch(function(err){
                    exception.catcher('удаление страницы')(err)
                })
        }
        function movedItem(){
            var actions = self.items.map(function(e,i){
                e.index=i;
                return self.saveField(e,'index')
            })
            $q.all(actions);
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .service('Additional', statService);
    statService.$inject=['$resource','$uibModal','$q'];
    function statService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Additional/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            create:create,
            selectItem:selectItem
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/CONTENT/additional/createAdditional.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function selectItem(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    templateUrl: 'components//CONTENT/additional/selectItem.html',
                    controller: selectItemCtrl,
                    controllerAs:'$ctrl',
                }
                var modalInstance = $uibModal.open(options);
                modalInstance.result.then(function (selectedFilterTag) {
                    resolve(selectedFilterTag)
                }, function () {
                    console.log('Modal dismissed at: ' + new Date());
                    reject()
                });
            })
        }
        selectItemCtrl.$inject=['Additional','$uibModalInstance','$q'];
        function selectItemCtrl(Additional,$uibModalInstance,$q){
            var self=this;
            $q.when()
                .then(function(){
                    return Additional.getList({rows:100,page:0});
                } )
                .then(function(items){
                    self.items=items;
                })
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
            self.ok = function (item) {
                $uibModalInstance.close(item);
            };
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('labels',labelDirective);
    function labelDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: pagesCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/label/labels.html',
        }
    };
    pagesCtrl.$inject=['Label','$state','global','Confirm','exception','$q','$timeout'];
    function pagesCtrl(Items,$state,global,Confirm,exception,$q,$timeout){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$state;
        self.Items=Items;
        self.query={};
        self.paginate={page:0,rows:50,totalItems:0}
        self.newItem={name:'Новая  метка',actived:false}
        self.lists=listOfListName.map(function (n) {
            var o={name:n,type:n}
            if(global.get('store').val.nameLists[n+'List']){
                o.name=global.get('store').val.nameLists[n+'List']
            }
            return o;
        });
        self.getList=getList;
        self.saveField = saveField;
        self.searchItems=searchItems;
        self.createItem=createItem;
        self.deleteItem=deleteItem;


        //*******************************************************
        activate();

        function activate(page) {
            if(page || page===0){
                self.paginate.page=0;
            }
            return getList().then(function() {
                console.log('Activated  list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItems(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }
            self.paginate.page=0;
            activate();
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){
                    console.log('saved')
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)

                },function(err){console.log(err)});
            },defer)
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={name:'Новая  страница',actived:false}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    return getList(self.paginate);
                })
                .catch(function(err){
                    exception.catcher('создание страницы')(err)
                })
        }
        function deleteItem(item){
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){

                    activate(0);
                })
                .catch(function(err){
                    exception.catcher('удаление страницы')(err)
                })
        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .service('Label', labelsService);
    labelsService.$inject=['$resource','$uibModal','$q'];
    function labelsService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Label/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            query:Items.query,
            get:Items.get,
            create:create,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/CONTENT/label/createItem.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()

'use strict';
/*var lengthStyleBlock=19;
var arrEmptyForProperties=[];
for(var i=0;i<lengthStyleBlock;i++){arrEmptyForProperties.push('')}*/

angular.module('gmall.services')
.service('HomePage', function($resource,$uibModal){
    //console.log(stuffHost)
    var Items= $resource('/api/collections/HomePage/:_id',{_id:'@_id'});
    this.query=Items.query;
    this.get=Items.get;
    this.delete=Items.delete;
    this.save=Items.save;
    this.selectItemFromList=selectItemFromList;

    function selectItemFromList(items,header){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'components/homePage/selectItem.html',
            controllerAs:'$ctrl',
            controller: function ($uibModalInstance ,global,items,header) {
                var self=this;
                self.items=items;
                self.header=header||'выберите из предложенного списка'
                self.selectItem=selectItem;
                self.cancel = cancel;

                function selectItem(item){
                    $uibModalInstance.close(item);
                }
                function cancel() {
                    $uibModalInstance.dismiss();
                };
            },
            resolve: {
                items:function () {
                    return items
                },
                header:function () {
                    return header
                }
            }
        });
        return modalInstance.result
    }


})
    .directive('parallaxBanner',function($timeout) {
        return {
            scope: {},
            restrict: 'C',
            link:function (scope,elem,attr) {
                //console.log('link',elem,$(elem).offset().top)
                var $window=$(window)
                //doIt();
                $timeout(function () {
                    doIt()
                },100)

                $(window).scroll(doIt);
                function doIt() {
                    //console.log(elem,$(elem).offset().top);
                    var elementTop = $(elem).offset().top;
                    var elementBottom = elementTop + $(elem).outerHeight();
                    var viewportTop = $(window).scrollTop();
                    var viewportBottom = viewportTop + $(window).height();
                    var viewportHeight = $(window).height();
                    if (elementTop<viewportBottom){
                        var lastPositionY=parseInt(elem.css('background-position-y'));
                        var yPos = (elementTop-viewportBottom+$(elem).height())/4;
                        var delta = lastPositionY-yPos;
                        /*if(delta>150){
                         console.log(delta)
                         }*/
                        var coords = '0% '+ yPos + 'px';
                        elem.css({
                            backgroundPosition: coords
                        });

                    }
                }
                /*scope.$on('$destroy', function() {
                    console.log('$destroy$destroy')
                    angular.element($window).off('scroll',doIt);
                });
                this.$onInit = function () {
                    console.log('$onInit')
                };

                this.$onDestroy = function () {
                    console.log('$onDestroy')
                };*/
                elem.on('$destroy', function(){
                    //console.log('$destroy')
                    angular.element($window).off('scroll',doIt);
                });

            }
        }
    })
.directive('homePage',function(){
    return {
        scope: {},
        restrict:'E',
        bindToController: true,
        controller: homePageCtrl,
        controllerAs: '$ctrl',
        templateUrl: 'components/homePage/homePage.html',
    }
    homePageCtrl.$inject=['HomePage','$stateParams','$state','$q','global','$http','$uibModal','Stuff','Filters','FilterTags','Category','BrandTags','exception','Store','Brands','EditModelData','Photo','News','Campaign','Info','$scope','$timeout','Confirm','SetCSS','$rootScope'];
    function homePageCtrl(HomePage,$stateParams,$state,$q,global,$http,$uibModal,Stuff,Filters,FilterTags,Category,exception,BrandTags,Store,Brands,EditModelData,Photo,News,Campaign,Info,$scope,$timeout,Confirm,SetCSS,$rootScope){
        var self = this;
        self.Items=HomePage;
        self.global=global;
        self.$state=$state;
        self.activeSide='left'
        self.store=global.get('store').val
        /*self.listOfBlocksForMainPage=listOfBlocksForMainPage;
        self.listOfBlocks=listOfBlocksForMainPage*/
        self.listOfBlocks=listOfBlocksForAll
        self.blockEditPermission={}

        self.animationTypes=animationTypes;
        self.addBlock=addBlock;
        self.deleteBlock=deleteBlock;

        self.saveInfo=saveInfo;
        self.saveField=saveField;
        self.movedSlide=movedSlide;
        self.deleteSlide =deleteSlide;
        self.editSlide=editSlide;
        self.movedStuff =movedStuff;
        self.editModelData=editModelData;
        self.setCollection=setCollection;
        self.deleteCollection=deleteCollection;
        self.saveFieldInSide=saveFieldInSide;
        self.addItemInBlock=addItemInBlock;
        self.getNameCollection=getNameCollection;
        self.setColor=setColor;
        self.uploadHP=uploadHP;
        self.downloadHP=downloadHP;
        self.deleteIndexPageHtml=deleteIndexPageHtml;

        self.cloneBlock=cloneBlock;
        self.getBlockConfig=getBlockConfig;
        self.getNameBlock=getNameBlock;
        self.refreshBlocks=refreshBlocks;

        function getNameBlock(type) {
            if(listOfBlocksForAll[type]){
                return listOfBlocksForAll[type]
            }else{
                return type;
            }
        }

        activate();
        $scope.$on('changeLang',function(){
            activate();
        })


        function activate(){
            $q.when()
                .then(function(){
                    self.blockForAdd=null
                    return $q(function(resolve,reject){
                        self.Items.get({_id:self.store.subDomain},function(res){resolve(res)},function(err){
                            console.log(err)
                            if(err && err.status && err.status==404){
                                resolve(404)
                            }else{
                                resolve()
                            }
                        })
                    })
                    //return self.Items.get({_id:self.store.subDomain} ).$promise
                })
                .then(function (res) {
                    /*var o={_id:res._id,url:null,left:[]}
                    console.log(o)
                    self.Items.save({update:'url left'},o)
                    throw 0;*/

                    if(res && res!=404){
                        self.item=res;
                        if(!self.item.blocks){
                            self.item.blocks=[];
                        }
                        self.item.blocks.forEach(function (el,index) {
                            el.i=index
                        })
                        //console.log(self.item.left)
                       /* self.item.left=self.item.left.filter(function (b) {
                            //console.log(b._id)
                            return b;
                        })*/

                        /*if(!self.item.left.length){
                            self.Items.save({update:'left'},{_id:self.item._id,left:[]});
                        }
                        self.item['left'].forEach(function (el,index) {
                            el.dbIndex=index
                        })
                        self.item['left'].sort(function (a,b) {
                            return a.index-b.index;
                        })
                        self.item['right'].forEach(function (el,index) {
                            el.dbIndex=index
                        })
                        self.item['right'].sort(function (a,b) {
                            return a.index-b.index;
                        })
                        self.item['header'].forEach(function (el,index) {
                            el.dbIndex=index
                        })
                        self.item['header'].sort(function (a,b) {
                            return a.index-b.index;
                        })*/
                    }else if(res==404){
                        self.item={
                            url:self.store.subDomain,
                            header:[],
                            left:[],
                            right:[],
                            blocks:[],
                        }
                        return self.Items.save(self.item).$promise
                    }
                })
                .then(function(res){
                    if(self.item && !self.item._id && res && res.id){
                        self.item._id = res.id;
                    }
                })

                .catch(function(err){
                    exception.catcher('получение home page')(err)
                })
        }


        function addBlock(type){
            if(!type){return}
            console.log('addNewBlock')
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;


            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                //console.log(block.index,index)
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,position:self.activeSide};
            var update={update:'type index position',embeddedName:'blocks',embeddedPush:true};
            console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                    activate()
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        var delay=false;
        function cloneBlock(block){
            if(delay){return}
            delay=true;
            $timeout(function () {
                delay=false
            },2000)
            var newBlock = angular.copy(block)
            delete newBlock._id
            delete newBlock.__v
            if(!newBlock.index){newBlock.index=1}else{newBlock.index++}
            newBlock.img=null;
            newBlock.imgs=[];
            var arr=['stuffs','filterTags','brandTags','categories','brands','news','campaign','info','filters']
            arr.forEach(function (field) {
                if(newBlock[field] && newBlock[field].length){
                    newBlock[field]=newBlock[field].map(function (item) {
                        return item._id
                    })
                }
            })
            self.item.blocks.forEach(function(block){
                //console.log(block.index,index)
                if(block.index && block.index>=newBlock.index){
                    newBlock.index=block.index+1;
                }
            })
            self.item.blocks.push(newBlock)
            var o={_id:self.item._id};
            o[blocks]=self.item.blocks
            var update={update:'blocks'};
            Confirm('потверждаете?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                    activate()
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function refreshBlocks() {
            self.item.blocks=null
            return self.Items.get({_id:self.store.subDomain} ).$promise
                .then(function(data) {
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })

                    self.item.blocks=data.blocks

                })
        }
        function deleteBlock(block) {
            //console.log(block)
            var o={_id:self.item._id};
            var update;
            Confirm('потверждаете?')
                .then(function () {
                    self.item.blocks.splice(block.i,1)
                    if(!block._id){
                        update={update:'blocks'};
                        o.blocks=self.item.blocks
                    } else{
                        o['_id_id']=block._id;
                        update={update:'_id_id',embeddedName:'blocks'};
                        update.embeddedPull=true;
                    }
                    //console.log(update,o)
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })
                    }
                    if(images.length){
                        return Photo.deleteFiles('Homepage',images)
                    }

                })
                .then(function () {
                    activate()
                })
        }

        function saveInfo(){
            saveField('info')
        }
        function saveField(field,value){
            console.log(field,value)
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }

            setTimeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                //console.log(defer,value)
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                    if(field.indexOf('.type')>-1){
                        activate()
                    }
                });
            },100)
        }
        function saveField1001(field,value){
            //console.log(self.activeSide);
            var lang=global.get('store').val.lang;
            self.item[self.activeSide].sort(function (a,b) {
                return a.index-b.index;
            })
            self.item[self.activeSide].forEach(function (b) {
                if(b.name ||  b.name!=undefined){
                    if(!b.nameL){b.nameL={}}
                    b.nameL[lang]=b.name;
                }
                if(b.name1 ||  b.name1!=undefined){
                    if(!b.name1L){b.name1L={}}
                    b.name1L[lang]=b.name1;
                }
                if(b.desc ||  b.desc!=undefined){
                    if(!b.descL){b.descL={}}
                    b.descL[lang]=b.desc;
                }
                if(b.desc1 ||  b.desc1!=undefined){
                    if(!b.desc1L){b.desc1L={}}
                    b.desc1L[lang]=b.desc1;
                }
                if(b.imgs && b.imgs.length){
                    b.imgs.forEach(function (img) {
                        if(img.name ||  img.name!=undefined){
                            if(!img.nameL){img.nameL={}}
                            img.nameL[lang]=img.name;
                        }
                        if(img.desc ||  img.desc!=undefined){
                            if(!img.descL){img.descL={}}
                            img.descL[lang]=img.desc;
                        }
                    })
                }
            })
            var o={_id:self.item._id};
            o[self.activeSide]=self.item[self.activeSide]
            var field=self.activeSide
            var query={update:field}
            var defer = 300
            return $q(function (resolve,reject) {
                $timeout(function(){
                    self.Items.save(query,o,function () {
                        resolve()
                        global.set('saving',true)
                        $timeout(function () {
                            global.set('saving',false);
                        },1500)
                    })
                },defer)
            })

        };

        function saveFieldOld(block,index,f,defer,indexImgs){
            console.log(self.activeSide);
            if(f=='index'){
                self.item[self.activeSide].sort(function (a,b) {
                    return a.index-b.index;
                })
            }
            var o={_id:self.item._id};
            o[self.activeSide]=self.item[self.activeSide]
            var field=self.activeSide

            return;
            defer =defer||200
            setTimeout(function(){
                var o={_id:self.item._id};
                var field=self.activeSide+'.'+block.dbIndex;
                if(f){
                    field=field+'.'+f;
                    o[field]=block[f];
                }else{
                    o[field]=block;
                }
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                })
                if(f=='index'){
                    self.item[self.activeSide].sort(function (a,b) {
                        return a.index-b.index;
                    })
                }
            },defer)
        };

        function movedSlide(block,field,item){
            setTimeout(function(){
                block[field].forEach(function(el,i){
                    el.index=i;
                })
                //console.log($index)
                self.saveField(block,null,field)
            },100)
            return item;
        }
        function deleteSlide(block,index,$index){
            Confirm('Удалить?')
                .then(function(){
                    return Photo.deleteFiles('Homepage',[block.imgs[index].img])
                })
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField(block,$index,'imgs')
                },function(err) {console.log(err)});

        }
        function editSlide(block,index,$index){
            //console.log(slide)
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/homePage/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    if(!slide.button){slide.button={}}
                    self.item=slide;
                    self.animationTypes=animationTypes;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField(block,$index,'imgs',null,index)
            }, function () {
            });
        }


        function movedStuff(block,item){
            setTimeout(function(){
                saveFieldInSide(block)
            },100)

            return item;
        }




        function editModelData(block,i){
            var model=block.type,
                items=block[block.type]

            if(items[i] && items[i]._id){
                var field;
                 if(model=='brands'){
                    field='Brand';
                 } else if(model=='categories'){
                    field='Category';
                 } else if(model=='filterTags'){
                    field='FilterTags';
                 }else if(model=='filters'){
                    field='Filters';
                 }else if(model=='brandTags'){
                    field='BrandTags';
                 }else if(model=='stuffs'){
                     field='Stuff';
                 }else if(model=='news'){
                     field='News';
                 }else if(model=='campaign'){
                     field='Campaign';
                 }else if(model=='info'){
                     field='Info';
                 }
                $q.when()
                    .then(function(){
                        return EditModelData.doIt(field,items[i]._id,items[i])
                    })
                    .then(function(img){
                        console.log(img==items[i].img)
                        if(img && img!=items[i].img){
                            items[i].img=img
                            console.log(img)
                        }
                        
                    })
                    /*.catch(function(item){
                        if(item && item._id){
                            items[i]=res;
                        }
                    })*/


            } else{
                /*var field;
                if(model=='Brand'){
                    field='brands';
                } else if(model=='Category'){
                    field='categories';
                } else if(model=='FilterTags'){
                    field='filterTags';
                }else if(model=='BrandTags'){
                    field='brandTags';
                }*/

                setCollection(items,i,model)
            }

        }
        function addItemInBlock(block) {
            var field=block.type;
            if(!block[block.type]){block[block.type]=[]}
            var collections=block[block.type]
            var Items;
            if(field=='brands'){
                Items=Brands;
            } else if(field=='categories'){
                Items=Category;
            } else if(field=='filterTags'){
                Items=FilterTags;
            }else if(field=='filters'){
                Items=Filters;
            }else if(field=='brandTags'){
                Items=BrandTags;
            }else if(field=='stuffs'){
                Items=Stuff;
            }else if(field=='news'){
                Items=News;
            }else if(field=='campaign'){
                Items=Campaign;
            }else if(field=='info'){
                Items=Info;
            }
            $q.when()
                .then(function(){
                    return Items.select({actived:true})
                })
                .then(function(item){
                    //console.log(item)
                    collections.push(item);
                    self.saveFieldInSide(block)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function setCollection(block,idx){
            var field=block.type;
            var collections=block[block.type]
            var Items;
            if(field=='brands'){
                Items=Brands;
            } else if(field=='categories'){
                Items=Category;
            } else if(field=='filterTags'){
                Items=FilterTags;
            } else if(field=='filters'){
                Items=Filters;
            }else if(field=='brandTags'){
                Items=BrandTags;
            }else if(field=='stuffs'){
                Items=Stuff;
            }else if(field=='news'){
                Items=News;
            }else if(field=='campaign'){
                Items=Campaign;
            }else if(field=='info'){
                Items=Info;
            }
            $q.when()
                .then(function(){
                    return Items.select()
                })
                .then(function(item){
                    collections[idx]=item;
                    self.saveFieldInSide(block)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function saveFieldInSide(item) {
            var field=item.type;
            console.log(item[item.type])
            //console.log('saveField',item)
            //console.log('saveField',item)
            var o={_id:self.item._id};
            o[field]=item[field].map(function(e){return e._id});
            var update={update:field,embeddedName:self.activeSide};
            update.embeddedVal=item._id
            console.log(update,o)
            return self.Items.save(update,o).$promise;


        }


        function deleteCollection(block,idx){
            block[block.type].splice(idx,1);
            saveFieldInSide(block)
        }
        function getNameCollection(type) {
            switch (type) {
                case 'categories': return 'категории'
                case 'brands': return 'бренды'
                case 'brandTags': return 'коллекции'
                case 'filterTags': return 'признаки'
                case 'filters': return 'характеристики'
                default: return '???????';
            }

        }

        function setColor(block,idx){
            //console.log(block,idx)
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField(block,idx,'blockStyle')
                    console.log(block.elements)
                    saveField(block,idx,'elements')
                })

        }
        function uploadHP() {
            Confirm('выгрузить?')
                .then(function () {
                    return $http.post('/api/setTemplateHP', {
                        template:{
                            blocks:self.item.blocks,
                            /*left:self.item.left,
                            right:self.item.right*/
                        },
                        store:global.get('store').val._id}
                    )
                })
                .then(function (res) {
                    exception.showToaster('success','статус','обновлено')
                })
                .catch(function(err){
                    exception.catcher('выгрузка шаблона')(err)
                })
        }
        function downloadHP() {
            Confirm('загрузить?')
                .then(function () {
                    return $http.get('/views/templatesHP/'+global.get('store').val.subDomain+'.json')
                })
                .then(function (res) {
                    console.log(res.data)
                    /*self.item.template=res.data;
                    Store.save({update:'template'},{_id:self.item._id,template:self.item.template})*/
                    if(res.data && res.data.blocks){
                       var o={_id: self.item._id}
                       o.blocks=res.data.blocks
                        /*console.log(res.data.left)
                        res.data.left.splice(2,1)
                        res.data.left.splice(4,1)
                        res.data.left.splice(5,1)*/

                        //console.log(res.data.left)
                        self.Items.save({update:'blocks'},o,function(){
                            self.item.blocks=res.data.blocks;
                            /*self.item.left=res.data.left;
                            self.item.right=res.data.right;*/
                            exception.showToaster('success','статус','обновлено')
                        })
                    }else{
                        throw 'не верный формат данных'
                    }



                })
                .catch(function(err){
                    exception.catcher('загрузка шаблона')(err)
                })

        }
        function deleteIndexPageHtml() {
            Confirm('перезаписать страницу?')
                .then(function () {
                    return $http.get('/api/deleteIndexPageHtml')
                })
                .then(function (res) {
                    exception.showToaster('info','все OK')
                })
                .catch(function(err){
                    exception.catcher('сброс страницы')(err)
                })

        }
        function getBlockConfig(block) {
            $q.when()
                .then(function () {
                    return $http.get('/api/getBlocksHP/'+block.type)
                })
                .then(function (res) {
                    //console.log(res)
                    if(res.data){
                        return HomePage.selectItemFromList(res.data)
                    }
                })
                .then(function (b) {
                    //console.log(b)
                    if(b){
                        if(block.img){
                            //Photo.deleteFiles('Homepage',[block.img])
                        }else if(block.video){
                            Photo.deleteFiles('Homepage',[block.video])
                        }else if(block.imgs && block.type!='stuffs'){
                            var a=[];
                            block.imgs.forEach(function (i) {
                                a.push(i.img)
                            })
                            if(a.length){
                                Photo.deleteFiles('Homepage',a)
                            }
                        }
                        for(var key in block){
                            if(key!='_id' && key!='index'){
                                delete block[key]
                            }
                        }
                        var photos=[];
                        for(var key in b){
                            if(key!='_id' && key!='template' && key !='nameTemplate' && key!='index'){
                                if(key=='img' && b[key]){
                                    var p = b[key].split('/')
                                    p[p.length-2]=self.item.url;
                                    p[p.length-4]=global.get('store').val.subDomain;

                                    var img = p[p.length-1].split('.')
                                    img[img.length-2] +='copy'
                                    p[p.length-1]=img.join('.')
                                    block[key]=p.join('/')
                                    photos.push([b[key],block[key]])
                                }else if(key=='imgs' && b[key] && b[key].length){
                                    b[key].forEach(function (i) {
                                        if(i.img){
                                            var p = i.img.split('/')
                                            p[p.length-2]=self.item.url;
                                            p[p.length-4]=global.get('store').val.subDomain;

                                            var img = p[p.length-1].split('.')
                                            img[img.length-2] +='copy'
                                            p[p.length-1]=img.join('.')
                                            photos.push([i.img,p.join('/')])
                                            i.img=p.join('/');
                                        }

                                    })
                                    block[key] = b[key];

                                }else if(key=='video' && b[key]){
                                    var p = b[key].split('/')
                                    p[p.length-2]=self.item.url;
                                    p[p.length-4]=global.get('store').val.subDomain;
                                    var img = p[p.length-1].split('.')
                                    img[img.length-2] +='copy'
                                    p[p.length-1]=img.join('.')
                                    block[key]=p.join('/')
                                    photos.push([b[key],block[key]])
                                }else{
                                    block[key] = b[key];
                                }

                            }
                        }
                        var folder = '/images/'+global.get('store').val.subDomain+'/HomePage/'+self.item.url;
                        var o={folder:folder,photos:photos};
                        return $http.post(photoUpload+'/api/copyPhotosFromBrowser',o)

                    }
                })
                .then(function () {
                    return saveField(block,block.i)
                })
                .then(function () {
                    activate()
                })
        }
    }
})


function HPtransform(HP,template){
    function setData(e){
        var o={type:e.name}
        if(e.templ){o.templ=e.templ}
        if(e.style){o.style=e.style};
        if(e.name=='stuffs'){
            if(HP.stuffs && HP.stuffs.length){
                o.stuffs=HP.stuffs;
            }

            if(e.namebox){
                o.name=e.namebox;
            }
            //console.log(o)
        }else if(e.name=='brands'){
            if(HP.brands && HP.brands.length){
                o.brands=HP.brands;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='brandTags'){
            if(HP.brandTags && HP.brandTags.length){
                o.brandTags=HP.brandTags;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='filterTags'){
            if(HP.filterTags && HP.filterTags.length){
                o.filterTags=HP.filterTags;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='filters'){
            if(HP.filters && HP.filters.length){
                o.filters=HP.filters;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='categories'){
            if(HP.categories && HP.categories.length){
                o.categories=HP.categories;
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='campaign'){
            if(HP.campaign && HP.campaign.length){
                o.campaign=HP.campaign
            }
            if(e.namebox){
                o.name=e.namebox;
            }
        }else if(e.name=='news'){
            if(HP.news && HP.news.length){
                o.news=HP.news
            }
            if(e.namebox){
                o.name=e.namebox;
            }

        }else if(e.name=='text'){
            o.name=HP.textName;
            o.desc=HP.textDesc;
            if(HP.textButton){
                o.button={
                    is:HP.textButton.button,
                    link:HP.textButton.link,
                    text:HP.textButton.text,
                }
            }
        }else if(e.name=='mission'){
            o.name=HP.name;
            o.desc=HP.desc;
            if(HP.descButton){
                o.button={
                    is:HP.descButton.button,
                    link:HP.descButton.link,
                    text:HP.descButton.text,
                }
            }
        }else if(e.name=='banner'){
            o.img=HP.bannerSrc;
            if(HP.banner){
                o.desc=HP.banner.desc;
                o.button={
                    is:HP.banner.button,
                    link:HP.banner.link,
                    text:HP.banner.text,
                }
            }
        }else if(e.name=='video'){
            o.video=HP.videoSrc;
            if(HP.video){
                o.audio=HP.video.audio;
                o.desc=HP.video.desc;
                o.button={
                    is:HP.video.button,
                    link:HP.video.link,
                    text:HP.video.text,
                }
            }

        }else if(e.name=='slider'){
            if(HP.imgs){
                o.imgs=HP.imgs;
            }
        } else if(e.name=='info'){
            o.img=HP.infoImg;
            if(HP.info){
                o.name=HP.info.name;
                o.button={link:HP.info.link};
            }

        }
        return o;
    }
    if(!HP.url){
        var hp={header:[],left:[],right:[]};
        //console.log(template)
        template.left.forEach(function(e){
            hp.left.push(setData(e))
        })
        template.right.forEach(function(e){
            hp.right.push(setData(e))
        })
    }else{
        var hp=HP;
    }
    return hp;
}



// blocks
angular.module('gmall.directives')
    .directive('directivehp', function($compile, $interpolate) {
        return {
            template: '',
            link: function($scope, element, attributes) {
                element.append($compile('<div ' + attributes.directivehp.toLowerCase() + 'hp-block></div>')($scope));
            }
        };
    })
    .directive('styleBlock',styleBlock)
    .directive('bannerhpBlock',bannerHPBlock)
    .directive('banneronehpBlock',banneroneHPBlock)
    .directive('infohpBlock',infohpBlock)
    .directive('sliderhpBlock',sliderhpBlock)
    .directive('texthpBlock',texthpBlock)
    .directive('texttwohpBlock',texttwohpBlock)
    .directive('videohpBlock',videohpBlock)
    .directive('missionhpBlock',missionhpBlock)
    .directive('brandshpBlock',brandshpBlock)
    .directive('stuffshpBlock',stuffshpBlock)
    .directive('newshpBlock',newshpBlock)
    .directive('campaignhpBlock',campaignhpBlock)
    .directive('maphpBlock',maphpBlock)
    .directive('reviewhpBlock',reviewhpBlock)
    .directive('subscriptionhpBlock',subscriptionhpBlock)
    .directive('callhpBlock',callhpBlock)
    .directive('feedbackhpBlock',feedbackhpBlock)
    .directive('brandtagshpBlock',brandTagshpBlock)
    .directive('subscriptionaddhpBlock',subscriptionAddhpBlock)
    .directive('filtertagshpBlock',filterTagshpBlock)
    .directive('filtershpBlock',filtershpBlock)
    .directive('categorieshpBlock',categorieshpBlock)
    .directive('calendarhpBlock',calendarhpBlock)
    .directive('videolinkhpBlock',videolinkhpBlock)
    .directive('pricegoodshpBlock',pricegoodshpBlock)
    .directive('priceserviceshpBlock',priceserviceshpBlock)
    .directive('scheduleplacehpBlock',scheduleplacehpBlock)
    .directive('hpBlock',undefinedhpBlock)

    .directive('googlePlaceReviews',googlePlaceReviews)






function googlePlaceReviews(global) {
    /*https://support.google.com/business/answer/7035772?hl=ru*/
    return{
        restrict :'C',
        scope:true,
        link:function(scope,element){
            if(global.get('store').val.glPlaceId){
                console.log("global.get('store').val.glPlaceId",global.get('store').val.glPlaceId)
                $(element).googlePlaces({
                    //placeId: 'ChIJp2QxV_sJVFMR1DEp1x_16F8' //Find placeID @: https://developers.google.com/places/place-id
                    placeId: global.get('store').val.glPlaceId
                    , render: ['reviews']
                    , min_rating: 1
                    , max_rows:4
                });
            }
            //console.log($(element).find("#google-reviews"))
        }
    }
}


function undefinedhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/undefinedBlock.html',
    }
}

function styleBlock(){
    return {
        templateUrl: 'components/homePage/blocks/styleBlock.html',
    }
}


function bannerHPBlock(){
    return {
        templateUrl: 'components/homePage/blocks/bannerBlock.html',
    }
}
function banneroneHPBlock(){
    return {
        templateUrl: 'components/homePage/blocks/banneroneBlock.html',
    }
}
function infohpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/infoBlock.html',
    }
}
function sliderhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/sliderBlock.html',
    }
}
function texthpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/textBlock.html',
    }
}
function texttwohpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/texttwoBlock.html',
    }
}
function videohpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/videoBlock.html',
    }
}
function missionhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/missionBlock.html',
    }
}
function brandshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/brandsBlock.html',
    }
}
function stuffshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/stuffsBlock.html',
    }
}
function newshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/newsBlock.html',
    }
}
function campaignhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/campaignBlock.html',
    }
}
function maphpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/mapBlock.html',
    }
}
function reviewhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/reviewBlock.html',
    }
}
function subscriptionhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/subscriptionBlock.html',
    }
}
function callhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/callBlock.html',
    }
}
function feedbackhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/feedbackBlock.html',
    }
}
function brandTagshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/brandTagsBlock.html',
    }
}
function subscriptionAddhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/subscriptionAddBlock.html',
    }
}
function filterTagshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/filterTagsBlock.html',
    }
}
function filtershpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/filtersBlock.html',
    }
}
function categorieshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/categoriesBlock.html',
    }
}
function calendarhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/calendarBlock.html',
    }
}
function videolinkhpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/videolinkhpBlock.html',
    }
}
function pricegoodshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/pricegoodsBlock.html',
    }
}
function priceserviceshpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/priceservicesBlock.html',
    }
}
function scheduleplacehpBlock(){
    return {
        templateUrl: 'components/homePage/blocks/scheduleplaceBlock.html',
    }
}


/*
var map, infoWindow;
function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: -34.397, lng: 150.644},
        zoom: 6
    });
    infoWindow = new google.maps.InfoWindow;

    // Try HTML5 geolocation.
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            console.log(position)
            var pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };
            infoWindow.setPosition(pos);
            infoWindow.setContent('Location found.');
            infoWindow.open(map);
            map.setCenter(pos);

            //http://maps.googleapis.com/maps/api/geocode/json?latlng=40.714224,-73.961452&sensor=false

        }, function () {
            handleLocationError(true, infoWindow, map.getCenter());
        });
    } else {
        // Browser doesn't support Geolocation
        handleLocationError(false, infoWindow, map.getCenter());
    }
}

function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    console.log(error)
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ?
        'Error: The Geolocation service failed.' :
        'Error: Your browser doesn\'t support geolocation.');
    infoWindow.open(map);
}
*/

'use strict';
angular.module('gmall.services')
.service('selectStuffModalService', function($uibModal,$q,$state,global){
    this.selectStuff=function(){
        return $q(function(resolve,reject){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/selectStuffModal/selectStuffModal.html',
                controller: function(Stuff,$uibModalInstance){
                    var self=this;
                    self.stuffs=[];
                    self.name='';
                    // select only stuffs with the same category
                    var items={};

                    var paginate={page:0,rows:30,items:0}
                    self.search = function(name){
                        if (name.length<3){return}
                        // console.log(name);
                        Stuff.getList(paginate,query,name).then(function(res){
                            //console.log(res)
                            self.stuffs=res;
                        })
                    }
                    self.selectStuff=function(stuff){
                        $uibModalInstance.close(stuff);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size: 'lg',
            });

            modalInstance.result.then(function (stuff) {
                resolve(stuff)
            },function(){
                reject('отказ')
            });
        })

    }
})

'use strict';
(function(){
    angular.module('gmall.services')
        .directive('createLink',itemDirective);
    function itemDirective(){
        return {
            scope: {
                link:'=',
                stuffurl:'=',
                change:'&',
                title:'@',
                seoPage:'=editSeoPage'
            },
            rescrict:"E",
            bindToController: true,
            controller: itemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/createLink/createLink.html',
        }
    }
    itemCtrl.$inject=['$q','FilterTags','Stuff','Category','BrandTags','Stat','Brands','Sections','global','$uibModal','$timeout']
    function itemCtrl($q,FilterTags,Stuff,Category,BrandTags,Stat,Brands,Sections,global,$uibModal,$timeout){
        var self = this;
        self.setFilterTag=setFilterTag;
        self.setBrandTag=setBrandTag;
        self.setBrand=setBrand;
        self.setCategory=setCategory;
        self.setSection=setSection;
        self.setStuff=setStuff;
        self.setStuffForOrder=setStuffForOrder;
        self.setSubscription=setSubscription;
        self.setSubscriptionAdd=setSubscriptionAdd;
        self.setBonus=setBonus;
        self.setFeedback=setFeedback;
        self.setStaticPage=setStaticPage;
        self.deleteLink=deleteLink;
        self.setCall=setCall;
        self.setDateTime=setDateTime;
        self.setAnyPage=setAnyPage;
        self.setHomePage=setHomePage;
        self.setCatalog=setCatalog;

        function setFilterTag(){
            $q.when()
                .then(function(){
                    return FilterTags.selectFilterTag({section:true});
                })
                .then(function(tag){
                    if(!tag.section){tag.section='group'}
                    self.link='/'+tag.section+'/category?queryTag='+tag.url;
                    $timeout(function(){
                        self.change()
                    },100)
                    //console.log(self.link)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function setBrandTag(){
            $q.when()
                .then(function(){
                    return BrandTags.selectBrandTag({section:true});
                })
                .then(function(tag){
                    console.log(tag)
                    if(!tag.section){tag.section='group'}
                    if(tag.brand && tag.brand.url){
                        self.link='/'+tag.section+'/category?brand='+tag.brand.url+'&brandTag='+tag.url;
                        $timeout(function(){
                            self.change()
                        },100)
                    } else{
                        throw 'where is the BRAND?'
                    }

                    //console.log(self.link)
                })
                .catch(function(err){
                    if(err){
                        exception.caatcher('set data')(err)
                    }

                })
        }
        function setBrand(){
            $q.when()
                .then(function(){
                    return Brands.select({section:true});
                })
                .then(function(tag){
                    //console.log(tag)
                    if(!tag.section){tag.section='group'}
                    self.link='/'+tag.section+'/category?brand='+tag.url;
                    $timeout(function(){
                        self.change()
                    },100)
                    //console.log(self.link)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function setCategory(){
            $q.when()
                .then(function(){
                    return Category.select();
                })
                .then(function(category){
                    //console.log(global.get('categories').val)
                    var category = global.get('categories').val.getOFA('_id',category._id)
                    //console.log(category)
                    self.link='/'+category.linkData.groupUrl+'/'+category.url;
                    if(category.linkData.parentGroup){
                        self.link+='?parentGroup='+category.linkData.parentGroup
                    }
                    $timeout(function(){
                        self.change()
                    },100)

                    //console.log(self.link)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function setSection(){
            $q.when()
                .then(function(){
                    return Sections.select();
                })
                .then(function(section){
                    console.log(section)
                    self.link='/'+section.url+'/category';
                    /*if (section.level===0){
                        self.link='/'+section.url+'/category';
                    }else{
                        self.link='/'+section.section.url+'/category?parentGroup='
                            +section.url+"&categoryList=allCategories";
                    }*/
                    $timeout(function(){
                        self.change()
                    },100)
                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function setStuff(){
            $q.when()
                .then(function(){
                    return Stuff.selectItem();
                })
                .then(function(stuff){
                    self.link=stuff.link;
                    if(self.change && typeof self.change =='function'){
                        $timeout(function(){
                            self.change()
                        },100)
                    }
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function setStuffForOrder(){
            $q.when()
                .then(function(){
                    return Stuff.selectItem();
                })
                .then(function(stuff){
                    self.link="orderStuffFromHP";
                    self.stuffurl=stuff.url;
                    if(self.change && typeof self.change =='function'){
                        $timeout(function(){
                            self.change()
                        },100)
                    }
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function setSubscription(){
            self.link='subscription';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function setBonus(){
            self.link='allBonus';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function setSubscriptionAdd(){
            self.link='subscriptionAdd';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function setFeedback(){
            self.link='feedback';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function setCall(){
            self.link='call';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function setStaticPage(){
            $q.when()
                .then(function(){
                    return Stat.selectItem();
                })
                .then(function(stat){
                    self.link='/stat/'+stat.url;
                    if(self.change && typeof self.change =='function'){
                        $timeout(function(){
                            self.change()
                        },100)
                    }
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function setDateTime(){
            self.link='dateTime';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function setAnyPage(){
            $q.when()
                .then(function(){
                    return $q(function(resolve,reject){
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: 'components/createLink/createAnyLink.html',
                            controller: function($uibModalInstance){
                                var self=this;
                                self.name=''
                                self.ok=function(){
                                    console.log(self.name)
                                    if(!self.name) {return}
                                    if(self.name[0]!='/' && self.name.indexOf('http')<0){
                                        self.name='/'+self.name;
                                    }
                                    $uibModalInstance.close(self.name.substring(0,100));
                                }
                                self.cancel = function () {
                                    $uibModalInstance.dismiss('cancel');
                                };
                            },
                            controllerAs:'$ctrl',
                        });
                        modalInstance.result.then(function (name) {
                            if(name){
                                resolve(name.substring(0,100))
                            }else{
                                reject('empty')
                            }

                        }, function (err) {
                            reject(err)
                        });
                    })
                })
                .then(function(link){
                    self.link=link;
                    if(self.change && typeof self.change =='function'){
                        $timeout(function(){
                            self.change()
                        },100)
                    }
                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function setHomePage(){
            self.link='/';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function setCatalog(){
            self.link='/group/category';
            if(self.change && typeof self.change =='function'){
                $timeout(function(){
                    self.change()
                },100)
            }
        }
        function deleteLink(){
            self.link='';
            $timeout(function(){
                self.change()
            },100)

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('newsList',newsListDirective)
        .directive('newsListTemplate',newsListTemplateDirective)
        .directive('newsCart',newsCartDirective)
        .directive('newsCart1',newsCartDirective1)
        .directive('newsCart2',newsCartDirective2)
        .directive('newsCart3',newsCartDirective3)
        .directive('newsCart4',newsCartDirective4)
        .directive('newsCart5',newsCartDirective5)
    function newsCartDirective(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart.html',
            restrict:'A'
        }
    }
    function newsCartDirective1(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart1.html',
            restrict:'A'
        }
    }
    function newsCartDirective2(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart2.html',
            restrict:'A'
        }
    }
    function newsCartDirective3(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart3.html',
            restrict:'A'
        }
    }
    function newsCartDirective4(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart4.html',
            restrict:'A'
        }
    }
    function newsCartDirective5(){
        return {
            templateUrl:'/views/template/partials/news/cart/news-cart5.html',
            restrict:'A'
        }
    }
    function newsListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: newsListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/news/newsList.html',
        }
    };
    function newsListTemplateDirective($stateParams){
        return {
            template:"<div ui-view></div></div><div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$http','$stateParams','global',function ($http,$stateParams,global) {
                var self=this;
                $http.get('/views/template/partials/news').then(function(response){
                    console.log(response)
                    self.content=response.data.html;
                    console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
            /*templateUrl: function () {
             return 'views/template/partials/News/itemPage/'+$stateParams.id;
             }*/
        }
    }

    function newsListTemplateDirective1(global){
        var s=(global.get('store').val.template.newsList)?global.get('store').val.template.newsList:'';
        return {
            scope: {
                actived:'@'
            },
            rescrict:"E",
            bindToController: true,
            controller: newsListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/news/newsList'+s+'.html',
            /*templateUrl:'views/'+global.get('store').val.template.folder+'/partials/news/newsList.html',
            templateProvider: function(global,$http) {

                var url = 'views/'+global.get('store').val.template.folder+'/partials/news/newsList.html';
                console.log(url)
                return $http.get(url).then(function(tpl){return tpl.data;});
            },*/
        }
    };
    newsListTemplateDirective.$inject=['global']
    newsListCtrl.$inject=['News','$state','global','$timeout','$anchorScroll','Photo','Confirm','Label'];
    function newsListCtrl(News,$state,global,$timeout,$anchorScroll,Photo,Confirm,Label){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        //self.moment=moment;
        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD-MMMM-YYYY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            date:{
                startDate: null, endDate: null
            }
        }
        self.$state=$state;
        self.Items=News;
        self.moment=moment;
        self.query={};
        self.paginate={page:0,rows:20,totalItems:0}
        self.newNews={name:'Новая иноформация',actived:false}
        self.data={rows:2}
        self.itemsArr2=[[],[]]
        self.itemsArr3=[[],[],[]]
        self.itemsArr4=[[],[],[],[]]
        self.getList=getList;
        self.saveField = saveField;
        self.searchNews=searchNews;
        self.createNews=createNews;
        self.deleteItem=deleteItem;
        self.setRows=setRows;

        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                return Label.getList({page:0,rows:100},{list:'news'})
                //console.log('Activated news list View');
            }).then(function (data) {
                console.log(data)
                self.labels=data
            });
        }
        function getList() {
            if(!Object.keys(self.query ).length && self.actived){
                self.query={actived:true}
            }
            return News.getList(self.paginate,self.query)
                .then(function(data) {
                    self.itemsArr2=data.divideArrayWithChunk(2);
                    self.itemsArr3=data.divideArrayWithChunk(3);
                    self.itemsArr4=data.divideArrayWithChunk(4);
                    self.items = data;
                    //console.log(self.data.rows)
                    $timeout(function (){
                        self.data.rows=setRows();
                        $anchorScroll();
                        //console.log(self.data.rows)
                    })

                    return self.items;
                });
        }
        function setRows(){
            return (global.get('functions').val.setRows)?
                global.get('functions').val.setRows():2
        }
        $(window).resize(function(){
            $timeout(function (){
                self.data.rows=setRows();
                //console.log(self.data.rows)
            })

        })

        function searchNews(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated news list View');
            });
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){

                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)


                },function(err){console.log(err)});
            },defer)
        };
        function cloneItem(item){
            var name;
            self.Items.create()
                .then(function (res) {
                    name=res;
                    return self.Items.getItem(item._id)
                })
                .then(function(master){
                    self.newItem=angular.copy(master)
                    self.newItem.name=name;
                    self.newItem.nameL={};

                    delete self.newItem._id
                    delete self.newItem.__v
                    delete self.newItem.url;
                    console.log( self.newItem)
                    self.newItem.blocks.forEach(function (block) {
                        delete block.img;
                        delete block._id;
                        if(block.type=='stuffs'){
                            if(block.stuffs && block.stuffs.length){
                                block.stuffs=block.stuffs.map(function (s) {
                                    return s._id
                                })
                            }
                        }
                        block.imgs=[]
                    })
                    //throw 'test'
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.master.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }

        function createNews(item){
            var name =(item)?item.name:''
            self.Items.create(name)
                .then(function(res){
                    name=res;
                    if(item){
                        return self.Items.get({_id:item._id,clone:'clone'}).$promise
                    }else{
                        return {name:res}
                    }

                } )
                .then(function(res){
                    if(res._id){
                        self.newNews=angular.copy(res)
                        self.newNews.send={date:null,quantity:0}
                        self.newNews.name=name;
                        self.newNews.actived=false;
                        delete self.newNews.date
                        delete self.newNews._id
                        delete self.newNews.url
                        delete self.newNews.__v;
                        self.newNews.nameL={}
                        self.newNews.blocks.forEach(function (block) {
                            delete block.img;
                            delete block._id;
                            if(block.type=='stuffs'){
                                if(block.stuffs && block.stuffs.length){
                                    block.stuffs=block.stuffs.map(function (s) {
                                        if(s._id){
                                            return s._id
                                        }else{
                                            return s
                                        }

                                    })
                                }
                            }
                            block.imgs=[]
                        })
                    }else{
                        self.newNews={actived:false}
                        self.newNews.name=name;
                    }


                    return self.Items.save(self.newNews).$promise
                } )
                .then(function(res){
                    self.newNews._id=res.id;
                    self.newNews.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newNews._id;
                    delete self.newNews._id
                    setTimeout(function(){
                        $state.go('frame.news.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    console.log(err)
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/News/'+item.url
            // console.log(folder)
            Confirm("удалить?" )
                .then(function(){
                    return News.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return getList();
                })
                .then(function(){
                    return Photo.deleteFolder('News',folder)
                })
                .catch(function(err){
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление новости')(err)
                    }

                })

            /*Stuff.Items.delete({_id:stuff._id} ).$promise.then(function(res){
             $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
             } ).catch(function(err){
             err = err.data||err
             exception.catcher('удаление товара')(err)
             })*/
        }


    }
})()

'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('newsItem',newsItemDirective)
        .directive('newsDetailTemplate',itemTemplateDirective);
    function itemTemplateDirective($stateParams){
        return {
            template:"<div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$http','$stateParams','global',function ($http,$stateParams,global) {
                var self=this;
                $http.get('views/template/partials/News/itemPage/'+$stateParams.id).then(function(response){
                    console.log(response)
                    self.content=response.data.html;
                    console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
            /*templateUrl: function () {
                return 'views/template/partials/News/itemPage/'+$stateParams.id;
            }*/
        }
    }
    function newsItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: newsItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/news/newsItem.html',
        }
    }
    newsItemCtrl.$inject=['News','$stateParams','$q','$uibModal','global','exception','Stuff','CreateContent','Email','seoContent','Photo','$resource','$anchorScroll','$timeout','FilterTags','BrandTags','Brands','Campaign','Category','$scope','Confirm','SetCSS'];
    function newsItemCtrl(News,$stateParams,$q,$uibModal,global,exception,Stuff,CreateContent,Email,seoContent,Photo,$resource,$anchorScroll,$timeout,FilterTags,BrandTags,Brands,Campaign,Category,$scope,Confirm,SetCSS){
        var self = this;
        self.Items=News;
        self.type='News'
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.listOfBlocksForNewsDetailPage=listOfBlocksForAll;
        self.listOfBlocks=listOfBlocksForAll;
        self.animationTypes=animationTypes;
        //console.log(self.listOfBlocksForNewsDetailPage)
        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD-MMMM-YYYY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            date:{
                startDate: null, endDate: null
            }
        }
        self.setStyles=setStyles;
        self.saveField=saveField;
        /*self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        self.addStuff=addStuff;
        self.movedStuff=movedStuff;
        self.deleteStuff=deleteStuff;*/
        self.sendEmail = sendEmail;
        var Store=$resource('/api/collections/Store/:_id',{_id:'@_id'});
        //*********************************************************************
        self.newBlock=null;
        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        self.filterBlocks=filterBlocks;
        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;
        self.clearDesc=clearDesc;
        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate();
        })
        /*var d = new Date();
        var n = d.getMonth();
        console.log(n)*/
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {
                //console.log('Activated item View');
            } ).catch(function(err){
                err = err.data||err
                exception.catcher('получение новости')(err)
            });
        }
        function getItem(id) {
            //console.log(id)
            return self.Items.getItem(id)
                //console.log(id)
                .then(function(data) {
                    console.log(data)
                    if(data && !data.blocks){
                        data.blocks=[];
                        saveField('blocks',[])
                    }
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                    })
                    /*data.blocks.sort(function (a,b) {
                        return a.index-b.index
                    })*/
                    //self.item.addProperties(data);
                    for(var key in data){
                        self.item[key]=data[key];
                    }

                    self.objShare=seoContent.setDataItem(data,true)
                    $anchorScroll();
                    /*$timeout(function(){
                        window.scrollTo(0, 0);
                    },400)*/
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField('blocks.'+block.i,block)
                })
        }
        function saveField(field,value,defer,indexImgs){
            //console.log(field)
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }
            defer =(defer)?defer:100;
            $timeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                //console.log(defer,value)
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }

        function addBlock(type){
            //console.log(type)
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;
            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            if(type=='slider' || type=='stuffs' || type=="campaign" || type=="filterTags"|| type=="brandTags"|| type=="brands"|| type=="categories"){
                o.imgs=[];
                update.update+=' imgs'
            }

            //console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    activate()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            //console.log(block,index)
            var o={_id:self.item._id};
            o['id']=block.id;
            var update={update:'id',embeddedName:'blocks'};
            update.embeddedPull=true;

            console.log(update,o)
            //return;
            Confirm('Подтверждаете?')
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    self.item.blocks.splice(index,1)
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })



        }
        function deleteSlide(block,index){
            Photo.deleteFiles('Stat',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            //console.log(index)
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/staticPage/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
            }, function () {
            });
        }
        var keyParts=global.get('store').val.template.news.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        // collections
        function addItemInBlock(block,$index) {
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    //console.log(link)
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link})
                    }

                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    //saveField('blocks.'+block.i,block)
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }


        function sendEmail(){

            var item = angular.copy(self.item)
            if(item.blocks && item.blocks.length){
                item.blocks.forEach(function (b) {
                    if(b.type=='stuffs'){
                        b.imgs=b.stuffs
                    }
                })
            }
            //console.log(item)
            var content =CreateContent.emailFromNews(item);
            //console.log(content)
            var d = new Date();
            var n = d.getMonth()+1;
            //console.log(global.get('store').val.seller)
            var ownerDomain;
            if(global.get('store').val.seller.mailgun && global.get('store').val.seller.mailgun['domain']){
                ownerDomain=global.get('store').val.seller.mailgun['domain'];
            }
            //console.log(ownerDomain)
            $q.when()
                .then(function(){
                    return ;
                })
                .then(function(){
                    return self.Items.viewEmail(self.item,content)
                })
                .then(function(data){
                    var lists= data.lists;
                    var except=data.except;
                    //console.log(global.get('store').val.mailData);

                    if( !ownerDomain &&
                        global.get('store').val.mailData && global.get('store').val.mailData.month &&
                        global.get('store').val.mailData.month==n
                        && global.get('store').val.mailData.quantity>500){
                        throw 'Превышен лимит количества писем в месяц'
                    }
                    var o={
                        content:content,lists:lists,
                        except:except,
                        subject:self.item.name.substring(0,50)
                    }
                    return Email.save(o).$promise

                })
                .then(function(res){
                    exception.showToaster('note','Сообщение','Рассылка отправлена');
                    if(!self.item.send){self.item.send={}}
                    self.item.send.date=Date.now();
                    //console.log(self.item.send)
                    saveField('send',self.item.send);
                    if(res.quantity && !ownerDomain){
                        if(!global.get('store').val.mailData){
                            global.get('store').val.mailData={
                                month:n,
                                quantity:res.quantity
                            }
                        }else{
                            if(!global.get('store').val.mailData.month){
                                global.get('store').val.mailData={
                                    month:n,
                                    quantity:res.quantity
                                }
                            }else{
                                if(global.get('store').val.mailData.month!=n){
                                    global.get('store').val.mailData={
                                        month:n,
                                        quantity:res.quantity
                                    }
                                } else{
                                    if(!global.get('store').val.mailData.quantity){
                                        global.get('store').val.mailData.quantity=0;
                                    }
                                    global.get('store').val.mailData.quantity+=res.quantity;
                                }
                            }
                        }
                        //save data in store about quantity mails
                        var o= {_id:global.get('store').val._id}
                        o['mailData']=global.get('store').val.mailData;
                        Store.save({update:'mailData'},o)
                    }

                } )
                .catch(function(err){
                    if(err){
                        exception.catcher('отправка писем')(err)
                    }

                })
        }
        function clearDesc(block) {
            console.log('???????????????')
            block.desc='';
            saveField('blocks.'+block.i+'.index',block.desc)
        }

        /*function movedSlide(){
            self.item.imgs.forEach(function(el,i){
                el.index=i;
            })
            self.saveField('imgs')
        }
        function deleteSlide(images,index){
            //var data={file:images.img,id:self.item._id,_id:'fileDeleteFromImgs'}
            //News.save(data).$promise
            Photo.deleteFiles('News',[images.img])
            .then(function(response) {
                self.item.imgs.splice(index,1)
                self.saveField('imgs')
            }, function(err) {
                console.log(err)
            });

        }
        function editSlide(slide,index){
            //console.log(slide)
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/news/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                resolve: {
                    slide: function () {
                        return slide;
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                console.log(slide)
                self.saveField('imgs')
            }, function () {
            });
        }
        function addStuff(){
            $q.when()
                .then(function(){
                    //return selectStuffModalService.selectStuff();
                    return Stuff.selectItem()
                })
                .then(function(stuff){
                    //console.log(stuff)
                    if(stuff){
                        if(!self.item.stuffs){self.item.stuffs=[];}
                        if(!self.item.stuffs.some(function(el){return el._id==stuff._id})){
                            self.item.stuffs.push(stuff);
                            self.saveField('stuffs');
                        }

                    }
                })
                .catch(function(err){
                    err = err.data||err
                    if(err){
                        exception.catcher('получение новости')(err)
                    }
                })

        }
        function movedStuff(){
            self.saveField('stuffs')
        }
        function deleteStuff(index){
            self.item.stuffs.splice(index,1);
            self.saveField('stuffs')
        }*/







    }
    //=====================newsTemplateDirective
    /*function itemTemplateDirective(global){
        var s=(global.get('store').val.template.newsTempl)?global.get('store').val.template.newsTempl:'';
        return {
            scope: {},
            bindToController: true,
            controller: newsItemCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/news/newsDetail'+s+'.html',
            restrict:'E'
        }
    }*/
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('News', newsService);
    newsService.$inject=['$resource','$uibModal','$q','global'];
    function newsService($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/News/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
            viewEmail:viewEmail,
            select:selectItem,
            search:search
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            /*if(global.get('crawler').val){
                query={$and:[{store:global.get('store').val._id},{actived:true}]}
            }*/
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }

            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function search(search,setData){
            // setData - если ищем товар в админке для дальнейшего использования необходимо получить с сервера все данные
            var data ={search:search,setData:setData};
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                //response.shift()

                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(name){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/news/createNews.html',
                    controller: function($uibModalInstance,name){
                        var self=this;
                        self.name=name;
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    resolve:{
                        name:function () {
                            return name
                        }
                    }
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        function viewEmail(item,content){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/news/viewEmail.html',
                    controller: function($q,$uibModalInstance,SubscibtionList,item,content){
                        var self=this;
                        self.item=item;
                        self.except=false;
                        self.list
                        self.content=content;
                        self.ok=function(){
                            $uibModalInstance.close({lists:self.lists,except:self.except});
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                        activate()
                        function activate(){
                            $q.when()
                                .then(function() {
                                    return SubscibtionList.getList( {page: 0, rows: 1, items: 0}, {} )
                                })
                                .then(function(data){

                                    if(data && data[0]){
                                        if(!data[0].list){data[0].list=[]}
                                        for(var key in data[0].list){
                                            if(!data[0].list[key]){
                                                delete data[0].list[key]
                                            }
                                        }
                                        self.subscibtionList = data[0];
                                    }else{
                                        self.subscibtionList={list:[]}
                                    }
                                    //console.log(self.subscibtionList)
                                })
                        }
                    },
                    size:'lg',
                    controllerAs:'$ctrl',
                    resolve:{
                        item:function(){
                            return item;

                        },
                        content:function(){
                            return content;

                        }
                    }
                });
                modalInstance.result.then(function (item) {
                   resolve(item)
                }, function (err) {
                    reject(err)
                });
            })

        }
        function selectItem(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/news/selectNews.html',
                    controller: function(News,$uibModalInstance,$q){
                        var self=this;
                        self.stuffs=[];
                        self.name='';
                        var query;
                        var paginate={page:0,rows:30,items:0}
                        self.search = function(name){
                            if (name.length<3){return}
                            query={name:name}



                            News.search(name,true)
                                .then(function(res){
                                    self.items=res;
                                    //console.log(self.items)
                                })


                            /*News.getList(paginate,query).then(function(res){
                                self.items=res;
                            })*/
                        }
                        self.selectItem=function(item){
                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',
                });

                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('lookbookList',lookbookListDirective)
        .directive('lookbookTemplate',lookbookListTemplateDirective);
    function lookbookListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: lookbookListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/lookbook/lookbookList.html',
        }
    };
    lookbookListTemplateDirective.$inject=['global']
    function lookbookListTemplateDirective(global){
        var s=(global.get('store').val.template.newsList)?global.get('store').val.template.newsList:'';
        return {
            scope: {
                actived:'@'
            },
            rescrict:"E",
            bindToController: true,
            controller: lookbookListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/lookbook/lookbookList'+s+'.html',
        }
    };

    lookbookListCtrl.$inject=['Lookbook','$state','global','exception','Confirm','Photo','$timeout'];
    function lookbookListCtrl(Lookbook,$state,global,exception,Confirm,Photo,$timeout){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD-MMMM-YYYY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            date:{
                startDate: null, endDate: null
            }
        }
        self.$state=$state;
        self.Items=Lookbook;
        self.moment=moment;
        self.query={};
        self.paginate={page:0,rows:50,totalItems:0}
        self.newItem={name:'Новая иноформация',actived:false}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.createItem=createItem;
        self.deleteItem=deleteItem;
        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                //console.log('Activated news list View');
            });
        }
        function getList() {
            if(!Object.keys(self.query ).length && self.actived){
                self.query={actived:true}
            }
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItem(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated list View');
            });
        }
        function saveField(item,field,defer){
            defer =defer||0
            setTimeout(function(){
                var o={_id:item._id};
                o[field]=item[field]
                return self.Items.save({update:field},o ).$promise.then(function(){
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                },function(err){console.log(err)});
            },defer)
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={actived:false}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    return getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    $state.go('frame.lookbook.item',{id:id})
                })
                .catch(function(err){
                    delete self.newItem._id
                    err = err.data||err
                    exception.catcher('создание объекта')(err)
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Lookbook/'+item.url
            console.log(folder)
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return self.getList();
                })
                .then(function(){
                    Photo.deleteFolder('Lookbook',folder)
                })
                .catch(function(err){
                    if(!err){return}
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление объета')(err)
                    }

                })
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('lookbookItem',lookbookItemDirective)
    function lookbookItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: lookbookItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/lookbook/lookbookItem.html',
        }
    }
    lookbookItemCtrl.$inject=['Lookbook','$stateParams','$q','global','exception','Photo','$timeout','$scope','$uibModal'];
    function lookbookItemCtrl(Lookbook,$stateParams,$q,global,exception,Photo,$timeout,$scope,$uibModal){
        //console.log('???');
        var self = this;
        self.Items=Lookbook;
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.datePickerOptions ={
            locale: {
                applyClass: 'btn-green',
                applyLabel: "Выбрать",
                fromLabel: "от",
                toLabel: "до",
                cancelLabel: 'Отменить',
                customRangeLabel: 'Прозвольный диапазон',
                format:"DD-MMMM-YYYY",
                daysOfWeek: ['Пн', 'Вт', 'Ср', 'Чт', 'Пн', 'Сб', 'Вс'],
                firstDay: 1,
                monthNames: ['Январь', 'Февраль', 'Март', 'Апрель','Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь',
                    'Ноябрь', 'Декабрь'
                ]
            },
            singleDatePicker: true,
            date:{
                startDate: null, endDate: null
            }
        }
        self.saveField=saveField;
        self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.filterBlocks=filterBlocks;
        self.editSlide=editSlide;
        //********************activate***************************
        activate();
        $scope.$on('changeLang',function(){
            activate()
        })
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {
                //console.log('Activated item View');
            } ).catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        function getItem(id) {
            //console.log(id)
            return self.Items.getItem(id)
                //console.log(id)
                .then(function(data) {
                    for(var key in data){
                        self.item[key]=data[key]
                    }
                    //self.item = data;
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function saveField(field,defer){
            //console.log(field)
            defer =defer||0
            setTimeout(function(){
                var o={_id:self.item._id};
                o[field]=self.item[field]
                self.Items.save({update:field},o,function () {
                    global.set('saving',true);
                    $timeout(function(){
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function editSlide(index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/staticPage/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return self.item.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('imgs')
            }, function () {
            });
        }
        var keyParts=global.get('store').val.template.stat.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        function movedSlide(){
            self.item.imgs.forEach(function(el,i){
                el.index=i;
            })
            self.saveField('imgs')
        }
        function deleteSlide(index){
            //var data={file:images.img,id:self.item._id,_id:'fileDeleteFromImgs'}
           // self.Items.save(data).$promise
//console.log(self.item.imgs,index)
                Photo.deleteFiles('Lookbook',[self.item.imgs[index].img])
            .then(function(response) {
                self.item.imgs.splice(index,1)
                self.saveField('imgs')
            }, function(err) {
                console.log(err)
            });
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Lookbook', lookbookService);
    lookbookService.$inject=['$resource','$uibModal','$q','global'];
    function lookbookService($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/Lookbook/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            return Items.query(data).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/lookbook/createLookbook.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Master', serviceFoo);
    serviceFoo.$inject=['$resource','$uibModal','$q','global'];
    function serviceFoo($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/Master/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
           if(!paginate){
               paginate={page:0}
           }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                //console.log(response)
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                //.catch(getItemFailed);
            function getItemComplete(response) {
                if(response && response.blocks && response.blocks.length){
                    response.blocks.forEach(function (b) {
                        if(b.type=='stuffs'){
                            if(b.stuffs && b.stuffs.length){
                                b.imgs=b.stuffs.map(function(s){
                                    if(s.gallery && s.gallery.length && s.gallery[0].img){
                                        s.img=s.gallery[0].img;
                                    }
                                    return s;
                                });
                            }else{b.imgs=[]}
                        }
                    })
                }
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/CONTENT/master/createMaster.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,50))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
        
        /*selectServiceCtrl.$inject=['$uibModalInstance'];
        function selectServiceCtrl($uibModalInstance){
            var self=this;
            console.log(services )
            //self.services=services;
            self.ok=function(item){
                $uibModalInstance.close(item);
            }
            self.cancel = function () {
                $uibModalInstance.dismiss();
            };
        }*/
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('masterList',masterListDirective)
        .directive('masterListTemplate',masterListTemplateDirective)
        .directive('mastersStaticPage',mastersStaticPage);
    function mastersStaticPage(){
        return {
            scope: {},
            bindToController: true,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/stat/masters/masters.html',
            controller:function(global){
                console.log(global.get('masters').val)
                var self=this;
                self.global=global;
                self.mobile=global.get('mobile').val;
            }
        }
    };

    function masterListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: masterListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/master/masterList.html',
        }
    };
    function masterListTemplateDirective(global){
        var s=(global.get('store').val.template.masterList)?global.get('store').val.template.masterList:'';
        return {
            scope: {},
            rescrict:"E",
            bindToController: true,
            controller: masterListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/master/masterList'+s+'.html',
        }
    };
    //masterListTemplateDirective.$inject=['global']
    masterListCtrl.$inject=['Master','$state','global','Confirm','$q','exception','Photo','$timeout','Label'];
    function masterListCtrl(Master,$state,global,Confirm,$q,exception,Photo,$timeout,Label){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        //self.moment=moment;
        self.$state=$state;
        self.Items=Master;
        self.query={};
        self.labels=[]
        self.paginate={page:0,rows:50,totalItems:0}
        self.newItem={name:'имя мастера'}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.deleteItem=deleteItem;
        self.createItem=createItem;
        self.dropCallback=dropCallback;
        self.cloneItem=cloneItem;
        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                return Label.getList({page:0,rows:100},{list:'master'})
                //console.log('Activated news list View');
            }).then(function (data) {
                self.labels=data
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItem(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated list View');
            });
        }
        function saveField(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            self.Items.save({update:field},o ,function () {
                global.set('saving',true)
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            })
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.master.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }
        function cloneItem(item){
            var name;
            self.Items.create()
                .then(function (res) {
                    name=res;
                    return self.Items.getItem(item._id)
                })
                .then(function(master){
                    self.newItem=angular.copy(master)
                    self.newItem.name=name;
                    self.newItem.nameL={};

                    delete self.newItem._id
                    delete self.newItem.__v
                    delete self.newItem.url;
                    console.log( self.newItem)
                    self.newItem.blocks.forEach(function (block) {
                        delete block.img;
                        delete block._id;
                        if(block.type=='stuffs'){
                            if(block.stuffs && block.stuffs.length){
                                block.stuffs=block.stuffs.map(function (s) {
                                    return s._id
                                })
                            }
                        }
                        block.imgs=[]
                    })
                    //throw 'test'
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.master.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Master/'+item.url
            // console.log(folder)


            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return self.getList();
                })
                .then(function(){
                    Photo.deleteFolder('Master',folder)
                })
                .catch(function(err){
                    if(!err){return}
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление объекта')(err)
                    }

                })

            /*Stuff.Items.delete({_id:stuff._id} ).$promise.then(function(res){
             $scope.getList($scope.paginate.page,$scope.paginate.rows,'reload');
             } ).catch(function(err){
             err = err.data||err
             exception.catcher('удаление товара')(err)
             })*/
        }
        function dropCallback(item){
            var i=0;
            //http://stackoverflow.com/questions/28983424/make-angular-foreach-wait-for-promise-after-going-to-next-object
            setTimeout(function(){
                self.items.reduce(function(p, item) {
                    return p.then(function() {
                        i++;
                        item.index=i;
                        return saveField(item,'index')
                    });
                }, $q.when(true)).then(function(){
                    console.log(self.items.map(function(el){return el.index}))
                });
            },50)


            /*setTimeout(function(){
                self.items.forEach(function(m,i){
                    console.log(i)
                    m.index=i;
                    saveField(item,'index')
                })
            })*/
            return item;
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('masterItem',masterItemDirective)
        .directive('masterDetailTemplate',masterTemplateDirective)
        .directive('masterSchedule',masterScheduleDirective);
    function masterItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: masterItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/master/masterItem.html',
        }
    }
    masterItemCtrl.$inject=['Master','$stateParams','$q','$uibModal','global','exception','Stuff','Photo','$scope','$timeout','Confirm','SetCSS','$user','Workplace','$rootScope'];
    function masterItemCtrl(Master,$stateParams,$q,$uibModal,global,exception,Stuff,Photo,$scope,$timeout,Confirm,SetCSS,$user,Workplace,$rootScope){
        var self = this;
        self.Items=Master;
        self.type='Master'
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.listOfBlocksForMasterPage=listOfBlocksForAll;
        self.listOfBlocks=listOfBlocksForAll;
        self.moment=moment;
        self.saveField=saveField;

        self.setStyles=setStyles;

        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        //self.movedSlide=movedSlide;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;


        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;

        self.deleteReview=deleteReview;
        self.toggleEdit=toggleEdit;
        self.addReview=addReview;
        self.toggleAdd =toggleAdd;
        self.saveReview=saveReview;
        self.newReview={name:'',desc:'',date:Date.now()}
        self.savePhone=savePhone;
        self.refreshUsers=refreshUsers;
        self.changeUser=changeUser;
        self.clearUser=clearUser;

        self.workplaces=[];
        self.deleteWorkplace=deleteWorkplace;
        self.addWorkplace=addWorkplace;
        self.getWorkplaces=getWorkplaces;


        //********************activate***************************
        activate();
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {
                //console.log('Activated item View');
                if(self.item.user){
                    return $user.getItem(self.item.user)
                }
            } ).then(function (user) {
                if(user){
                    if(user.profile && user.profile.phone && user.profile.phone[0]=="+"){
                        user.profile.phone=user.profile.phone.substring(1)
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length<10){
                        while(user.profile.phone.length<10){
                            user.profile.phone+='0'
                        }
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length==10){
                        user.profile.phone='38'+user.profile.phone
                    }
                    user.phone=(user.profile)?user.profile.phone:null;
                    self.item.user=user
                }
            }).catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        $scope.$on('changeLang',function(){
            activate();
        })
        function getItem(id) {
            //console.log(id)
            return self.Items.getItem(id)
                //console.log(id)
                .then(function(data) {
                    //self.item.addProperties(data);
                    if(data && !data.blocks){
                        data.blocks=[];
                        saveField('blocks',[])
                    }
                    var bl=data.blocks.filter(function (b) {
                        return b
                    })
                    if(bl.length!=data.blocks.length){
                        saveField('blocks',bl)
                        data.blocks=bl;
                    }
                    data.blocks.forEach(function (b,i) {
                        if(b.type=='stuffs' && b.stuffs.length){
                            //b.imgs=b.stuffs
                            b.stuffs=b.stuffs.map(function (s) {
                                return (s._is || s)
                            })
                        }
                        b.i=i;
                    })
                    data.blocks.sort(function (a,b) {
                        return a.index-b.index
                    })
                    if(data.notification==undefined){
                        data.notification=0
                    }
                    self.item=data;
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                    console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    if(block.elements){
                        saveField('blocks.'+block.i+'.elements',block.elements)
                    }
                    if(block.blockStyle){
                        saveField('blocks.'+block.i+'.blockStyle',block.blockStyle)
                    }

                })
        }
        function saveField(field,value,defer,indexImgs){
            //console.log(field)
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }

            defer =(defer)?defer:100;
            setTimeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                //console.log(defer,value)
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };

        function addBlock(type){
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;
            console.log(self.item.blocks)
            if(!type){return}
            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            o.imgs=[];
            update.update+=' imgs'
            /*if(type=='slider' || type=='stuffs' || type=="campaign" || type=="filterTags"|| type=="brandTags"|| type=="brands"|| type=="categories"){
                o.imgs=[];
                update.update+=' imgs'
            }
*/
            //console.log(update,o)
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    refreshBlocks()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            //console.log(block,index)
            var o={_id:self.item._id};
            var update={update:'_id_id',embeddedName:'blocks'};
            o['id']=block.id;
            update.embeddedPull=true;

            Confirm('потверждаете?')
                .then(function () {
                    self.item.blocks.splice(index,1)
                    if(!block._id){
                        update={update:'blocks'};
                        o['blocks']=self.item['blocks']
                    } else{
                        o['_id_id']=block._id;
                        update={update:'_id_id',embeddedName:'blocks'};
                        update.embeddedPull=true;
                    }
                    //console.log(update,o)
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })
                .then(function () {
                    activate()
                })



        }

        /*function movedSlide(){
            self.item.imgs.forEach(function(el,i){
                el.index=i;
            })
            self.saveField('imgs')
        }*/
        function deleteSlide(block,index){
            Photo.deleteFiles('Master',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/CONTENT/master/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        //console.log(global.get('store').val.template.master)
        if(!global.get('store').val.template.master){
            global.get('store').val.template.master={parts:[]}
        }
        var keyParts=global.get('store').val.template.master.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        function savePhone(phone) {
            saveField('phone',phone)
        }
        function clearUser() {
            console.log(self.user)
            changeUser(self.user)
            /*self.item.user=null;
            saveField('user',null)*/



        }

        function refreshUsers(phone){
            if (phone.length<3){return}
            self.cachePhone=phone
            searchUser(phone)
        }
        function searchUser(phone){
            var q= {$or:[{'profile.phone':phone},{name:phone},{email:phone}]}
            $user.getList({page:0,rows:20},q).then(function(res){
                self.users=res.map(function (user) {
                    if(user.profile && user.profile.phone && user.profile.phone[0]=="+"){
                        user.profile.phone=user.profile.phone.substring(1)
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length<10){
                        while(user.profile.phone.length<10){
                            user.profile.phone+='0'
                        }
                    }
                    if(user.profile && user.profile.phone && user.profile.phone.length==10){
                        user.profile.phone='38'+user.profile.phone
                    }
                    user.phone=(user.profile)?user.profile.phone:null;
                    return user
                });
            })
        }
        function changeUser(user) {
            /*console.log(self.item.user)
            console.log(user)*/
            if(self.item.user && self.item.user._id){
                if(!user || user._id!=self.item.user._id){
                    var o ={_id:self.item.user._id,master:null}
                    $user.save({update:'master'},o,function () {
                        //exception.showToaster('succes','статус','обновлено!')
                    })
                }
            }


            var u=null;
            if(user){u=user._id;self.item.user=user}else{self.item.user=null;}

            saveField('user',u)
            self.user=null;


            if(self.item.user && self.item.user._id){
                var o ={_id:self.item.user._id,master:self.item._id}
                $user.save({update:'master'},o,function () {
                    //exception.showToaster('succes','статус','обновлено!')
                })
            }
        }

        function getWorkplaces() {
            Workplace.getList({page:0,rows:50}).then(function(res){
                console.log(res,res && res.length)
                if(res && res.length){
                    self.workplaces=res;
                    console.log(self.workplaces)
                }

            })
        }
        function addWorkplace(wp) {
            console.log(wp)
            if(!self.item.workplaces){self.item.workplaces=[]}
            self.item.workplaces=self.item.workplaces.filter(function (wp) {
                return wp
            })
            var value=self.item.workplaces.map(function (wp) {
                return wp._id
            });
            if(value.indexOf(wp._id)>-1){return}else{
                value.push(wp._id)
                self.item.workplaces.push(wp)
            }
            console.log(value)
            saveField('workplaces',value);
            $timeout(function () {
                //self.workplace=null;
            },1000)

        }
        function deleteWorkplace(idx) {
            if(!self.item.workplaces){self.item.workplaces=[]}
            self.item.workplaces.splice(idx,1)
            var value=self.item.workplaces.map(function (wp) {
                return wp._id
            });
            saveField('workplaces',value);
        }



// collections
        function addItemInBlock(block,$index) {
            //console.log(block)
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(block.type=='stuffs'){
                        if(block.stuffs && block.stuffs.length && block.stuffs.some(function(s){ if(s && s._id){return s._id==item._id}else{return s==item._id}})){
                            throw 'такой объект уже есть'
                        }
                    }
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link;
                    name=item.name;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    //console.log(link)
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link,_id:item._id};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link,_id:item._id})
                    }

                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    if(block.type=='stuffs'){
                        block.stuffs=block.imgs.map(function (img) {
                            return img._id
                        })
                        saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                    }


                    //saveField('blocks.'+block.i,block)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('добавление')(err)
                    }
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
                if(block.type=='stuffs'){
                    block.stuffs=block.imgs.map(function (img) {
                        return img._id
                    })
                    saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                }
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
            if(block.type=='stuffs'){
                block.stuffs=block.imgs.map(function (img) {
                    return img._id
                })
                saveField('blocks.'+block.i+'.stuffs',block.stuffs)
            }
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }




        function toggleEdit(item){
            item.editMode = !item.editMode;
        }
        function toggleAdd() {
            self.addMode = !self.addMode;
        }
        function saveReview(item){
            item.name=item.name.substring(0,20);
            item.desc=item.desc.substring(0,200);
            delete item.editMode
            saveField('reviews',item.reviews);

        }
        function deleteReview(i){
            self.item.reviews.splice(i,1);
            saveField('reviews',item.reviews);
        }
        function addReview(admin){
            //self.newReview;
            if(admin){
                var o =self.newReview;
            }else{
                var o={name:global.get('user').val.profile.fio||global.get('user').val.name,
                    date:Date.now(),
                    desc:self.newReviewText.substring(0,200)
                }
            }
            self.newReviewText='';
            self.unableAddReview=false;
            if(!self.item.reviews){
                self.item.reviews=[];
            }
            self.item.reviews.unshift(o)
            saveField('reviews',self.item.reviews);
            if(admin){
                toggleAdd()
            }
        }
    }

    //=====================newsTemplateDirective
    /*function masterTemplateDirective(global){
        var s=(global.get('store').val.template.masterTempl)?global.get('store').val.template.masterTempl:'';
        return {
            scope: {},
            bindToController: true,
            controller: masterItemCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/master/masterDetail'+s+'.html',
            restrict:'E'
        }
    }*/
    function masterTemplateDirective($stateParams){
        return {
            template:"<div ng-bind-html='$ctrl.content|unsafe'></div>",
            bindToController: true,
            scope: {},
            controllerAs: '$ctrl',
            controller: ['$http','$stateParams','global',function ($http,$stateParams,global) {
                var self=this;
                $http.get('views/template/partials/Master/itemPage/'+$stateParams.id).then(function(response){
                    console.log(response)
                    self.content=response.data.html;
                    console.log(response.data.titles)
                    global.set('titles',response.data.titles)
                })
            }],
        }
    }
    function masterScheduleDirective($stateParams){
        return {
            bindToController: true,
            scope: {
                master:'@'
            },
            controllerAs: '$ctrl',
            controller: masterScheduleCtrl,
            templateUrl:'components/CONTENT/master/masterSchedule.html'
        }
    }
    masterScheduleCtrl.$inject=['$http','$stateParams','global']
    function masterScheduleCtrl($http,$stateParams,global) {
        var self=this;
        console.log('init',self.master)
    }
})()

'use strict';
(function(){
    angular.module('gmall.services')
        .service('GroupStuffs', serviceFoo);
    serviceFoo.$inject=['$resource','$uibModal','$q','global'];
    function serviceFoo($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/GroupStuffs/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
           if(!paginate){
               paginate={page:0}
           }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
                //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                //console.log(response)
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                //.catch(getItemFailed);
            function getItemComplete(response) {
                if(response && response.stuffs && response.stuffs.length){
                    response.stuffs.forEach(function (s) {
                        if(s.gallery && s.gallery.length && s.gallery[0].img){
                            s.img=s.gallery[0].img;
                        }
                    })
                }
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/CONTENT/groupStuffs/createItem.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,50))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .directive('groupStuffsList',groupStuffsListDirective)
        /*.directive('masterListTemplate',masterListTemplateDirective)
        .directive('mastersStaticPage',mastersStaticPage);*/
    function mastersStaticPage(){
        return {
            scope: {},
            bindToController: true,
            controllerAs: '$ctrl',
            templateUrl: 'views/template/partials/stat/masters/masters.html',
            controller:function(global){
                console.log(global.get('masters').val)
                var self=this;
                self.global=global;
                self.mobile=global.get('mobile').val;
            }
        }
    };

    function groupStuffsListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: groupStuffsListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/groupStuffs/groupStuffsList.html',
        }
    };
    function masterListTemplateDirective(global){
        var s=(global.get('store').val.template.masterList)?global.get('store').val.template.masterList:'';
        return {
            scope: {},
            rescrict:"E",
            bindToController: true,
            controller: masterListCtrl,
            controllerAs: '$ctrl',
            templateUrl:'views/template/partials/master/masterList'+s+'.html',
        }
    };
    //masterListTemplateDirective.$inject=['global']
    groupStuffsListCtrl.$inject=['GroupStuffs','$state','global','Confirm','$q','exception','Photo','$timeout'];
    function groupStuffsListCtrl(GroupStuffs,$state,global,Confirm,$q,exception,Photo,$timeout){
        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$state;
        self.Items=GroupStuffs;
        self.query={};
        self.paginate={page:0,rows:20,totalItems:0}
        self.newItem={name:'имя мастера'}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.deleteItem=deleteItem;
        self.createItem=createItem;
        self.dropCallback=dropCallback;
        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                //console.log('Activated news list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItem(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated list View');
            });
        }
        function saveField(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            return self.Items.save({update:field},o ).$promise.then(function () {
                global.set('saving',true)
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            });
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.groupStuffs.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание группы')(err)
                    }
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/GroupStuffs/'+item.url
            // console.log(folder)


            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return self.getList();
                })
                .then(function(){
                    Photo.deleteFolder('GroupStuffs',folder)
                })
                .catch(function(err){
                    if(!err){return}
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление объекта')(err)
                    }
                })
        }
        function dropCallback(item){
            var i=0;
            //http://stackoverflow.com/questions/28983424/make-angular-foreach-wait-for-promise-after-going-to-next-object
            setTimeout(function(){
                self.items.reduce(function(p, item) {
                    return p.then(function() {
                        i++;
                        item.index=i;
                        return saveField(item,'index')
                    });
                }, $q.when(true)).then(function(){
                    console.log(self.items.map(function(el){return el.index}))
                });
            },50)
            return item;
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.directives')
        .directive('groupStuffsItem',groupStuffsItemDirective)
    function groupStuffsItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: groupStuffsItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/groupStuffs/groupStuffsItem.html',
        }
    }
    groupStuffsItemCtrl.$inject=['GroupStuffs','$stateParams','$q','$uibModal','global','exception','Stuff','Photo','$scope','$timeout','Confirm','Category'];
    function groupStuffsItemCtrl(GroupStuffs,$stateParams,$q,$uibModal,global,exception,Stuff,Photo,$scope,$timeout,Confirm,Category){
        var self = this;
        self.Items=GroupStuffs;
        self.type='GroupStuffs'
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.moment=moment;
        self.saveField=saveField;


        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;
        self.changeCategory=changeCategory;
        self.deleteCategory=deleteCategory;


        //********************activate***************************
        activate();
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {
            }).catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        $scope.$on('changeLang',function(){
            activate();
        })
        function getItem(id) {
            //console.log(id)
            return self.Items.getItem(id)
                //console.log(id)
                .then(function(data) {
                    if(data.category && global.get('categoriesO').val[data.category]){
                        data.category=global.get('categoriesO').val[data.category];
                    }
                    self.item=data;
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function saveField(field,defer){
            console.log(field)
            defer =(defer)?defer:100;
            setTimeout(function(){
                var o={_id:self.item._id};
                if(field=='stuffs'){
                    var value = self.item['stuffs'].map(function (s) {
                        return s._id
                    })
                }else if(field=='category'){
                    if(self.item.category &&self.item.category._id){
                        var value =self.item.category._id;
                    }else{
                        var value =  null
                    }
                }else{
                    var value =  self.item[field]
                }
                o[field]=value;
                var query={update:field}
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };


        function addItemInBlock(index) {
            var model=Stuff
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    item.img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                    if(!self.item.stuffs){
                        self.item.stuffs=[];
                    }
                    if(typeof index=='undefined'){
                        self.item.stuffs.push(item)
                    }else{
                        self.item.stuffs[index]=item
                    }

                    saveField('stuffs')

                })
        }
        function movedItem(item) {
            $timeout(function(){
                saveField('stuffs')
            },100)
            return item;
        }
        function deleteItemFromBlock($index) {
            Confirm('удалить?').then(function () {
                self.item.stuffs.splice($index,1);
                saveField('stuffs')
            })
        }
        function changeItem($index) {
            addItemInBlock($index)
        }

        function changeCategory() {
            $q.when()
                .then(function(){
                    var categoryId=(self.item.category && self.item.category._id)?self.item.category._id:null
                    return Category.select(categoryId,null,null,'groupStuffs');
                })
                .then(function(selectedCategory){
                    self.item.category=selectedCategory;
                    saveField('category')
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('выбор категории')(err)
                    }
                })
        }
        function deleteCategory() {
            self.item.category=null;
            saveField('category')
        }
    }
})()

'use strict';
(function(){

    angular.module('gmall.services')
        .service('Workplace', serviceFoo);
    angular.module('gmall.directives')
        .directive('workplaceList',itemListDirective)
        .directive('workplaceItem',workplaceItemDirective);
    function itemListDirective(){
        return {
            scope: {},
            bindToController: true,
            controller: itemListCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/workplace/workplaceList.html',
        }
    };
    function workplaceItemDirective(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: ItemCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/CONTENT/workplace/workplaceItem.html',
        }
    }
    itemListCtrl.$inject=['Workplace','$state','global','Confirm','$q','exception','Photo','$timeout'];
    function itemListCtrl(Items,$state,global,Confirm,$q,exception,Photo,$timeout){

        var self = this;
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.$state=$state;
        self.Items=Items;
        self.query={};
        self.paginate={page:0,rows:20,totalItems:0}
        self.newItem={name:'наименование'}
        self.getList=getList;
        self.saveField = saveField;
        self.searchItem=searchItem;
        self.deleteItem=deleteItem;
        self.createItem=createItem;
        self.dropCallback=dropCallback;
        self.cloneItem=cloneItem;
        //*******************************************************
        activate();

        function activate() {
            return getList().then(function() {
                //console.log('Activated news list View');
            });
        }
        function getList() {
            return self.Items.getList(self.paginate,self.query)
                .then(function(data) {
                    self.items = data;
                    return self.items;
                });
        }
        function searchItem(searchStr){
            if(searchStr){
                self.query = {name:searchStr.substring(0,10)};
            }else{
                self.query = {};
            }

            self.paginate.page=0;
            return getList().then(function() {
                console.log('Activated list View');
            });
        }
        function saveField(item,field){
            var o={_id:item._id};
            o[field]=item[field]
            self.Items.save({update:field},o ,function () {
                global.set('saving',true)
                $timeout(function () {
                    global.set('saving',false);
                },1500)
            })
        };
        function createItem(){
            self.Items.create()
                .then(function(res){
                    self.newItem={}
                    self.newItem.name=res;
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.workplace.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание мастера')(err)
                    }
                })
        }
        function cloneItem(item){
            var name;
            self.Items.create()
                .then(function (res) {
                    name=res;
                    return self.Items.getItem(item._id)
                })
                .then(function(master){
                    self.newItem=angular.copy(master)
                    self.newItem.name=name;
                    self.newItem.nameL={};

                    delete self.newItem._id
                    delete self.newItem.__v
                    delete self.newItem.url;
                    console.log( self.newItem)
                    self.newItem.blocks.forEach(function (block) {
                        delete block.img;
                        delete block._id;
                        if(block.type=='stuffs'){
                            if(block.stuffs && block.stuffs.length){
                                block.stuffs=block.stuffs.map(function (s) {
                                    return s._id
                                })
                            }
                        }
                        block.imgs=[]
                    })
                    //throw 'test'
                    return self.Items.save(self.newItem).$promise
                } )
                .then(function(res){
                    self.newItem._id=res.id;
                    self.newItem.url=res.url;
                    self.paginate.page=0;
                    getList(self.paginate);
                })
                .then(function(){
                    var id=self.newItem._id;
                    delete self.newItem._id
                    setTimeout(function(){
                        $state.go('frame.workplace.item',{id:id})
                    },100)

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('создание объекта')(err)
                    }
                })
        }
        function deleteItem(item){
            var folder='images/'+global.get('store').val.subDomain+'/Workplace/'+item.url
            Confirm("удалить???" )
                .then(function(){
                    return self.Items.delete({_id:item._id} ).$promise;
                } )
                .then(function(){
                    return self.getList();
                })
                .then(function(){
                    Photo.deleteFolder('Workplace',folder)
                })
                .catch(function(err){
                    if(!err){return}
                    err = (err &&err.data)||err
                    if(err){
                        exception.catcher('удаление объекта')(err)
                    }

                })
        }
        function dropCallback(item){
            var i=0;
            //http://stackoverflow.com/questions/28983424/make-angular-foreach-wait-for-promise-after-going-to-next-object
            setTimeout(function(){
                self.items.reduce(function(p, item) {
                    return p.then(function() {
                        i++;
                        item.index=i;
                        return saveField(item,'index')
                    });
                }, $q.when(true)).then(function(){
                    console.log(self.items.map(function(el){return el.index}))
                });
            },50)
            return item;
        }
    }

    ItemCtrl.$inject=['Workplace','$stateParams','$q','$uibModal','global','exception','Stuff','Photo','$scope','$timeout','Confirm','SetCSS'];
    function ItemCtrl(Items,$stateParams,$q,$uibModal,global,exception,Stuff,Photo,$scope,$timeout,Confirm,SetCSS){
        var self = this;
        self.Items=Items;
        self.type='Workplace'
        self.item={};
        self.mobile=global.get('mobile' ).val;
        self.global=global;
        self.listOfBlocksForWorkplacePage=listOfBlocksForWorkplacePage;
        self.listOfBlocks=listOfBlocksForWorkplacePage;
        console.log(self.listOfBlocksForWorkplacePage)
        console.log(self.listOfBlocks)
        self.moment=moment;
        self.saveField=saveField;

        self.setStyles=setStyles;

        self.addBlock=addBlock;
        self.refreshBlocks=refreshBlocks;
        self.deleteBlock=deleteBlock;
        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;


        // collections
        self.addItemInBlock=addItemInBlock;
        self.movedItem=movedItem;
        self.deleteItemFromBlock=deleteItemFromBlock;
        self.changeItem=changeItem;

        //********************activate***************************
        activate();
        //*******************************************************
        function activate() {
            //console.log(id)
            return getItem($stateParams.id).then(function() {})
            .catch(function(err){
                err = err.data||err
                exception.catcher('получение объекта')(err)
            });
        }
        $scope.$on('changeLang',function(){
            activate();
        })
        function getItem(id) {
            return self.Items.getItem(id)
                .then(function(data) {
                    if(data && !data.blocks){
                        data.blocks=[];
                        saveField('blocks',[])
                    }
                    var bl=data.blocks.filter(function (b) {
                        return b
                    })
                    if(bl.length!=data.blocks.length){
                        saveField('blocks',bl)
                        data.blocks=bl;
                    }
                    data.blocks.forEach(function (b,i) {
                        if(b.type=='stuffs' && b.stuffs.length){
                            //b.imgs=b.stuffs
                            b.stuffs=b.stuffs.map(function (s) {
                                return (s._is || s)
                            })
                        }
                        b.i=i;
                    })
                    data.blocks.sort(function (a,b) {
                        return a.index-b.index
                    })
                    self.item=data;
                    return self.item;
                } ).catch(function(err){
                    console.log(err)
                    return $q.reject(err)
                });
        }
        function setStyles(block,idx) {
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    if(block.elements){
                        saveField('blocks.'+block.i+'.elements',block.elements)
                    }
                    if(block.blockStyle){
                        saveField('blocks.'+block.i+'.blockStyle',block.blockStyle)
                    }

                })
        }
        function saveField(field,value,defer,indexImgs){
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=self.item.blocks;
                field='blocks'
            }
            defer =(defer)?defer:100;
            setTimeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                });
            },defer)
        };
        function refreshBlocks() {
            return self.Items.getItem($stateParams.id)
            //console.log(id)
                .then(function(data) {
                    /*console.log(data)
                     console.log(self.item.blocks.length)*/
                    data.blocks.forEach(function (b,i) {
                        b.i=i;
                        if(!b.desc){b.desc=''}
                        if(!b.descL){b.descL={}}
                        if(!b.desc1){b.desc1=''}
                        if(!b.desc1L){b.desc1L={}}
                        if(!b.name){b.name=''}
                        if(!b.nameL){b.nameL={}}
                        if(!b.name1){b.name1=''}
                        if(!b.name1L){b.name1L={}}
                        if(!b.videoLink){b.videoLink=''}
                    })
                    self.item.blocks=data.blocks
                    /*console.log(self.item.blocks.length)*/
                })
        }
        function addBlock(type){
            if(!type){return}
            $scope.$broadcast('addNewBlock',{type:type})
            self.newBlock=null;
            return;

            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,type:type,index:index,id:Date.now()};
            var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
            if(type=='slider' || type=='stuffs'){
                o.imgs=[];
                update.update+=' imgs'
            }
            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    activate()
                    self.newBlock=null
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function deleteBlock(block,index) {
            var o={_id:self.item._id};
            var update={update:'_id_id',embeddedName:'blocks'};
            o['id']=block.id;
            update.embeddedPull=true;

            Confirm('потверждаете?')
                .then(function () {
                    self.item.blocks.splice(index,1)
                    if(!block._id){
                        update={update:'blocks'};
                        o['blocks']=self.item['blocks']
                    } else{
                        o['_id_id']=block._id;
                        update={update:'_id_id',embeddedName:'blocks'};
                        update.embeddedPull=true;
                    }
                    //console.log(update,o)
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })

                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })
                .then(function () {
                    activate()
                })



        }

        function deleteSlide(block,index){
            Photo.deleteFiles('Workplace',[block.imgs[index].img])
                .then(function(response) {
                    block.imgs.splice(index,1)
                    self.saveField('blocks.'+block.i+'.imgs',block.imgs,null,index)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/CONTENT/workplace/editSlide.html',
                controller: function(slide,$uibModalInstance){
                    var self=this;
                    self.item=slide;
                    self.ok=function(){
                        console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        //console.log(global.get('store').val.template.master)
        if(!global.get('store').val.template.workplace){
            global.get('store').val.template.workplace={parts:[]}
        }
        var keyParts=global.get('store').val.template.workplace.parts.filter(function (el) {
            return el.is
        }).map(function (el) {
            return el.name
        });
        //console.log(keyParts)
        function filterBlocks(item) {
            return keyParts.indexOf(item.key)>-1
        }

        function addItemInBlock(block,$index) {
            //console.log(block)
            var model;
            switch(block.type){
                case 'stuffs':model=Stuff;break;
                case 'campaign':model=Campaign;break;
                case 'filterTags':model=FilterTags;break;
                case 'brandTags':model=BrandTags;break;
                case 'brands':model=Brans;break;
                case 'categories':model=Category;break;
            }
            $q.when()
                .then(function () {
                    return model.select()
                })
                .then(function (item) {
                    if(block.type=='stuffs'){
                        if(block.stuffs && block.stuffs.length && block.stuffs.some(function(s){ if(s && s._id){return s._id==item._id}else{return s==item._id}})){
                            throw 'такой объект уже есть'
                        }
                    }
                    if(!block[block.type]){
                        block[block.type]=[];
                    }
                    var img,link;
                    name=item.name;
                    switch(block.type){
                        case 'stuffs':
                            img=(item.gallery[0] && item.gallery[0].thumb)?item.gallery[0].thumb:null;
                            link=item.link;
                            if(item.artikul){
                                item.name+=' '+item.artikul;
                            }
                            break;
                        case 'campaign':
                            img=(item.img)?item.img:null;
                            link='campaign/'+item.url;
                            break;
                        case 'filterTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?queryTag='+item.url;
                            break;
                        case 'brandTags':
                            img=(item.img)?item.img:null;
                            link='/group/category?brandTag='+item.url;
                            break;
                        case 'brands':
                            img=(item.img)?item.img:null;
                            link='/group/category?brand='+item.url;
                            break;
                        case 'categories':
                            img=(item.img)?item.img:null;
                            link='/group/'+item.url;
                            break;
                    }
                    //console.log(typeof $index=='undefined')
                    //console.log(link)
                    if(typeof $index != 'undefined'){
                        block.imgs[$index]={name:item.name,img:img,link:link,_id:item._id};
                    }else{
                        if(!block.imgs){block.imgs=[]}
                        block.imgs.push({name:item.name,img:img,link:link,_id:item._id})
                    }

                    //console.log(block)
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                    if(block.type=='stuffs'){
                        block.stuffs=block.imgs.map(function (img) {
                            return img._id
                        })
                        saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                    }


                    //saveField('blocks.'+block.i,block)
                })
                .catch(function (err) {
                    if(err){
                        exception.catcher('добавление')(err)
                    }
                })
        }
        function movedItem(block,item) {
            $timeout(function(){
                saveField('blocks.'+block.i+'.imgs',block.imgs)
                if(block.type=='stuffs'){
                    block.stuffs=block.imgs.map(function (img) {
                        return img._id
                    })
                    saveField('blocks.'+block.i+'.stuffs',block.stuffs)
                }
            },100)
            return item;
        }
        function deleteItemFromBlock(block,$index) {
            block.imgs.splice($index,1);
            saveField('blocks.'+block.i+'.imgs',block.imgs);
            if(block.type=='stuffs'){
                block.stuffs=block.imgs.map(function (img) {
                    return img._id
                })
                saveField('blocks.'+block.i+'.stuffs',block.stuffs)
            }
        }
        function changeItem(block,$index) {
            addItemInBlock(block,$index)
        }

    }

    serviceFoo.$inject=['$resource','$uibModal','$q','global'];
    function serviceFoo($resource,$uibModal,$q,global){
        var Items= $resource('/api/collections/Workplace/:_id',{_id:'@_id'});
        return {
            getList:getList,
            getItem:getItem,
            query:Items.query,
            get:Items.get,
            save:Items.save,
            delete:Items.delete,
            create:create,
        }
        function getList(paginate,query){
            if(!paginate){
                paginate={page:0}
            }
            var data ={perPage:paginate.rows ,page:paginate.page,query:query};
            if(global.get('crawler') && global.get('crawler').val){
                data.subDomain=global.get('store').val.subDomain;
            }
            return Items.query(data).$promise
                .then(getListComplete)
            //.catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
            //.catch(getItemFailed);
            function getItemComplete(response) {
                if(response && response.blocks && response.blocks.length){
                    response.blocks.forEach(function (b) {
                        if(b.type=='stuffs'){
                            if(b.stuffs && b.stuffs.length){
                                b.imgs=b.stuffs.map(function(s){
                                    if(s.gallery && s.gallery.length && s.gallery[0].img){
                                        s.img=s.gallery[0].img;
                                    }
                                    return s;
                                });
                            }else{b.imgs=[]}
                        }
                    })
                }
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/CONTENT/workplace/createItem.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                });
                modalInstance.result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,50))
                    }else{
                        reject()
                    }

                }, function (err) {
                    reject(err)
                });
            })

        }
    }
})()

'use strict';
(function(){
    'use strict';
    angular.module('gmall.services')
        .service('Campaign', campaignService);
    campaignService.$inject=['$resource','$uibModal','$q'];
    function campaignService($resource,$uibModal,$q){
        var Items= $resource('/api/collections/Campaign/:_id',{_id:'@_id'});
        return {
            get:Items.get,
            getList:getList,
            getItem:getItem,
            save:Items.save,
            delete:Items.delete,
            create:create,
            select:selectItem,
        }
        function getList(paginate,query){
            return Items.query({perPage:paginate.rows ,page:paginate.page,query:query} ).$promise
                .then(getListComplete)
                .catch(getListFailed);
            function getListComplete(response) {
                if(paginate.page==0){
                    if(response && response.length){
                        paginate.items=response.shift().index;
                    }else{
                        paginate.items=0;
                    }
                }
                return response;
            }

            function getListFailed(error) {
                console.log('XHR Failed for getNews.' + error);
                return $q.reject(error);
            }
        }
        function getItem(id){
            return Items.get({_id:id} ).$promise
                .then(getItemComplete)
                .catch(getItemFailed);
            function getItemComplete(response) {
                return response;
            }
            function getItemFailed(error) {
                return $q.reject(error);
            }
        }
        function create(){
            return $q(function(resolve,reject){
                var options={
                    animation: true,
                    restrict:"E",
                    templateUrl: 'components/PROMO/campaign/createCampaign.html',
                    controller: function($uibModalInstance){
                        var self=this;
                        self.name=''
                        self.ok=function(){
                            if(!self.name || self.name.length<3){return}
                            $uibModalInstance.close(self.name);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss();
                        };
                    },
                    controllerAs:'$ctrl',
                }
                $uibModal.open(options).result.then(function (name) {
                    if(name){
                        resolve(name.substring(0,100))
                    }else{
                        reject('empty')
                    }

                }, function (err) {
                    reject()
                });
            })

        }
        function selectItem(){
            return $q(function(resolve,reject){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'components/PROMO/campaign/selectItem.html',
                    controller: function(Campaign,$uibModalInstance){
                        var self=this;
                        self.stuffs=[];
                        self.name='';
                        var query;
                        var paginate={page:0,rows:30,items:0}
                        self.search = function(name){
                            if (name.length<3){return}
                            query={name:name}
                            Campaign.getList(paginate,query).then(function(res){
                                self.items=res;
                            })
                        }
                        self.selectItem=function(item){
                            $uibModalInstance.close(item);
                        }
                        self.cancel = function () {
                            $uibModalInstance.dismiss('cancel');
                        };
                    },
                    controllerAs:'$ctrl',
                    size: 'lg',
                });

                modalInstance.result.then(function (stuff) {
                    resolve(stuff)
                },function(){
                    reject()
                });
            })

        }
    }
})()

'use strict';
(function(){
    angular.module('gmall.directives')
        .directive('blocksEdit',blocksEdit)
        .directive('blockTextEdit',blockTextEdit)
        .directive('blockText1Edit',blockText1Edit)
        .directive('blockMediaEdit',blockMediaEdit)
        .directive('blockMedia1Edit',blockMedia1Edit)
        .directive('directive', function($compile, $interpolate) {
            return {
                template: '',
                link: function($scope, element, attributes) {
                    var s = (attributes.directive)?attributes.directive.toLowerCase():'undefined';
                    if(s=='categories' || s=='campaign' ||s=='info'||s=='news'||s=='brands'||s=='brandtags'||s=='filtertags'||s=='filters'||s=='stuffs' || s=='scheduleplace'){
                        element.append($compile('<div items-block></div>')($scope));
                    }else{
                        element.append($compile('<div block-media1-edit></div>')($scope));
                    }


                }
            };
        })
        .directive('itemsBlock',itemsBlock)


        .directive('nameBlock',nameBlock)
        .directive('textBlock',textBlock)
        .directive('text2Block',text2Block)
        .directive('bannerBlock',bannerBlock)
        .directive('banner1Block',banner1Block)
        .directive('bannerOneBlock',banner1Block)
        .directive('sliderBlock',sliderBlock)
        .directive('videoBlock',videoBlock)
        .directive('video1Block',video1Block)
        .directive('video2Block',video2Block)
        .directive('mapBlock',mapBlock)
        .directive('map1Block',map1Block)
        .directive('map2Block',map2Block)
        .directive('mastersBlock',mastersBlock)
        .directive('feedbackBlock',feedbackBlock)
        .directive('feedback1Block',feedback1Block)
        .directive('feedback2Block',feedback2Block)

        .directive('stuffsBlock',itemsBlock)
        .directive('filtertagsBlock',itemsBlock)
        .directive('brandtagsBlock',itemsBlock)
        .directive('brandsBlock',itemsBlock)
        .directive('categoriesBlock',itemsBlock)
        .directive('campaignBlock',itemsBlock)
        .directive('newsBlock',itemsBlock)
        .directive('infoBlock',itemsBlock)


        .directive('dateBlock',dateBlock)
        .directive('positionBlock',positionBlock)
        .directive('videolinkBlock',videoLinkBlock)
        .directive('snBlock',snBlock)
        .directive('calendarBlock',calendarBlock)
        .directive('scheduleBlock',scheduleBlock)
        .directive('callBlock',callBlock)
        .directive('buttonBlock',buttonBlock)
        .directive('undefinedBlock',undefinedBlock)
        .directive('reviewBlock',reviewBlock)
        .directive('subscriptionBlock',subscriptionBlock)
        .directive('subscriptionaddBlock',subscriptionAddBlock)


        .directive('videolinkBlock',videolinkBlock)
        .directive('pricegoodsBlock',pricegoodsBlock)
        .directive('priceservicesBlock',priceservicesBlock)
        .directive('scheduleplaceBlock',scheduleplaceBlock)

    function infoBlock(){
        return {
            templateUrl: 'components/blocks/infoBlock.html',
        }
    }
    function filterTagsBlock(){
        return {
            templateUrl: 'components/blocks/filterTagsBlock.html',
        }
    }
    function categoriesBlock(){
        return {
            templateUrl: 'components/blocks/categoriesBlock.html',
        }
    }
    function newsBlock(){
        return {
            templateUrl: 'components/blocks/newsBlock.html',
        }
    }
    function reviewBlock(){
        return {
            templateUrl: 'components/blocks/reviewBlock.html',
        }
    }
    function subscriptionBlock(){
        return {
            templateUrl: 'components/blocks/subscriptionBlock.html',
        }
    }
    function subscriptionAddBlock(){
        return {
            templateUrl: 'components/blocks/subscriptionAddBlock.html',
        }
    }
    function undefinedBlock(){
        return {
            templateUrl: 'components/blocks/undefinedBlock.html',
        }
    }
    function nameBlock(){
        return {
            templateUrl: 'components/blocks/nameBlock.html',
        }
    }
    function positionBlock(){
        return {
            templateUrl: 'components/blocks/positionBlock.html',
        }
    }
    function videoLinkBlock(){
        return {
            templateUrl: 'components/blocks/videoLinkBlock.html',
        }
    }
    function textBlock(){
        return {
            templateUrl: 'components/blocks/textBlock.html',
        }
    }
    function text2Block(){
        return {
            templateUrl: 'components/blocks/text2Block.html',
        }
    }
    function bannerBlock(){
        return {
            templateUrl: 'components/blocks/bannerBlock.html',
        }
    }
    function banner1Block(){
        return {
            templateUrl: 'components/blocks/banner1Block.html',
        }
    }
    function sliderBlock(){
        return {
            templateUrl: 'components/blocks/sliderBlock.html',
        }
    }
    function videoBlock(){
        return {
            templateUrl: 'components/blocks/videoBlock.html',
        }
    }
    function video1Block(){
        return {
            templateUrl: 'components/blocks/video1Block.html',
        }
    }
    function video2Block(){
        return {
            templateUrl: 'components/blocks/video2Block.html',
        }
    }
    function mapBlock(){
        return {
            templateUrl: 'components/blocks/mapBlock.html',
        }
    }
    function map1Block(){
        return {
            templateUrl: 'components/blocks/map1Block.html',
        }
    }
    function map2Block(){
        return {
            templateUrl: 'components/blocks/map2Block.html',
        }
    }
    function mastersBlock(){
        return {
            templateUrl: 'components/blocks/mastersBlock.html',
        }
    }
    function feedbackBlock(){
        return {
            templateUrl: 'components/blocks/feedbackBlock.html',
        }
    }
    function feedback1Block(){
        return {
            templateUrl: 'components/blocks/feedback1Block.html',
        }
    }
    function feedback2Block(){
        return {
            templateUrl: 'components/blocks/feedback2Block.html',
        }
    }
    function imgsBlock(){
        return {
            templateUrl: 'components/blocks/imgsBlock.html',
        }
    }
    function itemsBlock(){
        return {
            templateUrl: 'components/blocks/itemsBlock.html',
        }
    }
    function dateBlock(){
        return {
            templateUrl: 'components/blocks/dateBlock.html',
        }
    }
    function snBlock(){
        return {
            templateUrl: 'components/blocks/sn.html',
        }
    }
    function calendarBlock(){
        return {
            templateUrl: 'components/blocks/calendarBlock.html',
        }
    }
    function scheduleBlock(){
        return {
            templateUrl: 'components/blocks/sheduleBlock.html',
        }
    }
    function callBlock(){
        return {
            templateUrl: 'components/blocks/callBlock.html',
        }
    }
    function buttonBlock(){
        return {
            templateUrl: 'components/blocks/buttonBlock.html',
        }
    }

    function calendarBlock(){
        return {
            templateUrl: 'components/blocks/calendarBlock.html',
        }
    }
    function videolinkBlock(){
        return {
            templateUrl: 'components/blocks/videolinkhpBlock.html',
        }
    }
    function pricegoodsBlock(){
        return {
            templateUrl: 'components/blocks/pricegoodsBlock.html',
        }
    }
    function priceservicesBlock(){
        return {
            templateUrl: 'components/blocks/priceservicesBlock.html',
        }
    }
    function scheduleplaceBlock(){
        return {
            templateUrl: 'components/blocks/scheduleplaceBlock.html',
        }
    }

    function blockTextEdit(){
        return {
            templateUrl: 'components/blocks/blockTextEdit.html',
        }
    }
    function blockText1Edit(){
        return {
            templateUrl: 'components/blocks/blockText1Edit.html',
        }
    }
    function blockMediaEdit(){
        return {
            templateUrl: 'components/blocks/blockMediaEdit.html',
        }
    }
    function blockMedia1Edit(){
        return {
            templateUrl: 'components/blocks/blockMedia1Edit.html',
        }
    }


    function blocksEdit(){
        return {
            scope: {
                item:'=',
                type:'@',
                activeSide:'=',
                refreshBlocks:'&'
            },
            restrict:'EA',
            bindToController: true,
            controller: blocksEditCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/blocks/blocksEdit.html',
        }
    }
    blocksEditCtrl.$inject=['$http','$uibModal','HomePage','$q','global','Photo','$fileUpload','SetCSS','Blocks','Confirm','EditModelData','Filters','Brands','Category','FilterTags','BrandTags','Stuff','News','Campaign','Info','exception','$timeout','Master','Stat','Additional','$scope','$rootScope']
    function blocksEditCtrl($http,$uibModal,HomePage,$q,global,Photo,$fileUpload,SetCSS,Blocks,Confirm,EditModelData,Filters,Brands,Category,FilterTags,BrandTags,Stuff,News,Campaign,Info,exception,$timeout,Master,Stat,Additional,$scope,$rootScope) {
        var self=this;

        if(self.item.blocks && self.item.blocks.forEach){
            self.item.blocks.forEach(function (b) {
                if(!b.desc){b.desc=''}
                if(!b.descL){b.descL={}}
                if(!b.desc1){b.desc1=''}
                if(!b.desc1L){b.desc1L={}}
                if(!b.name){b.name=''}
                if(!b.nameL){b.nameL={}}
                if(!b.name1){b.name1=''}
                if(!b.name1L){b.name1L={}}
                if(!b.videoLink){b.videoLink=''}
            })
        }

        if(self.item.date){self.item.date=new Date(self.item.date)}
        //console.log(self.item)
        if(!self.item.blocks){self.item.blocks=[]}

        if(self.type=='HomePage'){
            self.Items=HomePage;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=HomePage";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=HomePage"
        }else if(self.type=='Stuff'){
            self.Items=Stuff;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=Stuff";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=Stuff"
        }else if(self.type=='Master'){
            self.Items=Master;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=Master";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=Master"
        } else if(self.type=='News'){
            self.Items=News;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=News";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=News"
        } else if(self.type=='Stat'){
            self.Items=Stat;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=Stat";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=Stat"
        } else if(self.type=='Additional'){
            self.Items=Additional;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=Additional";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=Additional"
        } else if(self.type=='Category'){
            self.Items=Category;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=Category";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=Category"
        }else if(self.type=='BrandTags'){
            self.Items=BrandTags;
            self.uploadUrl="/api/collections/Photo/fileUpload?collectionName=BrandTags";
            self.uploadVideoUrl="/api/collections/Photo/uploadVideoFile?collectionName=BrandTags"
        }


        self.global=global

        self.listOfBlocks=listOfBlocksForAll;
        self.animationTypes=animationTypes;
        self.animationTypesForSlider=['sliceDown','sliceDownLeft','sliceUp','sliceUpLeft','sliceUpDown','sliceUpDownLeft','fold','fade','random','slideInRight','slideInLeft','boxRandom','boxRain','boxRainReverse','boxRainGrow','boxRainGrowReverse'];
        self.blockEditPermission={};
        self.blockSettingPermission={};
        self.blockEditTextPermission={};
        self.blockEditText1Permission={};
        self.blockEditMediaPermission={};
        self.blockEditMedia1Permission={};

        self.tinymceOptions = {
            plugins: 'code print preview fullpage searchreplace autolink directionality  visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount  imagetools  contextmenu colorpicker textpattern help',
            toolbar: 'code | formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat | code '
        };
        //console.log(self.tinymceOptions)

        self.filterBlocks=filterBlocks;
        self.getBlockType=getBlockType;
        self.getNameBlock=getNameBlock;
        self.saveField=saveField;
        self.loadPhoto=loadPhoto;
        self.setStyles=setStyles;
        self.getBlockConfig=getBlockConfig;
        self.deleteBlock=deleteBlock;
        self.cloneBlock=cloneBlock;
        $scope.$on('addNewBlock',function (e,data) {
            //console.log(data)
            if(data && data.type){
                addNewBlock(data.type)
            }
        })

        self.deleteSlide=deleteSlide;
        self.editSlide=editSlide;
        self.deleteImg=deleteImg;

        self.deleteCollection=deleteCollection;
        /*self.editModelData=editModelData;*/
        self.setCollection=setCollection;
        self.changeSlidePhoto=changeSlidePhoto;
        self.movedItemInSlider=movedItemInSlider;
        self.movedItemInCollection=movedItemInCollection;



        /*console.log(self.Items)
        console.log(self.type)
        console.log(self.item)*/
        function filterBlocks(item) {
            if(self.activeSide){
                if(item.position==self.activeSide){
                    return true
                }
            }else{
                return true
            }

        }
        function getBlockType(type) {
            if(type=='scheduleplace'){
                return 'stuffs'
            }else{
                return type;
            }

        }
        function getNameBlock(type) {
            if(listOfBlocksForMainPage[type]){
                return listOfBlocksForMainPage[type]
            }else{
                return type;
            }
        }
        function saveField(field,value){
            //self.saveFoo({field:field,value:value})
            if(field.indexOf('index')>-1){
                self.item.blocks.sort(function (a,b) {
                    return a.index-b.index
                })
                self.item.blocks.forEach(function (b,i) {
                    b.i=i;
                })
                value=angular.copy(self.item.blocks);
                value.forEach(function (b) {
                    if(typeof b.videoLink=='object'){
                        b.videoLink=''
                    }
                    delete b.$$hashKey
                    delete b.__v;
                    //delete b._id;
                })
                field='blocks'
            }

            var defer =(defer)?defer:100;
            setTimeout(function(){
                if(field=='date'){
                    value=new Date(self.item[field])
                }
                //console.log(defer,value)
                var o={_id:self.item._id};
                o[field]=value
                var query={update:field}
                if(field.indexOf('.imgs')>-1 && typeof indexImgs!='undefined'){
                    query.indexImgs=indexImgs;
                }
                self.Items.save(query,o,function () {
                    global.set('saving',true)
                    $timeout(function () {
                        global.set('saving',false);
                    },1500)
                    if(field=='blocks'){
                        self.refreshBlocks()
                    }
                },function (err) {
                    if(err){
                        exception.catcher('save '+field)(err)
                    }
                });
            },defer)

        }
        function loadPhoto(block,field){
            $q.when()
                .then(function () {
                    if(field=='video'){
                        return $fileUpload.fileUpload(self.uploadVideoUrl,field,self.item.url)
                    }else{
                        return $fileUpload.fileUpload(self.uploadUrl,field,self.item.url)
                    }
                    console.log(self.uploadUrl)

                })
                .then(function (res) {
                    if(res && res.length){
                        var a=[];
                        if((field=='img' || field=='videoCover' || field=='video') && res[0].data && res[0].data.img){
                            if(block[field]){
                                a.push(block[field])
                            }
                            block[field]=res[0].data.img
                            saveField('blocks.'+block.i+'.'+field,block[field])
                        }else if(field=='imgs'){
                            if(!block.imgs){
                                block.imgs=[];
                            }
                            res.forEach(function (r) {
                                console.log(r.data)
                               if( r.data.imgs &&  r.data.imgs[0] &&  r.data.imgs[0].img){
                                    var o={img:r.data.imgs[0].img,index:block.imgs.length,active:true}
                                   block.imgs.push(o)
                               }
                            })
                            saveField('blocks.'+block.i+'.imgs',block.imgs)
                        }
                        if(a.length){
                            Photo.deleteFiles(self.type,a)
                        }

                    }

                    //console.log(res)
                })
                .catch(function (err) {
                    console.log(err)
                })
        }
        function setStyles(block,idx){
            //console.log(block,idx)
            $q.when()
                .then(function(){
                    return SetCSS.setStyles(block)
                })
                .then(function(){
                    saveField('blocks.'+block.i+'.blockStyle',block.blockStyle)
                    if(block.elements){
                        saveField('blocks.'+block.i+'.elements',block.elements)
                    }
                    /*console.log(block.mobile)
                    console.log(block.tablet)
                    return;*/
                    if(block.mobile){
                        saveField('blocks.'+block.i+'.mobile',block.mobile)
                    }
                    if(block.tablet){
                        saveField('blocks.'+block.i+'.tablet',block.tablet)
                    }
                })

        }
        function getBlockConfig(block) {
            $q.when()
                .then(function () {
                    return Blocks.getBlockConfig(block,self.item.url,self.type)
                })
                .then(function () {
                    saveField('blocks.'+block.i,block)
                })

        }
        function deleteBlock(block,idx) {
            //self.deleteFoo({block:block})
            var o={_id:self.item._id};
            var update={update:'_id_id',embeddedName:'blocks'};
            o['id']=block.id;
            update.embeddedPull=true;
            Confirm('потверждаете?')
                .then(function () {
                    $rootScope.$emit('$stateChangeStartToStuff');



                    //console.log(idx)
                    //self.item.blocks.splice(idx,1)
                    if(!block._id){
                        update={update:'blocks'};
                        o['blocks']=self.item['blocks']
                    } else{
                        o['_id_id']=block._id;
                        update={update:'_id_id',embeddedName:'blocks'};
                        update.embeddedPull=true;
                    }
                    //console.log(update,o)
                    return $q(function (res,rej) {
                        self.Items.save(update,o,function () {
                            res()
                        },function (err) {
                            rej(err)
                        })
                    })
                    //return self.Items.save(update,o).$promise;
                })
                .then(function () {
                    return self.refreshBlocks()
                })
                .then(function (res) {
                    $rootScope.$emit('$stateChangeEndToStuff');
                    var images=[]
                    if(block.img){
                        images.push(block.img);
                    }
                    if(block.video){
                        images.push(block.video);
                    }
                    if(block.videoCover){
                        images.push(block.videoCover);
                    }
                    if(block.imgs && block.imgs.length){
                        block.imgs.forEach(function(im){
                            if(im.img){
                                images.push(im.img);
                            }
                        })
                    }
                    if(images.length){
                        return Photo.deleteFiles('Stat',images)
                    }

                })
                .catch(function (err) {
                    $rootScope.$emit('$stateChangeEndToStuff');
                    console.log(err)
                    exception.catcher('delete block')(err)
                })


        }
        function addNewBlock(type) {
            try{
                var index=1;
                self.item.blocks.forEach(function(block){
                    if(block.index && block.index>=index){
                        index=block.index+1;
                    }
                })
                var o={_id:self.item._id,type:type,index:index,id:Date.now()};
                var update={update:'type index id',embeddedName:'blocks',embeddedPush:true};
                o.imgs=[];
                update.update+=' imgs'
                //console.log(activeSide)
                if(self.activeSide){
                    update.update+=' position';
                    o.position=self.activeSide
                }
            }catch(err){
                console.log(err)}

            $q.when()
                .then(function () {
                    $rootScope.$emit('$stateChangeStartToStuff');
                    return $q(function (res,rej) {
                        self.Items.save(update,o,function () {
                            res()
                        },function (err) {
                            rej(err)
                        })
                    })
                    //return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    return self.refreshBlocks()
                })
                .then(function () {
                    $rootScope.$emit('$stateChangeEndToStuff');
                })
                .catch(function(err){
                    $rootScope.$emit('$stateChangeEndToStuff');
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }
        function cloneBlock(block) {
            var bl = angular.copy(block)
            var index=1;
            self.item.blocks.forEach(function(block){
                if(block.index && block.index>=index){
                    index=block.index+1;
                }
            })
            var o={_id:self.item._id,index:index,id:Date.now()};
            var update={update:'index id',embeddedName:'blocks',embeddedPush:true};

            for(var key in bl){
                if((key=='type' || key=='is' || key=='nameAnimate'|| key=='name1Animate'|| key=='nameAnimateDelay'|| key=='audio'|| key=='templ'
                    || key=='style'|| key=='blockStyle'|| key=='elements'|| key=='mobile'|| key=='tablet'|| key=='animate'|| key=='animateRepeat'
                    || key=='duration'|| key=='position') && bl[key]){
                    update.update+=' '+key
                    o[key]=bl[key]
                }
                /*if(key[0]!='_' && key!='index' && key!='id' && key !='_id' && key!='i' && key!='img' && key!="imgs"
                    && key!='stuffs' && key!='brands' && key!='brandTags' && key!='categories'&& key!='info' && key!='campaign'&& key!='filterTags' && key!='news'
                    && key!='videoLink' &&  key!='name' && key!='nameL' && key!='name1' && key!='name1L' && key!='desc' && key!='descL' && key!='desc1' && key!='desc1L'
                    && key!='template' && key!='nameTemplate'){
                    update.update+=' '+key
                    o[key]=bl[key]
                }*/
            }
            /*console.log(bl)
            console.log(update)
            console.log(o)
            return;*/


            $q.when()
                .then(function () {
                    return self.Items.save(update,o).$promise;
                })
                .then(function (res) {
                    self.refreshBlocks()
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('добавление блока')(err)
                    }
                })
        }

        function deleteSlide(block,index){
            Confirm('Удалить?')
                .then(function () {
                    return Photo.deleteFiles(self.type,[block.imgs[index].img])
                })
                .then(function(response) {
                    block.imgs.splice(index,1)
                    block.imgs.forEach(function (slide,i) {
                        slide.index=i
                    })
                    saveField('blocks.'+block.i+'.imgs',block.imgs)
                },function(err) {console.log(err)});
        }
        function editSlide(block,index){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/blocks/editSlide.html',
                controller: function(slide,$uibModalInstance,global){
                    var self=this;
                    self.item=slide;
                    self.lang=global.get('store').val.lang
                    self.ok=function(){
                        //console.log(self.item)
                        $uibModalInstance.close(self.item);
                    }
                    self.cancel = function () {
                        $uibModalInstance.dismiss('cancel');
                    };
                },
                controllerAs:'$ctrl',
                size:'lg',
                resolve: {
                    slide: function () {
                        return block.imgs[index];
                    },
                }
            });
            modalInstance.result.then(function (slide) {
                //console.log(slide)
                self.saveField('blocks.'+block.i+'.imgs',block.imgs)
            }, function () {
            });
        }
        function deleteImg(block,field) {
            Confirm('Удалить?')
                .then(function () {
                    return Photo.deleteFiles(self.type,[block[field]])
                })
                .then(function(response) {
                    block[field]=null;
                    saveField('blocks.'+block.i+'.'+field,block[field])
                },function(err) {console.log(err)});
        }

        function changeSlidePhoto(block,idx) {
            console.log(idx)
            $q.when()
                .then(function () {
                    return $fileUpload.fileUpload(self.uploadUrl,'img',self.item.url)
                })
                .then(function (res) {
                    if(res && res.length){
                        var a=[];
                        if(res[0].data && res[0].data.img){
                            if(block.imgs[idx].img){
                                a.push(block.imgs[idx].img)
                            }
                            block.imgs[idx].img=res[0].data.img
                            saveField('blocks.'+block.i+'.imgs',block.imgs)
                        }
                        if(a.length){
                            Photo.deleteFiles(self.type,a)
                        }

                    }
                })
                .catch(function (err) {
                    exception.catcher('load photo')(err)
                    console.log(err)
                })

        }
        function movedItemInSlider(block) {
            $timeout(function () {
                block.imgs.forEach(function (item,i) {
                    item.index=i
                })
                saveField('blocks.'+block.i+'.imgs',block.imgs)
            },300)
        }

        function movedItemInCollection(block) {
            /*console.log(block[block.type].map(function (item) {
                return item._id
            }))*/
            $timeout(function () {
                var data = block[block.type].map(function (item) {
                    return item._id
                })
                //console.log(data)
                saveField('blocks.'+block.i+'.'+block.type,data)
            },300)
        }


        /*models*/
        function deleteCollection(block,idx){
            //console.log(block)
           var type = block.type;
            if(block.type=='scheduleplace'){
                type='stuffs';
            }
            Confirm('Удалить?').then(function () {
                block[type].splice(idx,1);
                var data = block[type].map(function (item) {
                    return item._id
                })
                self.saveField('blocks.'+block.i+'.'+type,data)
            })
        }
        function setCollection(block,idx){
            //console.log(block)
            var field=block.type;
            if(field=='scheduleplace'){
                field='stuffs'
            };
            if(!block[field]){block[field]=[]}
            var collections=block[field];
            var Items;
            if(typeof idx=='undefined'){idx=block[field].length;}
            if(field=='brands'){
                Items=Brands;
            } else if(field=='categories'){
                Items=Category;
            } else if(field=='filterTags'){
                Items=FilterTags;
            }else if(field=='filters'){
                Items=Filters;
            }else if(field=='brandTags'){
                Items=BrandTags;
            }else if(field=='stuffs'){
                Items=Stuff;
            }else if(field=='news'){
                Items=News;
            }else if(field=='campaign'){
                Items=Campaign;
            }else if(field=='info'){
                Items=Info;
            }

            $q.when()
                .then(function(){
                    return Items.select({actived:true})
                })
                .then(function(item){
                    //console.log(item)
                    collections[idx]=item;
                    var data = block[field].map(function (item) {
                        return item._id
                    })
                    console.log(field)
                    self.saveField('blocks.'+block.i+'.'+field,data)

                })
                .catch(function(){
                    console.log('dismiss')
                })
        }
        function editModelData(block,i){
            var field=block.type,model;
            if(field=='scheduleplace'){
                field=='stuffs'
            };
            var items=block[field]
            if(items[i] && items[i]._id){
                if(field=='brands'){
                    model='Brand';
                } else if(field=='categories'){
                    model='Category';
                } else if(field=='filterTags'){
                    model='FilterTags';
                }else if(field=='filters'){
                    model='Filters';
                }else if(field=='brandTags'){
                    model='BrandTags';
                }else if(field=='stuffs'){
                    model='Stuff';
                }else if(field=='news'){
                    model='News';
                }else if(field=='campaign'){
                    model='Campaign';
                }else if(field=='info'){
                    model='Info';
                }
                $q.when()
                    .then(function(){
                        return EditModelData.doIt(model,items[i]._id,items[i])
                    })
                    .then(function(img){
                        console.log(img==items[i].img)
                        if(img && img!=items[i].img){
                            items[i].img=img
                            console.log(img)
                        }

                    })

            } else{
                setCollection(items,i,field)
            }

        }
    }


    angular.module('gmall.services')
        .service('Blocks',blocks)
    blocks.$inject=['$http','$uibModal','HomePage','$q','global','Photo']
    function blocks($http,$uibModal,HomePage,$q,global,Photo) {
        return {
            getBlockConfig:getBlockConfig
        }
        function getBlockConfig(block,itemUrl,model) {
            return $q.when()
                .then(function () {
                    return $http.get('/api/getBlocksForAll/'+block.type)
                })
                .then(function (res) {
                    if(res.data){
                        return selectItemFromList(res.data)
                    }
                })
                .then(function (b) {
                    if(b){
                        if(b.allData){
                            if(block.img){
                                Photo.deleteFiles(model,[block.img])
                            }else if(block.video){
                                Photo.deleteFiles(model,[block.video])
                            }else if(block.imgs && block.type!='stuffs'){
                                var a=[];
                                block.imgs.forEach(function (i) {
                                    a.push(i.img)
                                })
                                if(a.length){
                                    Photo.deleteFiles(model,a)
                                }
                            }
                            for(var key in block){
                                if(key!='_id' && key!='index' &&  key!='i' &&  key!='position'){
                                    delete block[key]
                                }
                            }
                            var photos=[];
                            for(var key in b){
                                if(key!='_id' && key!='template' && key !='nameTemplate' && key!='index' &&  key!='i'){
                                    if(key=='img' && b[key]){
                                        var p = b[key].split('/')
                                        p[p.length-2]=itemUrl;
                                        p[p.length-3]=model;
                                        p[p.length-4]=global.get('store').val.subDomain;

                                        var img = p[p.length-1].split('.')
                                        img[img.length-2] +='copy'
                                        p[p.length-1]=img.join('.')
                                        block[key]=p.join('/')
                                        photos.push([b[key],block[key]])
                                    }else if(key=='imgs' && b[key] && b[key].length){
                                        b[key].forEach(function (i) {
                                            if(i.img){
                                                var p = i.img.split('/')
                                                p[p.length-2]=itemUrl;
                                                p[p.length-3]=model;
                                                p[p.length-4]=global.get('store').val.subDomain;

                                                var img = p[p.length-1].split('.')
                                                img[img.length-2] +='copy'
                                                p[p.length-1]=img.join('.')
                                                photos.push([i.img,p.join('/')])
                                                i.img=p.join('/');
                                            }

                                        })
                                        block[key] = b[key];
                                    }else if(key=='video' && b[key]){
                                        var p = b[key].split('/')
                                        p[p.length-2]=itemUrl;
                                        p[p.length-3]=model;
                                        p[p.length-4]=global.get('store').val.subDomain;
                                        var img = p[p.length-1].split('.')
                                        img[img.length-2] +='copy'
                                        p[p.length-1]=img.join('.')
                                        block[key]=p.join('/')
                                        photos.push([b[key],block[key]])
                                    }else if(key!='link'){
                                        block[key] = b[key];
                                        if(key=='button'){
                                            block.button.link=null;
                                        }

                                    }
                                }
                            }
                            var folder = '/images/'+global.get('store').val.subDomain+'/'+model+'/'+itemUrl;
                            var o={folder:folder,photos:photos};
                            return $http.post(photoUpload+'/api/copyPhotosFromBrowser',o)
                        }else{
                            block.templ=b.templ;
                            block.style=b.style;
                            block.blockStyle=b.blockStyle;
                            block.elements=b.elements;
                            block.mobile=b.mobile;
                            block.tablet=b.tablet;
                            block.animate=b.animate;
                            block.animateRepeat=b.animateRepeat;
                            block.duration=b.duration;
                        }
                    }
                })

        }
        function selectItemFromList(items,header){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'components/blocks/selectItem.html',
                controllerAs:'$ctrl',
                controller: function ($uibModalInstance ,global,items,header) {
                    var self=this;
                    self.items=items;
                    self.header=header||'выберите из предложенного списка'
                    self.selectItem=selectItem;
                    self.cancel = cancel;

                    function selectItem(item){
                        $uibModalInstance.close(item);
                    }
                    function cancel() {
                        $uibModalInstance.dismiss();
                    };
                },
                resolve: {
                    items:function () {
                        return items
                    },
                    header:function () {
                        return header
                    }
                }
            });
            return modalInstance.result
        }
    }

})()


'use strict';
(function() {
    angular.module('gmall.directives')
        .directive('styleBlockPage', styleBlockPage) // templ index animate style
        .directive('setStyles', setStylesForBlock) // установка стилей для массива
        .directive('setStylesHeader', setStylesHeader)
    function styleBlockPage() {
        return {
            templateUrl: 'components/setStyles/styleBlockPage.html',
        }
    }
    function setStylesHeader(){
        return {
            restrict:'AE',
            templateUrl: 'components/setStyles/setStylesHeader.html'
        }
    }

    function setStylesForBlock(){
        return {
            binding:{
                item:'=',
                saveFunction:'&',
                saveField:'@',
                fontFaces:'=',
                deleteFunction:'&',
                element:'@',
                action:'@'
            },
            scope: {
                item:'=',
                saveFunction:'&',
                saveField:'@',
                fontFaces:'=',
                deleteFunction:'&',
                element:'@',
                action:'@'
            },
            restrict:'AE',
            bindToController: true,
            controller: setStylesForBlockCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/setStyles/setStyles.html'
        };
    }
    setStylesForBlockCtrl.$inject=[]
    function setStylesForBlockCtrl(){
        //console.log(self.saveField)

        var self = this;

        var actived=false;
        self.$oninit=function () {
            //console.log('dd!!')
            if(!actived){
                actived=true;
                activate()
            }
        }
        self.actions={};
        self.displayList=['block','inline','inline-block','none','table','inline-table','table-cell','table-column','table-row','table-caption','none !important']
        self.saveData=saveData;
        self.deleteData=deleteData;

        if(!actived){
            actived=true;
            activate()
        }

        function activate() {
            if(self.saveField=='index.link'){
                console.log(JSON.stringify(self.item))
                console.log(self.item[0])
            }
            if(!self.item){
                self.item=angular.copy(arrEmptyForProperties)
            }else{
                while(self.item.length<lengthStyleBlock){
                    self.item.push('')
                }
            }
            //console.log(self.saveField,self.item)
            if(self.action){
                var keys= self.action.split(' ');
                keys.forEach(function (k) {
                    self.actions[k]=true;
                })
            }
        }
        function saveData() {
            self.saveFunction({field:self.saveField,value:self.item})
        }
        function deleteData() {
            console.log('???????')
            self.deleteFunction({element:self.element})
        }

    }



    angular.module('gmall.services')
        .service('SetCSS', styleService);
    styleService.$inject=['$uibModal','$q','global'];
    function styleService($uibModal,$q,global){
        return {
            setStyles:setStyles,
        }
        function setStyles(block,short){
            var options={
                animation: true,
                bindToController: true,
                size:'lg',
                controllerAs: '$ctrl',
                windowClass: 'app-modal-window',
                templateUrl: 'components/setStyles/setCSS.html',
                controller: function (Confirm,$uibModalInstance,block,fontFaces,short){
                    //console.log(block,short)
                    var self=this;
                    if(!short){
                        self.block=block;
                        self.selector=''
                        if(!block.blockStyle){block.blockStyle=angular.copy(arrEmptyForProperties)}
                        if(!block.mobile){block.mobile={blockStyle:angular.copy(arrEmptyForProperties)}}
                        if(!block.tablet){block.tablet={blockStyle:angular.copy(arrEmptyForProperties)}}
                    }else{
                        self.block={blockStyle:block};
                        self.selector=''
                        self.short=true;
                    }
                    //console.log(block.tablet)

                    self.listElements=elementsList;//['a','p','div','h1','h2','h3','h4','ol','ul','li','span','img','hr','iframe'];
                    self.fontFaces=fontFaces;
                    self.displayList=['block','inline','inline-block','inline-table','none']
                    self.positionList=['relative','absolute','fixed','inherit','static']
                    self.filterListElements=filterListElements;
                    self.filterListElementsMobile=filterListElementsMobile;
                    self.filterListElementsTablet=filterListElementsTablet;
                    self.addNewElement=addNewElement;
                    self.deleteElement=deleteElement;
                    self.done=done;
                    self.cancel = cancel;
                    self.addSelector=addSelector;
                    self.copyStyle=copyStyle;

                    self.$onInit = function() {
                        activate()
                    }


                    function activate(){}
                    function addNewElement(type) {
                        if(type){
                            if(!self.block[type]){self.block[type]={}}
                            if(!self.block[type].elements){self.block[type].elements={}}
                            self.block[type].elements[self.element]=angular.copy(arrEmptyForProperties)
                        }else{
                            if(!self.block.elements){self.block.elements={}}
                            self.block.elements[self.element]=angular.copy(arrEmptyForProperties)
                        }

                        self.element=null;
                    }
                    function deleteElement(element,type) {
                        Confirm('delete?').then(function () {
                            if(type){
                                delete self.block[type].elements[element]
                            }else{
                                delete self.block.elements[element]
                            }
                        })
                    }
                    function filterListElements(el) {
                        if(!self.block.elements){return true}
                        var elems=Object.keys(self.block.elements);
                        return elems.indexOf(el)<0
                    }
                    function filterListElementsMobile(el) {
                        if(!self.block.mobile.elements){return true}
                        var elems=Object.keys(self.block.mobile.elements);
                        return elems.indexOf(el)<0
                    }
                    function filterListElementsTablet(el) {
                        if(!self.block.tablet.elements){return true}
                        var elems=Object.keys(self.block.tablet.elements);
                        return elems.indexOf(el)<0
                    }
                    function done(){
                        $uibModalInstance.close();
                    }
                    function cancel() {
                        $uibModalInstance.dismiss();
                    };
                    function addSelector(type){
                        if(!self.selector){return}
                        if(type){
                            if(!self.block[type]){self.block[type]={}}
                            if(!self.block[type].elements){self.block[type].elements={}}
                        }else{
                            if(!self.block.elements){self.block.elements={}}
                        }

                        var selector= self.selector.trim().substring('0,25').replace(/([^a-z0-9_&]+)/gi, '-');
                        //console.log(selector)
                        if(selector[0]=='&'){var field=selector}else{var field='@'+selector}
                        if(type){
                            self.block[type].elements[field]=angular.copy(arrEmptyForProperties)
                        }else{
                            self.block.elements[field]=angular.copy(arrEmptyForProperties)
                        }

                        self.selector=''
                    }
                    function copyStyle(from,to) {
                        Confirm('выполнить?').then(function () {
                            var els,blSt;
                            if(from == 'desktop'){
                                els=angular.copy(block.elements);
                                blSt=angular.copy(block.blockStyle);
                            }else if(from == 'tablet'){
                                els=angular.copy(block.tablet.elements);
                                blSt=angular.copy(block.tablet.blockStyle);
                            }else if(from == 'mobile'){
                                els=angular.copy(block.mobile.elements);
                                blSt=angular.copy(block.mobile.blockStyle);
                            }
                            if(els){
                                if(to=='desktop'){
                                    block.elements=els;
                                }else if(to=='tablet'){
                                    block.tablet.elements=els;
                                }else if(to=='mobile'){
                                    //console.log(block.mobile.elements)
                                    block.mobile.elements=els;
                                }
                            }
                            //console.log(from,to,block.blockStyle,blSt)
                            if(blSt){
                                if(to=='desktop'){
                                    block.blockStyle=blSt;
                                }else if(to=='tablet'){
                                    block.tablet.blockStyle=blSt;
                                }else if(to=='mobile'){
                                    block.mobile.blockStyle=blSt;
                                }
                            }
                        })
                    }
                },
                resolve:{
                    block:function(){
                        return block
                    },
                    short:function(){
                        return short
                    },
                    fontFaces:function(){
                        return global.get('store').val.template.index.fontFaces;
                    }
                }
            }
            return $uibModal.open(options).result
        }
    }

})()

'use strict';
angular.module('gmall.directives')
    .directive('callFromStore',[function(){
        return {
            scope: {
                modalClose:'&',
                stuff:'@'
            },
            restrict:"E",
            bindToController: true,
            controllerAs: '$ctrl',
            controller:"callCtrl",
            templateUrl:"components/call/call.html",
        }
    }])
    .directive('enterPhoneNumder',[function(){
        return {
            scope: {
                enterPhoneNumder:'=',
                changeFoo:'&',
                submitted:'='
            },
            restrict:"A",
            bindToController: true,
            controllerAs: '$ctrl',
            controller:enterPhoneNumderCtrl,
            templateUrl:"components/call/phoneNumber.html",
        }
    }])
enterPhoneNumderCtrl.$inject=['$scope','global']
function enterPhoneNumderCtrl($scope,global) {
    var self=this;
    self.global=global;
    self.phoneCodes=(global.get('store').val.phoneCodes)?global.get('store').val.phoneCodes:[{code:'+38',country:'Украина'}];
    self.phoneCode=(global.get('store').val.phoneCode)?global.get('store').val.phoneCode.code:'+38';
    $scope.$watch(function(){return self.enterPhoneNumder},function(enterPhoneNumder,old){
        if(enterPhoneNumder){
            var phoneCode='+'+enterPhoneNumder.substring(0,enterPhoneNumder.length-10);
            if(self.phoneCodes.getOFA('code',phoneCode)){
                self.phoneCode=phoneCode;
            }
            self.phone=enterPhoneNumder.substring(enterPhoneNumder.length-10)
        }
        /*if(enterPhoneNumder!=old){
            changePhone()
        }*/

    })



    self.changePhone=changePhone;
    self.changeCode=changeCode;

    function changePhone(){
        if(!self.phone){
            self.enterPhoneNumder=''
        }else{
            self.enterPhoneNumder=self.phoneCode.substring(1)+self.phone.substring(0,10);
        }
        //console.log(self.enterPhoneNumder,self.changeFoo)
        if(self.changeFoo && typeof self.changeFoo == 'function'){
            self.changeFoo({phone:self.enterPhoneNumder})
        }
    }
    function changeCode() {
        
    }
}



'use strict';
(function(){
    angular.module('gmall.services')
        .directive('helpComponent',helpComponent)
        .directive('helpCategory',helpCategory)
        .directive('helpStuff',helpStuff);
    function helpComponent(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: helpComponentCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/help/help.component.html',
        }
    };
    helpComponentCtrl.$inject=['Store','$state','global','Confirm','exception','$q','Stuff','Sections'];
    function helpComponentCtrl(Store,$state,global,Confirm,exception,$q,Stuff,Sections) {
        var self = this;
        self.mobile = global.get('mobile').val;
        self.global = global;
        self.$state = $state;
        self.query = {};
        self.paginate = {page: 0, rows: 5, totalItems: 0}

        self.helpStoreId;

        //*******************************************************
        activate();


        function activate(page) {
            $q.when()
                .then(function(){
                    return Store.query({query:{subDomain:'help'}}).$promise
                })
                .then(function (stores) {
                   // console.log(stores)
                    if(!stores || !stores[1]){
                        throw 'error'
                    }
                    self.helpStoreId= stores[1]._id
                    //console.log(self.helpStoreId)
                    Sections.query({store:self.helpStoreId},function(res){
                        res.shift();
                        self.sections=res;
                        //console.log(self.sections)
                        //setCategoriesFromSections(sections)
                    })

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('get help')(err)
                    }
                })
        }
    }

    function helpCategory(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: helpCategoryCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/help/help.category.html',
        }
    };
    helpCategoryCtrl.$inject=['$state','global','Confirm','exception','$q','Stuff','$stateParams','Category'];
    function helpCategoryCtrl($state,global,Confirm,exception,$q,Stuff,$stateParams,Category) {
        var self = this;
        self.mobile = global.get('mobile').val;
        self.global = global;
        self.$state = $state;
        self.query = {};
        //self.helpStoreId;

        //*******************************************************
        activate();
        function activate() {
            $q.when()
                .then(function(){
                    return Stuff.query({store:$stateParams.store,query:{category:$stateParams.category}}).$promise
                })
                .then(function (stuffs) {
                    self.stuffs=stuffs;
                    //console.log(stuffs)
                })
                .then(function () {
                    return Category.get({store:$stateParams.store,_id:$stateParams.category}).$promise
                })
                .then(function (res) {
                    self.category=res;
                })
                .catch(function(err){
                    if(err){
                        exception.catcher('get stuffs')(err)
                    }
                })
        }
    }
    function helpStuff(){
        return {
            scope: {},
            restrict:"E",
            bindToController: true,
            controller: helpStuffCtrl,
            controllerAs: '$ctrl',
            templateUrl: 'components/help/help.stuff.html',
        }
    };
    helpStuffCtrl.$inject=['$state','global','Confirm','exception','$q','Stuff','$stateParams'];
    function helpStuffCtrl($state,global,Confirm,exception,$q,Stuff,$stateParams) {
        var self = this;
        self.mobile = global.get('mobile').val;
        self.global = global;
        self.$state = $state;
        self.query = {};
        //self.helpStoreId;

        //*******************************************************
        activate();
        function activate() {
            console.log($stateParams)
            $q.when()
                .then(function(){
                    return Stuff.get({_id:$stateParams.stuff,store:$stateParams.store}).$promise
                })
                .then(function (stuff) {
                    if(stuff ){
                        self.stuff=stuff
                    }else{
                        self.stuff=null;
                    }

                })
                .catch(function(err){
                    if(err){
                        exception.catcher('get stuffs')(err)
                    }
                })
        }
    }

})()

'use strict';
/*datetime*/
var minTimePart=15// минимальное  время услуги 15 минут
var timeRemindArrLang=[
    {
        'ru':'за 1 час',
        'uk':'',
        'en':'',
        'de':'',

        part:4
    },
    {
        'ru':'за 2 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:8
    },
    {
        'ru':'за 3 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:12
    },
    {
        'ru':'за 4 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:16
    },
    {
        'ru':'за 5 часов',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:20
    },
    {
        'ru':'за 6 часов',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:24
    },
    {
        'ru':'за 12 часов',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:48
    },
    {
        'ru':'за 1 день',
        'uk':'',
        'en':'',
        'de':''
        ,

        part:96
    }
]
var timeDurationArrLang=[
    {
        'ru':'15 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:1
    },
    {
        'ru':'30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:2
    },
    {
        'ru':'45 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:3
    },
    {
        'ru':'1 час',
        'uk':'',
        'en':'',
        'de':'',

        part:4
    },
    {
        'ru':'1 час 15 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:5
    },
    {
        'ru':'1 час 30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:6
    },
    {
        'ru':'1 час 45 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:7
    },
    {
        'ru':'2 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:8
    },
    {
        'ru':'2 часа 15 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:9
    },
    {
        'ru':'2 часа 30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:10
    },
    {
        'ru':'3 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:12
    },
    {
        'ru':'3 часа 30 мин',
        'uk':'',
        'en':'',
        'de':'',

        part:14
    },
    {
        'ru':'4 часа',
        'uk':'',
        'en':'',
        'de':'',

        part:16
    }
]
var weekDays=[
    {
        'ru':'Воскресенье',
        'uk':'Неділя',
        'en':'Sunday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Понедельник',
        'uk':'Понеділок',
        'en':'Monday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Вторник',
        'uk':'Вівторок',
        'en':'Tuesday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Среда',
        'uk':'Середа',
        'en':'Wednesday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Четверг',
        'uk':'Четвер',
        'en':'Thursday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Пятница',
        'uk':'П*ятниця',
        'en':'Friday',
        'de':'gdsdfsdf'
    },
    {
        'ru':'Суббота',
        'uk':'Субота',
        'en':'Saturday',
        'de':'gdsdfsdf'
    },
    ]
/**************************/
var reservedFirstParamsForAdmin=['manage','promo','seo','setting','content','translate','admin123','bookkeep']
var reservedFirstParams=['manage','promo','seo','setting','content','translate',
    'news','lookbook','stat','master','campaign','info','additional','workplace','cabinet','pricegoods','priceservices','home','search','cart','cabinet','bookkeep','likes']
var languagesOfPlatform=['ru','uk','en','de','es'];
var propertiesOfConfigData=[{'key':'unitOfMeasure','name':'единицы измерения'}];
var phoneCodes=[{code:'+38',country:'Ukraine'},{code:'+7',country:'Russia'},
    {code:'+501',country:'Moldova'},{code:'+44',country:'United Kingdom'},
    {code:'+93',country:'Afghanistan'},{code:'+355',country:'Albania'},{code:'+213',country:'Algeria'},
    {code:'+1-684',country:'American Samoa'},{code:'+376',country:'Andorra'},{code:'+244',country:'Angola'},
    {code:'+1-264',country:'Anguilla'},{code:'+672',country:'Antarctica'},{code:'+1-268',country:'Antigua and Barbuda'},
    {code:'+54',country:'Argentina'},{code:'+374',country:'Armenia'},{code:'+297',country:'Aruba'},
    {code:'+61',country:'Australia'},{code:'+43',country:'Austria'},{code:'+994',country:'Azerbaijan'},
    {code:'+1-242',country:'Bahamas'},{code:'+973',country:'Bahrain'},{code:'+880',country:'Bangladesh'},
    {code:'+1-246',country:'Barbados'},{code:'+375',country:'Belarus'},{code:'+32',country:'Belgium'},
    {code:'+1-246',country:'Belize'},{code:'+229',country:'Benin'},{code:'+1-441',country:'Bermuda'},
    {code:'+975',country:'Bhutan'},{code:'+591',country:'Bolivia'},{code:'+246',country:'British Indian Ocean Territory'},
    {code:'+267',country:'Botswana'},{code:'+55',country:'Brazil'},{code:'+387',country:'Bosnia and Herzegovina'},
    {code:'+1-284',country:'British Virgin Islands'},{code:'+673',country:'Brunei'},{code:'+359',country:'Bulgaria'},
    {code:'+226',country:'Burkina Faso'},{code:'+257',country:'Burundi'},{code:'+855',country:'Cambodia'},
    {code:'+237',country:'Cameroon'},{code:'+1',country:'Canada'},{code:'+238',country:'Cape Verde'},
    {code:'+1-345',country:'Cayman Islands'},{code:'+236',country:'Central African Republic'},{code:'+235',country:'Chad'},
    {code:'+56',country:'Chile'},{code:'+86',country:'China'},{code:'+57',country:'Colombia'},
    {code:'+269',country:'Comoros'},{code:'+506',country:'Costa Rica'},{code:'+385',country:'Croatia'},
    {code:'+53',country:'Cuba'},{code:'+599',country:'Curacao'},{code:'+357',country:'Cyprus'},
    {code:'+420',country:'Czech Republic'},{code:'+45',country:'Denmark'},{code:'+1-767',country:'Dominica'},
    {code:'+593',country:'Ecuador'},{code:'+995',country:'Georgia'},{code:'+49',country:'Germany'},
    {code:'+30',country:'Greece'},{code:'+852',country:'Hong Kong'},{code:'+36',country:'Hungary'},
    {code:'+354',country:'Iceland'},{code:'+852',country:'Hong Kong'},{code:'+36',country:'Hungary'},
    {code:'+30',country:'Greece'},{code:'+91',country:'India'},{code:'+62',country:'Indonesia'},
    {code:'+98',country:'Iran'},{code:'+964',country:'Iraq'},{code:'+353',country:'Ireland'},
    {code:'+972',country:'Israel'},{code:'+39',country:'Italy'},{code:'+81',country:'Japan'},
    {code:'+962',country:'Jordan'},{code:'+7',country:'Kazakhstan'},{code:'+383',country:'Kosovo'},
    {code:'+965',country:'Kuwait'},{code:'+996',country:'Kyrgyzstan'},{code:'+856',country:'Laos'},
    {code:'+371',country:'Latvia'},{code:'+961',country:'Lebanon'},{code:'+218',country:'Libya'},
    {code:'+423',country:'Liechtenstein'},{code:'+370',country:'Lithuania'},{code:'+352',country:'Luxembourg'},
    {code:'+853',country:'Macau'},{code:'+389',country:'Macedonia'},{code:'+261',country:'Madagascar'},
    {code:'+60',country:'Malaysia'},{code:'+356',country:'Malta'},{code:'+222',country:'Mauritania'},
    {code:'+230',country:'Mauritius'},{code:'+52',country:'Mexico'},{code:'+373',country:'Moldova'},
    {code:'+377',country:'Monaco'},{code:'+976',country:'Mongolia'},{code:'+382',country:'Montenegro'},
    {code:'+212',country:'Morocco'},{code:'+977',country:'Nepal'},{code:'+31',country:'Netherlands'},
    {code:'+507',country:'Panama'},{code:'+595',country:'Paraguay'},{code:'+382',country:'Montenegro'},
    {code:'+377',country:'Monaco'},{code:'+51',country:'Peru'},{code:'+63',country:'Philippines'},
    {code:'+48',country:'Poland'},{code:'+351',country:'Portugal'},{code:'+974',country:'Qatar'},
    {code:'+40',country:'Romania'},{code:'+378',country:'San Marino'},{code:'+966',country:'Saudi Arabia'},
    {code:'+381',country:'Serbia'},{code:'+65',country:'Singapore'},{code:'+421',country:'Slovakia'},
    {code:'+386',country:'Slovenia'},{code:'+27',country:'South Africa'},{code:'+82',country:'South Korea'},
    {code:'+34',country:'Spain'},{code:'+94',country:'Sri Lanka'},{code:'+46',country:'Sweden'},
    {code:'+41',country:'Switzerland'},{code:'+886',country:'Taiwan'},{code:'+992',country:'Tajikistan'},
    {code:'+66',country:'Thailand'},{code:'+216',country:'Tunisia'},{code:'+90',country:'Turkey'},
    {code:'+993',country:'Turkmenistan'},{code:'+971',country:'United Arab Emirates'},{code:'+44',country:'United Kingdom'},
    {code:'+1',country:'United States'},{code:'+598',country:'Uruguay'},{code:'+998',country:'Uzbekistan'},
    {code:'+379',country:'Vatican'},{code:'+58',country:'Venezuela'},{code:'+84',country:'Vietnam'},{code:'+967',country:'Yemen'}
    ]

var modelsName={
    stat:{
        'ru':'страницы','uk':'сторінки','en':'pages','de':'pages'
    },
    stuff:{
        'ru':'товары и услуги','uk':'товари та послуги','en':'goods and services','de':'goods and services'
    },
    news:{
        'ru':'новости','uk':'новини','en':'news','de':'news'
    },
    info:{
        'ru':'информация','uk':'інформація','en':'information','de':'information'
    },
    workplace:{
        'ru':'локации','uk':'локации','en':'locations','de':'locations'
    }
}



var lengthStyleBlock=61;
var arrEmptyForProperties=[];
for(var i=0;i<lengthStyleBlock;i++){arrEmptyForProperties.push('')}

/*var listOfBlocksForMainPage={
    banner:'баннер',
    brands:'бренды',
    brandTags:'коллекции',
    call:'обратный звонок',
    campaign:'акции',
    categories:'категории',
    feedback:'feedback',
    filterTags:'группы (признаки)',
    info:'информационный раздел',
    map:'карта',
    mission:'миссия',
    news:'новости',
    slider:'слайдер',
    stuffs:'товары',
    subscription:'подписка',
    subscriptionAdd:'подписка с доп.полями',
    text:'текстовый блок',
    textAdd:'доп.текстовый блок',
    video:'видео',

}*/

var listOfBlocksForMainPage={
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    banner:'баннер',
    bannerOne:'баннер в два потока',
    mission:'миссия',
    text:'текстовый блок',
    textTwo:'текстовый блок 2 потока',
    campaign:'акции',
    filterTags:'тематические группы (признаки из хар-тик)',
    filters:'характеристики',
    brandTags:'коллекции',
    brands:'бренды',
    categories:'категории',
    stuffs:'товары',
    news:'новости',
    info:'информационный раздел',
    pricegoods:'прайс товаров',
    priceservices:'прайс услуг',
    map:'карта',
    review:'отзывы гугл',
    subscription:'подписка',
    subscriptionAdd:'подписка с доп полями',
    call:'заказ звонка',
    feedback:'форма обратной связи',
    calendar:'гугл календарь',
    scheduleplace:'расписание для рабочего места',
}
var animationTypes =[
    {type:null,name:'отсутстует'},
    {type:'animated1',name:'fadeInLeftBig'},
    {type:'animated2',name:'fadeInLeft'},
    {type:'animated3',name:'fadeInLeftMiddle'},
    {type:'animated4',name:'fadeInRight'},
    {type:'animated5',name:'fadeInRightMiddle'},
    {type:'animated6',name:'fadeInRightBig'},
    {type:'animated7',name:'bounce'},
    {type:'animated8',name:'fadeInDown'},
    {type:'animated9',name:'fadeOut'},
    {type:'animated10',name:'bounceIn'},
    {type:'animated11',name:'при наведении контур1'},
    {type:'animated12',name:'при наведении контур2'},
    {type:'animated13',name:'SweepToTop'},
    {type:'animated14',name:'SweepToBottom'},
    {type:'animated15',name:'LineCenterBottom'},
    {type:'animated16',name:'scale-block'},
    {type:'animated17',name:'SweepToRight'},
    {type:'animated18',name:'SweepToLeft'},
    {type:'animated19',name:'underlineLRL'},
    {type:'animated20',name:'underline RLR'},
    {type:'animated21',name:'line-through LRL'},
    {type:'animated22',name:'underline RLR 5px'},
    {type:'animated23',name:'test'},
    {type:'animated24',name:'test'},
    {type:'animated25',name:'test'},
    {type:'animated26',name:'test'},
    {type:'animated27',name:'test'},
    {type:'animated28',name:'test'},
    {type:'animated29',name:'test'},
    {type:'animated30',name:'shake'},
    {type:'animated31',name:'fadeInUpBig'}]
var listOfListName=[
    'news',
    'master',
    'stat',
    'info',
    'campaign',
    'lookbook',
    'additional',
    'workplace'
]
var listOfStuffDetailKind=[
    'good',
    'service',
    'info',
    'media'
]
var listOfBlocksForAll={
    banner:'баннер',
    bannerOne:'баннер в два потока',
    brands:'бренды',
    brandTags:'коллекции',
    button:'кнопка',
    calendar:'гугл календарь',
    call:'заказ звонка',
    campaign:'акции',
    categories:'категории',
    date:'дата',
    feedback:'форма обратной связи',
    filterTags:'тематические группы (признаки из хар-тик)',
    filters:'характеристики',
    info:'информационный раздел',
    map:'карта',
    name:'название',
    news:'новости',
    position:'должность',
    pricegoods:'прайс товаров',
    priceservices:'прайс услуг',
    review:'отзывы гугл',
    schedule:'расписание для специалиста',
    scheduleplace:'расписание для рабочего места',
    slider:'слайдер',
    sn:'кнопки социальных сетей',
    stuffs:'товары',
    subscription:'подписка',
    subscriptionAdd:'подписка с доп полями',
    text:'текстовый блок',
    textTwo:'текстовый блок 2 потока',
    video:'видео',
    videoLink:'внешнее видео',
    fbpage:'страница фейсбука',
    comment:'комментарии дискус',
}

var listOfBlocksForStaticPage={
    name:'название',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    videoLink:'внешнее видео',
    video:'видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    masters:'сотрудники',
    feedback:'обратная связь',
    feedback1:'обратная связь + фото',
    feedback2:'фото + обратная связь',
    stuffs:'товары',
    filterTags:'группы(признаки из хар-тик)',
    brandTags:'коллекции',
    brands:'бренды',
    categories:'категории',
    campaign:'акции',
    call:'заказ звонка',
    button:'кнопка',

}
var listOfBlocksForNewsDetailPage={
    name:'название',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    videoLink:'внешнее видео',
    video:'видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    stuffs:'товары',
    campaign:'акции',
    filterTags:'группы(признаки из хар-тик)',
    brandTags:'коллекции',
    brands:'бренды',
    categories:'категории',
    date:'дата',
    sn:'социальные сети'
}

var listOfBlocksForMasterPage={
    name:'имя',
    position:'должность',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    stuffs:'товары',
    schedule:'расписание',
}
var listOfBlocksForWorkplacePage={
    name:'имя',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    stuffs:'товары',
    schedule:'расписание',
}
var listOfBlocksForAddPage={
    name:'имя',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    slider:'слайдер',
    video:'видео',
    videoLink:'внешнее видео',
    video1:'видео + текстовый блок',
    video2:'текстовый блок + видео',
    map:'карта',
    map1:'карта + текстовый блок',
    map2:'текстовый блок + карта',
    news:'новости',
}


var listOfBlocksForHeader={
    logo:'логотип',
    name:'название',
    cart:'корзина',
    enter:'вход',
    info:'инфо',
    currency:'валюта',
    news:'новости',
    lookbook:'галлерея',
    search:'поиск',
    catalog:'каталог',
    new:'новинки',
    additional:'дополнительный список',
    schedule:'расписание',
    sale:'распродажа',
    campaign:'акции',
    master:'мастера',
    brands:'бренды',
    collection:'коллекции',
    phone:'телефон',
    sn:'социальные сети',
    lang:'языки',
    humburger:'humburger',
    pricegoods:'pricegoods',
    priceservices:'priceservices',
    text:'текст',
    icon:'иконка',
    likes:'избранное'
}
var listBlocksForFooter={
    text:'текст',
    textOne:'текст 1',
    sn:'соц.сети',
    subscription:'подписка',
    feedback:'обратная связь',
    stat:'статические страницы',
    catalog:'каталог',
    infoline:'ииформационная строка',
    copyright:'правообладание',
    news:'новости',
    campaign:'акции',
    lang:'языки'
}


var listOfBlocksForStats={
    name:'название',
    banner:'баннер',
    gallery:'галлерея',
    desc:'описание1',
    desc1:'описание2',
    desc2:'описание3',
    map:'карта',
    video:'видео',
    masters:'мастера',
}
var listOfBlocksForStuffDetail={
    name:'название',
    gallery:'галлерея',
    desc:'описание',
    comments:'комментарии',
    lastViewed:'последние просмотренные',
    sort:'разновидности',
    group:'группа товаров',
    addInfo:'доп.информация',
    addToCart:'в корзину(действие)',
    price:'цены',
    qty:'количество',
    sn:'соц.сети',
    feedback:'обратная связь',
    params:'параметры',
    tags:'характеристики',
    blocks:'медиа блоки',
    back:'кнопка назад в список',
}

var listOfBlocksForStuffDetailBlocks={
    banner:'фото + текстовый блок (один поток)',
    banner1:'фото + текстовый блок (два потока)',
    calendar:'календарь',
    date:'дата',
    feedback:'обратная связь',
    feedbackOne:'текст + обратная связь',
    feedbackTwo:'обратная связь + текст',
    imgs:'фото',
    map:'карта',
    mapOne:'карта + текстовый блок',
    mapTwo:'текстовый блок + карта',
    masters:'блок мастеров',
    name:'имя',
    position:'должность',
    slider:'слайдер',
    sn:'соцсети',
    text:'текстовый блок',
    text2:'текстовый блок в две колонки',
    video:'видео',
    videoOne:'видео + текстовый блок',
    videoTwo:'текстовый блок + видео',
    videoLink:'внешнее видео',
    file:'file'
}

var listOfBlocksForStuffList={
    list:'список',
    filters:'фильтры',
    categories:'категории',
    paginate:'пагинация',
    search:'поиск',
    call:'звонок',
    subscription:'подписка',
    desc:'описание',
    seoDesc:'seo описание',
    blocks:'медиа блоки',
}



var tableOfColorsForButton={0:'black-white',1:'pink-white',2:'turquoise-white',3:'yellow-white',4:'bordo-white',5:'braun-white',6:'powder-white',7:'pinklight-white',8:'white-black',9:'black-white'}
var tableOfButtonsFile={0:'standart',1:'border-radius',2:'no border',3:'inverse',4:'border',5:'transparent'}

var listOfIcons=['addcart','back','cart','cartin','cartplus','cancelmenu','cancel','cancelzoom','call','caret','categories','change','dialog','down','dot','delete','downslide','gif','envelope','envelopewhite','edit','eur','fb','fbwhite','filters','header','google','googlewhite','humbmobile','chat','inst','instwhite','left','likes','menu','messageme','messagehe','next','nextgallery','ok','okwhite','pin','pinwhite','plus','prev','prevgallery','right','rub','search','send','setting','spinner','subscription','time','tw','twwhite','uah','up','upslide','user','userhe','userme','usd','vk','vkwhite','see','enter','zoom','yt','ytwhite']

var notificationsTypeLang={
    //клиенту
    invoice:{
        'ru':'счет',
        'ua':'рахунок',
        'en':'invoice',
        'de':'',
    },
    accepted:{
        'ru':'заказ принят',
        'ua':'замовлення прийнято',
        'en':'accepted',
        'de':'',
    },
    shipOrder:{
        'ru':'данные о доставке',
        'ua':'дані про доставку',
        'en':'shipOrder',
        'de':'',
    },
    // продавцу
    order:{
        'ru':'поступил заказ',
        'ua':'поступило замовлення',
        'en':'order',
        'de':'',
    },
    pay:{
        'ru':'оплата',
        'ua':'оплата',
        'en':'pay',
        'de':'',
    },
    feedBack:{
        'ru':'обратная связь',
        'ua':'зворотній зв*язок',
        'en':'feedback',
        'de':'',
    },
    comment:{
        'ru':'комментарий',
        'ua':'коментар',
        'en':'comments',
        'de':'',
    },
    call:{
        'ru':'заказ звонка',
        'ua':'замовлення дзвінка',
        'en':'call',
        'de':'',
    },
    subscription:{
        'ru':'подписка',
        'ua':'підписка',
        'en':'subscription',
        'de':'',
    }



}

var updateExternalCatalogList= {
    everyMon10:{
        'ru':'каждый понедельник в 10.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyMon12:{
        'ru':'каждый понедельник в 12.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyFri10:{
        'ru':'каждую пятницу в 10.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyFri12:{
        'ru':'каждую пятницу в 12.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyDay10:{
        'ru':'каждый день в 10.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyDay12:{
        'ru':'каждый день в 12.00',
        'ua':'',
        'en':'',
        'de':'',
    },
    everyDay101418:{
        'ru':'каждый день в 10.00,14.00,18.00',
        'ua':'',
        'en':'',
        'de':'',
    }
}

var ratioClassStuffDetail={
    0:{left:'left-block col-lg-6 col-md-6 col-sm-12 col-xs-12',right:'right-block col-lg-6 col-md-6 col-sm-12 col-xs-12'},
    1:{left:'left-block vertical-left3 col-lg-5 col-md-5 col-sm-12 col-xs-12',right:'right-block horizontal-right2 col-lg-7 col-md-7 col-sm-12 col-xs-12'},
    2:{left:'left-block vertical-left2 col-lg-4 col-md-4 col-sm-12 col-xs-12',right:'right-block horizontal-right1 col-lg-8 col-md-8 col-sm-12 col-xs-12'},
    3:{left:'left-block horizontal-left1 col-lg-7 col-md-7 col-sm-12 col-xs-12',right:'right-block vertical-right1  col-lg-5 col-md-5 col-sm-12 col-xs-12'},
    4:{left:'left-block horizontal-left2 col-lg-8 col-md-8 col-sm-12 col-xs-12',right:'right-block vertical-right2 col-lg-4 col-md-4 col-sm-12 col-xs-12'},
    5:{left:'left-block col-lg-12 col-md-12 col-sm-12 col-xs-12',right:'right-block col-lg-12 col-md-12 col-sm-12 col-xs-12'},
}
var elementsList=['a','p','div','h1','h2','h3','h4','ol','ul','li','span','img','hr','iframe','table','tr','th','td']

var getNamePropertyCSS = function(i,item,k) {
    if(item){
        switch (i){
            case 0: return ['color',item];
            case 1: return  ['background-color',item];
            case 2: return  ['margin-top',item];
            case 3: return  ['margin-right',item];
            case 4: return  ['margin-bottom',item];
            case 5: return  ['margin-left',item];
            case 6: return  ['padding-top',item];
            case 7: return  ['padding-right',item];
            case 8: return  ['padding-bottom',item];
            case 9: return  ['padding-left',item];
            case 10: return  ['display',item];
            case 11: return  ['font-family',item];
            case 12: return  ['font-size',item];
            case 13: return  ['font-weight',item];
            case 14: return  ['letter-spacing',item];
            case 15: return  ['text-transform',item];
            case 16: return  ['width',item];
            case 17: return  ['height',item];
            case 18: return  ['float',item];
            case 19: return  ['top',item];
            case 20: return  ['left',item];
            case 21: return  ['right',item];
            case 22: return  ['bottom',item];
            case 23: return  ['text-decoration',item];
            case 24: return  ['text-align',item];
            case 25: return  ['position',item];
            case 26: return  ['border',item];
            case 27: return  ['border-left',item];
            case 28: return  ['border-right',item];
            case 29: return  ['border-top',item];
            case 30: return  ['border-bottom',item];
            case 31: return  ['border-radius',item];
            case 32: return  ['z-index',item];
            case 33: return  ['opacity',item];
            case 34: return  ['border-width',item];
            case 35: return  ['list-style',item];
            case 36: return  ['vertical-align',item];
            case 37: return  ['background-size',item];
            case 38: return  ['background-position',item];
            case 39: return  ['text-shadow',item];
            case 40: return  ['cursor',item];
            case 41: return  ['transition',item];
            case 42: return  ['box-shadow',item];
            case 43: return  ['transform',item];
            case 44: return  ['background',item];
            case 45: return  ['clear',item];
            case 46: return  ['max-width',item];
            case 47: return  ['min-width',item];
            case 48: return  ['max-height',item];
            case 49: return  ['min-height',item];
            case 50: return  ['line-height',item];
            case 51: return  ['object-fit',item];
            case 52: return  ['object-position',item];
            case 53: return  ['overflow',item];
            case 54: return  ['background-attachment',item];
            case 55: return  ['background-repeat',item];
            case 56: return  ['padding',item];
            case 57: return  ['margin',item];
            case 58: return  ['word-break',item];
            case 59: return  ['word-wrap',item];
            case 60: return  ['word-spacing',item];
        }
    }else{
        switch (i){
            case 0: return 'color';
            case 1: return  'background-color';
            case 2: return 'margin-top';
            case 3: return  'margin-right';
            case 4: return  'margin-bottom';
            case 5: return  'margin-left';
            case 6: return 'padding-top';
            case 7: return  'padding-right';
            case 8: return  'padding-bottom';
            case 9: return  'padding-left';
            case 10: return  'display';
            case 11: return  'font-family';
            case 12: return  'font-size';
            case 13: return  'font-weight';
            case 14: return  'letter-spacing';
            case 15: return  'text-transform';
            case 16: return  'width';
            case 17: return  'height';
            case 18: return  'float';
            case 19: return  'top';
            case 20: return  'left';
            case 21: return  'right';
            case 22: return  'bottom';
            case 23: return  'text-decoration';
            case 24: return  'text-align';
            case 25: return  'position';
            case 26: return  'border';
            case 27: return  'border-left';
            case 28: return  'border-right';
            case 29: return  'border-top';
            case 30: return  'border-bottom';
            case 31: return  'border-radius';
            case 32: return  'z-index';
            case 33: return  'opacity';
            case 34: return  'border-width';
            case 35: return  'list-style';
            case 36: return  'vertical-align';
            case 37: return  'background-size';
            case 38: return  'background-position';
            case 39: return  'text-shadow';
            case 40: return  'cursor';
            case 41: return  'transition';
            case 42: return  'box-shadow';
            case 43: return  'transform';
            case 44: return  'background';
            case 45: return  'clear';
            case 46: return  'max-width';
            case 47: return  'min-width';
            case 48: return  'max-height';
            case 49: return  'min-height';
            case 50: return  'line-height';
            case 51: return  'object-fit';
            case 52: return  'object-position';
            case 53: return  'overflow';
            case 54: return  'background-attachment';
            case 55: return  'background-repeat';
            case 56: return  'padding';
            case 57: return  'margin';
            case 58: return  'word-break';
            case 59: return  'word-wrap';
            case 60: return  'word-spacing';
        }
    }

}


function compileStyleForBlock(block){
    var elements=[];
    var el='';
    if(block.blockStyle){
        for(var  i=0;i<lengthStyleBlock;i++){
            var n;
            if(block.blockStyle[i]){
                n = getNamePropertyCSS(i,block.blockStyle[i]);
                if(n){
                    el+="\n"+n[0]+':'+n[1]+';';
                }
            }
        }
    }
    if(el){
        if(el){
            el ='{'+el+'}'+"\n";
        }
        elements.push(el)
    }
    if(block.elements && typeof block.elements=='object'){
        for(var key in block.elements){
            el='';
            for(var i=0;i<lengthStyleBlock;i++){
                if(key=='a' && i==1){continue}
                var  n;
                if(block.elements[key][i]){
                    n = getNamePropertyCSS(i,block.elements[key][i]);
                    if(n){
                        el+="\n"+n[0]+':'+n[1]+';';
                    }
                }
            }
            if(el){
                el =key.replace("@",".")+'{'+el+'}'+"\n";
            }
            if(key=='a' && block.elements.a[1]){
                el+='a:hover {color:'+block.elements.a[1]+'}';
            }
            if(el){
                elements.push(el)
            }
        }
    }
    return elements;
}

if(typeof window === 'undefined') {
    exports.listOfBlocksForMainPage=listOfBlocksForMainPage;
    exports.listOfBlocksForHeader=listOfBlocksForHeader;
    exports.listBlocksForFooter=listBlocksForFooter;
    exports.listOfBlocksForStats=listOfBlocksForStats;
    exports.listOfBlocksForStuffDetail=listOfBlocksForStuffDetail;
    exports.listOfBlocksForStuffList=listOfBlocksForStuffList;
    exports.lengthStyleBlock=lengthStyleBlock;
    exports.arrEmptyForProperties=arrEmptyForProperties;
    exports.listOfBlocksForNewsDetailPage=listOfBlocksForNewsDetailPage;
    exports.listOfBlocksForStaticPage=listOfBlocksForStaticPage;
    exports.modelsName=modelsName;
    exports.getNamePropertyCSS=getNamePropertyCSS;
    exports.listOfListName=listOfListName;
    exports.ratioClassStuffDetail=ratioClassStuffDetail;
    exports.elementsList=elementsList;
    exports.reservedFirstParams=reservedFirstParams;
    exports.reservedFirstParamsForAdmin=reservedFirstParamsForAdmin;
    exports.minTimePart=minTimePart;
    exports.listOfBlocksForStuffDetailBlocks=listOfBlocksForStuffDetailBlocks;
}


